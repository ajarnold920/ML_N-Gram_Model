@ Override  public   void   preApplication ( MasterContext < LogisticRegressionParams ,  LogisticRegressionParams >   context )   {  init ( context ) ;  }
private   int   writePartialBytes ( byte []   originalBytes ,  int   offset ,  Random   random , SeekableByteArrayOutputStream   byteArrayOutputStream )   throws  IOException   {  int   chunkSize   =  Math . min ( random . nextInt ( 50 ) ,  originalBytes . length   -   offset ) ;  byteArrayOutputStream . write ( originalBytes ,  offset ,  chunkSize ) ;  return  chunkSize ;  }
public   Builder   setFido2Extension ( @ Nullable   FidoAppIdExtension   appIdExtension )   {  this . fidoAppIdExtension   =   appIdExtension ;  return  this ;  }
public   FapiMetadata   tokenEndpointAuthMethod ( ClientAuthenticationMethodMetadata   tokenEndpointAuthMethod )   {  this . tokenEndpointAuthMethod   =   tokenEndpointAuthMethod ;  return  this ;  }
@ ApiModelProperty ( required   =   true ,  value   =   """"The scope of sharing for this organization."""" )  @ JsonProperty ( """"policy"""" )  @ Valid  @ NotNull ( message   =   """"Property policy cannot be null."""" )  public   PolicyEnum   getPolicy ()   {  return  policy ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"endpoint"""" )  @ Valid  public   Endpoint   getEndpoint ()   {  return  endpoint ;  }
public   Builder   requestServerAuthCode ( String   serverClientId ,  boolean   forceCodeForRefreshToken )   {  this . requestServerAuthCode   =   true ;  this . forceCodeForRefreshToken   =   true ;  this . serverClientId   =   serverClientId ;  return  this ;  }
@ Override  public   boolean   onFling ( MotionEvent   e1 ,  MotionEvent   e2 , float   velocityX ,  float   velocityY )   {  if  ( pieView . appListNotScrolled ()   &&  velocityY   >   velocityX   &&  velocityY   >=   minimumVelocity   &&  e1   !=   null   &&   e2   !=   null   &&  e2 . getY ()   -   e1 . getY ()   >   0 )   {  pieView . resetScroll () ;  hideAllApps () ;  return  true ;  }  return  false ;  }
@ Override   public   float   get ( long   i ,  long   j )   {  return  buffer . get ( ( int ) index ( i ,  j ) ) ;  }
@ Test  public   void   testGettid ()   {  System . out . println ( """"cpu= """"   +   Affinity . getCpu () ) ;  }
public   boolean   isEnableReplicatedRequestCompression ()   {  return  enableReplicatedRequestCompression ;  }
public   void   setReceiveBufferSize ( int   receiveBufferSize )   {  if  ( receiveBufferSize   <   0 )   {  throw  new   IllegalArgumentException ( """"buffer size < 0"""" ) ;  }  this . receiveBufferSize   =   receiveBufferSize ;  }
public   void   deleteSubOrgUser ( String   userId ,  String   switchedM2MToken )   throws  IOException   {  String   endPointUrl   =  getSubOrgUsersPath ()   +   PATH_SEPARATOR   +   userId ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpDelete ( endPointUrl , getHeadersWithBearerToken ( switchedM2MToken ) ) )   {  Assert . assertEquals ( response . getStatusLine () . getStatusCode () ,  HttpServletResponse . SC_NO_CONTENT , """"User deletion failed."""" ) ;  }  }
public   String   title ( String   title )   {  return  this . title ( title ,  '-' ) ;  }
@ Override  public   int   hashCode ()   {  int   result   =  daysSinceLastExposure ;  result   =   31   *   result   +   matchedKeyCount ;  result   =   31   *   result   +   maximumRiskScore ;  result   =   31   *   result   +   Arrays . hashCode ( attenuationDurationsInMinutes ) ;  result   =   31   *   result   +   summationRiskScore ;  return  result ;  }
@ PostMapping ( """"convertHive"""" )  public   HiveQueryDto   convertHive ( @ RequestParam   String   query )   {  return  new   HiveQueryDto ( toHiveQuery ( query ) ) ;  }
private   void   getServerConfig ()   {  final   String   serverName   =  settings . getServerName () ;  serverConfig   =   SonarServers . get ( serverName ) . orElse ( null ) ;  if  ( serverConfig   ==   null )   processing   =   false ;  }
void   keyConsumed ( String   key )   {  if  ( schemaJson . keySet () . contains ( key ) )   {  consumedKeys . add ( key ) ;  }  }
public   void   compute ( float []   input ,  float []   output )   {  final   int   sourceIndex   =  getLayerOutput () . length   -   getLayerCounts () [ getLayerCounts () . length   -   1 ] ;  for ( int   i   =  0 ;   i   <   getInputCount () ;   i ++ )   {  getLayerOutput () [ i   +   sourceIndex ]   =   input [ i ] ;  }  for ( int   i   =  getLayerIndex () . length   -   1 ;   i   >   0 ;   i -- )   {  computeLayer ( i ) ;  }  
public   Connection   getConnection ( String   s )   throws  SQLException   {  return  null ;  }
public   boolean   isThrottleMatrixConfigurations ()   {  return  matrixOptions   !=   null ?   matrixOptions . isThrottleMatrixConfigurations ()  :  ThrottleMatrixProjectOptions . DEFAULT . isThrottleMatrixConfigurations () ;  }
protected   int []   convert (  final   Integer []   ints )   {  int []   array   =  new   int [  ints . length ] ;  int   count   =  0 ;  for  (  int   i   :  ints )   array [  count ++ ]   =   i ;  return  array ;  }
@ Test  void   doNotIgnoreLineSeparatorsShouldSort ()   {  SortPomImplUtil . create ()  . lineSeparator ( """"\n"""" )  . ignoreLineSeparators ( false )  . testFiles ( """"/ignore_line_separators_input.xml"""" ,  """"/ignore_line_separators_output.xml"""" ) ;  }
public   PatchRequest   operation ( OperationEnum   operation )   {  this . operation   =   operation ;  return  this ;  }
Supplier < RestClient . Builder >   getRestClientBuilderSupplier ()   {  return  restClientBuilderSupplier ;  }
default   void   setColor ( ItemStack   stack ,  int   color )  {  CompoundTag   tagCompound   =  stack . getOrCreateTag () ;  tagCompound . putInt ( """"Color"""" ,  color ) ;  }
@ Override  protected   void   onActivityResult ( int   requestCode ,  int   resultCode ,  Intent   data )   {  super . onActivityResult ( requestCode ,  resultCode ,  data ) ;  for  ( Fragment   fragment   :  getSupportFragmentManager () . getFragments () )   {  fragment . onActivityResult ( requestCode ,  resultCode ,  data ) ;  }  }
public   FormValidation   doCheckGlobalColorMapName ( @ QueryParameter   String   value )   {  return  value . isEmpty ()  ?   FormValidation . ok ()   :  validateColorMapName ( value ) ;  }
@ BeforeMethod ( alwaysRun   =   true )  public   void   testMethodStart ()   {  RestAssured . basePath   =   basePath ;  }
 <argument pos:start=""""""""749:54"""""""" pos:end=""""""""749:62""""""""><expr pos:start=""""""""749:54"""""""" pos:end=""""""""749:62""""""""><literal type=""""""""string"""""""" pos:start=""""""""749:54"""""""" pos:end=""""""""749:62"""""""">""""""""#C4A000""""""""</literal></expr></argument>
private   boolean   doLootPool ( LootPool   lootPool )   {  for  ( LootPoolEntryContainer   entry   :  lootPool . entries )   {  if  ( doLootPoolEntry ( entry ) )   {  return  true ;  }  }  return  false ;  }
@ Test  void   clearExtraNewlinesShouldWork ()   {  writer . write ( """"<xml>\n"""" ) ;  
@ SuppressWarnings ( """"PMD.PreserveStackTrace"""" )  private   void   rollbackOnFailure ( final   Connection   conn ,  final   SQLException   failure )  throws  SQLException   {  if  ( ! this . auto )   {  try  {  conn . rollback () ;  this . disconnect () ;  }   catch  ( final   SQLException   exc )   {  throw  new   SQLException ( String . format ( """"Failed to rollback after failure: %s"""" , exc . getMessage () ) , failure ) ;  }  }  }
@ Override  public   boolean   equals ( Object   other )   {  if  ( ! ( other   instanceof   RegionBounds ) )   {  return  false ;  }  RegionBounds   otherBounds   =  ( RegionBounds )   other ;  return  this . minMs   ==   otherBounds . minMs   &&   this . maxMs   ==   otherBounds . maxMs ;  }
@ Override  protected   void   loadPadding ( CSSDecoder   dec ,  float   contw )  {  padding   =   new   LengthSet () ;   
private   boolean   isPluginElement ( Element   element )   {  if  ( sortPlugins . isNoSorting () )   {  return  false ;  }  return  isElementName ( element ,  """"plugin"""" )  &&   ( isElementParentName ( element ,  """"plugins"""" )  ||   isElementParentName ( element ,  """"reportPlugins"""" ) ) ;  }
@ ApiModelProperty ( example   =   """"http:
public   void   setLicense ( String   license )   {  this . license   =   license ;  }
private   List < String >   getLocalClaimUris ( ClaimConfig   updatedClaimConfig )   {  ClaimMapping []   claimMappings   =  updatedClaimConfig . getClaimMappings () ;  List < String >   localClaimUris   =  new   ArrayList <> () ;  for  ( ClaimMapping   claimMapping   :  claimMappings )   {  localClaimUris . add ( claimMapping . getLocalClaim () . getClaimUri () ) ;  }  return  localClaimUris ;  }
@ NonNull  public   Builder   setField ( @ NonNull   com . google . android . gms . fitness . data . Field   field ,  @ NonNull   Map < String ,  Float >   map )   {  if  ( built )   throw  new   IllegalStateException ( """"DataPoint already built"""" ) ;  this . dataPoint . getValue ( field ) . setMap ( map ) ;  return  this ;  }
@ RequestMapping ( value   =   """"/owners/new"""" ,  method   =   RequestMethod . GET )  public   String   initCreationForm ( Map < String ,  Object >   model )   {  Owner   owner   =  new   Owner () ;  model . put ( """"owner"""" ,  owner ) ;  return  VIEWS_OWNER_CREATE_OR_UPDATE_FORM ;  }
@ Override  public   boolean   process ( String   option ,  List < String >   arguments )   {  nodeFontClassName   =   arguments . get ( 0 ) ;  return  true ;  }
@ ApiModelProperty ( value   =   """"Claim attribute mappings."""" )  @ JsonProperty ( """"claimAttributeMappings"""" )  @ Valid  public   List < ClaimAttributeMapping >   getClaimAttributeMappings ()   {  return  claimAttributeMappings ;  }
public   static   void   main ( String []   args )   {  SpringApplication . run ( DiscoveryServerApplication . class ,  args ) ;  }
@ Override  public   void   setGroupSuffix ( String   world ,  String   group ,  String   suffix )   {  this . setGroupInfoString ( world ,  group ,  """"suffix"""" ,  suffix ) ;  }
@ Override  public   int   transfer ( byte []   write ,  int   writeOffset ,  byte []   read ,  int   readOffset ,  int   numberOfBytes )   {  PeerAccessibleMemory   buf   =  new   PeerAccessibleMemory ( numberOfBytes ) ;  buf . write ( 0 ,  write ,  writeOffset ,  numberOfBytes ) ;  
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( """"class EmailTemplateWithID {\n"""" ) ;  sb . append ( """"    """" ) . append ( toIndentedString ( super . toString () ) ) . append ( """"\n"""" ) ;  sb . append ( """"    locale: """" ) . append ( toIndentedString ( locale ) ) . append ( """"\n"""" ) ;  sb . append ( """"}"""" ) ;  return  sb . toString () ;  }
public   void   consume (  final   ByteBuffer   buffer )   {  try  {  digest . update (  buffer ) ;  }   catch  (  Exception   e )   {  throw  new   RuntimeException (  e ) ;  }  }
@ Test  public   void   asString ()   {  assertEquals ( PATTERN ,  createHandler () . toString () ) ;  }
@ Override  public   String   toString ()   {  return  """"ExecutionSortedWrapper{""""   +   """"phase=""""   +   phase   +   """", id='""""   +   id   +   '\''   +   '}' ;  }
public   void   setSupportedByDefault ( Boolean   supportedByDefault )   {  this . supportedByDefault   =   supportedByDefault ;  }
@ Test  public   void   testGetCloseHandshakeType ()   throws  Exception   {  Draft_6455   draft_6455   =  new   Draft_6455 () ;  assertEquals ( CloseHandshakeType . TWOWAY ,  draft_6455 . getCloseHandshakeType () ) ;  }
@ Override  public   Collection < T >   handle ( final   ResultSet   rset ,  final   Statement   stmt )  throws  SQLException   {  final   Collection < T >   result   =  new   LinkedList <> () ;  while  ( rset . next () )   {  result . add ( this . mapping . map ( rset ) ) ;  }  return  result ;  }
 <argument pos:start=""""""""230:51"""""""" pos:end=""""""""230:56""""""""><expr pos:start=""""""""230:51"""""""" pos:end=""""""""230:56""""""""><operator pos:start=""""""""230:51"""""""" pos:end=""""""""230:51"""""""">-</operator><literal type=""""""""number"""""""" pos:start=""""""""230:52"""""""" pos:end=""""""""230:56"""""""">10.21</literal></expr></argument>)</argument_list></call>
private   void   applyAttributes ( AttributeSet   attrs )   {  if  ( attrs   !=   null )   {  TypedArray   a   =  getContext () . getTheme () . obtainStyledAttributes ( attrs ,  R . styleable . ColorPicker ,  0 ,  0 ) ;  showAlpha ( a . getBoolean ( R . styleable . ColorPicker_colorpicker_showAlpha ,  true ) ) ;  showHex ( a . getBoolean ( R . styleable . ColorPicker_colorpicker_showHex ,  true ) ) ;  showPreview ( a . getBoolean ( R . styleable . ColorPicker_colorpicker_showPreview ,  true ) ) ;  }  }
public   static   boolean   isSameDay ( @ Nullable   DateTime   date ,  @ Nullable   DateTime   other )   {  if  ( date   ==   null   &&   other   ==   null )   return  true ;  if  ( date   ==   null   ||   other   ==   null )   return  false ;  return  date . year () . equals ( other . year () )   &&   date . dayOfYear () . equals ( other . dayOfYear () ) ;  }
public   void   setSelectionDividerHeight ( @ IntRange ( from   =   0 )   @ Px   int   height )   {  mSelectionDividerHeight   =   height ;  invalidate () ;  }
public   Builder   retryTimeout ( long   timeout ,  TimeUnit   unit )   {  this . errorTimeout   =   unit . toMillis ( timeout ) ;  return  this ;  }
@ Override  public   boolean   groupHas ( String   world ,  String   group ,  String   permission )   {  PermissionBase   permGroup   =  manager . getGroup ( group ) ;  return  permGroup . has ( permission ,  world ) ;  }
@ Override  public   void   reset ()   {  ModuleSettings   moduleSettings   =  myModule . getService ( ModuleSettings . class ) ;  if  ( moduleSettings   !=   null   &&   moduleSettings . getState ()   !=   null )   {  Settings   persistedSettings   =  moduleSettings . getState () ;  this . setValuesFromSettings ( persistedSettings ) ;  }  }
private   Optional < String >   readSignature ( ByteBuf   content )   {  return  readRawSignature ( content ) . map ( string  ->  {  if  ( ! string . startsWith ( """"chunk-signature="""" ) )   {  throw  new   IllegalStateException ( """"Chunk does not conform to compulsory structure."""" ) ;  }  return  string . substring ( 16 ) ;  } ) ;  }
@ Override  public   void   setUDFContextSignature ( String   signature )   {  shifuStorage . setUDFContextSignature ( signature ) ;  }
@ Test  public   void   testValidUsers ()   {  parseWrongMacro ( """"test"""" ,  MacroExceptionCode . Not_Macro ) ;  parseWrongMacro ( """"logged_user"""" ,  MacroExceptionCode . Not_Macro ) ;  parseWrongMacro ( """"anonymous"""" ,  MacroExceptionCode . Not_Macro ) ;  parseWrongMacro ( """"_anonymous"""" ,  MacroExceptionCode . Not_Macro ) ;  parseWrongMacro ( """"dummy user with spaces"""" ,  MacroExceptionCode . Not_Macro ) ;  }
@ Override   void   visitContainedItemSchema ( Schema   containedItemSchema )   {  writer . key ( """"contains"""" ) ;  visit ( containedItemSchema ) ;  }
public   MavenSettings   readSettings ()   {  Settings   settings   =  loadSettings () ;  SettingsDecryptionResult   decrypted   =  decryptSettings ( settings ) ;  if  ( ! decrypted . getProblems () . isEmpty () )   {  log . error ( """"Maven settings decryption failed. Some Maven repositories may be inaccessible"""" ) ;  
@ Test  public   void   getNodePath_invalid ()   {  expectedExn . expect ( IllegalArgumentException . class ) ;  TreePath   unused   =  treeContext () . getNodePath ( invalidNode () ) ;  }
public   void   setPredict ( Predict   predict )   {  this . predict   =   predict ;  }
@ Override  public   HealthContributor   getContributor ( String   name )   {  return  contributorMap . get ( name ) ;  }
public   static   int   runShifuConvert ( int   optType ,  String   fromFilePath ,  String   toFilePath )   {  IndependentTreeModelUtils   modelUtils   =  new   IndependentTreeModelUtils () ;  boolean   status   =  false ;  if  ( optType   ==   1 )   {  status   =   modelUtils . convertBinaryToZipSpec ( new   File ( fromFilePath ) ,  new   File ( toFilePath ) ) ;  }   else if ( optType   ==   2 )   {  status   =   modelUtils . convertZipSpecToBinary ( new   File ( fromFilePath ) ,  new   File ( toFilePath ) ) ;  }  return  ( status  ?   0   :  1 ) ;  }
private   boolean   isSet ( int   fragmentContainerId )   {  return  fragmentManager . findFragmentById ( fragmentContainerId )   !=   null ;  }
@ Override  protected   Iterable < Block >   getKnownBlocks ()  {  return  ForgeRegistries . BLOCKS . getValues () . stream () . filter ( block  ->   Reference . MOD_ID . equals ( Objects . requireNonNull ( ForgeRegistries . BLOCKS . getKey ( block ) ) . getNamespace () ) ) . collect ( Collectors . toSet () ) ;  }
@ Override  public   boolean   isBefore ( Wrapper < ?   extends  Node >   wrapper )   {  if  ( wrapper   instanceof   ExclusionSortedWrapper )   {  return  isBeforeExclusionSortedWrapper ( ( ExclusionSortedWrapper )   wrapper ) ;  }  return  super . isBefore ( wrapper ) ;  }
@ Test  public   void   failsToCompile_noWarning ()   {  expectFailure  . whenTesting ()  . about ( javaSource () )  . that ( HELLO_WORLD_BROKEN )  . processedWith ( new   DiagnosticMessage . Processor ( Diagnostic . Kind . WARNING ) )  . failsToCompile ()  . withWarningContaining ( """"what is it?"""" ) ;  AssertionError   expected   =  expectFailure . getFailure () ;  assertThat ( expected . getMessage () )  . contains ( """"Expected a warning containing \""""what is it?\"""", but only found:\n"""" ) ;  
private   ArrayList < File >   updateFileList ( String   category ,  File   newFile )   {  
@ Override  protected   void   validateRequest ()   {  if  ( ! params () . containsKey ( """"origins"""" ) )   {  throw  new   IllegalArgumentException ( """"Request must contain 'origins'"""" ) ;  }  if  ( ! params () . containsKey ( """"destinations"""" ) )   {  throw  new   IllegalArgumentException ( """"Request must contain 'destinations'"""" ) ;  }  if  ( params () . containsKey ( """"arrival_time"""" )   &&   params () . containsKey ( """"departure_time"""" ) )   {  throw  new   IllegalArgumentException ( """"Transit request must not contain both a departureTime and an arrivalTime"""" ) ;  }  }
@ Override   public   InputStream   get ( String   url )   {  Optional < String >   maybeString   =  handleProtocol ( url ) ;  if ( maybeString . isPresent () )   {  InputStream   stream   =  this . loadFromClasspath ( maybeString . get () ) ;  if ( stream   !=   null )   {  return  stream ;  }   else  {  throw  new   UncheckedIOException ( new   IOException ( String . format ( """"Could not find %s"""" ,  url ) ) ) ;  }  }   else  {  return  fallbackClient . get ( url ) ;  }  }
@ Test  public   void   requireArrayFailure ()   {  SchemaException   thrown   =  assertThrows ( SchemaException . class ,  ()  ->  {  OBJ . requireArray () ;  } ) ;  assertEquals ( """"#: expected type: JsonArray, found: JsonObject"""" ,  thrown . getMessage () ) ;  }
static   Phase   getPhase ( String   name )   {  var   phase   =  StandardPhase . getPhase ( name ) ;  return  phase . orElse ( new   NonStandardPhase ( name ) ) ;  }
@ Test  public   void   testGeoHashLengthAcrossEcuador ()   {  assertEquals ( 0 ,  hashLengthToCoverBoundingBox ( 2.935289 ,  - 82.751538 ,  - 5.623710 , - 74.753492 ) ) ;  }
@ BeforeEach  void   setUp ()   {  parser   =   new   XmlProcessingInstructionParser () ;  parser . setup ( logger ) ;  }
public   BooleanProperty   getShowVoicebankFace ()   {  if  ( showVoicebankFaceTemp   ==   null )   {  String   showVoicebankFace   =  preferences . containsKey ( """"showVoicebankFace"""" ) ?   preferences . get ( """"showVoicebankFace"""" )  :  defaultPreferences . get ( """"showVoicebankFace"""" ) ;  showVoicebankFaceTemp   =   new   SimpleBooleanProperty ( showVoicebankFace . equalsIgnoreCase ( """"true"""" ) ) ;  }  return  showVoicebankFaceTemp ;  }
@ Override  public   BlockAccessor . Builder   blockAccessor ()   {  Minecraft   mc   =  Minecraft . getInstance () ;    return  new   BlockAccessorImpl . Builder () . level ( mc . level ) . player ( mc . player ) . serverConnected ( isServerConnected () ) . serverData ( getServerData () ) . showDetails ( isShowDetailsPressed () ) ;    }
@ Override  public   Builder   writeTimeout ( long   timeout ,  TimeUnit   unit )   {  throw  new   RuntimeException ( """"writeTimeout not implemented for Google App Engine"""" ) ;  }
private   String   getDisplayNameForUri ( Uri   uri )   {  String   displayName ;  if  ( ! ContentResolver . SCHEME_CONTENT . equals ( uri . getScheme () ) )   {  displayName   =   uri . getLastPathSegment () ;  }   else  {  displayName   =   getDisplayNameFromContentResolver ( uri ) ;  if  ( displayName   ==   null )   {  
public   static   WheelType   patternCharToWheelType ( char   patternChar )   throws  Exception   {  switch  ( patternChar ) {  case  'y' :   return  WheelType . YEAR ;  case  'M' :   return  WheelType . MONTH ;  case  'd' :   return  WheelType . DATE ;  case  'h' :  case  'H' :  return  WheelType . HOUR ;  case  'm' :   return  WheelType . MINUTE ;  case  'a' :   return  WheelType . AM_PM ;  default:   throw  new   Exception ( """"Invalid pattern char: """"   +   patternChar ) ;  }  }
public   void   addPet ( Pet   pet )   {  if  ( pet . isNew () )   {  getPetsInternal () . add ( pet ) ;  }  pet . setOwner ( this ) ;  }
static   Map < String ,  Object >   extend ( Map < String ,  Object >   additional ,  Map < String ,  Object >   original )   {  if  ( additional . keySet () . isEmpty () )   {  return  original ;  }  if  ( original . keySet () . isEmpty () )   {  return  additional ;  }  Map < String ,  Object >   rawObj   =  new   HashMap <> () ;  original . forEach ( rawObj :: put ) ;  additional . forEach ( rawObj :: put ) ;  return  rawObj ;  }
public   static   void   applyMaterial3 ( Preference   p )   {  if  ( p   instanceof   PreferenceGroup   pg )   {  for  ( int   i   =  0 ;   i   <   pg . getPreferenceCount () ;   i ++ )   {  applyMaterial3 ( pg . getPreference ( i ) ) ;  }  }  if  ( p   instanceof   SwitchPreferenceCompat )   {  p . setWidgetLayoutResource ( R . layout . preference_material_switch ) ;  }  }
@ Override  public   void   postApplication ( MasterContext < VarSelMasterResult ,  VarSelWorkerResult >   context )   {  VarSelMasterResult   varSelMasterResult   =  context . getMasterResult () ;  LOG . info ( """"Results is - {}"""" ,  varSelMasterResult . getBestSeed () ) ;  String   out   =  context . getProps () . getProperty ( Constants . VAR_SEL_COLUMN_IDS_OUPUT ) ;  writeColumnIdsIntoHDFS ( out ,  varSelMasterResult . getBestSeed () . getColumnIdList () ) ;  }
private   static   final   void   copyInputStream ( InputStream   in ,  OutputStream   out )   throws  IOException   {  byte []   buffer   =  new   byte [ 1024 ] ;  int   len ;  while  ( ( len   =   in . read ( buffer ) )   >=   0 )  out . write ( buffer ,  0 ,  len ) ;  in . close () ;  out . close () ;  }
@ Override  public   void   onItemClick ( AdapterView < ? >   parent ,  View   v ,  int   pos ,  long   id )  {  AppInfo   appInfo   =  adapter . getItem ( pos ) ;  displayDialog ( appInfo ) ;  }
@ Override  public   List < Bucket >   getBuckets ( GeneratorConfiguration   conf )   {  mean   =   ( int )   mean ( DatagenParams . numPersons ) ;  buckets   =   new   ArrayList <> () ;  loadFBBuckets () ;  rebuildBucketRange () ;  return  buckets ;  }
public   boolean   hasFlag ( int   flag )   {  return  ( this . flags   &   flag )   !=   0 ;  }
public   boolean   hasSelectedVar ( String   varName )   {  return  ArrayUtils . contains ( selectedVars ,  varName ) ;  }
public   void   put ( V   provider )   {  Objects . requireNonNull ( provider ) ;  put ( provider ,  defaultPriorityGetter . applyAsInt ( provider ) ) ;  }
@ Test  public   void   protectedProperties_stayPrimitive ()   {  assertThat ( ( String ) v1 . getProperty ( CommonProperties . IRI ) ,  is ( """"foo"""" ) ) ;  }
public   @ Nullable   T   find ( Accessor < ? >   accessor )   {  return  containerFinder . apply ( accessor ) ;  }
@ Test  void   testOverlapping ()   throws  IOException   {  assertThatAnnotateIs ( """"plain\033[32mgreen\033[1mboldgreen\033[4mulboldgreen\033[31mulboldred""""   +  """"\033[22mulred\033[24mred"""" , """"plain""""   +  """"<span style=\""""color: #00CD00;\"""">""""   +                      
public   void   setColorMap ( Map < String ,  Color >   colorMap )   {  this . colorMap   =   colorMap ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   testClear ()   throws  Exception   {  deleteUser ( user ) ;  deleteApplication ( playgroundAppOne ) ;  deleteApplication ( playgroundAppTwo ) ;  clear () ;  mockApplicationServer . stop () ;  }
public   void   setSampleRate ( int   sampleRate )   {  this . sampleRate   =   sampleRate ;  }
private   void   setSystemProperties ()   {  URL   resourceUrl   =  getClass () . getResource ( ISIntegrationTest . URL_SEPARATOR   +   """"keystores""""   +   ISIntegrationTest . URL_SEPARATOR  +   """"products""""   +   ISIntegrationTest . URL_SEPARATOR   +   ISIntegrationTest . KEYSTORE_NAME ) ;  System . setProperty ( """"javax.net.ssl.trustStore"""" ,  resourceUrl . getPath () ) ;  System . setProperty ( """"javax.net.ssl.trustStorePassword"""" , """"wso2carbon"""" ) ;  System . setProperty ( """"javax.net.ssl.trustStoreType"""" ,  ISIntegrationTest . KEYSTORE_TYPE ) ;  }
 <argument pos:start=""""""""149:87"""""""" pos:end=""""""""149:94""""""""><expr pos:start=""""""""149:87"""""""" pos:end=""""""""149:94""""""""><name pos:start=""""""""149:87"""""""" pos:end=""""""""149:94"""""""">normType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
void   generateEventInstances ()   {  provider . clear () ;  DateTime   date   =  getSettings () . clock () . now () . withTimeAtStartOfDay () ;  long   millis   =  date . getMillis ()   +   TimeUnit . HOURS . toMillis ( 10 ) ;  eventId ++ ;  for  ( int   ind   =  0 ;   ind   <   15 ;   ind ++ )   {  millis   +=   TimeUnit . DAYS . toMillis ( 1 ) ;  provider . addRow ( new   QueryRow () . setEventId ( eventId ) . setTitle ( """"Work each day"""" )  . setBegin ( millis ) . setEnd ( millis   +   TimeUnit . HOURS . toMillis ( 9 ) ) ) ;  }  playResults ( TAG ) ;  }
public   List < String >   testFilesAndReturnLogs ( String   inputResourceFileName ,  String   expectedResourceFileName )   {  setup () ;  testHandler   =  new   TestHandler ( inputResourceFileName ,  expectedResourceFileName ,  getPluginParameters () ) ;  testHandler . performSortThatSorted () ;  return  testHandler . getInfoLogger () ;  }
@ Subscribe  public   void   onServersLoaded ( ServersLoadedEvent   event )   {  setUpServersContent ( event . getServers () ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   endTest ()   throws  Exception   {  try  {  deleteApplication ( PORT_OFFSET_0 ,  primaryISAppId ) ;  deleteIdp ( PORT_OFFSET_0 ,  primaryISIdpId ) ;  deleteApplication ( PORT_OFFSET_1 ,  secondaryISAppId ) ;  deleteApplication ( PORT_OFFSET_1 ,  secondaryISAppIdForIdp ) ;  deleteAddedUsersInSecondaryIS () ;  client . close () ;  scim2RestClient . closeHttpClient () ;  }   catch  ( Exception   e )   {  log . error ( """"Failure occured due to :""""   +   e . getMessage () ,  e ) ;  throw  e ;  }  }
@ Test  void   multipleOfShouldNotBeZero ()   {  SchemaException   thrown   =  Assertions . assertThrows ( SchemaException . class ,  ()  ->  {  SchemaLoader . load ( get ( """"multipleOfShouldNotBeZero"""" ) ) ;  } ) ;  assertEquals ( """"#: multipleOf should not be 0"""" ,  thrown . getMessage () ) ;  }
public   RoleItemAddGroupobj   value ( List < ListObject >   value )   {  this . value   =   value ;  return  this ;  }
private   static   String   encode ( final   String   text )   throws  UnsupportedEncodingException   {  return  URLEncoder . encode ( text ,  """"UTF-8"""" ) ;  }
@ Override  public   int   hashCode ()  {  final   int   prime   =  31 ;  int   result   =  1 ;  result   =   prime   *   result   +   ( ( op   ==   null )  ?   0   :  op . hashCode () ) ;  result   =   prime   *   result   +   ( ( varSpecs   ==   null )  ?   0   :  varSpecs . hashCode () ) ;  return  result ;  }
@ Override  protected   Collection < WebSocket >   getConnections ()   {  return  Collections . singletonList ( ( WebSocket )   engine ) ;  }
public   boolean   isMediaFile ()   {  try  {  return  abstractMediaMessageClass . isInstance ( fmessage ) ;  }   catch  ( Exception   e )   {  return  false ;  }  }
@ Override  public   void   onCreate ( SQLiteDatabase   db )   {  Log . d ( TAG ,  """"onCreate"""" ) ;  db . execSQL ( DROP_APP_LIST_TABLE ) ;  db . execSQL ( CREATE_APP_LIST_TABLE ) ;  initData ( db ) ;  }
public   boolean   permissionsOK ()   {  if  ( permissions   !=   null   &&   ! permissions . getName () . equalsIgnoreCase ( """"SuperPerms"""" ) )   {  return  true ;  }  return  false ;  }
public   static   Bfloat16Indexer   create ( ShortBuffer   buffer ,  Index   index )   {  return  new   Bfloat16BufferIndexer ( buffer ,  index ) ;  }
@ Test ( dependsOnMethods   =   { """"testResolveL2AppBrandingAfterL1AppBrandingDelete"""" } )  public   void   testResolveL1AppBrandingAfterL1OrgBrandingDelete ()   throws  Exception   {  
public   boolean   hasFlagsAny ( int   has )  {  return  ( ( flags   &   has )   !=   0 ) ;  }
@ Override  public   int   hashCode ()  {  return  _payload . hashCode ()   +   _code ;  }
public   static   < T >   T   get ( final   Map < String ,  Object >   object ,  final   List < String >   paths )   {  return  baseGetOrSetOrRemove ( object ,  paths ,  null ,  OperationType . GET ) ;  }
public   static   < T >   T   readValue ( File   src ,  Class < T >   valueType )   throws  JsonParseException ,  JsonMappingException , IOException   {  return  getObjectMapperInstance () . readValue ( src ,  valueType ) ;  }
@ Test  public   void   testUpdateChallengeWhenNotSet ()   throws  IOException   {  String   endpointURI   =  String . format ( this . userChallengeAnswerEndpointURI ,  """"challengeQuestion1"""" ) ;  String   body   =  readResource ( """"challenge-answer-set1-q4-correct.json"""" ) ;  Response   response   =  getResponseOfPut ( endpointURI ,  body ) ;  validateErrorResponse ( response ,  HttpStatus . SC_NOT_FOUND ,  """"CQM-10015"""" ,  this . tenant ) ;  }
public   ApplicationListItem   id ( String   id )   {  this . id   =   id ;  return  this ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( isFIDOTrustedApp ,  isConsentGranted ,  androidPackageName ,  androidThumbprints ,  appleAppId ) ;  }
public   String []   listUsers ( String   filter ,  int   limit )  throws  RemoteException ,  UserAdminUserAdminException   {  return  userAdminStub . listUsers ( filter ,  limit ) ;  }
@ Nullable  public   List < PatternItem >   getStrokePattern ()   {  throw  new   UnsupportedOperationException () ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"scopeValidators"""" )  @ Valid  public   MetadataProperty   getScopeValidators ()   {  return  scopeValidators ;  }
public   Direction   direction ()   throws  IOException   {  return  getDirection () ;  }
private   Optional < TreePath >   currentPathPlus ( Tree   node )   {  return  Optional . of ( new   TreePath ( getCurrentPath () ,  node ) ) ;  }
public   CuboidArea []   getAreaArray ()   {  CuboidArea []   temp   =  new   CuboidArea [ areas . size () ] ;  int   i   =  0 ;  for  ( CuboidArea   area   :  areas . values () )   {  temp [ i ]   =   area ;  i ++ ;  }  return  temp ;  }
public   LaunchCommandBuilder   withAdditionalFetchUris ( List < FetchUri >   additionalFetchUris )   {  this . additionalFetchUris   =   additionalFetchUris ;  return  this ;  }
private   void   once ()   throws  InterruptedException   {  if  ( UTIL   >=   100 )   {  sample ( 30L   *   1000   *   1000   *   1000 ) ;  }   else  {  long   sampleLength   =  ( long )   ( ( 1   /   ( 1   -   UTIL   /   100 )   -   1 )   *   1000   *   1000 ) ;  for  ( int   i   =  0 ;   i   <   30   *   1000 ;   i   +=   2 )   {  sample ( sampleLength ) ;  
public   static   int   getNumericalBinIndex ( List < Double >   binBoundaries ,  Object   columnVal )   {  if ( columnVal   ==   null )   {  return  - 1 ;  }  double   dval   =  0.0 ;  if ( columnVal   instanceof   Double )   {  dval   =   ( Double )   columnVal ;  }   else if ( columnVal   instanceof   Integer )   {  dval   =   ( ( Integer )   columnVal ) . doubleValue () ;  }   else  {  try  {  dval   =   Double . parseDouble ( columnVal . toString () ) ;  }   catch  ( Exception   e )   {  return  - 1 ;  }  }  return  getBinIndex ( binBoundaries ,  dval ) ;  }
@ Override   void   accept ( Visitor   visitor )   {  visitor . visitSchema ( this ) ;  }
public   final   ArrayFieldBuilder   value ( final   Field   value )   {  this . values . add ( value ) ;  return  this ;  }
public   ValidationConfigurationBuilder   setDefaultVersion ( final   SchemaVersion   version )  {  BUNDLE . checkNotNull ( version ,  """"nullVersion"""" ) ;    defaultLibrary   =   DEFAULT_LIBRARIES . get ( version ) ;  return  this ;  }
private   void   readFraction ()   {  if  ( ! readChar ( '.' ) )   {  return;  }  if  ( ! readDigit () )   {  throw  expected ( DIGIT ) ;  }  while  ( readDigit () )   {  
public   UriTemplateBuilder   fragment ( String ...   var )   throws  UriTemplateBuilderException  {  fragment ( toVarSpec ( var ) ) ;  return  this ;  }
public   void   addFile (  final   String   path ,  final   File   source ,  final   int   mode ,  final   int   dirmode )   throws  NoSuchAlgorithmException ,  IOException   {  contents . addFile (  path ,  source ,  mode ,  dirmode ) ;  }
 <argument pos:start=""""""""147:95"""""""" pos:end=""""""""147:96""""""""><expr pos:start=""""""""147:95"""""""" pos:end=""""""""147:96""""""""><name pos:start=""""""""147:95"""""""" pos:end=""""""""147:96"""""""">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   EmailTemplateTypeWithoutTemplates   addTemplatesItem ( EmailTemplateWithID   templatesItem )   {  if  ( this . templates   ==   null )   {  this . templates   =   new   ArrayList <> () ;  }  this . templates . add ( templatesItem ) ;  return  this ;  }
@ Test  public   void   invalidCharacterTest ()   throws  Exception   {  TestSuiteResult   testSuiteResult   =  new   TestSuiteResult ()  . withName ( """"somename"""" ) ;  String   titleWithInvalidXmlCharacter   =  String . valueOf ( Character . toChars ( 0x0 ) ) ;  testSuiteResult . setTitle ( titleWithInvalidXmlCharacter ) ;  AllureResultsUtils . writeTestSuiteResult ( testSuiteResult ) ;  Validator   validator   =  AllureModelUtils . getAllureSchemaValidator () ;  for  ( File   each   :  listTestSuiteFiles ( resultsDirectory ) )   {  validator . validate ( new   StreamSource ( each ) ) ;  }  }
static   boolean   isEqual ( Frame   frame ,  org . opencv . core . Mat   mat )   {  return  mat   !=   null   &&   frame   !=   null   &&   frame . image   !=   null   &&   frame . image . length   >   0  &&   frame . imageWidth   ==   mat . cols ()   &&   frame . imageHeight   ==   mat . rows ()  &&   frame . imageChannels   ==   mat . channels ()   &&   getMatDepth ( frame . imageDepth )   ==   mat . depth ()  &&   new   Pointer ( frame . image [ 0 ] . position ( 0 ) ) . address ()   ==   mat . dataAddr () ;  }
@ Subscribe  public   void   onFileSharing ( ServerFileSharingEvent   event )   {  if  ( isFileDownloaded ( event . getFile () ) )   {  Uri   contentUri   =  getContentUri ( event . getFile () ) ;  startFileSharingActivity ( event . getFile () ,  contentUri ) ;  }   else  {  Snackbar . make ( getParentView () ,  R . string . message_progress_file_downloading ,  Snackbar . LENGTH_LONG ) . show () ;  }  }
private   String   getUriFrom ( String   name ,  Date   modificationTime )   {  OfflineFileRepository   repository   =  new   OfflineFileRepository ( this ) ;  OfflineFile   offlineFile   =  repository . getOfflineFile ( name ,  modificationTime . getTime () ) ;  return  offlineFile . getFileUri () ;  }
private   GitDescribeConfig   createGitDescribeConfig ( boolean   forceLongFormat ,  int   abbrev )   {  GitDescribeConfig   gitDescribeConfig   =  new   GitDescribeConfig () ;  gitDescribeConfig . setTags ( true ) ;  gitDescribeConfig . setForceLongFormat ( forceLongFormat ) ;  gitDescribeConfig . setAbbrev ( abbrev ) ;  gitDescribeConfig . setDirty ( """""""" ) ;  return  gitDescribeConfig ;  }
public   static   String   toHexString ( byte []   data )   {  if  ( data   ==   null )   {  return  null ;  }  return  toHexString ( data ,  0 ,  data . length ) ;  }
public   GeolocationApiRequest   CreatePayload ()   {  if  ( this . payload   ==   null )   {  
 <argument pos:start=""""""""302:303"""""""" pos:end=""""""""302:309""""""""><expr pos:start=""""""""302:303"""""""" pos:end=""""""""302:309""""""""><name pos:start=""""""""302:303"""""""" pos:end=""""""""302:309""""""""><name pos:start=""""""""302:303"""""""" pos:end=""""""""302:306"""""""">args</name><index pos:start=""""""""302:307"""""""" pos:end=""""""""302:309"""""""">[<expr pos:start=""""""""302:308"""""""" pos:end=""""""""302:308""""""""><literal type=""""""""number"""""""" pos:start=""""""""302:308"""""""" pos:end=""""""""302:308"""""""">2</literal></expr>]</index></name></expr></argument>
private   void   checkVariableContainsIllegalChars ( final   char []   illegalChars ,  final   CharSequence   variable ,  final   String   variableName )   {  for  ( int   i   =  0 ;   i   <   variable . length () ;   i ++ )   {  char   currChar   =  variable . charAt ( i ) ;  for  ( char   illegalChar   :  illegalChars )   {  if  ( currChar   ==   illegalChar )   {  throw  new   IllegalArgumentException ( variableName   +   """" with value: '""""   +   variable   +   """"' contains illegal character """"   +   currChar ) ;  }  }  }  }
@ Override  public   boolean   isBefore ( Wrapper < ?   extends  Node >   wrapper )   {  return  ! ( wrapper   instanceof   SortedWrapper )   ||   isBeforeSortedWrapper ( ( SortedWrapper )   wrapper ) ;  }
public   void   testRenameLocalParameterReference ()   {  testRename ( """"NewParameter"""" ,  """"rename_component_parameter.json"""" ,  """"rename_component_parameter_after.json"""" ) ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"passiveSts"""" )  @ Valid  public   PassiveStsConfiguration   getPassiveSts ()   {  return  passiveSts ;  }
@ Override  public   boolean   playerInGroup ( String   world ,  String   player ,  String   group )   {  OfflinePlayer   op   =  Bukkit . getOfflinePlayer ( player ) ;  GroupSet   set   =  perms . getGroupManager () . getWorldSet ( Bukkit . getWorld ( world ) ) ;  User   user   =  set . getUser ( op ) ;  if  ( set . hasGroup ( group ) )   {  Group   g   =  set . getGroup ( group ) ;  return  user . hasChild ( g ,  true ) ;  }   else  {  return  false ;  }  }
private   boolean   shouldRetry ( HTTPResponse   response )   {  return  RETRY_ERROR_CODES . contains ( response . getResponseCode () )  &&   cumulativeSleepTime   <   errorTimeOut  &&   ( maxRetries   ==   null   ||   retryCounter   <   maxRetries ) ;  }
 <argument pos:start=""""""""498:60"""""""" pos:end=""""""""498:67""""""""><expr pos:start=""""""""498:60"""""""" pos:end=""""""""498:67""""""""><name pos:start=""""""""498:60"""""""" pos:end=""""""""498:67"""""""">lowBaseY</name></expr></argument>
public   static   void   writeJSON ( HttpServletResponse   response ,  Object   obj )   {  response . setContentType ( ContentType . APPLICATION_JSON . getMimeType () ) ;  try  ( OutputStream   stream   =  response . getOutputStream () )   {  OBJECT_MAPPER . writeValue ( stream ,  obj ) ;  }   catch  ( IOException   e )   {  throw  new   RuntimeException ( e ) ;  }  }
private   static   float   satForPos ( float   x ,  float   y ,  float   radiusPx )   {  final   double   r   =  radiusPx   -   1 ;   
public   static   void   savePMML ( PMML   pmml ,  String   path )   {  OutputStream   os   =  null ;  try  {  os   =   new   FileOutputStream ( path ) ;  StreamResult   result   =  new   StreamResult ( os ) ;  JAXBUtil . marshalPMML ( pmml ,  result ) ;  }   catch  ( Exception   e )   {  e . printStackTrace () ;  }  }
public   final   boolean   childOfOperationSecurityKey ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.*.*.*.security"""" ) ;  }
public   static   Fragment   buildServerSharesFragment ()   {  return  new   ServerSharesFragment () ;  }
@ Override   public   CharPointer   limit ( long   limit )   {  return  super . limit ( limit ) ;  }
public   void   fill ()   {  CommonFields . info () . forEach ( this :: addUnique ) ;  }
protected   String   itemResponse ( String   title ,  String   code ,  String   description )   {  StringBuilder   sb   =  new   StringBuilder () ;  String   status   =  """""""" ;  if  ( ! code . equals ( """"default"""" )   &&   ! code . matches ( """"[1-5]XX"""" ) )   {  status   =   HttpStatus . getReasonPhrase ( Integer . parseInt ( code ) ) ;  }  sb . append ( format ( """"%s : **%s %s**\n"""" ,  title ,  code ,  status ) ) ;  sb . append ( metadata ( description ) ) ;  return  sb . toString () ;  }
public   void   addElement ( Element   element ,  int   sortOrder )   {  var   deepName   =  getDeepName ( element ) ;  elementNameSortOrderMap . put ( deepName ,  sortOrder ) ;  }
@ Override  public   final   boolean   childOfExample ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.*"""" ) ;  }
public   static   synchronized   void   init ()   {  if  ( ! initialized )   {  initialized   =   true ;  av_lockmgr_register ( lockCallback ) ;  }  }
default   < T   extends  PwmProvider >   T   pwm ()   throws  ProviderException {  return  this . provider ( IOType . PWM ) ;  }
private   void   makeRequestUsingOAuth ( String   expectedLogin ,  List < String >   expectedAuthorities )   throws  IOException   {  WebRequest   req   =  new   WebRequest ( new   URL ( j . getURL () ,  """"securityRealm/commenceLogin"""" ) ) ;  req . setEncodingType ( null ) ;  String   referer   =  j . getURL ()   +   """"whoAmI/api/json"""" ;  req . setAdditionalHeader ( """"Referer"""" ,  referer ) ;  Page   p   =  wc . getPage ( req ) ;  assertResponse ( p ,  expectedLogin ,  expectedAuthorities ) ;  }
private   void   validateNextLink ( Response   response ,  boolean   expectNextLink )   {  List < Map < String ,  String > >   links   =  response . jsonPath () . getList ( LINKS_PATH_PARAM ) ;  String   nextLink   =  getLink ( links ,  LINK_REL_NEXT ) ;  if  ( expectNextLink )   {  Assert . assertNotNull ( nextLink ,  """"Next link should be present."""" ) ;  }   else  {  Assert . assertNull ( nextLink ,  """"Next link should not be present."""" ) ;  }  }
@ Override  public   void   doFilter ( ServletRequest   request ,  ServletResponse   response ,  FilterChain   chain )   throws  IOException ,  ServletException   {  ( ( HttpServletResponse ) response ) . addHeader ( """"Access-Control-Allow-Origin"""" ,  """"*"""" ) ;  ( ( HttpServletResponse ) response ) . addHeader ( """"Access-Control-Allow-Methods"""" ,  """"GET"""" ) ;  ( ( HttpServletResponse ) response ) . addHeader ( """"Access-Control-Allow-Headers"""" ,  """"Accept, X-Requested-With"""" ) ;  ( ( HttpServletResponse ) response ) . addHeader ( """"Cache-Control"""" , """"public, max-age=86400"""" ) ;  chain . doFilter ( request ,  response ) ;  }
@ Test  void   datetimeOf ()   {  assertEquals ( LocalDateTime . of ( 2021 ,  5 ,  19 ,  0 ,  0 ,  0 ) ,  QueryIdUtil . datetimeOf ( """"20210519_000000_00000_aaa"""" ) ) ;  assertEquals ( LocalDateTime . of ( 2021 ,  5 ,  20 ,  1 ,  2 ,  3 ) ,  QueryIdUtil . datetimeOf ( """"20210520_010203_00000_bbb"""" ) ) ;  assertEquals ( LocalDateTime . of ( 2021 ,  5 ,  20 ,  1 ,  2 ,  3 ) ,  QueryIdUtil . datetimeOf ( """"20210520_010203_12345_ccc"""" ) ) ;  assertThrows ( DateTimeParseException . class ,  ()  ->   QueryIdUtil . datetimeOf ( """"invalid_query_id"""" ) ) ;  }
@ Override  public   Chain < T >   reject ( final   Predicate < T >   pred )   {  return  new   Chain <> ( Underscore . reject ( value () ,  pred ) ) ;  }
public   boolean   isUseNewShowPartitions ( String   datasource )   {  String   property   =  environment . getProperty ( """"use.new.show.partitions.""""   +   datasource ) ;  if  ( property   ==   null )   {  return  true ;  }  return  Boolean . parseBoolean ( property ) ;  }
@ Test  public   void   dateTimeWithTenDigitsInSecFracFailure ()   {  assertFailure ( """"2015-02-28T11:00:00.1234567890Z"""" ,  new   DateTimeFormatValidator () , """"[2015-02-28T11:00:00.1234567890Z] is not a valid date-time. """"   +  """"Expected [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,9}Z, yyyy-MM-dd'T'HH:mm:ss[+-]HH:mm, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,9}[+-]HH:mm]"""" ) ;  }
@ Override  public   final   boolean   isHeader ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$"""" ) ;  }
@ JsonIgnore  public   String   getTargetColumnName ()   {  return  dataSet . getTargetColumnName () ;  }
public   Builder   setExcludeList ( @ Nullable   List < PublicKeyCredentialDescriptor >   excludeList )   {  this . excludeList   =   excludeList ;  return  this ;  }
@ Override  public   Cursor   query ( Uri   uri ,  String []   projection ,  String   selection ,  String []   selectionArgs ,  String   sortOrder )   {  return  null ;  }
public   static   void   dump (  byte []   data ,  Appendable   out )   {  dump (  ByteBuffer . wrap (  data ) ,  out ) ;  }
private   static   EnumMap < Format ,  String >   mapOf ( final   String   MMMed ,  final   String   d ,  final   String   y )   {  return  new   EnumMap < Format ,  String > ( Format . class )   { {  put ( Format . MMMEd ,  MMMed ) ;  put ( Format . d ,  d ) ;  put ( Format . y ,  y ) ;  } } ;  }
@ Test  public   void   versionless ()   {  String   input   =  """"foo:bar:jar:test"""" ;  Matcher   matcher   =  pattern . matcher ( input ) ;  assertThat ( matcher . matches () ) . isTrue () ;  assertThat ( matcher . group ( 1 ) ) . isEqualTo ( """"foo"""" ) ;  assertThat ( matcher . group ( 2 ) ) . isEqualTo ( """"bar"""" ) ;  assertThat ( matcher . group ( 4 ) ) . isEqualTo ( """"jar"""" ) ;  assertThat ( matcher . group ( 6 ) ) . isEqualTo ( """"test"""" ) ;  }
@ Test  void   otherType_requires ()   {  ValidatingVisitor   subject   =  createValidatingVisitor () ;  subject . ifPassesTypeCheck ( JSONObject . class ,  true ,  null ,  onPassConsumer () ) ;  verifyTypeCheckDidNotPass () ;  verify ( reporter ) . failure ( JSONObject . class ,  """"string"""" ) ;  }
public   void   writeToParcel ( Parcel   dest ,  int   flags )   {  dest . writeInt ( isConnected  ?   1   :  0 ) ;  dest . writeInt ( min5GHzRssi ) ;  dest . writeInt ( min24GHzRssi ) ;  dest . writeInt ( min6GHzRssi ) ;  if  ( networkList   !=   null )   {  dest . writeInt ( networkList . length ) ;  for  ( int   i   =  0 ;   i   <   networkList . length ;   i ++ )   {  dest . writeString ( networkList [ i ] . ssid ) ;  dest . writeByte ( networkList [ i ] . flags ) ;  dest . writeByte ( networkList [ i ] . authBitField ) ;  dest . writeIntArray ( networkList [ i ] . frequencies ) ;  }  }   else  {  dest . writeInt ( 0 ) ;  }  }
@ Override  public   < T >   Collection < T >   getRelationshipProperties ( long   relationship ,  String   property ,  Class < T >   type )   {  Map < String ,  Object >   propertyMap ;  synchronized  ( graphLock )   {  propertyMap   =   inserter . getRelationshipProperties ( relationship ) ;  }  if  ( propertyMap . containsKey ( property ) )   {  return  GraphUtil . getPropertiesAsSet ( propertyMap . get ( property ) ,  type ) ;  }   else  {  return  emptyList () ;  }  }
int   getTodaysPosition ()   {  for  ( int   ind   =  0 ;   ind   <   getWidgetEntries () . size ()   -   1 ;   ind ++ )   {  if  ( getWidgetEntries () . get ( ind ) . timeSection   !=   TimeSection . PAST )   return  ind ;  }  return  getWidgetEntries () . size ()   -   1 ;  }
public   static   UIntIndexer   create ( IntBuffer   buffer ,  long ...   sizes )   {  return  new   UIntBufferIndexer ( buffer ,  sizes ) ;  }
@ Nullable  public   static   String   firstPackageFromUserId ( Context   context ,  int   uid )   {  String []   packagesForUid   =  context . getPackageManager () . getPackagesForUid ( uid ) ;  if  ( packagesForUid   !=   null   &&   packagesForUid . length   !=   0 )   {  return  packagesForUid [ 0 ] ;  }  return  null ;  }
public   void   addUser ( String   userName ,  String   password ,  String []   roles , String   profileName )   throws  RemoteException ,  UserAdminUserAdminException   {  userAdminStub . addUser ( userName ,  password ,  roles ,  null ,  profileName ) ;  }
private   int   parseSection ( String []   lines ,  int   sectionStart ,  Song . Builder   builder )   {  String   header   =  lines [ sectionStart ] . trim () ;  if  ( ! HEADER_PATTERN . matcher ( header ) . matches () )   {  
static   JsonObject   lookupObjById ( JsonValue   val ,  String   idAttrVal )   {  return  val . ls . getSubschemaRegistry ( val ) . getById ( idAttrVal ) ;  }
public   void   setSignerName ( final   String   signerName )   {  this . signerName   =   signerName ;  }
@ NonNull  DiscoveryManager   getDiscoveryManager ()   {  return  discoveryManager ;  }
@ Override  public   boolean   equals ( Object   object )   {  if  ( this   ==   object )   {  return  true ;  }  if  ( object   ==   null   ||   getClass ()   !=   object . getClass () )   {  return  false ;  }  ChangedExample   that   =  ( ChangedExample )   object ;  return  Objects . equals ( leftExample ,  that . leftExample )  &&   Objects . equals ( rightExample ,  that . rightExample ) ;  }
@ Override   public   Bfloat16Indexer   put ( long   i ,  long   j ,  long   k ,  float   h )   {  buffer . put ( ( int ) index ( i ,  j ,  k ) ,  ( short ) fromFloat ( h ) ) ;  return  this ;  }
public   static   ShortIndexer   create ( ShortBuffer   buffer )   {  return  new   ShortBufferIndexer ( buffer ) ;  }
@ Override  public   boolean   performLongClick ()   {  if  ( ! mHasSelectorWheel )   {  return  super . performLongClick () ;  }   else if  ( ! super . performLongClick () )   {  showSoftInput () ;  mIgnoreMoveEvents   =   true ;  }  return  true ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   endTest ()   throws  Exception   {  serverConfigurationManager . restoreToLastConfiguration () ;  }
private   void   assertIncompatibleResponse ( String   newSpec )   {  assertSpecIncompatible ( BASE ,  newSpec ,  RESPONSE_NUMERIC_RANGE_INCREASED ) ;  }
public   UIPermissionNode   getRolePermissions ( String   roleName )  throws  RemoteException ,  UserAdminUserAdminException   {  return  userAdminStub . getRolePermissions ( roleName ) ;  }
@ Test  public   void   responseFormatIncreased ()   {  assertOpenApiBackwardIncompatible ( BASE ,  """"bc_response_schema_format_increased.yaml"""" ) ;  }
@ Test  void   replaceMultipleSectionShouldCreateManyTokens ()   {  var   xml   = """"abc<?sortpom ignore?>def1<?sortpom resume?>cbaabc<?SORTPOM Ignore?>def2<?sortPom reSUME?>cba"""" ;  var   replaced   =  ignoredSectionsStore . replaceIgnoredSections ( xml ) ;  assertThat ( replaced ,  is ( """"abc<?sortpom token='0'?>cbaabc<?sortpom token='1'?>cba"""" ) ) ;  assertThat ( ignoredSections . size () ,  is ( 2 ) ) ;  assertThat ( ignoredSections . get ( 0 ) ,  is ( """"<?sortpom ignore?>def1<?sortpom resume?>"""" ) ) ;  assertThat ( ignoredSections . get ( 1 ) ,  is ( """"<?SORTPOM Ignore?>def2<?sortPom reSUME?>"""" ) ) ;  }
private   Path   getTmpModelPath ( int   iteration )   {  return  new   Path ( DTrainUtils . getTmpModelName ( this . tmpModelsFolder ,  this . trainerId ,  iteration ,  modelConfig  . getTrain () . getAlgorithm () . toLowerCase () ) ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   resetUserstoreConfig ()   throws  Exception   {  super . init () ;  scm . restoreToLastConfiguration ( false ) ;  }
public   void   add ( double   lat ,  double   lon ,  long   time ,  T   t ,  R   id )   {  add ( lat ,  lon ,  time ,  t ,  of ( id ) ) ;  }
public   static   SpiChipSelect   getByNumber ( int   address ) {  for ( var   item   :  SpiChipSelect . values () ) {  if ( item . getChipSelect ()   ==   address ) {  return  item ;  }  }  return  null ;  }
public   static   < T >   SequenceType < T >   of ( final   Supplier < T >   getDefaultForType ,  final   Function < Object ,  T >   addOneCasted )   {  return  new   SequenceType <> ( getDefaultForType ,  addOneCasted ) ;  }
@ Override  public   float   getLength ()  {  final   double   dx   =  Math . abs ( x2   -   x1 ) ;  final   double   dy   =  Math . abs ( y2   -   y1 ) ;  return  ( float )   Math . hypot ( dx ,  dy ) ;  }
private   Map < Integer ,  List < ValueObject > >   buildColumnVoListMap ( int   capacity )   {  Map < Integer ,  List < ValueObject > >   columnVoListMap   =  new   HashMap < Integer ,  List < ValueObject > > () ;  for ( ColumnConfig   columnConfig :  columnConfigList )   {  if ( columnConfig . isCandidate ( super . hasCandidates ) )   {  columnVoListMap . put ( columnConfig . getColumnNum () ,  new   ArrayList < ValueObject > ( capacity ) ) ;  }  }  return  columnVoListMap ;  }
protected   void   processCursorTo ( int   row ,  int   col )   throws  IOException   {  }
@ Override   public   ShortIndexer   get ( long   i ,  long   j ,  short []   s ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  s [ offset   +   n ]   =   array [ ( int ) index ( i ,  j )   +   n ] ;  }  return  this ;  }
@ Test  public   void   getReachableNodes_fetchesAll ()   {  Graph   graph   =  graphApi . getReachableNodes ( c ,  Lists . newArrayList ( """"*"""" ) ,  Sets . newHashSet () ) ;  assertThat ( size ( graph . getVertices () ) ,  is ( 2 ) ) ;  assertThat ( size ( graph . getEdges () ) ,  is ( 0 ) ) ;  }
public   void   show ()   {  if  ( ! isShowing () )   {  setVisibility ( View . VISIBLE ) ;  mSwitch . setOnCheckedChangeListener ( this ) ;  }  }
@ Override  public   boolean   groupRemove ( String   world ,  String   group ,  String   permission )   {  if  ( world   ==   null )   {  return  false ;  }  PermissionSet   set   =  perms . getPermissionSet ( world ) ;  if  ( set   ==   null )   {  return  false ;  }  if  ( set . getGroupNodes ( group )   ==   null )   {  return  false ;  }  set . removeNode ( permission ,  group ) ;  return  true ;  }
private   ValidatingVisitor   createValidatingVisitor ( Object   instance , PrimitiveValidationStrategy   primitiveValidationStrategy )   {  return  new   ValidatingVisitor ( instance ,  reporter , ReadWriteValidator . NONE , ValidationListener . NOOP , primitiveValidationStrategy ) ;  }
public   static   void   intToBytes ( int   v ,  byte []   bytes ) {  intToBytes ( v ,  bytes ,  0 ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  WSTrustConfiguration   wsTrustConfiguration   =  ( WSTrustConfiguration )   o ;  return  Objects . equals ( this . audience ,  wsTrustConfiguration . audience )   &&  Objects . equals ( this . certificateAlias ,  wsTrustConfiguration . certificateAlias ) ;  }
@ Override   public   FloatIndexer   put ( long   i ,  float []   f ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  putRaw ( index ( i )   +   n ,  f [ offset   +   n ] ) ;  }  return  this ;  }
@ Override  public   IElement   sprite ( ResourceLocation   sprite ,  int   width ,  int   height )   {  return  new   SpriteElement ( sprite ,  width ,  height ) ;  }
public   SMSSender   providerURL ( String   providerURL )   {  this . providerURL   =   providerURL ;  return  this ;  }
public   void   setHostUrl ( String   hostUrl )   {  this . hostUrl   =   hostUrl ;  }
public   Intent   buildGooglePlayIntent ()   {  String   googlePlayUri   =  String . format ( Uris . GOOGLE_PLAY ,  context . getPackageName () ) ;  return  new   Intent ( Intent . ACTION_VIEW ,  Uri . parse ( googlePlayUri ) ) ;  }
@ Parallel ( threads   =   50 )  private   void   insert ( final   DataSource   src ,  final   String   table )  throws  Exception   {  new   JdbcSession ( src )  . sql ( String . format ( """"INSERT INTO %s VALUES ('hey')"""" ,  table ) )  . execute () ;  }
public   Event   getEvent ()  {  return  Event . values () [ ( _code   &   VALUE_BITS ) ] ;  }
@ Override   public   SizeTPointer   getPointer ( long   i )   {  return  new   SizeTPointer ( this ) . offsetAddress ( i ) ;  }
public   void   setLanguage ( int   language )   {  this . language   =   language ;  }
public   void   getDailySummaries ( GetDailySummariesParams   params )   throws  RemoteException   {  getServiceInterface () . getDailySummaries ( params ) ;  }
@ Test  public   void   testPaginationLimitNotImplemented ()   {  Response   response   =  getResponseOfGet ( CLAIM_DIALECTS_ENDPOINT_URI   +   LOCAL_CLAIMS_ENDPOINT_URI   +   """"?limit=0"""" ) ;  validateErrorResponse ( response ,  HttpStatus . SC_NOT_IMPLEMENTED ,  """"CMT-50022"""" ) ;  }
public   T   getOrElse ( T   other )   {  return  isSuccess ()  ?   get ()   :  other ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   static   < K ,  V >   List < Map . Entry < K ,  V > >   pick ( final   Map < K ,  V >   object ,  final   K ...   keys )   {  return  without ( map ( newArrayList ( object . entrySet () ) , entry  ->  {  if  ( Arrays . asList ( keys ) . contains ( entry . getKey () ) )   {  return  Map . entry ( entry . getKey () ,  entry . getValue () ) ;  }   else  {  return  null ;  }  } ) , ( Map . Entry < K ,  V > )   null ) ;  }
@ CheckForNull  @ Override  public   CNode   describe ( RoleBasedAuthorizationStrategy   instance ,  ConfigurationContext   context )   throws  Exception   {  return  compare ( instance ,  new   RoleBasedAuthorizationStrategy ( Collections . emptyMap () ) ,  context ) ;  }
private   Uri   getContentUri ( ServerFile   serverFile )   {  return  FileManager . newInstance ( this ) . getContentUriForOfflineFile ( serverFile . getName () ) ;  }
private   void   doServerShutdown ()   {  stopConnectionLostTimer () ;  if  ( decoders   !=   null )   {  for  ( WebSocketWorker   w   :  decoders )   {  w . interrupt () ;  }  }  if  ( selector   !=   null )   {  try  {  selector . close () ;  }   catch  ( IOException   e )   {  log . error ( """"IOException during selector.close"""" ,  e ) ;  onError ( null ,  e ) ;  }  }  if  ( server   !=   null )   {  try  {  server . close () ;  }   catch  ( IOException   e )   {  log . error ( """"IOException during server.close"""" ,  e ) ;  onError ( null ,  e ) ;  }  }  }
@ Override   public   UByteIndexer   put ( long   i ,  int   b )   {  putRaw ( index ( i ) ,  b ) ;  return  this ;  }
@ Override  public   void   paste_from_clipboard_pane ( String   content )  {  send_text ( content ) ;  }
@ Test  void   wontAllowColorNameTooLong ()   throws  Exception   {  final   String   tooLong   =  Strings . repeat ( 'x' ,  257 ) ;  assertAllColorMapsInvalid ( new   AnsiColorMap [] { new   AnsiColorMap ( tooLong , """"#C4A000"""" ,  """"#CC0000"""" ,  """"#4E9A06"""" ,  """"#C4A000"""" ,  """"#3465A4"""" ,  """"#75507B"""" ,  """"#06989A"""" ,  """"#D3D7CF"""" , """"#2E3436"""" ,  """"#CC0000"""" ,  """"#4E9A06"""" ,  """"#C4A000"""" ,  """"#3465A4"""" ,  """"#75507B"""" ,  """"#06989A"""" ,  """"#D3D7CF"""" , AnsiColorMap . Color . WHITE . ordinal () ,  AnsiColorMap . Color . BLACK . ordinal () ) } ) ;  }
public   boolean   isOpenIDUserApprovalBypassEnabled ()   throws  RemoteException   {  return  openidProviderServiceStub . isOpenIDUserApprovalBypassEnabled () ;  }
@ Test ( dependsOnMethods   =   """"testAddDiscoveryAttributesWithoutAddingConfig"""" )  public   void   testAddInvalidDiscoveryConfig ()   throws  IOException   {  String   endpointURL   =  ORGANIZATION_CONFIGS_API_BASE_PATH   +   ORGANIZATION_DISCOVERY_API_PATH ;  String   invalidRequestBody   =  readResource ( """"invalid-discovery-config-request-body.json"""" ) ;  Response   response   =  getResponseOfPostWithOAuth2 ( endpointURL ,  invalidRequestBody ,  m2mToken ) ;  validateErrorResponse ( response ,  HttpStatus . SC_BAD_REQUEST ,  """"UE-10000"""" ) ;  }
@ Test  void   testDecodeParseXmlErr13 ()   {  assertThrows ( IllegalArgumentException . class ,  ()  ->   U . fromXml ( """"[\""""abc\u0010\""""]"""" ) ) ;  }
@ GetMapping  public   List < Owner >   findAll ()   {  return  ownerRepository . findAll () ;  }
@ ParameterizedTest  @ MethodSource ( """"useNativeGit"""" )  public   void   shouldSkipWithoutFailOnNoGitDirectoryWhenNoGitRepoFound ( boolean   useNativeGit )  throws  Exception   {  
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( """"class EmailTemplateTypeWithoutTemplates {\n"""" ) ;  sb . append ( """"    id: """" ) . append ( toIndentedString ( id ) ) . append ( """"\n"""" ) ;  sb . append ( """"    displayName: """" ) . append ( toIndentedString ( displayName ) ) . append ( """"\n"""" ) ;  sb . append ( """"    templates: """" ) . append ( toIndentedString ( templates ) ) . append ( """"\n"""" ) ;  sb . append ( """"    self: """" ) . append ( toIndentedString ( self ) ) . append ( """"\n"""" ) ;  sb . append ( """"}"""" ) ;  return  sb . toString () ;  }
public   void   setAttackComplexity ( String   attackComplexity )   {  this . attackComplexity   =   attackComplexity ;  }
@ Override  public   void   addAfterRenderCallback ( int   priority ,  JadeAfterRenderCallback   callback )   {  Objects . requireNonNull ( callback ) ;  afterRenderCallback . add ( priority ,  callback ) ;  }
public   boolean   matchesOne ( RelationPattern   relationPattern )   {  for  ( int   i   =  0 ;   i   <   directions . length ;   i ++ )   {  if  ( directions [ i ] . contains ( relationPattern . directions [ i ] ) )  return  true ;  }  return  false ;  }
public   static   boolean   hasDefaultFluidStorage ( Accessor < ? >   accessor )   {  if  ( accessor   instanceof   BlockAccessor   blockAccessor )   {  return  FluidStorage . SIDED . find ( accessor . getLevel () , blockAccessor . getPosition () , blockAccessor . getBlockState () , blockAccessor . getBlockEntity () , null )   !=   null ;  }  return  true ;  }
public   void   setDownloadId ( long   downloadId )   {  this . downloadId   =   downloadId ;  }
public   boolean   isPositioned ()  {  return  ( displayed   &&   ( position   ==   POS_ABSOLUTE   ||   position   ==   POS_FIXED ) ) ;  }
@ Override  public   boolean   canImport ( TransferHandler . TransferSupport   info )   {  return  info . isDataFlavorSupported ( DataFlavor . javaFileListFlavor ) ;  }
public   void   setSecurityScheme ( final   SecurityScheme   securityScheme )   {  this . securityScheme   =   securityScheme ;  }
@ Override  public   double   getWidth ()   {  if  ( curves . isEmpty () )   {  return  0 ;  }  return  curves . get ( curves . size ()   -   1 ) . getEndX ()   -   curves . get ( 0 ) . getStartX () ;  }
public   void   setCommand ( String   command )   {  this . command   =   command ;  }
public   void   setSettings ( ImageAligner . Settings   settings )   {  this . settings   =   ( Settings ) settings ;  }
@ Test  public   void   responseMinDecreased ()   {  assertIncompatibleResponse ( """"bc_response_numericrange_min_decreased.yaml"""" ) ;  }
public   void   setAutoscroll ( AutoscrollMode   autoscrollMode )   {  preferences . put ( """"autoscroll"""" ,  autoscrollMode . name () ) ;  }
@ Override  public   Future < Context >   asyncShutdown ()   {  return  this . runtime . asyncShutdown () ;  }
@ Override  public   int   i2cReadDevice ( int   handle ,  byte []   buffer ,  int   offset ,  int   length )   {  logger . trace ( """"[I2C::READ] -> [{}]; I2C Raw Read [{} bytes]; offset={}"""" ,  handle ,  length ,  offset ) ;  validateReady () ;  validateHandle ( handle ) ;  Objects . checkFromIndexSize ( offset ,  length ,  buffer . length ) ;  
private   static   void   killApplication ( HttpServletResponse   response ,  String   resourceManagerUrl ,  String   id )   {  try  {  String   json   =  YarnUtil . kill ( resourceManagerUrl ,  id ) ;  response . setContentType ( """"application/json"""" ) ;  PrintWriter   writer   =  response . getWriter () ;  writer . println ( json ) ;  }   catch  ( IOException   e )   {  throw  new   RuntimeException ( e ) ;  }  }
public   void   insertSubBoxBefore ( Box   where ,  Box   what )  {  int   pos   =  nested . indexOf ( where ) ;  nested . insertElementAt ( what ,  pos ) ;  endChild ++ ;  }
@ SetEnvironment ( executionEnvironments   =   {  ExecutionEnvironment . ALL } )  @ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Check get captcha"""" ,  dependsOnMethods   =   """"testListUsers"""" )  public   void   testGetCaptcha ()   throws  Exception   {  CaptchaInfoBean   bean   =  infoRecoveryClient . getCaptcha () ;  Assert . assertNotNull ( bean ,  """"Getting the captcha call failed with null return"""" ) ;  Assert . assertNotNull ( bean . getImagePath () ,  """"Getting image path from captcha has failed."""" ) ;  Assert . assertNotNull ( bean . getSecretKey () ,  """"Getting secret key from captcha has failed."""" ) ;  }
@ Override  public   int   hashCode ()   {  return  Arrays . hashCode ( new   String [] { id ,  password } ) ;  }
@ Override  public   File   getOpenFile ()   {  return  voicebank . getLocation () ;  }
public   String   getAutoTypeFilePath ( SourceType   sourceType )   {  String   preTrainingStatsPath   =  getPreferPath ( modelConfig . getTrain () . getCustomPaths () , Constants . KEY_AUTO_TYPE_PATH ) ;  if ( StringUtils . isBlank ( preTrainingStatsPath ) )   {  return  getPathBySourceType ( new   Path ( Constants . TMP ,  Constants . AUTO_TYPE_PATH ) ,  sourceType ) ;  }   else  {  return  new   Path ( preTrainingStatsPath ) . toString () ;  }  }
public   static   void   onConfirm ( String   date ,  String   id )   {  WritableMap   event   =  Arguments . createMap () ;  event . putString ( """"date"""" ,  date ) ;  event . putString ( """"id"""" ,  id ) ;  deviceEventEmitter () . emit ( """"onConfirm"""" ,  event ) ;  }
@ Test  public   void   thatResponseBodyMediaTypeKeysAreSuggested ()   {  getCaretCompletions ( """"response_media_type"""" )  . assertContains ( """"schema"""" ,  """"example"""" ,  """"examples"""" ,  """"encoding"""" )  . isOfSize ( 4 ) ;  }
@ Override  public   String   toString ()   {  return  String . format ( """"XATTR %s, %s"""" ,  this . name ,  this . expr ) ;  }
public   boolean   containsAtLeast ( final   T   value ,  final   int   count )   {  return  Underscore . containsAtLeast ( this . iterable ,  value ,  count ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( requirePushAuthorizationRequest ) ;  }
private   int   getIncomingCount ()   {  final   int   inCount   =  incoming . getCount () ;  return  inCount   ==   1  ?   0   :  inCount ;  }
@ Deprecated  public   boolean   isFastestIntervalExplicitlySet ()   {  return  true ;  }
private   static   float   hueForPos ( float   x ,  float   y ,  float   radiusPx )   {  final   double   r   =  radiusPx   -   1 ;   
public   static   Object   wrapJsonp ( Request   request ,  GenericEntity < ? >   response ,  @ Nullable   String   callback )   {  if  ( JaxRsUtil . isVariant ( request ,  CustomMediaTypes . APPLICATION_JSONP_TYPE )   ||   ! isNullOrEmpty ( callback ) )   {  callback   =   Optional . ofNullable ( callback ) . orElse ( DEFAULT_JSONP_CALLBACK ) ;  return  new   JSONWrappedObject ( format ( """"%s("""" ,  callback ) ,  """");"""" ,  response . getEntity () ) ;  }   else  {  return  Response . ok ( response ) . build () ;  }  }
@ Override   public   double   getAspectRatio ()   {  if  ( buffersink_ctx   !=   null )   {  AVRational   r   =  av_buffersink_get_sample_aspect_ratio ( buffersink_ctx ) ;  double   a   =  ( double ) r . num ()   /   r . den () ;  return  a   ==   0.0  ?   1.0   :  a ;  }   else  {  return  super . getAspectRatio () ;  }  }
private   void   addAllNotes ( TreeMap < Integer ,  Note >   sortedNotes ,  Song . Builder   songBuilder )   {  int   curPosition   =  0 ;  
@ Override  public   boolean   groupAdd ( String   world ,  String   group ,  String   permission )   {  try  {  PermissionBase   permGroup   =  manager . getGroup ( group ) ;  permGroup . addPerm ( permission ,  world ) ;  return  true ;  }   catch  ( IOException   ex )   {  plugin . getLogger () . log ( Level . SEVERE , String . format ( """"[%s] An error occured while saving perms"""" ,  totalperms . getDescription () . getName () ) ,  ex ) ;  return  false ;  }  }
 <argument pos:start=""""""""956:60"""""""" pos:end=""""""""956:60""""""""><expr pos:start=""""""""956:60"""""""" pos:end=""""""""956:60""""""""><literal type=""""""""number"""""""" pos:start=""""""""956:60"""""""" pos:end=""""""""956:60"""""""">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   Object   targetize ()   {  final   Object   target ;  final   Method   method   =  ( ( MethodSignature )   this . joinpoint . getSignature () ) . getMethod () ;  if  ( Modifier . isStatic ( method . getModifiers () ) )   {  target   =   method . getDeclaringClass () ;  }   else  {  target   =   this . joinpoint . getTarget () ;  }  return  target ;  }
public   void   setResources ( Collection < Resource >   resources )   {  this . resources   =   resources ;  }
private   boolean   isPropertyApplicable ( Schema < ? >   schema ,  DiffContext   context )   {  return  ! ( context . isResponse ()   &&   Boolean . TRUE . equals ( schema . getWriteOnly () ) )  &&   ! ( context . isRequest ()   &&   Boolean . TRUE . equals ( schema . getReadOnly () ) ) ;  }
private   Set < String >   _set ( String ...   args )   {  return  new   LinkedHashSet < String > ( Arrays . asList ( args ) ) ;  }
public   JSONArray   getSubOrgUserStores ( String   switchedM2MToken )   throws  Exception   {  try  ( CloseableHttpResponse   response   =  getResponseOfHttpGet ( userStoreSubOrgBasePath , getHeadersWithBearerToken ( switchedM2MToken ) ) )   {  return  getJSONArray ( EntityUtils . toString ( response . getEntity () ) ) ;  }  }
public   SAML2Configuration   getSAMLConfigurationsForIdPInit ( SAMLConfig   config ) {  SAML2Configuration   idpInitSamlConfig   =  getSAMLConfigurations ( config ) ;  idpInitSamlConfig . getManualConfiguration () . getSingleSignOnProfile () . setEnableIdpInitiatedSingleSignOn ( true ) ;  return  idpInitSamlConfig ;  }
@ Override  public   void   remove ( Markup   markup )   {  backendMap . remove ( markup ) ;  }
protected   static   boolean   isZoomCoverageChart (  Chartable   chartable  )  {  if (  chartable   ==   null  )   return  false ;  CoberturaBuildAction   action   =  chartable . getOwner () . getAction ( CoberturaBuildAction . class ) ;  boolean   zoomCoverageChart   =  false ;  if (  action   !=   null  )  {  return  action . getZoomCoverageChart () ;  }  else {  Log . warn (  """"Couldn't find CoberturaPublisher to decide if the graph should be zoomed""""  ) ;  return  false ;  }  }
@ Test ( alwaysRun   =   true ,  description   =   """"Test create user account associations"""" , dependsOnMethods   =   {  """"testAssociateTwoAccountsAsAdmin""""  } )  public   void   testConnectUserAccount ()   throws  Exception   {  
static   private   String   wrappedMessage ( String   message )   {  return  String . format ( """"[Cobertura] %s%n"""" ,  message ) ;  }
@ Test  public   void   testNPMSeemsCorrect ()   {  File   npm   =  NodeJSManager . getNpmLocation () ;  assertTrue ( npm . isFile () ) ;  assertTrue ( npm . length ()   >   0 ) ;  assertTrue ( Platform . OS_WIN32 . equals ( Platform . getOS () )   ||   Files . isSymbolicLink ( npm . toPath () ) ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  LocalAnalysisScripts   that   =  ( LocalAnalysisScripts )   o ;  return  Objects . equal ( beans ,  that . beans ) ;  }
public   boolean   isIssuesAnnotationPresent ()   {  return  isAnnotationPresent ( Issues . class ) ;  }
public   boolean   accept ( File   dir ,  String   name )   {  name   =   name . toLowerCase () ;  return  name . endsWith ( """".jpg"""" )   ||   name . endsWith ( """".pgm"""" )   ||   name . endsWith ( """".png"""" ) ;  }
public   static   synchronized   boolean   isReceiverRegistered ( BroadcastReceiver   receiver )   {  return  mReceivers . contains ( receiver ) ;  }
public   boolean   isActive ( Context   context )   {  if  ( ! evaluated   &&   evaluation   !=   null )   evaluate ( context ) ;  return  active ;  }
@ Test  public   void   testFactories ()   throws  Exception  {  JacksonInject . Value   v   =  EMPTY . withId ( """"name"""" ) ;  assertNotSame ( EMPTY ,  v ) ;  assertEquals ( """"name"""" ,  v . getId () ) ;  assertSame ( v ,  v . withId ( """"name"""" ) ) ;  JacksonInject . Value   v2   =  v . withUseInput ( Boolean . TRUE ) ;  assertNotSame ( v ,  v2 ) ;  assertFalse ( v . equals ( v2 ) ) ;  assertFalse ( v2 . equals ( v ) ) ;  assertSame ( v2 ,  v2 . withUseInput ( Boolean . TRUE ) ) ;  int   x   =  v2 . hashCode () ;  if  ( x   ==   0 )   {   
public   ClientAuthenticationMethod   name ( String   name )   {  this . name   =   name ;  return  this ;  }
public   KeyAndCert   signCertificate ( String   subject ,  KeyAndCert   signer )   throws  Exception   {  return  signCertificate ( createKeyPair () ,  subject ,  signer ) ;  }
@ Override  public   boolean   playerHas ( String   world ,  String   player ,  String   permission )   {  permission   =   permission . toLowerCase () ;  Map < String ,  Boolean >   playerPermissions   =  this . perms . getPlayerPermissions ( player ,  world ) ;  return  playerPermissions . containsKey ( permission )   &&   playerPermissions . get ( permission ) ;  }
public   AdvancedApplicationConfiguration   skipLoginConsent ( Boolean   skipLoginConsent )   {  this . skipLoginConsent   =   skipLoginConsent ;  return  this ;  }
public   boolean   isFixK5 ()   {  return  ( flags   &   CV_CALIB_FIX_K5 )   !=   0 ;  }
public   IplImage   getDistortMap2 ()   {  initDistortMaps () ;  return  distortMaps2 [ mapsPyramidLevel ] ;  }
@ Deprecated  public   static   String   toString ( final   Object   arg ,  final   boolean   trim )   {  return  Mnemos . toText ( arg ,  trim ,  false ) ;  }
public   static   boolean   hasModel ( ItemStack   stack )  {  return  MODEL_MAP . containsKey ( stack . getItem () ) ;  }
public   void   setEnemies (  List < String >   enemies  )   {  this . enemies   =   enemies ;  }
@ Override  public   void   onClientAvailable ( LocationClientImpl   client ,  ResultProvider < Status >   resultProvider )   throws  RemoteException   {  runnable . run ( client ) ;  resultProvider . onResultAvailable ( Status . SUCCESS ) ;  }
@ Override  public   boolean   equals ( java . lang . Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  AuthenticationType   authenticationType   =  ( AuthenticationType )   o ;  return  Objects . equals ( this . type ,  authenticationType . type )   &&  Objects . equals ( this . properties ,  authenticationType . properties ) ;  }
private   List < JsonProperty >   getChildProperties ( final   PsiElement   element )   {  return  toJsonProperty ( element )  . map ( JsonProperty :: getValue )  . map ( JsonValue :: getChildren )  . map ( Arrays :: asList )  . map ( children  ->   children . stream () . map ( this :: toJsonProperty ) )  . map ( children  ->  children  . filter ( Optional :: isPresent )  . map ( Optional :: get )  . collect ( Collectors . toList () ) )  . orElse ( ImmutableList . of () ) ;  }
public   Voicebank   build ()   {  if  ( newVoicebank . pathToVoicebank   ==   null )   {  
@ Test  void   testDefaultVirtualHostName ()   {  TestPropertyValues . of ( """"spring.application.name:myapp"""" ) . applyTo ( this . context ) ;  setupContext () ;  assertThat ( getInstanceConfig () . getVirtualHostName () ) . as ( """"virtualHostName wrong"""" ) . isEqualTo ( """"myapp"""" ) ;  assertThat ( getInstanceConfig () . getSecureVirtualHostName () ) . as ( """"secureVirtualHostName wrong"""" ) . isEqualTo ( """"myapp"""" ) ;  }
public   Item   getRandomWeapon ( int   level )   {  return  getRandomItem ( """"w"""" ,  level ) ;  }
@ BeforeEach  public   void   setUp ()   {  JMeterUtils . setLocale ( Locale . ENGLISH ) ;  keyFileSerializedConfigElementBeanInfo   =   new   KeyFileSerializedConfigElementBeanInfo () ;  }
public   void   set ( ImageTransformer . Parameters   p )   {  Parameters   pcp   =  ( Parameters ) p ;  if  ( surfaceTransformer   !=   null )   {  surfaceParameters . set ( pcp . getSurfaceParameters () ) ;  surfaceParameters . resetColor ( false ) ;  }  projectorParameters . set ( pcp . getProjectorParameters () ) ;  }
public   void   stop ()   {  if  ( app   !=   null )   {  app . stop () ;  int   attempts   =  5 ;  while  ( app . isRunning ()   &&   attempts   >   0 )   {  attempts   =   attempts   -   1 ;  try  {  Thread . sleep ( 1000 ) ;  }  catch  ( InterruptedException   e )   {  throw  new   IllegalStateException ( e ) ;  }  }  app   =   null ;  }  }
public   ProcessingMessageAssert   hasNullField ( final   String   name )  {  assertThat ( msg . has ( name ) ) . isTrue () ;  assertEquals ( msg . get ( name ) ,  JacksonUtils . nodeFactory () . nullNode () ) ;  return  this ;  }
@ Test  void   otherType_noRequires ()   {  ValidatingVisitor   subject   =  createValidatingVisitor () ;  subject . ifPassesTypeCheck ( JSONObject . class ,  false ,  null ,  onPassConsumer () ) ;  verifyTypeCheckDidNotPass () ;  }
@ Override  public   void   onMessage ( WebSocket   conn ,  ByteBuffer   message )   {  throw  new   Error ( """"Some error"""" ) ;  }
public   SourceQueueWithComplete < SchedulerCommand >   getCommands ()   {  return  this . commands ;  }
private   void   replaceRootElementInNewDocument ( Element   newElement )   {  var   rootElement   =  newDocument . getRootElement () ;  var   content   =  newDocument . content () ;  newDocument . clearContent () ;  for  ( var   node   :  content )   {  if  ( node   ==   rootElement )   {  newDocument . add ( newElement ) ;  }   else  {  newDocument . add ( node ) ;  }  }  }
@ Override  public   void   featureUpdate ( double []   featuerStatistic ,  int   binIndex ,  float   label ,  float   significance ,  float   weight )   {  featuerStatistic [ binIndex   *   super . statsSize ]   +=   ( significance   *   weight ) ;  featuerStatistic [ binIndex   *   super . statsSize   +   1 ]   +=   ( label   *   significance   *   weight ) ;  featuerStatistic [ binIndex   *   super . statsSize   +   2 ]   +=   ( label   *   label   *   significance   *   weight ) ;  }
@ Override  protected   Void   defaultAction ( DocTree   node ,  Void   p )   {  sb . append ( node . toString () ) ;  return  null ;  }
private   ValidationFailureReporter   createFailureReporter ( Schema   schema )   {  if  ( failEarly )   {  return  new   EarlyFailingFailureReporter ( schema ) ;  }  return  new   CollectingFailureReporter ( schema ) ;  }
@ Override  public   int   update ( @ NonNull   Uri   uri ,  @ Nullable   ContentValues   values ,  @ Nullable   String   selection ,  @ Nullable   String []   selectionArgs )   {  return  0 ;  }
@ Override   public   CharIndexer   reindex ( Index   index )   {  return  new   CharRawIndexer ( pointer ,  index ) ;  }
@ Override  public   void   setGroupInfoBoolean ( String   world ,  String   group ,  String   node ,  boolean   value )   {  ApiLayer . setValue ( world ,  CalculableType . GROUP ,  group ,  node ,  String . valueOf ( value ) ) ; ;  }
public   OpenIDConnectConfiguration   idToken ( IdTokenConfiguration   idToken )   {  this . idToken   =   idToken ;  return  this ;  }
@ Override  public   Metadatum   remove ( String   key )   {  return  this . metadata . remove ( key ) ;  }
@ Override   public   ULongIndexer   put ( long   i ,  BigInteger []   l ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  array [ ( int ) index ( i )   +   n ]   =   fromBigInteger ( l [ offset   +   n ] ) ;  }  return  this ;  }
@ Test  public   void   thinResolve ()   {  File   repo   =  new   File ( """"../app/build/thin/root/repository"""" ) ;  assertThat ( repo ) . exists () ;  assertThat ( new   File ( repo ,  """"org/springframework/spring-core"""" ) ) . exists () ;  }
@ Test  public   void   issue458ExclusiveMaximumChanged ()   {  assertOpenApiChangedEndpoints ( """"parameterDiff/issue-458-integer-limits_1.yaml"""" , """"parameterDiff/issue-458-integer-limits_8.yaml"""" ) ;  }
@ Override  public   boolean   process ( String   option ,  List < String >   arguments )   {  outputFileName   =   arguments . get ( 0 ) ;  return  true ;  }
private   List < WebSocketClient >   startNewConnections ( int   numberOfConnections ,  int   port )  throws  URISyntaxException ,  InterruptedException   {  List < WebSocketClient >   clients   =  new   ArrayList < WebSocketClient > ( numberOfConnections ) ;  for  ( int   i   =  0 ;   i   <   numberOfConnections ;   i ++ )   {  WebSocketClient   client   =  new   SimpleClient ( new   URI ( """"ws:
@ AfterClass ( alwaysRun   =   true )  public   void   testClear ()   throws  Exception   {  deleteUser ( user ) ;  deleteApplications () ;  clear () ;  mockApplicationServer . stop () ;  }
public   UntypedActor   create ()   {  return  new   DataLoadWorker ( modelConfig ,  columnConfigList ,  parentActorRef ,  dataFilterRef ) ;  }
@ Test  public   void   hadErrorContainingMatch_pattern_noSuchError ()   {  expectFailure  . whenTesting ()  . about ( compilations () )  . that ( compilerWithError () . compile ( HELLO_WORLD_RESOURCE ) )  . hadErrorContainingMatch ( Pattern . compile ( """"(what|where) is it?"""" ) ) ;  AssertionError   expected   =  expectFailure . getFailure () ;  assertThat ( expected . getMessage () )  . startsWith ( """"Expected an error containing match for /(what|where) is it?/, but only found:\n"""" ) ;  
public   Chain < Boolean >   every ( final   Predicate < T >   pred )   {  return  new   Chain <> ( Underscore . every ( list ,  pred ) ) ;  }
@ Override  protected   void   checkKoKo ( final   ProcessingReport   report )  throws  ProcessingException  {  verify ( report ,  times ( 2 ) ) . error ( same ( MSG ) ) ;  }
public   void   setMetric ( CoverageMetric   metric )   {  this . metric   =   metric ;  }
public   Builder   maxRetries ( Integer   maxRetries )   {  this . maxRetries   =   maxRetries ;  return  this ;  }
private   TokenRequest   createTokenRequest ()   {  return  new   TokenRequest . Builder ()  . grantType ( OAUTH2_GRANT_TYPE_CLIENT_CREDENTIALS )  . scopes ( requestedScopes )  . clientId ( clientId )  . build () ;  }
public   SmoothChasingValue   target ( float   target )   {  this . target   =   target ;  return  this ;  }
@ Override  public   void   onResponse ( Call < ServerFileMetadata >   call ,  Response < ServerFileMetadata >   response )   {  View   fileView   =  fileViewReference . get () ;  if  ( fileView   ==   null )   {  return;  }  if  ( ! file . equals ( fileView . getTag ( ServerFilesMetadataAdapter . Tags . FILE ) ) )   {  return;  }  BusEvent   busEvent   =  new   FileMetadataRetrievedEvent ( file ,  response . body () ,  fileView ,  viewHolder ) ;  BusProvider . getBus () . post ( busEvent ) ;  }
protected   static   boolean   matchOption ( String   given ,  String   expect )   {  return  matchOption ( given ,  expect ,  false ) ;  }
public   String   toTree ()   {  String   str   =  """"[id=""""   +   id   +   """", split=""""   +   split   +   """", predict=""""   +   predict   +   """"]\n"""" ;  if ( this . left   !=   null )   {  str   +=   this . left . toTree () ;  }  if ( this . right   !=   null )   {  str   +=   this . right . toTree () ;  }  return  str ;  }
@ ParameterizedTest  @ MethodSource ( """"notPermittedTypes"""" )  void   notPermittedTypeFailure ( Object   subject )   {  assertThrows ( IllegalArgumentException . class ,  ()  ->  {  new   ValidatingVisitor ( subject ,  reporter ,  ReadWriteValidator . NONE ,  null ,  STRICT ) ;  } ) ;  }
public   void   setBinningMergeEnable ( Boolean   binningMergeEnable )   {  this . binningMergeEnable   =   binningMergeEnable ;  }
 <argument pos:start=""""""""277:57"""""""" pos:end=""""""""277:57""""""""><expr pos:start=""""""""277:57"""""""" pos:end=""""""""277:57""""""""><name pos:start=""""""""277:57"""""""" pos:end=""""""""277:57"""""""">k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Test  void   shouldApplyOneCheckedFunctionAndThenAnotherCheckedFunction ()   throws  Exception   {  final   CheckedFunction < Integer ,  Boolean >   before   =  i  ->   i   %   2   ==   0 ;  final   CheckedFunction < Boolean ,  String >   after   =  Object :: toString ;  final   CheckedFunction < Integer ,  String >   f   =  before . andThen ( after ) ;  assertEquals ( """"true"""" ,  f . apply ( 0 ) ) ;  assertEquals ( """"false"""" ,  f . apply ( 1 ) ) ;  }
@ Override  public   void   refreshAuthToken ()   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: refreshAuthToken"""" ) ;  }
public   boolean   childOfHeadersCollectionFormat ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.*.*.responses.*.headers.*.collectionFormat"""" ) ;  }
public   String   createDomainAPI ( DomainAPICreationModel   domainAPICreationModel )   {  try  {  return  restClient . createDomainAPIResource ( domainAPICreationModel ) ;  }   catch  ( Exception   e )   {  throw  new   RuntimeException ( """"Error while creating domain API """"   +  domainAPICreationModel . getName () ) ;  }  }
@ Override  protected   void   afterHookedMethod ( MethodHookParam   param )   throws  Throwable   {  var   position   =  ( int )   param . args [ 0 ] ;  var   draw   =  ( Drawable )   param . getResult () ;  var   right   =  position   ==   3 ;  if  ( right )   {  if  ( bubbleRightColor   ==   0 )   return;  draw . setColorFilter ( new   PorterDuffColorFilter ( bubbleRightColor ,  PorterDuff . Mode . SRC_IN ) ) ;  }   else  {  if  ( bubbleLeftColor   ==   0 )   return;  draw . setColorFilter ( new   PorterDuffColorFilter ( bubbleLeftColor ,  PorterDuff . Mode . SRC_IN ) ) ;  }  }
public   void   setMaxValue ( int   maxValue )   {  if  ( mMaxValue   ==   maxValue )   {  return;  }  if  ( maxValue   <   0 )   {  throw  new   IllegalArgumentException ( """"maxValue must be >= 0"""" ) ;  }  mMaxValue   =   maxValue ;  if  ( mMaxValue   <   mValue )   {  mValue   =   mMaxValue ;  }  updateWrapSelectorWheel () ;  initializeSelectorWheelIndices () ;  updateInputTextView () ;  tryComputeMaxWidth () ;  invalidate () ;  }
private   synchronized   VideoDecoderFactory   getFactory ()   {  if  ( factory   ==   null )   {  factory   =   new   SoftwareVideoDecoderFactory () ;  }  return  factory ;  }
public   void   setOriginalXml ( InputStream   originalXml )   throws  DocumentException ,  SAXException   {  var   parser   =  new   SAXReader () ;  parser . setFeature ( DISALLOW_DOCTYPE_DECL ,  true ) ;  parser . setMergeAdjacentText ( true ) ;  originalDocument   =   parser . read ( originalXml ) ;  }
@ Override  public   boolean   shouldRequestData ( Accessor < ? >   accessor )   {  Object   target   =  accessor . getTarget () ;  if  ( target   instanceof   EnderChestBlockEntity   ||   target   instanceof   Container )   {  return  true ;  }  return  CommonProxy . hasDefaultItemStorage ( accessor ) ;  }
public   void   setSchemaIndexes ( Map < String ,  Set < String > >   schemaIndexes )   {  this . schemaIndexes   =   schemaIndexes ;  }
@ Override  public   int   hashCode ()   {  return  Arrays . hashCode ( new   Object [] { accountId ,  accountName } ) ;  }
public   CategoriesRes   self ( String   self )   {  this . self   =   self ;  return  this ;  }
public   SMSSender   addPropertiesItem ( Properties   propertiesItem )   {  if  ( this . properties   ==   null )   {  this . properties   =   new   ArrayList < Properties > () ;  }  this . properties . add ( propertiesItem ) ;  return  this ;  }
 <argument pos:start=""""""""105:79"""""""" pos:end=""""""""106:39""""""""><expr pos:start=""""""""105:79"""""""" pos:end=""""""""106:39""""""""><operator pos:start=""""""""105:79"""""""" pos:end=""""""""105:81"""""""">new</operator> <call pos:start=""""""""105:83"""""""" pos:end=""""""""106:39""""""""><name pos:start=""""""""105:83"""""""" pos:end=""""""""105:87"""""""">Field</name><argument_list pos:start=""""""""105:88"""""""" pos:end=""""""""106:39"""""""">(
@ Override  public   Optional < Object >   getTrackableSession ( final   WebContext   context )   {  final   String   sessionId   =  getSessionIdFromSessionOrRequest ( context ) ;  LOGGER . debug ( """"Return trackable session: {}"""" ,  sessionId ) ;  return  Optional . ofNullable ( sessionId ) ;  }
@ Override   public   float   getFloat ( long   i )   {  return  buffer . getFloat ( ( int ) i ) ;  }
public   static   < T >   Change < T >   removed ( T   oldValue )   {  return  new   Change <> ( oldValue ,  null ,  Type . REMOVED ) ;  }
@ NonNull  public   byte []   getAuthenticatorData ()   {  return  authenticatorData ;  }
public   final   void   setOwner ( final   BufferedFloatMLDataSet   theOwner )   {  this . owner   =   theOwner ;  }
@ Subscribe  public   void   onAppSelected ( AppSelectedEvent   event )   {  setUpApp ( event . getApp () ) ;  }
@ Override  public   void   onBackPressed ()   {  if  ( backPressedTime   +   2000   >   System . currentTimeMillis () )   {  if  ( backToast   !=   null )  backToast . cancel () ;  super . onBackPressed () ;  return;  }   else  {  backToast   =   Toast . makeText ( getBaseContext () ,  R . string . message_toast_press_back_again ,  Toast . LENGTH_SHORT ) ;  backToast . show () ;  }  backPressedTime   =   System . currentTimeMillis () ;  }
 <argument pos:start=""""""""231:55"""""""" pos:end=""""""""231:57""""""""><expr pos:start=""""""""231:55"""""""" pos:end=""""""""231:57""""""""><literal type=""""""""number"""""""" pos:start=""""""""231:55"""""""" pos:end=""""""""231:57"""""""">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type=""""""""line"""""""" pos:start=""""""""231:61"""""""" pos:end=""""""""231:89"""""""">
@ Override  public   void   initializeDefaultPreferences ()   {  JSTSPreferenceServerConstants . initializeDefaultPreferences () ;  }
private   Optional < EnterpriseResponse >   getEnterprise ( InetAddress   ipAddress )   throws  IOException ,  GeoIp2Exception   {  LookupResult < EnterpriseResponse >   result   =  this . get ( ipAddress , EnterpriseResponse . class , DatabaseType . ENTERPRISE ) ;  EnterpriseResponse   response   =  result . getModel () ;  if  ( response   ==   null )   {  return  Optional . empty () ;  }  return  Optional . of ( new   EnterpriseResponse ( response , result . getIpAddress () , result . getNetwork () , locales ) ) ;  }
public   synchronized   static   Method   loadOnTabItemAddMethod ( ClassLoader   loader )   throws  Exception   {  return  UnobfuscatorCache . getInstance () . getMethod ( loader ,  ()  ->  {  var   result   =  findFirstMethodUsingStrings ( loader ,  StringMatchType . Contains ,  """"Maximum number of items supported by"""" ) ;  if  ( result   ==   null )   throw  new   RuntimeException ( """"OnTabItemAdd method not found"""" ) ;  return  result ;  } ) ;  }
@ JsonProperty ( """"represented_country"""" )  public   RepresentedCountry   getRepresentedCountry ()   {  return  this . representedCountry ;  }
@ Test  public   void   thatLinkDefinitionKeysAreSuggested ()   {  getCaretCompletions ( """"component_link"""" )  . assertContains ( """"$ref"""" , """"operationRef"""" , """"operationId"""" , """"parameters"""" , """"requestBody"""" , """"description"""" , """"server"""" )  . isOfSize ( 7 ) ;  }
@ Override  public   void   destroy ()   {  try  {  logger . info ( """"Closing Elasticsearch Low Level client"""" ) ;  if  ( lowLevelClient   !=   null )   {  lowLevelClient . close () ;  }  }   catch  ( final   Exception   e )   {  logger . error ( """"Error closing Elasticsearch Low Level client: """" ,  e ) ;  }  }
@ Test  public   void   ListAttachmentFilesTest ()   {  File []   attachmentFiles   =  new   File [] { new   File ( """"a-attachment"""" ) , new   File ( """"b-attachment.xml"""" ) } ;  when ( directory . listFiles ( any ( FileFilter . class ) ) ) . thenReturn ( attachmentFiles ) ;  assertThat ( listAttachmentFiles ( directory ) . size () ,  equalTo ( attachmentFiles . length ) ) ;  }
@ Override  public   I2C   create ( I2CConfig   config )   {  synchronized  ( this . piGpio )   {  
public   void   setColumns ( int   columns )   {  firePropertyChange ( """"columns"""" ,  this . columns ,  this . columns   =   columns ) ;  }
@ Override  public   Optional < TreePath >   visitLabeledStatement ( @ Nullable   LabeledStatementTree   node ,  @ Nullable   Void   v )   {  if  ( node   ==   null )   {  return  Optional . empty () ;  }   else if  ( isMatch ( node ,  node . getLabel () ) )   {  return  currentPathPlus ( node ) ;  }  return  super . visitLabeledStatement ( node ,  v ) ;  }
@ Override  public   void   setGroupInfoBoolean ( String   world ,  String   group ,  String   node ,  boolean   defaultValue )   {  throw  new   UnsupportedOperationException ( """"rscPermissions does not support info nodes"""" ) ;  }
@ Test  public   void   testRandomSecureServerPort ()   {  final   Integer   port   =  9000 ;  String   host   =  domainWithoutPort   +   """":""""   +   port . toString () ;  when ( requestMock . secure () ) . thenReturn ( true ) ;  when ( requestMock . host () ) . thenReturn ( host ) ;  assertEquals ( port . intValue () ,  webContext . getServerPort () ) ;  }
default   int   writeRegister ( int   register ,  int   b )   {  return  writeRegister ( register ,  ( byte ) b ) ;  }
@ Override  public   Map < String ,  Object >   getNameValuePairs ()  {  return  pairs ;  }
private   String   toIndentedString ( Object   o )   {  if  ( o   ==   null )   {  return  """"null"""" ;  }  return  o . toString () . replace ( """"\n"""" ,  """"\n"""" ) ;  }
@ Test  public   void   ipv4LengthFailure ()   {  assertFailure ( IPV6_ADDR ,  new   IPV4Validator () , """"[2001:db8:85a3:0:0:8a2e:370:7334] is not a valid ipv4 address"""" ) ;  }
@ ApiModelProperty ( required   =   true ,  value   =   """"User store attribute to be mapped to."""" )  @ JsonProperty ( """"mappedAttribute"""" )  public   String   getMappedAttribute ()   {  return  mappedAttribute ;  }
protected   Response   getResponseOfGet ( String   endpointUri )   {  return  given () . auth () . preemptive () . basic ( authenticatingUserName ,  authenticatingCredential )  . contentType ( ContentType . JSON )  . header ( HttpHeaders . ACCEPT ,  ContentType . JSON )  . log () . ifValidationFails ()  . filter ( validationFilter )  . when ()  . get ( endpointUri ) ;  }
@ Override  public   TrackItemType   getType ()   {  return  TrackItemType . NOTE ;  }
@ Override   public   DoubleIndexer   put ( long   i ,  long   j ,  long   k ,  double   d )   {  putRaw ( index ( i ,  j ,  k ) ,  d ) ;  return  this ;  }
public   static   SnapToRoadsApiRequest   snapToRoads ( GeoApiContext   context ,  LatLng ...   path )   {  return  snapToRoads ( context ,  false ,  path ) ;  }
public   void   fillAsString ( String   preferenceId )   {  String   preferenceValue   =  store . getString ( preferenceId ) ;  fillSetting ( preferenceId ,  preferenceValue ) ;  }
public   void   removeSecondaryButton ( LinearLayout   parent ,  View   v )  {  int   id   =  ( v   !=   null )  ?   v . getId ()   :  - 1 ;  Button   bt   =  ( Button )   parent . findViewById ( CUSTOMLISTUPDATEBUTTONID ) ;  CheckBox   cb   =  ( CheckBox )   parent . findViewById ( EXCLUDESYSTEMCHECKBOXID ) ;  if ( bt   !=   null   &&   id   !=   CUSTOMLISTUPDATEBUTTONID )  {  parent . removeView ( bt ) ;  }  if ( cb   !=   null   &&   id   !=   EXCLUDESYSTEMCHECKBOXID )  {  parent . removeView ( cb ) ;  }  }
private   void   fireFinishTest ()   {  getLifecycle () . fire ( new   TestCaseFinishedEvent () ) ;  }
public   Region   createNew ( Set < String >   categories )   {  clear () ;  if  ( categories . isEmpty () )   {  return  new   ScrollPane () ;  }  if  ( categories . size ()   ==   1 )   {  String   category   =  categories . iterator () . next () ;  ScrollPane   table   =  newTable ( category ,  model . getLyricData ( category ) ) ;  localizer . localize ( this ) ;  return  table ;  }  
public   void   cancel ()   {  try  {  task . cancel () ;  }   catch  ( DuplicateTaskCompletionException   ignored )   {  }  }
@ Test  public   void   typeBasedMultiplexerTest ()   {  new   TypeBasedMultiplexer ( new   JSONObject () )  . ifObject () . then ( jsonObj  ->  {  } )  . ifIs ( JSONArray . class ) . then ( jsonArr  ->  {  } )  . orElse ( obj  ->  {  } ) ;  new   TypeBasedMultiplexer ( new   JSONObject () )  . ifObject () . then ( jsonObj  ->  {  } )  . ifIs ( JSONArray . class ) . then ( jsonArr  ->  {  } )  . requireAny () ;  }
public   UserIdentityClaimDTO []   getUserIdentitySupportedClaims ( String   dialect )   throws  RemoteException   {  UserIdentityClaimDTO []   claims   =  null ;  try  {  claims   =   infoRecoveryStub . getUserIdentitySupportedClaims ( dialect ) ;  }   catch  ( UserInformationRecoveryServiceIdentityExceptionException   e )   {  e . printStackTrace () ;  }  return  claims ;  }
@ Override  protected   TokenStreamComponents   createComponents ( String   fieldName )   {  Tokenizer   tokenizer   =  new   WhitespaceTokenizer () ;  TokenStream   result   = new   PatternReplaceFilter ( tokenizer , Pattern . compile ( """"^([\\.!\\?,:;\""""'\\(\\)]*)(.*?)([\\.!\\?,:;\""""'\\(\\)]*)$"""" ) ,  """"$2"""" ,  true ) ;  result   =   new   PatternReplaceFilter ( result ,  Pattern . compile ( """"'s"""" ) ,  """"s"""" ,  true ) ;  return  new   TokenStreamComponents ( tokenizer ,  result ) ;  }
public   void   setFixPrincipalPoint ( boolean   fixPrincipalPoint )   {  if  ( fixPrincipalPoint )   {  flags   |=   CV_CALIB_FIX_PRINCIPAL_POINT ;  }   else  {  flags   &=   ~ CV_CALIB_FIX_PRINCIPAL_POINT ;  }  }
public   ChangedOperation   setDescription ( final   ChangedMetadata   description )   {  this . description   =   description ;  return  this ;  }
@ Test  public   void   dateTimeWithSevenDigitsInSecFracSuccess ()   {  assertSuccess ( """"2015-02-28T11:00:00.1234567Z"""" ,  new   DateTimeFormatValidator () ) ;  }
public   KeyPos   with_dir ( int   d )  {  return  new   KeyPos ( row ,  col ,  d ) ;  }
public   void   setDeviceFilename ( String   deviceFilename )   throws  PropertyVetoException   {  setDeviceFile ( deviceFilename   ==   null   ||   deviceFilename . length ()   ==   0  ?  null   :  new   File ( deviceFilename ) ) ;  }
@ Test  void   testDownWhenBlockingIndicatorDownAndReactiveUp ()   {  initialize ( ReactiveUpHealthConfiguration . class ,  ReactiveDownHealthConfiguration . class ) ;  InstanceStatus   status   =  this . healthCheckHandler . getStatus ( InstanceStatus . UNKNOWN ) ;  assertThat ( status ) . isEqualTo ( InstanceStatus . DOWN ) ;  }
private   DataSource   source ()   {  final   BoneCPDataSource   src   =  new   BoneCPDataSource () ;  src . setDriverClass ( this . container . getDriverClassName () ) ;  src . setJdbcUrl ( this . container . getJdbcUrl () ) ;  src . setUser ( this . container . getUsername () ) ;  src . setPassword ( this . container . getPassword () ) ;  src . setPartitionCount ( 3 ) ;  src . setMaxConnectionsPerPartition ( 1 ) ;  src . setMinConnectionsPerPartition ( 1 ) ;  src . setAcquireIncrement ( 1 ) ;  src . setDisableConnectionTracking ( true ) ;  return  src ;  }
private   static   String   getSecKey ( String   seckey )   {  return  """"Sec-WebSocket-Accept: """"   +   generateFinalKey ( seckey )   +   """"\r\n"""" ;  }
@ Override  public   DigitalInputConfigBuilder   pull ( PullResistance   value )   {  this . properties . put ( DigitalInputConfig . PULL_RESISTANCE_KEY ,  value . toString () ) ;  return  this ;  }
@ Override   public   int   sizeof ()   {  return  getClass ()   ==   FloatPointer . class  ?   Float . SIZE   /   Byte . SIZE   :  super . sizeof () ;  }
public   static   IntIndexer   create ( int []   array ,  Index   index )   {  return  new   IntArrayIndexer ( array ,  index ) ;  }
@ Override  public   String   getFieldValue ( String   name )   {  String   s   =  map . get ( name ) ;  if  ( s   ==   null )   {  return  """""""" ;  }  return  s ;  }
protected   void   validatePin ( int   pin ,  boolean   userPin )   throws  IllegalArgumentException   {  int   min   =  PI_MIN_GPIO ;  int   max   =  ( ( userPin  ?   PI_MAX_USER_GPIO   :  PI_MAX_GPIO ) ) ;  if ( pin   <  min   ||   pin  >   max )  throw  new   IllegalArgumentException ( """"Invalid PIN number: """"   +   pin   +   """"; (supported pins: """"   +   min   +   """"-""""   +   max   +   """")"""" ) ;  }
private   String   getSecToken ( String   username ,  String   password )   throws  UnsupportedEncodingException   {  String   token   =  username   +   """":""""   +   password ;  return  URLEncoder . encode ( new   String ( java . util . Base64 . getEncoder () . encode ( token . getBytes ( StandardCharsets . UTF_8 ) ) ) , StandardCharsets . UTF_8 . name () ) ;  }
List < ModelProblemCollectorRequest >   getProblems ()   {  return  this . problems ;  }
private   boolean   isSonarConsoleSettings ()   {  if  ( null   ==   mySonarConsoleSettings )   return  false ;  SonarConsoleSettings   state   =  mySonarConsoleSettings . getState () ;  return  null   ==   state   ||   ! state . equals ( this . toSonarConsoleSettings () ) ;  }
public   Builder   requestedScopes ( List < String >   requestedScopes )   {  this . requestedScopes   =   requestedScopes ;  return  this ;  }
@ NonNull  public   static   AuthenticatorAssertionResponse   deserializeFromBytes ( byte []   serializedBytes )   {  return  SafeParcelableSerializer . deserializeFromBytes ( serializedBytes ,  CREATOR ) ;  }
@ Override  public   ProviderGroup < I2CProvider >   i2c ()   {  return  providers . i2c () ;  }
@ Override   public   float   get ( long   i ,  long   j )   {  return  toFloat ( array [ ( int ) index ( i ,  j ) ] ) ;  }
@ Override  public   Registry   add ( IO   instance )   throws  IOAlreadyExistsException ,  IOInvalidIDException   {  return  this . registry . add ( instance ) ;  }
public   APIResourceResponse   scopes ( List < ScopeGetModel >   scopes )   {  this . scopes   =   scopes ;  return  this ;  }
@ Test  public   void   combinedSchemaWithMultipleBaseSchemas ()   {  Schema   actual   =  SchemaLoader . load ( get ( """"combinedSchemaWithMultipleBaseSchemas"""" ) ) ;  assertTrue ( actual   instanceof   CombinedSchema ) ;  }
private   String   prettify ( final   ConsumerRecord < Object ,  Object >   consumerRecord )   {  return  """"{ partition: """"   +   consumerRecord . partition ()   +   """", message: { key: """"   +   consumerRecord . key ()  +   """", value: """"   +   consumerRecord . value () . toString ()   +   """" }}"""" ;  }
@ Test  void   disabledViaProperty ()   {  new   ApplicationContextRunner ()  . withConfiguration ( AutoConfigurations . of ( LoadBalancerEurekaAutoConfiguration . class ) )  . withPropertyValues ( """"eureka.client.enabled=false"""" )  . run ( context  ->  {  assertThat ( context ) . doesNotHaveBean ( EurekaLoadBalancerProperties . class ) ;  assertThat ( context ) . doesNotHaveBean ( LoadBalancerZoneConfig . class ) ;  } ) ;  }
@ Override  public   void   setGroupInfoString ( String   world ,  String   group ,  String   node ,  String   value )   {  setGroupInfo ( world ,  group ,  node ,  value ) ;  }
public   static   Long   getLong ( String   propertyName ,  Long   defValue )   {  String   propertyValue   =  getProperty ( propertyName ) ;  return  ( propertyValue   ==   null )  ?   defValue   :  Long . valueOf ( propertyValue ) ;  }
ScriptBuilder   setFileCoverage ( String   fileCoverage )   {  this . fileCoverage   =   fileCoverage ;  return  this ;  }
public   Authenticator   image ( String   image )   {  this . image   =   image ;  return  this ;  }
private   void   updateScheduleData ( View   scheduleView ,  int   id )   {  try  {  final   Schedule   schedule   =  getScheduleDataFromView ( scheduleView ,  id ) ;  UpdateScheduleRunnable   updateScheduleRunnable   = new   UpdateScheduleRunnable ( this ,  DATABASE_NAME ,  schedule ) ;  new   Thread ( updateScheduleRunnable ) . start () ;  setTimeLeftTextView ( schedule ,  scheduleView ) ;  }   catch  ( SchedulingException   e )   {  Log . e ( TAG ,  String . format ( """"Unable to update schedule %s"""" , id ) ) ;  Toast . makeText ( this ,  String . format ( """"Unable to update schedule %s"""" ,  id ) , Toast . LENGTH_LONG ) . show () ;  }  }
public   ValidationConfigurationBuilder   setSyntaxMessages ( final   MessageBundle   syntaxMessages )  {  BUNDLE . checkNotNull ( syntaxMessages ,  """"nullMessageBundle"""" ) ;  this . syntaxMessages   =   syntaxMessages ;  return  this ;  }
default   Integer   sanitize ( Integer   value ) {  if ( value   ==   null )  return  0 ;  
String   label_of_layout ( Layout   l )  {  if  ( l   instanceof   NamedLayout )  {  String   lname   =  ( ( NamedLayout ) l ) . name ;  int   value_i   =  get_layout_names ( getContext () . getResources () ) . indexOf ( lname ) ;  return  value_i   <   0  ?   lname   :  _layout_display_names [ value_i ] ;  }  else if  ( l   instanceof   CustomLayout )  {  
@ Deprecated  public   static   void   showErrorNotification ( int   errorCode ,  Context   context )   {  
@ Override  public   float []   forward ( float []   input )   {  float []   outputs   =  new   float [ input . length ] ;  for ( int   i   =  0 ;   i   <   input . length ;   i ++ )   {  outputs [ i ]   =   ( float )   Math . tanh ( input [ i ] ) ;  }  return  outputs ;  }
@ Test  public   void   testAcceptProvidedExtensionAsClient ()   {  PerMessageDeflateExtension   deflateExtension   =  new   PerMessageDeflateExtension () ;  assertTrue ( deflateExtension . acceptProvidedExtensionAsClient ( """"permessage-deflate"""" ) ) ;  assertTrue ( deflateExtension  . acceptProvidedExtensionAsClient ( """"some-other-extension, permessage-deflate"""" ) ) ;  assertFalse ( deflateExtension . acceptProvidedExtensionAsClient ( """"wrong-permessage-deflate"""" ) ) ;  }
@ Override   public   IntIndexer   put ( long   i ,  int []   m ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  array [ ( int ) index ( i )   +   n ]   =   m [ offset   +   n ] ;  }  return  this ;  }
@ Test  void   shouldVerifyCacheId ()   {  assertEquals ( """"EHCACHE"""" ,  cache . getId () ) ;  }
public   void   setTrustStore ( File   trustStore ,  String   password )   {  property ( """"server.ssl.trust-store"""" ,  pathOf ( trustStore ) ) ;  property ( """"server.ssl.trust-store-type"""" ,  """"PKCS12"""" ) ;  property ( """"server.ssl.trust-store-password"""" ,  password ) ;  }
@ ApiModelProperty ( example   =   """"3600"""" ,  value   =   """""""" )  @ JsonProperty ( """"defaultApplicationAccessTokenExpiryTime"""" )  @ Valid  public   String   getDefaultApplicationAccessTokenExpiryTime ()   {  return  defaultApplicationAccessTokenExpiryTime ;  }
 <argument pos:start=""""""""581:74"""""""" pos:end=""""""""581:88""""""""><expr pos:start=""""""""581:74"""""""" pos:end=""""""""581:88""""""""><name pos:start=""""""""581:74"""""""" pos:end=""""""""581:88""""""""><name pos:start=""""""""581:74"""""""" pos:end=""""""""581:85"""""""">classesArray</name><index pos:start=""""""""581:86"""""""" pos:end=""""""""581:88"""""""">[<expr pos:start=""""""""581:87"""""""" pos:end=""""""""581:87""""""""><name pos:start=""""""""581:87"""""""" pos:end=""""""""581:87"""""""">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start=""""""""581:92"""""""" pos:end=""""""""585:13"""""""">{<block_content pos:start=""""""""582:17"""""""" pos:end=""""""""584:22"""""""">
public   LocationAvailability   getLocationAvailability ()   throws  RemoteException   {  return  getServiceInterface () . getLocationAvailabilityWithPackage ( getContext () . getPackageName () ) ;  }
public   boolean   isVertical ()   {  return  this   ==   UP   ||   this   ==   DOWN ;  }
private   void   init () {  picker . setMinValue ( 0 ) ;  picker . setMaxValue ( 0 ) ;  values   =   getValues () ;  picker . setDisplayedValues ( getDisplayValues ( values ) ) ;  picker . setMaxValue ( values . size ()   - 1 ) ;  }
public   static   boolean   isType ( TypeMirror   type ,  TypeKind   kind )   {  if  ( type . getKind ()   ==   kind )   {  return  true ;  }  if  ( type . getKind ()   ==   TypeKind . ARRAY )   {  return  isType ( ( ( ArrayType )   type ) . getComponentType () ,  kind ) ;  }  return  false ;  }
@ JsonProperty ( """"connection_type"""" )  public   ConnectionType   getConnectionType ()   {  return  this . connectionType ;  }
private   static   String   apply_fn_keyevent ( int   code )  {  switch  ( code )  {  case  KeyEvent . KEYCODE_DPAD_UP :   return  """"page_up"""" ;  case  KeyEvent . KEYCODE_DPAD_DOWN :   return  """"page_down"""" ;  case  KeyEvent . KEYCODE_DPAD_LEFT :   return  """"home"""" ;  case  KeyEvent . KEYCODE_DPAD_RIGHT :   return  """"end"""" ;  case  KeyEvent . KEYCODE_ESCAPE :   return  """"insert"""" ;  case  KeyEvent . KEYCODE_TAB :   return  """"\\t"""" ;  case  KeyEvent . KEYCODE_PAGE_UP :  case  KeyEvent . KEYCODE_PAGE_DOWN :  case  KeyEvent . KEYCODE_MOVE_HOME :  case  KeyEvent . KEYCODE_MOVE_END :   return  """"removed"""" ;  default:   return  null ;  }  }
public   String   getLocaleLanguageTag ()   {  return  localeProp . getLanguageTag () ;  }
@ Override   boolean   canEqual ( Object   o )   {  return  o   instanceof   CombinedSchemaMismatchEvent ;  }
public   SAMLAssertionConfiguration   nameIdFormat ( String   nameIdFormat )   {  this . nameIdFormat   =   nameIdFormat ;  return  this ;  }
public   void   setWavtool ( String   wavtool )   {  preferences . put ( """"wavtool"""" ,  wavtool ) ;  }
@ Override  public   float [] []   initWeight ( int   row ,  int   col )   {  float [] []   weight   =  new   float [ row ] [ col ] ;  this . randomize . randomize ( weight ) ;  return  weight ;  }
public   void   characters (  char []   ch ,  int   start ,  int   length )   {  String   s   =  new   String (  ch ,  start ,  length ) ;  if  (  current   instanceof   Text )   {  ( (   Text )   current ) . appendData (  s ) ;  }   else  {  Text   text   =  doc . createTextNode (  s ) ;  current . appendChild (  text ) ;  current   =   text ;  }  }
@ Override  public   boolean   containsAll ( @ NonNull   Collection < ? >   c )   {  return  set . containsAll ( c ) ;  }
public   void   writeToParcel ( Parcel   dest ,  int   flags )   {  if  ( mResults   !=   null )   {  dest . writeInt ( mResults . length ) ;  for  ( int   i   =  0 ;   i   <   mResults . length ;   i ++ )   {  ScanData   result   =  mResults [ i ] ;  result . writeToParcel ( dest ,  flags ) ;  }  }   else  {  dest . writeInt ( 0 ) ;  }  }
private   boolean   isRunning ()   {  if  ( app   ==   null )   {  return  false ;  }  Method   method   =  ReflectionUtils . findMethod ( this . app . getClass () ,  """"isRunning"""" ) ;  return  ( Boolean )   ReflectionUtils . invokeMethod ( method ,  this . app ) ;  }
@ Override  public   void   untrashResource ( UntrashResourceRequest   request ,  IDriveServiceCallbacks   callbacks )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: untrashResource"""" ) ;  }
 <argument pos:start=""""""""125:49"""""""" pos:end=""""""""125:50""""""""><expr pos:start=""""""""125:49"""""""" pos:end=""""""""125:50""""""""><literal type=""""""""number"""""""" pos:start=""""""""125:49"""""""" pos:end=""""""""125:50"""""""">0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ DataBoundSetter  public   void   setFailedTotalMedium ( final   Integer   failedTotalMedium )   {  this . failedTotalMedium   =   failedTotalMedium ;  }
 <argument pos:start=""""""""204:92"""""""" pos:end=""""""""204:95""""""""><expr pos:start=""""""""204:92"""""""" pos:end=""""""""204:95""""""""><literal type=""""""""null"""""""" pos:start=""""""""204:92"""""""" pos:end=""""""""204:95"""""""">null</literal></expr></argument>
@ Test  void   rendersXmlDeclaration ()   {  MatcherAssert . assertThat ( """"Can't render XML declaration"""" , new   Xembler ( new   Directives ( """"ADD 'f';"""" ) ) . xmlQuietly () , Matchers . equalTo ( """"<?xml version=\""""1.0\"""" encoding=\""""UTF-8\""""?>\n<f/>"""" ) ) ;  }
@ Override  public   String   toString ()   {  return  """"Info [lat=""""   +   lat   +   """", lon=""""   +   lon   +   """", time=""""   +   time  +   """", value=""""   +   value   +   """", id=""""   +   id   +   """"]"""" ;  }
@ Override  public   String   getGroupSuffix ( String   world ,  String   group )   {  return  getGroupInfoString ( world ,  group ,  CHAT_SUFFIX_KEY ,  null ) ;  }
public   WebResourceResponse   shouldInterceptRequest ( String   url ,  WebResourceResponse   response ,  String   method )   {  return  response ;  }
public   void   testRenameLocalParameterReference ()   {  testRename ( """"NewParameter"""" ,  """"rename_component_parameter.yaml"""" ,  """"rename_component_parameter_after.yaml"""" ) ;  }
@ Override  public   I2C   initialize ( Context   context )   throws  InitializeException   {  super . initialize ( context ) ;  return  this ;  }
@ Override  public   void   removeDiscoveryManagerListener ( IDiscoveryManagerListener   listener )   {  Log . d ( TAG ,  """"unimplemented Method: removeDiscoveryManagerListener"""" ) ;  this . discoveryManagerListeners . remove ( listener ) ;  }
@ RequiresApi ( VERSION_CODES . R )  public   void   setAllowed ( boolean   allowed )   {  throw  new   UnsupportedOperationException () ;  }
default   boolean   isEnabled ( IToggleableProvider   provider )   {  if  ( ! IWailaConfig . get () . accessibility () . getEnableAccessibilityPlugin ()   &&   JadeIds . isAccess ( provider . getUid () ) )   {  return  false ;  }  return  IWailaConfig . get () . plugin () . get ( provider ) ;  }
public   boolean   spansOneFullDay ()   {  return  entryDate . plusDays ( 1 ) . isEqual ( event . getEndDate () ) ;  }
@ Override  public   IExtension   copyInstance ()   {  return  new   TestExtension () ;  }
public   void   requestPreAuthorizedTemporaryExposureKeyRelease ( RequestPreAuthorizedTemporaryExposureKeyReleaseParams   params )   throws  RemoteException   {  getServiceInterface () . requestPreAuthorizedTemporaryExposureKeyRelease ( params ) ;  }
@ Override  public   String   toString ()   {  return  """"HintRequest{""""   +  """"hintPickerConfig=""""   +   hintPickerConfig   +  """", emailAddressIdentifierSupported=""""   +   emailAddressIdentifierSupported   +  """", phoneNumberIdentifierSupported=""""   +   phoneNumberIdentifierSupported   +  """", accountTypes=""""   +   Arrays . toString ( accountTypes )   +  """", idTokenRequested=""""   +   idTokenRequested   +  """", serverClientId='""""   +   serverClientId   +   '\''   +  """", idTokenNonce='""""   +   idTokenNonce   +   '\''   +  '}' ;  }
public   String   getPlayerGroup ( String   player ,  String   world )   {  String   group   =  authority . getPrimaryGroup ( world ,  player ) ;  if  ( group   !=   null )   {  return  group . toLowerCase () ;  }  return  null ;  }
public   void   setRemovedScopes ( List < String >   removedScopes )   {  this . removedScopes   =   removedScopes ;  }
@ Test ( dependsOnMethods   =   """"testDeleteUserSessionById"""" )  public   void   testDeleteUserSessions ()   {  getResponseOfDelete ( this . sessionsEndpointURI )  . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT ) ;  getResponseOfGet ( this . sessionsEndpointURI )  . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_OK )  . body ( """"size()"""" ,  is ( 0 ) ) ;  }
default   boolean   childOfLicense ( PsiElement   psiElement )   {  return  false ;  }
public   void   setProgress ( double   progress )   {  if  ( curProgress   !=   null )   {  curProgress . set ( progress ) ;  }  }
@ Nullable  @ Override  public   List < License >   loadInBackground ()   {  List < License >   licenses   =  LicenseUtil . getLicensesFromMetadata ( getContext () ) ;  try  {  OssLicensesServiceImpl   service   =  new   OssLicensesServiceImpl ( getContext () ) ;  Task < List < License > >   licensesTask   =  service . getLicenseList ( licenses ) ;  return  Tasks . await ( licensesTask ) ;  }   catch  ( Exception   e )   {  Log . w ( TAG ,  """"Error getting license list from service."""" ,  e ) ;  }  return  licenses ;  }
@ Test ( alwaysRun   =   true ,  description   =   """"Test delete user account association"""" , dependsOnMethods   =   {  """"switchLoggedInUser""""  } )  public   void   testDeleteUserAccountConnection ()   throws  Exception   {  serviceClient . deleteUserAccountAssociation ( USER_1 ) ;  UserAccountAssociationDTO   []   associations   =  serviceClient . getAccountAssociationsOfUser () ;  Assert . assertFalse ( isAssociationAvailable ( associations ,  USER_1 ) ,  """"Unable to delete user association of a """"   +  """"super tenant user"""" ) ;  }
@ Override  public   int   getRateLimiterFullFetchAverageRate ()   {  return  rateLimiterFullFetchAverageRate ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  RoleItemAddGroupobj   roleItemAddGroupobj   =  ( RoleItemAddGroupobj )   o ;  return  Objects . equals ( this . op ,  roleItemAddGroupobj . op )   &&  Objects . equals ( this . path ,  roleItemAddGroupobj . path )   &&  Objects . equals ( this . value ,  roleItemAddGroupobj . value ) ;  }
public   void   setVisitTime ( long   visitTime )   {  this . visitTime   =   visitTime ;  }
default   List < ResourceLocation >   mappedIds ()   {  return  Streams . stream ( Objects . requireNonNull ( idMapper () ) )  . map ( IJadeProvider :: getUid )  . toList () ;  }
private   static   void   parseWrongMacro ( String   macroString ,  MacroExceptionCode   expectedCode )   {  parseWrongMacro ( """"Wrong macro parse error"""" ,  macroString ,  expectedCode ) ;  }
public   static   int   serWrite ( int   handle ,  byte []   buf ,  int   count ) {  return  serWrite ( handle ,  buf ,  0 ,  count ) ;  }
@ Override  public   void   createFieldEditors ()   {  addField ( new   BooleanFieldEditor ( HTML_PREFERENCES_VALIDATE_SCRIPTS , Messages . HTMLValidationPreferencePage_validate_scripts ,  getFieldEditorParent () ) ) ;  addField ( new   BooleanFieldEditor ( HTML_PREFERENCES_VALIDATE_STYLES , Messages . HTMLValidationPreferencePage_validate_styles ,  getFieldEditorParent () ) ) ;  }
private   void   setUpVideoPlayer ()   {  final   ArrayList < String >   args   =  new   ArrayList <> () ;  args . add ( Constants . videoVLCLibArg ) ;  mLibVLC   =   new   LibVLC ( this ,  args ) ;  mMediaPlayer   =   new   MediaPlayer ( mLibVLC ) ;  }
@ Override  public   String   toString ()  {  return  """"<""""   +   el . getTagName ()   +   """" id=\""""""""   +   HTMLNorm . getAttribute ( el ,  """"id"""" )   +  """"\"""" class=\""""""""    +   HTMLNorm . getAttribute ( el  , """"class"""" )   +   """"\"""">"""" ;  }
@ Override  public   void   run ()   {  try  {  while  ( ! isInterrupted () )   {  _client . createPersistent ( """"/test"""" ) ;  _client . delete ( """"/test"""" ) ;  }  }   catch  ( ZkInterruptedException   e )   {  
public   static   Value   forPattern ( String   p )   {  return  new   Value ( p ,  null ,  null ,  null ,  null ,  Features . empty () ,  null ) ;  }
 <argument pos:start=""""""""857:67"""""""" pos:end=""""""""857:68""""""""><expr pos:start=""""""""857:67"""""""" pos:end=""""""""857:68""""""""><literal type=""""""""string"""""""" pos:start=""""""""857:67"""""""" pos:end=""""""""857:68"""""""">""""""""""""""""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   long   getRandomCompany ( RandomGeneratorFarm   randomFarm ,  int   countryId )   {  int   locId   =  countryId ;  List < Integer >   countries   =  placeDictionary . getCountries () ;  if  ( randomFarm . get ( RandomGeneratorFarm . Aspect . UNCORRELATED_COMPANY ) . nextDouble ()   <=   probUnCorrelatedCompany )   {  locId   =   countries . get ( randomFarm . get ( RandomGeneratorFarm . Aspect . UNCORRELATED_COMPANY_LOCATION )  . nextInt ( countries . size () ) ) ;  }  
@ Test  void   buildsTextFromIntArray ()   {  final   Object [] []   pairs   =  { new   Object []   { new   int [ 0 ] ,  MnemosTest . EMPTY_ARRAY } , new   Object []   { new   int []   { 1 } ,  """"[1]"""" } , new   Object []   { new   int []   { 1 ,  2 ,  3 } ,  """"[1, 2, 3]"""" } ,} ;  this . validateText ( pairs ) ;  }
public   void   setRoleUIPermission ( String   roleName ,  String []   rawResources )  throws  RemoteException ,  UserAdminUserAdminException   {  userAdminStub . setRoleUIPermission ( roleName ,  rawResources ) ;  }
@ Test  public   void   testUpdateExistingLocalClaimUri ()   throws  IOException   {  String   localClaimUri   =  """"http:
private   static   String   getSubjectName ( final   String   importedClass ,  final   BaseSchemaMetadata < ?   extends  SchemaMetadataAdapter >   metadata )   {  final   List < SchemaReference >   references   =  metadata . getSchemaMetadataAdapter () . getReferences () ;  String   subjectName   =  null ;  for  ( final   SchemaReference   schemaReference   :  references )   {  if  ( schemaReference . getName () . equals ( importedClass ) )   {  subjectName   =   schemaReference . getSubject () ;  break;  }  }  return  Objects . requireNonNullElse ( subjectName ,  importedClass ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  Link   link   =  ( Link )   o ;  return  Objects . equals ( this . href ,  link . href )   &&  Objects . equals ( this . rel ,  link . rel ) ;  }
@ Override  public   SoundInstance . Attenuation   getAttenuation ()  {  return  parent . getAttenuation () ;  }
static   MockSpiProvider   newInstance ()   {  return  new   MockSpiProviderImpl () ;  }
@ Test ( expected   =   IllegalStateException . class )  public   void   createUtilsTest ()   throws  Exception   {  new   AllureResultsUtils () ;  }
public   OpenIDConnectConfiguration   scopeValidators ( List < String >   scopeValidators )   {  this . scopeValidators   =   scopeValidators ;  return  this ;  }
private   static   boolean   deleteDirectory ( File   directory )   {  if ( directory . exists () ) {  File []   files   =  directory . listFiles () ;  for  ( File   file   :  files )   {  if ( file . isDirectory () )   {  deleteDirectory ( file ) ;  }   else  {  file . delete () ;  }  }  }  return  directory . delete () ;  }
@ Test  void   logsWithExplicitLoggerName ()   throws  Exception   {  final   StringWriter   writer   =  new   StringWriter () ;  Logger . getRootLogger () . addAppender ( new   WriterAppender ( new   PatternLayout ( """"%t %c: %m%n"""" ) ,  writer ) ) ;  LoggableTest . Foo . explicitLoggerName () ;  MatcherAssert . assertThat ( 
@ Override  public   boolean   matches ( Dependency   value )   {  return  value . getArtifact () . getVersion () . equals ( version ) ;  }
public   static   IntIndexer   create ( IntPointer   pointer ,  long ...   sizes )   {  return  new   IntRawIndexer ( pointer ,  sizes ) ;  }
default   < I   extends  IO > I   create ( String   id ,  Class < I >   ioClass )   {  return  create ( id ,  IOType . getByIOClass ( ioClass ) ) ;  }
public   static   int   getNumberOfMonths ( long   epochMilli ,  int   startMonth ,  int   startYear )   {  LocalDate   date   =  utcDateOfEpochMilli ( epochMilli ) ;  int   month   =  date . getMonthValue () ;  int   year   =  date . getYear () ;  return  ( year   -   startYear )   *   12   +   month   -   ( startMonth   -   1 ) ;  }
@ Override  public   void   mouseDragged ( MouseEvent   e )   {  currentPoint   =   e . getPoint () ;  if  ( ! btnPressed )  return;  final   Point   point   =  e . getPoint () ;  relRect . setEndPoint ( new   Point ( point . x   -   offsetX ,  point . y   -   offsetY ) ) ;  repaint () ;  }
private   static   String   getPersistedData ( Context   context ,  String   defaultLanguage )   {  SharedPreferences   preferences   =  PreferenceManager . getDefaultSharedPreferences ( context ) ;  return  preferences . getString ( SELECTED_LANGUAGE ,  defaultLanguage ) ;  }
@ Test  void   worksWithExecute ()   throws  Exception   {  final   DataSource   source   =  this . source () ;  new   JdbcSession ( source )  . autocommit ( false )  . sql ( """"CREATE TABLE foo (name VARCHAR(50))"""" )  . execute ()  . sql ( """"INSERT INTO foo (name) VALUES (?)"""" )  . set ( """"Jeff Lebowski"""" )  . execute ()  . commit () ;  }
private   boolean   dateExists () {  SimpleDateFormat   dateFormat   =  getDateFormat () ;  String   toParse   =  wheels . getDateTimeString () ;  try  {  dateFormat . setLenient ( false ) ;   
default   void   execute ( Runnable   runnable )   {  Objects . requireNonNull ( player () . getServer () ) . execute ( runnable ) ;  }
private   static   String   readResource ( String   filename )   throws  IOException   {  return  RESTTestBase . readResource ( filename ,  org . wso2 . identity . integration . test . utils . OAuth2Util . class ) ;  }
@ Override  public   < X   extends  Throwable >   TResult   getResult ( Class < X >   exceptionType )   throws  X   {  synchronized  ( lock )   {  if  ( ! completed )   throw  new   IllegalStateException ( """"Task is not yet complete"""" ) ;  if  ( cancelled )   throw  new   CancellationException ( """"Task is canceled"""" ) ;  if  ( exceptionType . isInstance ( exception ) )   throw  exceptionType . cast ( exception ) ;  if  ( exception   !=   null )   throw  new   RuntimeExecutionException ( exception ) ;  return  result ;  }  }
private   static   Context   updateResourcesLegacy ( Context   context ,  String   language )   {  Locale   locale   =  new   Locale ( language ) ;  Locale . setDefault ( locale ) ;  Resources   resources   =  context . getResources () ;  Configuration   configuration   =  resources . getConfiguration () ;  configuration . locale   =   locale ;  configuration . setLayoutDirection ( locale ) ;  resources . updateConfiguration ( configuration ,  resources . getDisplayMetrics () ) ;  return  context ;  }
public   static   Bitmap   getScaledBitmap ( String   path ,  int   max )   {  Bitmap   src   =  BitmapFactory . decodeFile ( path ) ;  int   width   =  src . getWidth () ;  int   height   =  src . getHeight () ;  float   rate   =  0.0f ;  if  ( width   >   height )   {  rate   =   max   /   ( float )   width ;  height   =   ( int )   ( height   *   rate ) ;  width   =   max ;  }   else  {  rate   =   max   /   ( float )   height ;  width   =   ( int )   ( width   *   rate ) ;  height   =   max ;  }  return  Bitmap . createScaledBitmap ( src ,  width ,  height ,  true ) ;  }
public   static   SharedPreferences   getBootSharedPreferences ()   {  return  getSharedPreferences ( """"mmm_boot"""" ) ;  }
@ Override  public   boolean   playerAdd ( String   world ,  String   player ,  String   permission )   {  if  ( world   !=   null )   {  permission   =   world   +   """":""""   +   permission ;  }  return  plugin . getServer () . dispatchCommand ( Bukkit . getServer () . getConsoleSender () ,  """"permissions player setperm """"   +   player   +   """" """"   +   permission   +   """" true"""" ) ;  }
long   getNodeEndPosition ( Tree   node )   {  TreePath   currentNode   =  getNodePath ( node ) ;  while  ( node   !=   null )   {  long   endPosition   =  sourcePositions . getEndPosition ( compilationUnit ,  currentNode . getLeaf () ) ;  if  ( endPosition   !=   NOPOS )   {  return  endPosition ;  }  currentNode   =   currentNode . getParentPath () ;  }  return  NOPOS ;  }
public   Color   getProjectorColor ()   {  return  getProjectorColors () [ counter ] ;  }
@ Override  public   boolean   isBefore ( Wrapper < ?   extends  Node >   wrapper )   {  if  ( wrapper   instanceof   ModuleSortedWrapper )   {  return  isBeforeAlphabeticalTextSortedWrapper ( ( ModuleSortedWrapper )   wrapper ) ;  }  return  super . isBefore ( wrapper ) ;  }
default   int   spiOpen ( int   channel ,  int   baud )   {  return  spiOpen ( channel ,  baud ,  0 ) ;  }
@ Override  public   void   onFinish ()   throws  RemoteException   {  if  ( callback   !=   null )   {  callback . onFinish () ;  }  }
public   int   getMinuteInterval ()   {  return  ( int )   minuteIntervalProp . getValue () ;  }
@ Override  public   < V >   V   execute ( Callable < V >   action )   {  if  ( action   ==   null )  throw  new   NullPointerException ( """"Parameter 'action' is mandatory!"""" ) ;  return  this . i2CBus . execute ( this ,  action ) ;  }
@ Override  public   String   toString ()  {  return  super . toString ()   +   """"[""""   +   column   +   """",""""   +   row   +   """"]"""" ;  }
public   void   setAccessUrl ( String   accessUrl )   {  this . accessUrl   =   accessUrl ;  }
@ Override  public   String   visitBreak ( BreakTree   reference ,  Void   v )   {  return  ( reference   !=   null )  ?   detailedKindString ( reference ,  reference . getLabel () )   :  """""""" ;  }
public   static   double []   floatToDouble ( float []   src )   {  if ( src   ==   null )   {  return  null ;  }  double []   output   =  new   double [ src . length ] ;  for ( int   i   =  0 ;   i   <   src . length ;   i ++ )   {  output [ i ]   =   src [ i ] ;  }  return  output ;  }
public   void   setAcronyms ( Collection < String >   acronyms )   {  this . acronyms   =   acronyms ;  }
public   String []   getDirNames ()   {  final   Set <  String >   set   =  new   LinkedHashSet <  String > () ;  for  (  CpioHeader   header   :  headers )   {  String   path   =  new   File (  header . getName () ) . getParent () ;  if  (  path   ==   null )   continue;  String   parent   =  normalizePath (  path ) ;  if  (  ! parent . endsWith (  """"/"""" ) )   parent   +=   """"/"""" ;  set . add (  parent ) ;  }  return  set . toArray (  new   String [  set . size () ] ) ;  }
public   void   setOptions ( AutoInsertOptions   options )   {  this . options   =   options ;  }
public   static   PendingIntent   getPermittedAddEventPendingIntent ( InstanceSettings   settings )   {  Context   context   =  settings . getContext () ;  Intent   intent   =  PermissionsUtil . getPermittedActivityIntent ( context , CalendarIntentUtil . createNewEventIntent ( settings . clock () . getZone () ) ) ;  return  isIntentAvailable ( context ,  intent )  ?  PendingIntent . getActivity ( context ,  REQUEST_CODE_ADD_EVENT ,  intent ,  PendingIntent . FLAG_UPDATE_CURRENT )   : getEmptyPendingIntent ( context ) ;  }
private   Field   buildArrayField ( final   String   fieldName ,  final   JsonNode   jsonNode ,  final   Boolean   required )   {  return  buildArrayField ( fieldName ,  jsonNode ,  buildProperty ( null ,  jsonNode . path ( ITEMS ) , ! StringUtils . isBlank ( jsonNode . path ( MIN_ITEMS ) . asText () )   &&   ! jsonNode . path ( MIN_ITEMS ) . asText () . equals ( ZERO ) ) , required ) ;  }
@ Test  public   void   redundantAxioms_areRemoved ()   throws  Exception   {  OWLClass   e   =  dataFactory . getOWLClass ( IRI . create ( """"http:
@ Test  public   void   issue666OAS30ExampleInResponseHeader ()   {  List < ChangedOperation >   changedOperations   = getOpenApiChangedOperations ( """"issue-666-oas-3-0-examples-handling-1.yaml"""" , """"issue-666-oas-3-0-examples-handling-2.yaml"""" ) ;  ChangedOperation   operation   = changedOperations . stream ()  . filter ( o  ->   """"/example/response/header"""" . equals ( o . getPathUrl () ) )  . findFirst ()  . orElse ( null ) ;  assertThat ( operation ) . isNotNull () ;  }
public   boolean   isAllowAnonymousReadPermission ()   {  return  rootACL . isAllowAnonymousReadPermission () ;  }
@ Test  public   void   testJavaExpressionString ()   {  JexlEngine   jexl   =  new   JexlEngine () ;  String   jexlExp   =  """"name == \""""user_a\"""""""" ;  Expression   e   =  jexl . createExpression ( jexlExp ) ;  JexlContext   jc   =  new   MapContext () ;  jc . set ( """"name"""" ,  """"user_a"""" ) ;  
default   int   writeRegister ( int   register ,  ByteBuffer   buffer ,  int   offset ,  int   length )   throws  IOException {  
public   final   boolean   childOfPath ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$"""" ) ;  }
public   static   boolean   isConnected ( Context   _context )   {  ConnectivityManager   _connectivityManager   =  ( ConnectivityManager )   _context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ;  NetworkInfo   _activeNetworkInfo   =  _connectivityManager . getActiveNetworkInfo () ;  return  _activeNetworkInfo   !=   null   &&   _activeNetworkInfo . isConnected () ;  }
public   ApplicationListResponse   applications ( List < ApplicationListItem >   applications )   {  this . applications   =   applications ;  return  this ;  }
public   void   forEachRight ( final   Consumer < ?   super  T >   func )   {  eachRight ( iterable ,  func ) ;  }
public   void   deleteUserProfile ( String   userName ,  String   profileName )  throws  RemoteException ,  UserProfileMgtServiceUserProfileExceptionException   {  try  {  userProfileMgtServiceStub . deleteUserProfile ( userName ,  profileName ) ;  }   catch  ( RemoteException   e )   {  String   msg   =  """"Delete user profile fails"""" ;  log . info ( msg ) ;  throw  new   RemoteException ( msg ,  e ) ;  }   catch  ( UserProfileMgtServiceUserProfileExceptionException   e )   {  String   msg   =  """"Delete user profile fails"""" ;  log . info ( msg ) ;  throw  new   UserProfileMgtServiceUserProfileExceptionException ( msg ,  e ) ;  }  }
@ Override  public   void   loadState ( DefaultZallySettings   state )   {  XmlSerializerUtil . copyBean ( state ,  this ) ;  }
private   void   rename ( final   String   file ,  final   String   newName )   {  final   VirtualFile   specFile   =  myFixture . copyFileToProject ( getSourceFile ( file ) ,  """"openapi.yaml"""" ) ;  myFixture . configureFromExistingVirtualFile ( specFile ) ;  myFixture . renameElementAtCaret ( newName ) ;  }
private   void   showRefreshPeriod ()   {  EditTextPreference   preference   =  ( EditTextPreference )   findPreference ( InstanceSettings . PREF_REFRESH_PERIOD_MINUTES ) ;  if  ( preference   !=   null )   {  int   value   =  ApplicationPreferences . getRefreshPeriodMinutes ( getActivity () ) ;  preference . setSummary ( String . format ( getText ( R . string . refresh_period_minutes_desc ) . toString () ,  value ) ) ;  }  }
@ DataBoundSetter  public   void   setFailedTotalMedium ( Integer   failedTotalMedium )   {  this . failedTotalMedium   =   failedTotalMedium ;  }
@ Override  public   float   tickRate ()   {  return  getLevel () . tickRateManager () . tickrate () ;  }
@ Test  public   void   no_configuration ()   throws  Exception   {  WorkflowJob   job   =  getBaseJob ( """"dependencyCheckWorkPublisherWorkflowStep"""" ) ;  job . setDefinition ( new   CpsFlowDefinition ( """"""""  +   """"node {\n""""  +   """"  dependencyCheckPublisher()\n""""  +   """"}\n"""" ,  true ) ) ;  jenkinsRule . assertBuildStatusSuccess ( job . scheduleBuild2 ( 0 ) ) ;  }
@ Test  public   void   testHashOfLength12 ()   {  assertEquals ( """"6gkzwgjzn820"""" ,  encodeHash ( - 25.382708 ,  - 49.265506 ,  12 ) ) ;  }
@ NotNull  @ Override  public   String   getNodeText ( @ NotNull   PsiElement   element ,  boolean   useFullName )   {  return  getDescriptiveName ( element ) ;  }
private   void   openBrowser ( URI   url )   throws  IOException   {  if  ( Desktop . isDesktopSupported () )   {  Desktop . getDesktop () . browse ( url ) ;  }   else  {  LOGGER . error ( """"Can not open browser because this capability is not supported on """"   +  """"your platform. You can use the link below to open the report manually."""" ) ;  }  }
@ Override  public   final   String   getAsText ()   {  return  Objects . requireNonNull ( this . subjectNameComboBox . getSelectedItem () ) . toString () ;  }
static   boolean   lineEventRead ( long   linePtr ,  long   lineEventPtr )   {  int   result   =  c_gpiod_line_event_read ( linePtr ,  lineEventPtr ) ;  if  ( result   <   0 )  throw  new   GpioDException ( """"c_gpiod_line_event_read failed: """"   +   result   +   """" (""""   +   c_gpiod_strerror ()   +   """")"""" ) ;  return  result   >   0 ;  }
public   static   ModuleInstallClient   getClient ( Activity   activity )   {  throw  new   UnsupportedOperationException () ;  }
public   Predict   getRightPredict ()   {  return  nodeStats . getRightPredict () ;  }
private   void   init ()   {  fillSerializer ( new   JComboBox <> () ) ;  panel . setLayout ( new   BorderLayout () ) ;  panel . add ( nameStrategyComboBox ) ;  nameStrategyComboBox . addActionListener ( this ) ;  }
protected   Response   getResponseOfMultipartFilePost ( String   endpointUri ,  String   fileField ,  String   filePath )   {  return  given () . auth () . preemptive () . basic ( authenticatingUserName ,  authenticatingCredential )  . config ( RestAssured . config () . encoderConfig ( encoderconfig  . appendDefaultContentCharsetToContentTypeIfUndefined ( false ) ) )  . multiPart ( fileField ,  new   File ( filePath ) )  . filter ( validationFilter )  . log () . ifValidationFails ()  . when ()  . log () . ifValidationFails ()  . post ( endpointUri ) ;  }
@ Override  void   doIt ( final   ProcessingReport   report , final   ProcessingMessage   message )  throws  ProcessingException  {  }
@ Override  public   @ NonNull   HttpNotifier   select ( @ NonNull   SelectionContext   context )   {  return  httpNotifier ;  }
public   void   testThatAutoCompletionWorksForFileWithMultipleDefinitionsNotInRootForYaml ()   {  myFixture . copyFileToProject ( PARTIAL_FILES_PATH   +   """"/definitions_not_in_root.yaml"""" ,  """"definitions_not_in_root.yaml"""" ) ;  final   VirtualFile   swaggerFile   = myFixture . copyFileToProject ( PARTIAL_FILES_PATH   +   """"/swagger.yaml"""" ,  """"swagger.yaml"""" ) ;  myFixture . configureFromExistingVirtualFile ( swaggerFile ) ;  final   AssertableList   completions   = new   AssertableList ( myFixture . getCompletionVariants ( """"definitions_not_in_root.yaml"""" ) ) ;  assertSchemaCompletions ( completions ) ;  }
private   String   responsePost ( List < NameValuePair >   postParameters ,  String   uri )   throws  Exception   {  HttpPost   httpPost   =  new   HttpPost ( uri ) ;  
@ Override  public   void   appendTooltip ( ITooltip   tooltip ,  BlockAccessor   accessor ,  IPluginConfig   config )   {  if  ( IWailaConfig . get () . accessibility () . getEnableAccessibilityPlugin ()   &&  accessor . getBlockEntity ()   instanceof   SignBlockEntity   sign   &&  sign . isWaxed () )   {  String   message   =  tooltip . getMessage ( JadeIds . CORE_OBJECT_NAME ) ;  if  ( ! message . isBlank () )   {  tooltip . replace ( JadeIds . CORE_OBJECT_NAME ,  IThemeHelper . get () . title ( Component . translatable ( """"jade.waxed"""" ,  message ) ) ) ;  }  }  }
 <argument pos:start=""""""""760:92"""""""" pos:end=""""""""760:93""""""""><expr pos:start=""""""""760:92"""""""" pos:end=""""""""760:93""""""""><literal type=""""""""string"""""""" pos:start=""""""""760:92"""""""" pos:end=""""""""760:93"""""""">""""""""""""""""</literal></expr></argument>
public   void   setOrganization ( String   organization )   {  this . organization   =   organization ;  }
protected   boolean   isAws ( InstanceInfo   selfInstanceInfo )   {  boolean   result   =  DataCenterInfo . Name . Amazon   ==   selfInstanceInfo . getDataCenterInfo () . getName () ;  log . info ( """"isAws returned """"   +   result ) ;  return  result ;  }
@ Override  public   Void   visitSee ( SeeTree   node ,  Void   p )   {  String   name   =  node . getTagName () ;  String   content   =  CommentHelper . getText ( node . getReference () ) ;  tags . computeIfAbsent ( name ,  n  ->   new   ArrayList <> () ) . add ( content ) ;  return  null ;  }
@ Override  public   int   compare ( Constructor < ? >   o1 ,  Constructor < ? >   o2 )   {  int   primitiveParamsSize1   =  findPrimitiveParamsSize ( o1 ) ;  int   primitiveParamsSize2   =  findPrimitiveParamsSize ( o2 ) ;  return  Integer . valueOf ( primitiveParamsSize2 ) . compareTo ( primitiveParamsSize1 ) ;  }
@ Test  void   testInvalidUserInfo ()   {  transportClientFatory . newClient ( new   DefaultEndpoint ( """"http:
public   void   onRequestPermissionsResult ( int   requestCode , String   permissions [] ,  int []   grantResults )   {  switch  ( requestCode )   {  case  RC_WRITE_PERMISSION :   {  
private   static   void   printModelSetCreatedSuccessfulLog ( String   modelName )   {  log . info ( String . format ( """"ModelSet %s is created successfully with ModelConfig.json in %s folder."""" ,  modelName , modelName ) ) ;  log . info ( String . format ( """"Please change your folder to %s and then configure your ModelConfig.json or directly do initialization step by 'shifu init.'"""" , modelName ) ) ;  }
private   void   checkLayout ()  {  Dimension   dim   =  getLayoutDimension () ;  if  ( currentDimension   ==   null   ||   ! currentDimension . equals ( dim ) )   
public   FormValidation   doCheckPendingStepsPercentage ( @ QueryParameter   String   value )   {  return  isValidPercentage ( value ) ;  }
 <argument pos:start=""""""""872:64"""""""" pos:end=""""""""872:64""""""""><expr pos:start=""""""""872:64"""""""" pos:end=""""""""872:64""""""""><literal type=""""""""number"""""""" pos:start=""""""""872:64"""""""" pos:end=""""""""872:64"""""""">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Override  public   boolean   isShowDetailsPressed ()   {  return  ClientProxy . isShowDetailsPressed () ;  }
@ Override  public   boolean   isFocused ()   {  return  owner . getFocused ()   ==   this ;  }
public   void   setPolicyId ( String   policyId )   {  this . policyId   =   policyId ;  }
public   String   getAudioOption ( String   key )   {  return  audioOptions . get ( key ) ;  }
public   void   setTrackId ( Integer   trackId )   {  this . trackId   =   trackId ;  }
@ Override  public   String   toString ()   {  String   result   =  super . toString () ;  if  ( getExtension ()   !=   null )   {  result   +=   """" extension: """"   +   getExtension () . toString () ;  }  if  ( getProtocol ()   !=   null )   {  result   +=   """" protocol: """"   +   getProtocol () . toString () ;  }  result   +=   """" max frame size: """"   +   this . maxFrameSize ;  return  result ;  }
@ Nullable  @ Override  public   TokenBinding   getTokenBinding ()   {  return  tokenBinding ;  }
@ Override  public   void   onOpen ( ServerHandshake   handshakedata )   {  countClientOpenLatch . countDown () ;  }
default   int   write ( int   register ,  InputStream   stream ,  int   length )   throws  IOException {  return  writeRegister ( register ,  stream . readNBytes ( length ) ) ;  }
@ Test  public   void   getDescriptor_variable ()   {  assertThat ( variableTree () . accept ( BREADCRUMBS ,  null ) )  . contains ( variableTree () . getKind () . toString () ) ;  assertThat ( variableTree () . accept ( BREADCRUMBS ,  null ) )  . contains ( variableTree () . getName () . toString () ) ;  }
@ JavascriptInterface  public   final   int   getPlayServicesVersionCode ()   {  return  GMS_VERSION_CODE ;  }
public   void   push ( String   s )   {  if  ( layouts . get ( s )   !=   null )   {  layoutStack . push ( s ) ;  if  ( this . getChildCount ()   >   0 )   {  this . removeAllViews () ;  }  this . addView ( layouts . get ( layoutStack . peek () ) ) ;  }  }
@ Test   @ Disabled  public   void   queryByEmptyKeySubObjectSubOject ()   {  assertSame ( document . getJSONObject ( """"obj"""" ) . getJSONObject ( """""""" ) . get ( """""""" ) , query ( """"/obj
NoteIterator   boundedIterator ( RegionBounds   bounds )   {  return  new   NoteIterator ( this . head ,  bounds ) ;  }
public   static   int   updateTargetBlock ( TargetBlock   block ,  LevelAccessor   accessor ,  BlockState   state ,  BlockHitResult   result ,  Entity   entity )  {  try {  return  ( int )   updateRedstoneOutputMethod . invoke ( block ,  accessor ,  state ,  result ,  entity ) ;  }  catch ( IllegalAccessException  |  InvocationTargetException   ignored )  {  return  0 ;  }  }
@ Override  public   int   i2cReadWordData ( int   handle ,  int   register )   {  logger . trace ( """"[I2C::READ] -> [{}]; Register [{}]; Word"""" ,  handle ,  register ) ;  validateReady () ;  validateHandle ( handle ) ;  validateI2cRegister ( register ) ;  PiGpioPacket   tx   =  new   PiGpioPacket ( I2CRW ,  handle ,  register ) ;  PiGpioPacket   rx   =  sendPacket ( tx ) ;  logger . trace ( """"[I2C::READ] <- HANDLE={}; SUCCESS={}; RESULT={}"""" ,   handle ,  rx . success () ,  rx . result () ) ;  validateResult ( rx ,  false ) ;  return  rx . result () ;  }
public   void   setConnectorName ( String   connectorName )   {  this . connectorName   =   connectorName ;  }
@ ReactMethod  public   void   cancelNdefWrite ( Callback   callback )   {  synchronized ( this )   {  if  ( writeNdefRequest   !=   null )   {  writeNdefRequest . callback . invoke ( ERR_CANCEL ) ;  writeNdefRequest   =   null ;  callback . invoke () ;  }   else  {  callback . invoke ( ERR_NOT_REGISTERED ) ;  }  }  }
public   CertificateRequest   certificate ( String   certificate )   {  this . certificate   =   certificate ;  return  this ;  }
public   void   getExposureInformation ( GetExposureInformationParams   params )   throws  RemoteException   {  getServiceInterface () . getExposureInformation ( params ) ;  }
private   boolean   isEmpty ( String   value )   {  return  value   ==   null   ||   value . isEmpty () ;  }
@ Override  public   boolean   equals ( Object   other )   {  if  ( ! ( other   instanceof   Complex ) )   {  return  false ;  }  Complex   otherComplex   =  ( Complex )   other ;  return  this . real   ==   otherComplex . real   &&   this . imaginary   ==   otherComplex . imaginary ;  }
@ Test  void   findLastIndex ()   {  final   Integer   result   = Underscore . findLastIndex ( asList ( 1 ,  2 ,  3 ,  4 ,  5 ) ,  item  ->   item   %   2   ==   0 ) ;  assertEquals ( 3 ,  result . intValue () ) ;  final   Integer   resultNotFound   = Underscore . findLastIndex ( asList ( 1 ,  2 ,  3 ,  4 ,  5 ) ,  item  ->   item   >   5 ) ;  assertEquals ( - 1 ,  resultNotFound . intValue () ) ;  final   Integer   resultArray   = Underscore . findLastIndex ( new   Integer []   { 1 ,  2 ,  3 ,  4 ,  5 } ,  item  ->   item   %   2   ==   0 ) ;  assertEquals ( 3 ,  resultArray . intValue () ) ;  }
@ Override  public   BinderWrapper []   newArray ( int   size )   {  return  new   BinderWrapper [ size ] ;  }
@ Override  public   void   onCreatePreferences ( @ Nullable   Bundle   savedInstanceState ,  String   rootKey )   {  Bundle   b   =  getArguments () ;  if  ( b   !=   null )   {  preferencesResource   =   b . getInt ( EXTRA_PREFERENCE_RESOURCE ,  preferencesResource ) ;  }  if  ( preferencesResource   !=   0 )   {  addPreferencesFromResource ( preferencesResource ) ;  }  }
public   String   toString ()  {  StringBuilder   b   =  new   StringBuilder () ;  b . append ( """"{"""" ) . append ( this . getOperator () . getOperator () ) ;  for  ( int   i   =  0 ;   i   <   varSpecs . size () ;   i ++ )  {  VarSpec   v   =  varSpecs . get ( i ) ;  b . append ( v . getValue () ) ;  
@ Test  public   void   testForEach ()   {  JsonObjectIterator   iterator   =  mock ( JsonObjectIterator . class ) ;  JsonObject   subject   =  subject () ;  subject . forEach ( iterator ) ;  verify ( iterator ) . apply ( """"a"""" ,  JsonValue . of ( true ) ) ;  verify ( iterator ) . apply ( """"b"""" ,  JsonValue . of ( new   JSONObject () ) ) ;  }
protected   void   prepareHomographies ( CLBuffer   HBuffer ,  int   pyramidLevel , ImageTransformer . Parameters []   parameters ,  boolean []   inverses )   {  FloatBuffer   floatH   =  ( FloatBuffer ) HBuffer . getBuffer () . rewind () ;  CvMat   H   =  H3x3 . get () ;  for  ( int   i   =  0 ;   i   <   parameters . length ;   i ++ )   {  prepareHomography ( H ,  pyramidLevel ,  ( ProjectiveColorTransformer . Parameters ) parameters [ i ] , inverses   ==   null  ?   false   :  inverses [ i ] ) ;  for  ( int   j   =  0 ;   j   <   9 ;   j ++ )   {  floatH . put ( ( float ) H . get ( j ) ) ;  }  }  floatH . rewind () ;  }
@ Test  public   void   changedButCompatible ()   {  assertSpecChangedButCompatible ( BASE ,  """"bc_numericrange_changed_but_compatible.yaml"""" ) ;  }
public   static   boolean   contains ( String []   sources ,  String   target )    {  if  ( null   !=   sources   &&   null   !=   target )   {  for  ( var   source   :  sources )   {  if ( contains ( source ,  target ) )  return  true ;  }  }  return  false ;  }
public   ExposureConfigurationBuilder   setAttenuationWeight ( int   attenuationWeight )   {  this . attenuationWeight   =   attenuationWeight ;  return  this ;  }
@ Override  public   EurekaHttpResponse < Applications >   getVip ( String   vipAddress ,  String ...   regions )   {  return  getApplicationsInternal ( """"vips/""""   +   vipAddress ,  regions ) ;  }
public   boolean   onOptionsItemSelected ( MenuItem   item )   {  switch  ( item . getItemId () )   {  case  R . id . menu_preferences :  Intent   intent   =  new   Intent ( this ,  PreferencesActivity . class ) ;  startActivity ( intent ) ;  return  true ;  }  return  false ;  }
private   Instant   extractStart ( Class < ?   extends  Job >   clazz )   {  Instant   start   =  Instant . now () ;  DelayStart   delayAnnotation   =  clazz . getAnnotation ( DelayStart . class ) ;  if  ( delayAnnotation   !=   null )   {  long   milliSecondDelay   =  TimeParserUtil . parseDuration ( delayAnnotation . value () ) ;  start   =   start . plusMillis ( milliSecondDelay ) ;  }  return  start ;  }
private   void   deleteNotes ( List < Note >   notes )   {  Set < Integer >   positionsToRemove   =  notes . stream () . filter ( Note :: isValid )  . map ( Note :: getAbsPositionMs ) . collect ( Collectors . toSet () ) ;  RegionBounds   toStandardize   =  removeNotes ( positionsToRemove ) ;  if  ( ! toStandardize . equals ( RegionBounds . INVALID ) )   {  refreshNotes ( toStandardize . getMinMs () ,  toStandardize . getMaxMs () ) ;  }  for  ( Note   note   :  notes )   {  noteMap . removeNoteElement ( note ) ;  }  }
default   ContextBuilder   setDefaultPlatform ( String   platformId ) {  return  defaultPlatform ( platformId ) ;  }
public   void   testUnusedRequestBodyMainFile ()   {  doTest ( """"unused/yaml/unused_request_body_main_file.yaml"""" ) ;  }
public   static   FusedLocationProviderClient   getFusedLocationProviderClient ( Context   context )   {  return  new   FusedLocationProviderClientImpl ( context ) ;  }
@ Override  public   MetaItem   clone ()   {  MetaItem   copy   =  null ;  try  {  copy   =   ( MetaItem ) super . clone () ;  }   catch  ( CloneNotSupportedException   e )   {  
@ Override  public   void   onReceive ( Context   context ,  Intent   intent )   {  XposedBridge . log ( """"Message sent"""" ) ;  var   number   =  intent . getStringExtra ( """"number"""" ) ;  if  ( number   ==   null )   {  number   =   String . valueOf ( intent . getLongExtra ( """"number"""" ,  0 ) ) ;  number   =   Objects . equals ( number ,  """"0"""" )  ?   null   :  number ;  }  var   message   =  intent . getStringExtra ( """"message"""" ) ;  if  ( number   ==   null   ||   message   ==   null )   return;  number   =   number . replaceAll ( """"\\D"""" ,  """""""" ) ;  WppCore . sendMessage ( number ,  message ) ;  }
@ Override  public   int   hashCode ()   {  int   result   =  activityTransitions   !=   null  ?   activityTransitions . hashCode ()   :  0 ;  result   =   31   *   result   +   ( tag   !=   null  ?   tag . hashCode ()   :  0 ) ;  result   =   31   *   result   +   ( clients   !=   null  ?   clients . hashCode ()   :  0 ) ;  result   =   31   *   result   +   ( contextAttributionTag   !=   null  ?   contextAttributionTag . hashCode ()   :  0 ) ;  return  result ;  }
@ Test  public   void   hasCandidateTest () {  List < ColumnConfig >   configList   =  new   ArrayList < ColumnConfig > () ;  ColumnConfig   config   =  new   ColumnConfig () ;  config . setColumnName ( """"A"""" ) ;  config . setFinalSelect ( false ) ;  config . setColumnFlag ( ColumnFlag . Candidate ) ;  configList . add ( config ) ;  Assert . assertTrue ( CommonUtils . hasCandidateColumns ( configList ) ) ;  }
@ Override  public   Socket   createSocket ()   throws  IOException   {  return  enableTLSOnSocket ( internalSSLSocketFactory . createSocket () ) ;  }
@ Test  void   shouldRethrowWhenNegatedPredicateFails ()   {  final   CheckedPredicate < String >   p   =  ignored  ->  {   throw  ERROR ;   } ;  assertThrows ( ERROR . getClass () ,  ()  ->   p . negate () . test ( null ) ) ;  }
@ Override  public   void   onDialogClosed ( boolean   positiveResult )   {  if  ( getPreference ()   instanceof   DialogPreference )   {  ( ( DialogPreference )   getPreference () ) . onDialogClosed ( positiveResult ) ;  }  }
@ Before  public   void   setup ()   throws  IOException   {  path   =   folder . newFolder () . getAbsolutePath () ;  BatchInserter   inserter   =  BatchInserters . inserter ( new   File ( path ) ) ;  graph   =  new   GraphBatchImpl ( inserter ,  CommonProperties . IRI ,  newHashSet ( """"prop1"""" ,  """"prop2"""" ) , newHashSet ( """"prop1"""" ) ,  new   IdMap () ,  new   RelationshipMap () ) ;  foo   =   graph . createNode ( """"http:
@ Override  public   void   setFillColor ( int   color )   throws  RemoteException   {  options . fillColor ( color ) ;  listener . update ( this ) ;  }
ScriptBuilder   setClassCoverage ( String   classCoverage )   {  this . classCoverage   =   classCoverage ;  return  this ;  }
private   int   getGeoDistRandomIdx ( Random   random ,  int   numNames )   {  int   nameIdx   =  - 1 ;  double   prob   =  random . nextDouble () ;  int   rank   =  geoDist . inverseFInt ( prob ) ;  if  ( rank   <   topN )   {  if  ( numNames   >   rank )   {  nameIdx   =   rank ;  }   else  {  nameIdx   =   random . nextInt ( numNames ) ;  }  }   else  {  if  ( numNames   >   rank )   {  nameIdx   =   topN   +   random . nextInt ( numNames   -   topN ) ;  }   else  {  nameIdx   =   random . nextInt ( numNames ) ;  }  }  return  nameIdx ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( claim ,  value ) ;  }
public   Connection   getConnection ( Object   tenantIdentifier )   throws  SQLException   {  return  null ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init () ;  userMgtServiceClient   =   new   UserManagementClient ( backendURL ,  sessionCookie ) ;  userMgtServiceClient . addUser ( """"NotificationUser"""" ,  """"passWord1@"""" ,  new   String [] { """"admin"""" } ,  """"default"""" ) ;  userMgtServiceClient . addRole ( """"NotificationRole"""" ,  new   String [] {} ,  new   String [] { """"admin"""" } ) ;  changeISConfiguration () ;  super . init () ;  userMgtServiceClient   =   new   UserManagementClient ( backendURL ,  sessionCookie ) ;  }
public   void   testUnusedParameterMainFile ()   {  doTest ( """"unused_parameter_main_file.json"""" ) ;  }
@ Test  void   formatjsonError ()   {  ResponseEntity < Map < String ,  Object > >   result   = testObj . formatjson ( U . objectBuilder () . add ( """"json"""" ,  """"{\""""a\"""":1}1"""" ) . build () ) ;  assertSame ( HttpStatus . BAD_REQUEST ,  result . getStatusCode () ) ;  }
void   visitNullSchema ( NullSchema   nullSchema )   {  visitSchema ( nullSchema ) ;  }
public   void   setVarValue ( Object   varValue )   {  this . varValue   =   varValue ;  }
@ NonNull  public   CurrentLocationRequest   build ()   {  CurrentLocationRequest   request   =  new   CurrentLocationRequest () ;  request . maxUpdateAgeMillis   =   maxUpdateAgeMillis ;  request . granularity   =   granularity ;  request . priority   =   priority ;  request . durationMillis   =   durationMillis ;  request . bypass   =   bypass ;  request . throttleBehavior   =   throttleBehavior ;  request . moduleId   =   moduleId ;  request . workSource   =   new   WorkSource ( workSource ) ;  request . impersonation   =   impersonation ;  return  request ;  }
public   void   updateClaim ( String   dialectId ,  String   claimId ,  String   requestBody )   {  String   endPointUrl   =  serverBasePath   +   CLAIM_DIALECTS_ENDPOINT_URI   +   PATH_SEPARATOR   +   dialectId   +  CLAIMS_ENDPOINT_URI   +   PATH_SEPARATOR   +   claimId ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpPut ( endPointUrl ,  requestBody ,  getHeaders () ) )   {  Assert . assertEquals ( response . getStatusLine () . getStatusCode () ,  HttpServletResponse . SC_OK , """"Claim update failed"""" ) ;  }   catch  ( IOException   e )   {  Assert . fail ( """"Error occurred while updating the claim."""" ) ;  }  }
public   void   setLR_Exposure ( int   value )   {  setOption ( RealSense . RS_OPTION_R200_LR_EXPOSURE ,  value ) ;  }
public   static   boolean   isArray ( final   Object   object )   {  return  object   !=   null   &&   object . getClass () . isArray () ;  }
@ Override  public   int   getWidthExpansionPoints ( boolean   atLineStart ,  boolean   atLineEnd )  {  return  0 ;  }
public   void   setReuseAddr ( boolean   reuseAddr )   {  this . reuseAddr   =   reuseAddr ;  }
public   void   setParentContext ( VisualContext   parent )  {  this . parent   =   parent ;  }
@ Override  public   void   onUpgrade ( SQLiteDatabase   db ,  int   oldVersion ,  int   newVersion )   {  onCreate ( db ) ;  }
public   void   showErrorNotification ( Context   context ,  ConnectionResult   result )   {  PendingIntent   pendingIntent   =  getErrorResolutionPendingIntent ( context ,  result ) ;  if  ( pendingIntent   !=   null )   {  
Envelope   getEnvelope ( int   position )   {  return  envelopeMap . get ( position ) ;  }
private   double   getNumericalWoeValue ( Integer   columnNum ,  Object   obj ,  boolean   isWeighted )   {  int   binIndex   =  - 1 ;  if ( obj   !=   null )   {  binIndex   =   BinUtils . getNumericalBinIndex ( this . numerBinBoundaries . get ( columnNum ) ,  obj . toString () ) ;  }  List < Double >   binWoes   =  isWeighted  ?   this . numerWgtWoes . get ( columnNum )   :  this . numerWoes . get ( columnNum ) ;  double   value   =  0d ;  if ( binIndex   ==   - 1 )   {  
@ ApiModelProperty ( example   =   """"isB2BSelfServiceApp"""" )  @ JsonProperty ( """"name"""" )  @ Valid  public   String   getName ()   {  return  name ;  }
public   static   void   applyTransformType ( ItemStack   stack ,  PoseStack   poseStack ,  ItemDisplayContext   display ,  @ Nullable   LivingEntity   entity )  {  BakedModel   model   =  Minecraft . getInstance () . getItemRenderer () . getModel ( stack ,  entity   !=   null  ?   entity . level   :  null ,  entity ,  0 ) ;  boolean   leftHanded   =  display   ==   ItemDisplayContext . FIRST_PERSON_LEFT_HAND   ||   display   ==   ItemDisplayContext . THIRD_PERSON_LEFT_HAND ;  
@ Test  void   testExecution_shouldReturnBadgeConfig ()   throws  Exception   {  when ( context . get ( Run . class ) ) . thenReturn ( run ) ;  EmbeddableBadgeConfig   result   =  execution . run () ;  assertEquals ( step . badgeConfig ,  result ) ;  }
@ Override  boolean   doHandle ( Request   request ,  Response   response ,  Callback   callback )   {  try  {  Thread . sleep ( 10000 ) ;  }   catch  ( InterruptedException   ex )   {  
public   PlaceDetailsRequest   region ( String   region )   {  return  param ( """"region"""" ,  region ) ;  }
private   void   deployApplications ()   {  for  ( Map . Entry < String ,  OIDCApplication >   entry   :  applications . entrySet () )   {  URL   resourceUrl   = getClass () . getResource ( URL_SEPARATOR   +   """"samples""""   +   URL_SEPARATOR   +   entry . getKey ()   +   """".war"""" ) ;  tomcat . addWebapp ( tomcat . getHost () ,  entry . getValue () . getApplicationContext () ,  resourceUrl . getPath () ) ;  }  }
@ Override  public   int   writeRegister ( int   register ,  byte   b )   {  return  piGpio . i2cWriteByteData ( this . handle ,  register ,  b ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  @ Test  void   toJsonFromXml25 ()   {  final   String   xml   = """"<?xml version=\""""1.0\"""" encoding=\""""UTF-8\""""?><!DOCTYPE address SYSTEM \""""address.dtd\""""><a></a>"""" ;  final   String   json   = """"{\n""""  +   """"  \""""!DOCTYPE\"""": \""""address SYSTEM \\\""""address.dtd\\\""""\"""",\n""""  +   """"  \""""a\"""": {\n""""  +   """"  }\n""""  +   """"}"""" ;  assertEquals ( json ,  U . toJson ( ( Map < String ,  Object > )   U . fromXml ( xml ) ) ) ;  }
private   Theme   findTheme ( String   id )   {  for  ( Theme   theme   :  themes )   {  if  ( theme . getId () . equals ( id ) )   {  return  theme ;  }  }  return  null ;  }
@ Test  public   void   multipleMmapOpens ()   throws  InterruptedException , ExecutionException   {  Callable < Map >   task   =  ()  ->  {  try  ( Reader   reader   =  new   Reader ( ReaderTest . getFile ( """"MaxMind-DB-test-decoder.mmdb"""" ) ) )   {  return  reader . get ( InetAddress . getByName ( """"::1.1.1.0"""" ) ,  Map . class ) ;  }  } ;  MultiThreadedTest . runThreads ( task ) ;  }
@ Override   public   PointerPointer < P >   capacity ( long   capacity )   {  return  super . capacity ( capacity ) ;  }
public   InboundProtocols   custom ( List < CustomInboundProtocolConfiguration >   custom )   {  this . custom   =   custom ;  return  this ;  }
@ Override  public   void   setGroupInfoBoolean ( String   world ,  String   group ,  String   node ,  boolean   value )   {  setGroupInfoValue ( world ,  group ,  node ,  value ) ;  }
public   static   ByteIndexer   create ( ByteBuffer   buffer ,  long []   sizes ,  long []   strides )   {  return  new   ByteBufferIndexer ( buffer ,  sizes ,  strides ) ;  }
@ Test  public   void   testShareUsersWithOrganizations ()   {  UserShareRequestBody   requestBody   =  new   UserShareRequestBody ()  . userCriteria ( getUserCriteria () )  . organizations ( getOrganizations () ) ;  Response   response   =  getResponseOfPost ( USER_SHARING_API_BASE_PATH   +   SHARE_PATH ,  toJSONString ( requestBody ) ) ;  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_ACCEPTED )  . body ( """"status"""" ,  equalTo ( """"Processing"""" ) )  . body ( """"details"""" ,  equalTo ( """"User sharing process triggered successfully."""" ) ) ;  }
@ Test  public   void   constLoading ()   {  Schema   actual   =  loadAsV6 ( get ( """"constSchema"""" ) ) ;  assertTrue ( actual   instanceof   ConstSchema ) ;  }
private   Expression   createExpression ( String   weightAmplifier )   {  if ( StringUtils . isNotBlank ( weightAmplifier ) )   {  JexlEngine   jexl   =  new   JexlEngine () ;  return  jexl . createExpression ( weightAmplifier ) ;  }  return  null ;  }
private   static   BufferedReader   resourceReader ( String   path )   {  return  new   BufferedReader ( new   InputStreamReader ( StringTable . class . getResourceAsStream ( path ) ,  StandardCharsets . US_ASCII ) ) ;  }
@ Override  Long   read ( DataBundleValue   value ,  List < Asset >   assets )   {  return  value . longVal ;  }
@ Deprecated  public   DataPoint   setTimeInterval ( long   startTime ,  long   endTime ,  TimeUnit   timeUnit )   {  this . startTimeNanos   =   timeUnit . toNanos ( startTime ) ;  this . timestampNanos   =   timeUnit . toNanos ( endTime ) ;  return  this ;  }
public   RegisterRequest   info ( String   info )   {  this . info   =   info ;  return  this ;  }
@ ApiModelProperty ( example   =   """"false"""" ,  value   =   """""""" )  @ JsonProperty ( """"mandatory"""" )  @ Valid  public   Boolean   getMandatory ()   {  return  mandatory ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"roles"""" )  @ Valid  public   Roles   getRoles ()   {  return  roles ;  }
public   boolean   recordSamples ( Buffer   ...   samples )   throws  Exception   {  return  recordSamples ( 0 ,  0 ,  samples ) ;  }
@ Subscribe  public   void   onAudioControlChange ( AudioControlChangeEvent   event )   {  saveAudioFile ( getFiles () . get ( event . getPosition () ) ) ;  adapter . setSelectedPosition ( event . getPosition () ) ;  }
private   void   addToBufferList ( ByteBuffer   payloadData )   {  synchronized  ( byteBufferList )   {  byteBufferList . add ( payloadData ) ;  }  }
public   static   < E >   boolean   every ( final   Iterable < E >   iterable ,  final   Predicate < E >   pred )   {  for  ( E   item   :  iterable )   {  if  ( ! pred . test ( item ) )   {  return  false ;  }  }  return  true ;  }
public   void   addResults ( QueryResultsStorage   newResults )   {  results . addResults ( newResults ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  RoleMapping   roleMapping   =  ( RoleMapping )   o ;  return  Objects . equals ( this . idpRole ,  roleMapping . idpRole )   &&  Objects . equals ( this . localRole ,  roleMapping . localRole ) ;  }
@ Test  void   testSortXmlSimpleShouldNotAffectVerify ()   {  SortPomImplUtil . create () . testVerifyXmlIsOrdered ( """"/Simple_expected.xml"""" ) ;  }
@ Test ( expected   =   InvocationTargetException . class )  public   void   testRejectsExternalEntities ()   throws  Exception   {  ReportParser . parse ( getClass () . getResourceAsStream ( """"dependency-check-report-external-entities.xml"""" ) ) ;  fail ( """"Should have rejected input with external entities"""" ) ;  }
@ Override  public   < F >   Chain < T >   uniq ( final   Function < T ,  F >   func )   {  return  new   Chain <> ( newArrayList ( Underscore . uniq ( value () ,  func ) ) ) ;  }
@ Override   public   IplImage   getMaskImage ()   {  return  getMaskImage ( true ) ;  }
public   void   randomize ( final   float [] []   f )   {  for  ( int   r   =  0 ;   r   <   f . length ;   r ++ )   {  for  ( int   c   =  0 ;   c   <   f [ 0 ] . length ;   c ++ )   {  f [ r ] [ c ]   =   randomize () ;  }  }  }
public   boolean   hasFlagsAny ( int   has )  {  return  ( ( _code   &   has )   !=   0 ) ;  }
@ Test  public   void   generatesFileNamed_failOnFileContents ()   {  expectFailure  . whenTesting ()  . about ( javaSource () )  . that ( HELLO_WORLD_RESOURCE )  . processedWith ( new   GeneratingProcessor () )  . compilesWithoutError ()  . and ()  . generatesFileNamed ( CLASS_OUTPUT ,  """"com.google.testing.compile"""" ,  """"Foo"""" )  . withContents ( ByteSource . wrap ( """"Bogus"""" . getBytes ( UTF_8 ) ) ) ;  AssertionError   expected   =  expectFailure . getFailure () ;  assertThat ( expected . getMessage () ) . contains ( """"Foo"""" ) ;  assertThat ( expected . getMessage () ) . contains ( """" have contents"""" ) ;  }
public   void   setValidSetRate ( Double   validSetRate )   {  this . validSetRate   =   validSetRate ;  }
private   void   createIdP ( String   idpName )   {  try  {  IdentityProvider   identityProvider   =  new   IdentityProvider () ;  identityProvider . setIdentityProviderName ( idpName ) ;  identityProviderMgtServiceClient . addIdP ( identityProvider ) ;  }   catch  ( Exception   e )   {  Assert . fail ( """"Error while trying to create Identity Provider"""" ,  e ) ;  }  }
@ Override  public   void   setResultCallback ( ResultCallback < R >   callback ,  long   time ,  TimeUnit   unit )   {  callback . onResult ( value ) ;  }
@ Test  public   void   thatReturnsFalseWhenQuotesNorSpacesBeforeColon ()   {  assertFalse ( StringUtils . nextCharAfterSpacesAndQuotesIsColon ( """"a:"""" ) ) ;  }
private   Boolean   checkRequiredByType ( final   Field   innerField ,  final   List < String >   requiredInternalFields , final   FieldValueMapping   fieldValueMapping )   {  boolean   result   =  fieldValueMapping . getRequired () ;  if  ( ! ( innerField   instanceof   ArrayField )   &&   ! ( innerField   instanceof   MapField ) )   {  result   =   requiredInternalFields . contains ( fieldValueMapping . getFieldName () ) ;  }  return  result ;  }
public   Counters   getScope ( String   key )  {  if  ( containsKey ( key ) )  {  return  this ;  }  else {  if  ( parent   !=   null )  return  parent . getScope ( key ) ;  else  return  null ;  }  }
private   static   synchronized   String   getRequestId ()   {  return  Integer . toString ( lastRequestId ++ ) ;  }
public   static   String   getReasonPhrase ( int   statusCode )   {  if  ( statusCode   <   0 )   {  throw  new   IllegalArgumentException ( """"status code may not be negative"""" ) ;  }  return  REASON_PHRASES . get ( statusCode ) ;  }
@ Override  protected   void   before ()   throws  Throwable   {  OwlApiUtils . loadOntology ( manager ,  ontologyLocation ) ;  OWLOntologyWalker   walker   =  new   OWLOntologyWalker ( manager . getOntologies () ) ;  graphDb   =   new   TestGraphDatabaseFactory () . newImpermanentDatabase () ;  Graph   graph   =  new   GraphTransactionalImpl ( graphDb ,  new   IdMap () ,  new   RelationshipMap () ) ;  GraphOwlVisitor   visitor   =  new   GraphOwlVisitor ( walker ,  graph ,  Collections . < MappedProperty > emptyList () ) ;  walker . walkStructure ( visitor ) ;  }
@ CanIgnoreReturnValue  public   DiagnosticInFile   hadNoteContainingMatch ( Pattern   expectedPattern )   {  return  hadDiagnosticContainingMatch ( expectedPattern ,  NOTE ) ;  }
private   String   itemContent ( String   title , String   contentType , int   indent , ChangedMediaType   changedMediaType , boolean   isRequest )   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( itemContent ( title ,  contentType ,  indent ) )  . append ( itemContent ( """"Schema:"""" ,  """""""" ,  indent ) )  . append ( changedMediaType . isCompatible ()  ?   """"Backward compatible""""   :  """"Broken compatibility"""" )  . append ( """"\n"""" ) ;  if  ( ! changedMediaType . isCompatible () )   {  sb . append ( incompatibilities ( changedMediaType . getSchema () ) ) ;  }  return  sb . toString () ;  }
@ JsonCreator  public   static   ConnectionType   fromString ( String   s )   {  if  ( s   ==   null )   {  return  null ;  }  switch  ( s )   {  case  """"Dialup"""" :  return  ConnectionType . DIALUP ;  case  """"Cable/DSL"""" :  return  ConnectionType . CABLE_DSL ;  case  """"Corporate"""" :  return  ConnectionType . CORPORATE ;  case  """"Cellular"""" :  return  ConnectionType . CELLULAR ;  case  """"Satellite"""" :  return  ConnectionType . SATELLITE ;  default:  return  null ;  }  }
@ Override  public   void   update ( Chip   button ,  ModuleHolder   moduleHolder )   {  button . setChipIcon ( button . getContext () . getDrawable ( R . drawable . ic_baseline_warning_24 ) ) ;  button . setText ( R . string . warning ) ;  }
public   static   String   xmlOrJsonToXml ( String   xmlOrJson ,  Xml . XmlStringBuilder . Step   identStep )   {  TextType   textType   =  getTextType ( xmlOrJson ) ;  final   String   result ;  if  ( textType   ==   TextType . JSON )   {  result   =   getXmlString ( identStep ,  fromJson ( xmlOrJson ) ) ;  }   else if  ( textType   ==   TextType . XML )   {  result   =   getXmlString ( identStep ,  fromXml ( xmlOrJson ) ) ;  }   else  {  result   =   xmlOrJson ;  }  return  result ;  }
@ Override  public   boolean   isEnabled ()   {  return  ( totalPermissions   ==   null  ?   false   :  totalPermissions . isEnabled () ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  UserStoreListResponse   userStoreListResponse   =  ( UserStoreListResponse )   o ;  return  Objects . equals ( this . id ,  userStoreListResponse . id )   &&  Objects . equals ( this . name ,  userStoreListResponse . name )   &&  Objects . equals ( this . description ,  userStoreListResponse . description )   &&  Objects . equals ( this . self ,  userStoreListResponse . self ) ;  }
public   static   int   gpioSetISRFuncEx ( int   gpio ,  int   edge ,  PiGpioIsrCallbackEx   f ,  Object   userdata ) {  return  gpioSetISRFuncEx ( gpio ,  edge ,  0 ,  f ,  userdata ) ;  }
@ PostMapping ( """"convertPresto"""" )  public   PrestoQueryDto   convertPresto ( @ RequestParam   String   query )   {  return  new   PrestoQueryDto ( toPrestoQuery ( query ) ) ;  }
@ Override  public   int   getDefaultPriority ()   {  return  ObjectNameProvider . getEntity () . getDefaultPriority ()   +   10 ;  }
@ Override  public   void   onCreate ()   {  Log . d ( TAG ,  """"onCreate"""" ) ;  AllSettings . ensureLoadedFromFiles ( this ,  false ) ;  }
public   void   setIndependentNNModel ( IndependentNNModel   independentNNModel )   {  this . independentNNModel   =   independentNNModel ;  }
@ Override  public   boolean   shouldGZipContent ()   {  return  this . gZipContent ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( code ,  message ,  description ,  traceId ) ;  }
public   void   testUnusedDefinitionWhereDefinitionsAreNotInRoot ()   {  final   VirtualFile   virtualFile   = myFixture . copyFileToProject ( """"validator/field/unused_definition/json/unused_definition_not_in_root.json"""" , """"definitions.json"""" ) ;  final   VirtualFile   swaggerFile   = myFixture . copyFileToProject ( """"validator/field/unused_definition/json/unused_definition_not_in_root_swagger.json"""" , """"swagger.json"""" ) ;  myFixture . configureFromExistingVirtualFile ( swaggerFile ) ;  myFixture . testHighlighting ( true ,  false ,  true ,  virtualFile ) ;  }
DataBundleTypedValue   loadAndCreateTyped ( DataMap   dataMap ,  String   key ,  List < Asset >   assets )   {  return  createTyped ( load ( dataMap ,  key ) ,  assets ) ;  }
static   AnalogOutputBinding   newInstance () {  return  new   DefaultAnalogBinding () ;  }
public   double   getTemperatureInFahrenheit ()   {  return  ( getTemperatureInCelsius ()   *   1.8 )   +   32 ;  }
@ Override  public   synchronized   void   disconnect ()   {  Log . d ( TAG ,  """"disconnect()"""" ) ;  if  ( state   ==   ConnectionState . DISCONNECTING )   return;  if  ( state   ==   ConnectionState . CONNECTING )   {  state   =   ConnectionState . DISCONNECTING ;  return;  }  serviceInterface   =   null ;  if  ( serviceConnection   !=   null )   {  MultiConnectionKeeper . getInstance ( context ) . unbind ( actionString ,  serviceConnection ) ;  serviceConnection   =   null ;  }  state   =   ConnectionState . NOT_CONNECTED ;  }
@ Nullable  default   IElement   getIcon ( T   accessor ,  IPluginConfig   config ,  IElement   currentIcon )   {  return  null ;  }
@ ApiModelProperty ( example   =   """"true"""" ,  value   =   """"Status of the tenant life cycle"""" )  @ JsonProperty ( """"activated"""" )  @ Valid  public   Boolean   getActivated ()   {  return  activated ;  }
private   String   getGroupPath ()   {  if  ( tenant . equals ( MultitenantConstants . SUPER_TENANT_DOMAIN_NAME ) )   {  return  SERVER_URL   +   SCIM2_GROUPS_ENDPOINT ;  }   else  {  return  SERVER_URL   +   """"/t/""""   +   tenant   +   SCIM2_GROUPS_ENDPOINT ;  }  }
public   static   String   granularityToString ( int   granularity )   {  switch  ( granularity )   {  case  Granularity . GRANULARITY_PERMISSION_LEVEL :  return  """"GRANULARITY_PERMISSION_LEVEL"""" ;  case  Granularity . GRANULARITY_COARSE :  return  """"GRANULARITY_COARSE"""" ;  case  Granularity . GRANULARITY_FINE :  return  """"GRANULARITY_FINE"""" ;  default:  throw  new   IllegalArgumentException () ;  }  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  Email   email   =  ( Email )   o ;  return  Objects . equals ( this . type ,  email . type )   &&  Objects . equals ( this . value ,  email . value )   &&  Objects . equals ( this . primary ,  email . primary ) ;  }
public   void   onDisconnectReceived ( WearableConnection   connection ,  Connect   connect )   {  for  ( ConnectionConfiguration   config   :  getConfigurations () )   {  if  ( config . nodeId . equals ( connect . id ) )   {  config . connected   =   false ;  }  }  Log . d ( TAG ,  """"Removing connection from list of open connections: """"   +   connection ) ;  activeConnections . remove ( connect . id ) ;  onPeerDisconnected ( new   NodeParcelable ( connect . id ,  connect . name ) ) ;  }
public   static   Subject . Factory < CompilationSubject ,  Compilation >   compilations ()   {  return  FACTORY ;  }
@ Override  public   int   hashCode ()   {  return  Arrays . hashCode ( new   Object [] { Arrays . hashCode ( keyHandle ) ,  Arrays . hashCode ( clientDataJSON ) ,  Arrays . hashCode ( attestationObject ) ,  Arrays . hashCode ( transports ) } ) ;  }
@ Override  @ NonNull  public   View   getView ( int   position ,  View   convertView ,  @ NonNull   ViewGroup   parent )   {  convertView   =   super . getView ( position ,  convertView ,  parent ) ;  TextView   title   =  convertView . findViewById ( android . R . id . text1 ) ;  File   f   =  getItem ( position ) ;  title . setText ( f . getName () ) ;  int   textColor   =  ( f . isDirectory () ) ?   android . R . color . primary_text_light  :  android . R . color . tertiary_text_light ;  title . setTextColor ( ContextCompat . getColor ( getContext () ,  textColor ) ) ;  return  convertView ;  }
@ DataBoundSetter  public   void   setIgnoreUnverifiedSSLPeer ( boolean   ignoreUnverifiedSSLPeer )   {  this . ignoreUnverifiedSSLPeer   =   ignoreUnverifiedSSLPeer ;  }
@ Test  void   shouldSelectLastSuccessfulBuild ()   {  when ( mockProject . getLastSuccessfulBuild () ) . thenReturn ( mockRun ) ;  Run   actualRun   =  extension . select ( mockProject ,  """"lastSuccessful"""" ,  null ) ;  assertThat ( actualRun ,  is ( mockRun ) ) ;  }
public   < R >   R   requireNumber ( Function < Number ,  R >   mapper )   {  if  ( obj   instanceof   Number )   {  return  mapper . apply ( ( Number )   obj ) ;  }  throw  ls . createSchemaException ( typeOfValue () ,  Number . class ) ;  }
public   void   addUserClaim ( String   claimUri ,  String   claimValue )   {  Map < String ,  String >   userClaims   =  getUserClaims () ;  userClaims . put ( claimUri ,  claimValue ) ;  }
public   void   clearAllRoleAuthorization ( String   roleName )   throws  RemoteException ,  UserStoreExceptionException   {  remoteAuthorizationManagerServiceStub . clearAllRoleAuthorization ( roleName ) ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"outboundConnectors"""" )  @ Valid  public   OutboundProvisioningRequest   getOutboundConnectors ()   {  return  outboundConnectors ;  }
public   static   void   setTextSize ( InstanceSettings   settings ,  RemoteViews   rv ,  int   viewId ,  int   dimenId )   {  rv . setFloat ( viewId ,  METHOD_SET_TEXT_SIZE ,  getScaledValueInScaledPixels ( settings ,  dimenId ) ) ;  }
public   void   addUserStore ( UserStoreDTO   userStoreDTO )   throws  Exception   {  stub . addUserStore ( userStoreDTO ) ;  }
public   static   String   concat ( String ...   data )   {  var   sb   =  new   StringBuilder () ;  for  ( var   d   :  data )   {  sb . append ( d ) ;  }  return  sb . toString () ;  }
private   URI   getBaseURIFor (  Node   node )   {  try  {  return  new   URI (  xpath (  """"ancestor-or-self::*/@xml:base"""" ) . evaluate (  node ) ) ;  }   catch  (  XPathExpressionException   e )   {  assert  false ;  }   catch  (  URISyntaxException   e )   {  assert  true ;  }  return  null ;  }
private   < T >   DecodedValue   decode ( CacheKey < T >   key )   throws  IOException   {  int   offset   =  key . getOffset () ;  if  ( offset   >=   this . buffer . capacity () )   {  throw  new   InvalidDatabaseException ( """"The MaxMind DB file's data section contains bad data: """"  +   """"pointer larger than the database."""" ) ;  }  this . buffer . position ( offset ) ;  Class < T >   cls   =  key . getCls () ;  return  decode ( cls ,  key . getType () ) ;  }
public   String   getLocalFeatureImportancePath ()   {  return  new   Path ( getLocalFeatureImportanceFolder () ,  FEATURE_IMPORTANCE_FILE ) . toString () ;  }
public   GivenStage   $_executors ( int   i )   {  numExecutorsPerNode   =   i ;  return  self () ;  }
protected   SchemaException   multiplexFailure ()   {  return  ls . createSchemaException ( typeOfValue () ,  actions . keySet () ) ;  }
private   static   String   pack ( final   Iterable < ConstraintViolation < Object > >   errs )   {  final   StringBuilder   text   =  new   StringBuilder ( 0 ) ;  for  ( final   ConstraintViolation < ? >   violation   :  errs )   {  if  ( text . length ()   >   0 )   {  text . append ( """"; """" ) ;  }  text . append ( violation . getMessage () ) ;  }  return  text . toString () ;  }
public   FormValidation   doCheckTimeout ( @ QueryParameter   String   timeout )   {  try  {  Integer . parseInt ( timeout ) ;  return  FormValidation . ok () ;  }   catch  ( NumberFormatException   e )   {  return  FormValidation . error ( """"Not a number"""" ) ;  }  }
@ Override  public   boolean   equals ( Object   obj )   {  if  ( this   ==   obj )   {  return  true ;  }  if  ( obj   ==   null )   {  return  false ;  }  if  ( ! ( obj   instanceof   Cache ) )   {  return  false ;  }  Cache   otherCache   =  ( Cache )   obj ;  return  id . equals ( otherCache . getId () ) ;  }
@ Override  public   Task < Integer >   showConfirmationDialog ( @ NonNull   Activity   activity )   {  throw  new   UnsupportedOperationException () ;  }
@ Test  public   void   minimumFailureLong ()   {  NumberSchema   subject   =  buildWithLocation ( NumberSchema . builder () . minimum ( 2 ^ 62L + 1 ) ) ;  TestSupport . failureOf ( subject )  . expectedKeyword ( """"minimum"""" )  . input ( 2 ^ 62L )  . expect () ;  }
@ Test  void   trim ()   {  assertEquals ( """"abc"""" ,  U . trim ( """"  abc  """" ) ) ;  assertEquals ( """"abc"""" ,  new   U < String > ( """"  abc  """" ) . trim () ) ;  assertEquals ( """"abc"""" ,  U . chain ( """"  abc  """" ) . trim () . item () ) ;  assertEquals ( """""""" ,  U . trim ( """""""" ) ) ;  assertEquals ( """" """" ,  U . trim ( """" """" ,  """""""" ) ) ;  assertEquals ( """"abc"""" ,  U . trim ( """"-_-abc-_-"""" ,  """"_-"""" ) ) ;  assertEquals ( """"abc"""" ,  new   U < String > ( """"-_-abc-_-"""" ) . trimWith ( """"_-"""" ) ) ;  assertEquals ( """"abc"""" ,  U . chain ( """"-_-abc-_-"""" ) . trim ( """"_-"""" ) . item () ) ;  assertEquals ( """"    """" ,  U . trim ( """"    """" ,  """" """" ) ) ;  }
public   void   setAddress ( Address   address )  {  this . address   =   address ;  }
private   void   addBitmapToDiskCache ( String   key ,  Bitmap   bitmap )   {  File   file   =  getDiskCacheFile ( key ) ;  try  ( FileOutputStream   outputStream   =  new   FileOutputStream ( file ) )   {  bitmap . compress ( Bitmap . CompressFormat . PNG ,  100 ,  outputStream ) ;  }   catch  ( IOException   e )   {  Log . e ( TAG ,  """"addBitmapToDiskCache: """" ,  e ) ;  }  }
@ Override  public   void   setResultCallback ( ResultCallback < R >   callback )   {  callback . onResult ( value ) ;  }
public   < F >   Chain < Map < F ,  List < T > > >   groupBy ( final   Function < T ,  F >   func )   {  return  new   Chain <> ( Underscore . groupBy ( list ,  func ) ) ;  }
public   void   listAllResidences ( Player   player ,  int   page )   {  this . listAllResidences ( player ,  page ,  false ) ;  }
@ Override  public   PendingResult < GetFdForAssetResult >   getFdForAsset ( GoogleApiClient   client ,  Asset   asset )   {  throw  new   UnsupportedOperationException () ;  }
public   FunctionLibrary   getFunctionLibrary ( String   functionLibraryName )   throws  AxisFault   {  try  {  return  stub . getFunctionLibrary ( functionLibraryName ) ;  }   catch  ( RemoteException  |  FunctionLibraryManagementAdminServiceFunctionLibraryManagementException   e )   {  handleException ( e ) ;  }  return  null ;  }
@ SuppressLint ( """"ApplySharedPref"""" )  public   static   void   setPrivJSON ( String   key ,  JSONObject   value )   {  privPrefs . edit () . putString ( key ,  value   ==   null  ?   null   :  value . toString () ) . commit () ;  }
@ Test  void   decompressGzip ()   throws  IOException   {  Files . deleteIfExists ( Paths . get ( """"file.txt"""" ) ) ;  U . decompressGzip ( """"src/test/resources/file.gz"""" ,  """"file.txt"""" ) ;  assertEquals ( 65 ,  Files . readAllBytes ( Paths . get ( """"file.txt"""" ) ) . length ) ;  }
@ RequiresPermission ( android . Manifest . permission . LOCATION_HARDWARE )  public   boolean   isScanning ()   {  throw  new   UnsupportedOperationException () ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  PasswordUpdatingUser   that   =  ( PasswordUpdatingUser )   o ;  return  Objects . equals ( updatingCredential ,  that . updatingCredential ) ;  }
@ Override  public   DiffResult   isCoreChanged ()   {  if  ( CollectionUtils . isEmpty ( missing )   &&   CollectionUtils . isEmpty ( increased ) )   {  return  DiffResult . NO_CHANGES ;  }  if  ( CollectionUtils . isNotEmpty ( missing ) )   {  if  ( SECURITY_REQUIREMENTS_DECREASED . enabled ( context ) )   {  return  DiffResult . INCOMPATIBLE ;  }  }  return  DiffResult . COMPATIBLE ;  }
@ SuppressWarnings ( """"deprecation"""" )  @ Override  public   Boolean   exec ( Tuple   input )   throws  IOException   {  
public   void   setRenderMode ( final   String   aValue )   {  RenderMode   renderMode   =  null ;  if  ( aValue   !=   null )   {  try  {  renderMode   =   RenderMode . valueOf ( aValue . toUpperCase ( Locale . ENGLISH ) ) ;  }   catch  ( final   Exception   e )   {  
ImmutableList < JavaFileObject >   getGeneratedSources ()   {  ImmutableList . Builder < JavaFileObject >   result   =  ImmutableList . builder () ;  for  ( Map . Entry < URI ,  JavaFileObject >   entry   :  inMemoryOutputs . asMap () . entrySet () )   {  if  ( requireNonNull ( entry . getKey () . getPath () )  . startsWith ( """"/""""   +   StandardLocation . SOURCE_OUTPUT . name () )  &&   ( entry . getValue () . getKind ()   ==   Kind . SOURCE ) )   {  result . add ( entry . getValue () ) ;  }  }  return  result . build () ;  }
@ JsonIgnore  public   void   setMissingPercentage ( Double   missingPercentage )   {  columnStats . setMissingPercentage ( missingPercentage ) ;  }
@ Override  public   String   toString ()   {  return  ToStringHelper . name ( """"GetServiceRequest"""" )  . value ( GmsService . nameFromServiceId ( serviceId ) )  . field ( """"packageName"""" ,  packageName )  . field ( """"gmsVersion"""" ,  gmsVersion )  . field ( """"scopes"""" ,  scopes )  . field ( """"extras"""" ,  extras )  . field ( """"account"""" ,  account )  . field ( """"defaultFeatures"""" ,  defaultFeatures )  . field ( """"apiFeatures"""" ,  apiFeatures )  . field ( """"supportsConnectionInfo"""" ,  supportsConnectionInfo )  . field ( """"attributionTag"""" ,  attributionTag )  . end () ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Send token post request"""" ,  dependsOnMethods   =   """"testSendApprovalPost"""" )  public   void   testTokenRequest ()   throws  Exception   {  
@ Override  protected   void   onThrown ( Level   world ,  ThrowableGrenadeEntity   entity )  {  world . playSound ( null ,  entity . getX () ,  entity . getY () ,  entity . getZ () ,  ModSounds . ITEM_GRENADE_PIN . get () ,  SoundSource . PLAYERS ,  1.0F ,  1.0F ) ;  }
public   static   WorkbenchIngredient   of ( TagKey < Item >   tag ,  int   count )  {  return  new   WorkbenchIngredient ( new   Ingredient . TagValue ( tag ) ,  count ) ;  }
@ Test  @ LocalData  public   void   userCantAccessJobNotInRootView ()   throws  Exception   {  FreeStyleProject   project   =  jenkinsRule . jenkins . getItemByFullName ( """"hiddenJob"""" ,  FreeStyleProject . class ) ;  WebClient   wc   =  jenkinsRule . createWebClient () ;  wc . withThrowExceptionOnFailingStatusCode ( false ) ;  wc . login ( """"tester"""" ,  """"tester"""" ) ;  HtmlPage   managePage   =  wc . goTo ( project . getUrl () ) ;  assertThat ( managePage . getWebResponse () . getStatusCode () ,  is ( 404 ) ) ;  }
private   void   createBackupFile ()   {  try  {  Files . copy ( pomFile . toPath () ,  backupFile . toPath () ) ;  }   catch  ( IOException   e )   {  throw  new   FailureException ( """"Could not create backup file to filename: """"   +   newName ,  e ) ;  }  }
@ SuppressWarnings ( """"rawtypes"""" )  public   List < Layer >   getHiddenLayers ()   {  return  hiddenLayers ;  }
public   Builder   setAuthenticationExtensions ( @ Nullable   AuthenticationExtensions   authenticationExtensions )   {  this . authenticationExtensions   =   authenticationExtensions ;  return  this ;  }
public   UserObject   password ( String   password )   {  this . password   =   password ;  return  this ;  }
public   final   double   getRate ()   {  synchronized  ( mutex () )   {  return  doGetRate () ;  }  }
private   static   boolean   isHelpOption ( String   str )   {  return  """"h"""" . equalsIgnoreCase ( str )   ||   """"-h"""" . equalsIgnoreCase ( str )   ||   """"help"""" . equalsIgnoreCase ( str )  ||   """"-help"""" . equalsIgnoreCase ( str ) ;  }
private   ServerFile   getFile ()   {  return  getIntent () . getParcelableExtra ( Intents . Extras . SERVER_FILE ) ;  }
private   File   getUploadDir ( String   uploadId )   {  return  new   File ( multipartDir   +   PATH_DELIMITER   +   uploadId ) ;  }
private   void   sendUpdate ( JSONObject   obj ,  boolean   keepCallback ,  PluginResult . Status   status )   {  if  ( callbackContext   !=   null )   {  PluginResult   result   =  new   PluginResult ( status ,  obj ) ;  result . setKeepCallback ( keepCallback ) ;  callbackContext . sendPluginResult ( result ) ;  if  ( ! keepCallback )   {  callbackContext   =   null ;  }  }  }
@ Test  @ Timeout ( 5000 )  public   void   testHandshakeRejectionTestCase12 ()   throws  Exception   {  testProtocolRejection ( 12 ,  new   Draft_6455 ( Collections . < IExtension > emptyList () , Collections . < IProtocol > singletonList ( new   Protocol ( """"chat"""" ) ) ) ) ;  }
@ Test  void   minusOneIndentCharacterShouldResultInOneTab ()   {  var   pluginParameters   =  PluginParameters . builder () . setIndent ( - 1 ,  true ,  false ,  null ) . build () ;  assertEquals ( """"\t"""" ,  pluginParameters . indentCharacters ) ;  }
@ Override  public   BiasLayer   combine ( BiasLayer   from )   {  this . wGrad   +=   from . getwGrad () ;  return  this ;  }
@ Test  public   void   testBaseDirAlreadyExistsAsFile ()   throws  Exception   {  BASE_DIR . getParentFile () . mkdirs () ;  PrintWriter   out   =  null ;  try  {  out   =   new   PrintWriter ( BASE_DIR ) . append ( """""""" ) ;  }   finally  {  if  ( out   !=   null )   {  out . close () ;  }  }  assertTrue ( BASE_DIR . isFile () ) ;  try  {  Main . resolveTomcatBaseDir ( PORT ,  null ) ;  fail () ;  }   catch  ( IOException   e )   {  
@ BeforeClass  public   void   setUp ()   {  jsonMapper   =   new   ObjectMapper () ;  }
@ Test  public   void   getNode_nodeReturnedForValidLabel ()   {  Optional < Node >   node   =  graphApi . getNode ( """"a"""" ,  Optional . of ( """"alabel"""" ) ) ;  assertThat ( node . isPresent () ,  is ( true ) ) ;  assertThat ( node . get () ,  is ( a ) ) ;  }
public   static   boolean   isNightMode ()   {  return  WppCore . getDefaultTheme ()   ==   - 1  ?   isNightModeBySystem ()   :  WppCore . getDefaultTheme ()   ==   2 ;  }
@ POST  @ Timed  @ Consumes ( MediaType . APPLICATION_JSON )  @ Path ( """"/enrichment"""" )  public   List < AnalyzerResult >   enrichPost ( @ Valid   AnalyzeRequest   analyzeRequest )   {  HyperGeometricAnalyzer   hyperGeometricAnalyzer   =  provider . get () ;  return  hyperGeometricAnalyzer . analyze ( analyzeRequest ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   T   max ()   {  return  ( T )   max ( ( Collection )   iterable ) ;  }
private   static   String   formatType ( ModuleHolder . Type   type )   {  return  type . name () . substring ( 0 ,  3 )   +   """"_""""   +   type . ordinal () ;  }
public   OIDCMetaData   tokenEndpointAllowReusePvtKeyJwt ( Boolean   tokenEndpointAllowReusePvtKeyJwt )   {  this . tokenEndpointAllowReusePvtKeyJwt   =   tokenEndpointAllowReusePvtKeyJwt ;  return  this ;  }
@ Test  void   shouldSelectFirstFailedBuild ()   {  when ( mockProject . getFirstBuild () ) . thenReturn ( mockRun ) ;  when ( mockRun . getNextBuild () ) . thenReturn ( mockRun ) ;  when ( mockRun . getResult () ) . thenReturn ( Result . FAILURE ) ;  Run   actualRun   =  extension . select ( mockProject ,  """"firstFailed"""" ,  null ) ;  assertThat ( actualRun ,  is ( mockRun ) ) ;  }
@ Override  public   EurekaHttpResponse < Void >   cancel ( String   appName ,  String   id )   {  final   ResponseEntity < Void >   response   =  restClient . delete ()  . uri ( builder  ->   builder . pathSegment ( """"apps"""" ,  appName ,  id ) . build () )  . retrieve ()  . toBodilessEntity () ;  return  eurekaHttpResponse ( response ) ;  }
public   static   PutDataRequest   create ( Uri   uri )   {  return  new   PutDataRequest ( uri ) ;  }
public   void   setLR_Gain ( int   value )   {  setOption ( RealSense . RS_OPTION_R200_LR_GAIN ,  value ) ;  }
public   static   String   xmlOrJsonToJson ( String   xmlOrJson )   {  return  xmlOrJsonToJson ( xmlOrJson ,  Json . JsonStringBuilder . Step . TWO_SPACES ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  @ Test  void   toJsonFromXml5 ()   {  final   String   xml   =  """"<__FU____EE__a></__FU____EE__a>"""" ;  assertEquals ( """"{\n""""  +   """"  \""""-!a\"""": {\n""""  +   """"  },\n""""  +   """"  \""""#omit-xml-declaration\"""": \""""yes\""""\n""""  +   """"}"""" , U . toJson ( ( Map < String ,  Object > )   U . fromXml ( xml ) ) ) ;  }
public   static   ScheduleDatabase   getScheduleDatabase ( Context   context ,  String   name )   {  if ( scheduleDatabase   ==   null )   {  scheduleDatabase   =   Room . databaseBuilder ( context , ScheduleDatabase . class ,  name ) . build () ;  }  return  scheduleDatabase ;  }
public   void   setPkce ( OAuth2PKCEConfiguration   pkce )   {  this . pkce   =   pkce ;  }
@ BeforeMethod  public   final   void   initReport ()  {  report   =   mock ( ProcessingReport . class ) ;  }
 <argument pos:start=""""""""622:75"""""""" pos:end=""""""""622:91""""""""><expr pos:start=""""""""622:75"""""""" pos:end=""""""""622:91""""""""><call pos:start=""""""""622:75"""""""" pos:end=""""""""622:91""""""""><name pos:start=""""""""622:75"""""""" pos:end=""""""""622:89"""""""">getFailUnstable</name><argument_list pos:start=""""""""622:90"""""""" pos:end=""""""""622:91"""""""">()</argument_list></call></expr></argument>
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Send login post request."""" , dependsOnMethods   =   """"testImplicitGrantSendAuthRequestPost"""" )  public   void   testImplicitGrantSendLoginPost ()   throws  Exception   {  sessionDataKeyConsent   =   completeLogin ( client ,  sessionDataKey ,  loginUsername ,  loginPassword ) ;  Assert . assertNotNull ( sessionDataKeyConsent ,  """"Invalid session key consent."""" ) ;  }
boolean   isSliding ()  {  for  ( Pointer   ptr   :  _ptrs )  if  ( ptr . hasFlagsAny ( FLAG_P_SLIDING ) )  return  true ;  return  false ;  }
public   play . api . mvc . Result   supplementResponse ( final   play . api . mvc . Result   result )   {  return  supplementResponse ( result . asJava () ) . asScala () ;  }
@ BeforeEach  void   setUp ()   {  MockitoAnnotations . openMocks ( this ) ;  resolver   =   new   BuildParameterResolverExtension () ;  }
 <argument pos:start=""""""""2121:50"""""""" pos:end=""""""""2121:55""""""""><expr pos:start=""""""""2121:50"""""""" pos:end=""""""""2121:55""""""""><name pos:start=""""""""2121:50"""""""" pos:end=""""""""2121:55"""""""">update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
protected   static   void   setUpCharacterLevels ()   {  characterLevels . put ( """"Sewer Rat"""" ,  5 ) ;  characterLevels . put ( """"Recruit"""" ,  3 ) ;  characterLevels . put ( """"Syndicate Member"""" ,  4 ) ;  characterLevels . put ( """"Brotherhood Member"""" ,  4 ) ;  }
@ DisplayName ( """"SERIAL :: Read Byte Array"""" )  @ Order ( 12 )  @ Test  public   void   readByteArray ()   {  
@ Override  public   ProgressStyle   progressStyle ()   {  return  new   SimpleProgressStyle () ;  }
private   void   runLocalTrain ()   throws  IOException   {  if ( Constants . TENSORFLOW . equalsIgnoreCase ( modelConfig . getAlgorithm () ) )   {  runTensorflowLocalTrain () ;  return;  }   else  {  runAkkaTrain ( isForVarSelect  ?   1   :  modelConfig . getBaggingNum () ) ;  }  }
@ Test  public   void   thatItemsKeysInParameterDefinitionsAreSuggested ()   {  getCaretCompletions ( """"items_in_parameter_definitions"""" )  . assertContains ( """"enum"""" , """"type"""" , """"format"""" , """"items"""" , """"collectionFormat"""" , """"default"""" , """"maximum"""" , """"exclusiveMaximum"""" , """"minimum"""" , """"exclusiveMinimum"""" , """"maxLength"""" , """"minLength"""" , """"pattern"""" , """"maxItems"""" , """"minItems"""" , """"uniqueItems"""" , """"multipleOf"""" )  . isOfSize ( 17 ) ;  }
@ Test  void   lowerFirst ()   {  assertEquals ( """"fred"""" ,  U . lowerFirst ( """"Fred"""" ) ) ;  assertEquals ( """"fred"""" ,  new   U < String > ( """"Fred"""" ) . lowerFirst () ) ;  assertEquals ( """"fred"""" ,  U . chain ( """"Fred"""" ) . lowerFirst () . item () ) ;  assertEquals ( """"fRED"""" ,  U . lowerFirst ( """"FRED"""" ) ) ;  }
public   Graphics2D   createGraphics ()   {  if  ( buffer   ==   null   ||   buffer . getWidth ()   !=   canvas . getWidth ()   ||   buffer . getHeight ()   !=   canvas . getHeight () )   {  BufferedImage   newbuffer   =  canvas . getGraphicsConfiguration () . createCompatibleImage ( canvas . getWidth () ,  canvas . getHeight () ,  Transparency . TRANSLUCENT ) ;  if  ( buffer   !=   null )   {  Graphics   g   =  newbuffer . getGraphics () ;  g . drawImage ( buffer ,  0 ,  0 ,  null ) ;  g . dispose () ;  }  buffer   =   newbuffer ;  }  return  buffer . createGraphics () ;  }
@ Deprecated  public   void   setEsNodes ( String []   esNodes )   {  Collection < HttpHost >   hosts   =  new   ArrayList <> ( esNodes . length ) ;  for  ( String   esNode   :  esNodes )   {  hosts . add ( HttpHost . create ( esNode ) ) ;  }  this . esNodes   =   hosts ;  }
@ ApiModelProperty ( example   =   """"false"""" ,  value   =   """"Decides whether consent is granted for the trusted app."""" )  @ JsonProperty ( """"isConsentGranted"""" )  @ Valid  public   Boolean   getIsConsentGranted ()   {  return  isConsentGranted ;  }
public   String   build (  final   File   directory )   throws  NoSuchAlgorithmException ,  IOException   {  final   String   rpm   =  format . getLead () . getName ()   +   """".""""   +   format . getLead () . getArch () . toString () . toLowerCase ()   +   """".rpm"""" ;  final   File   file   =  new   File (  directory ,  rpm ) ;  if  (  file . exists () )   file . delete () ;  RandomAccessFile   raFile   =  new   RandomAccessFile (  file ,  """"rw"""" ) ;  build ( raFile . getChannel () ) ;  raFile . close () ;  return  rpm ;  }
@ Test  public   void   shouldHandleNoTrailingSlash ()   {  String   baseUri   =  """"http:
public   void   addCandidateSeed ( CandidateSeed   candidateSeed )   {  this . seedList . add ( candidateSeed ) ;  this . seedMapping . put ( candidateSeed . getId () ,  candidateSeed ) ;  }
public   OptionValue < Boolean >   choices ( String   optionName , Supplier < Boolean >   getter , BooleanConsumer   setter , @ Nullable   Consumer < CycleButton . Builder < Boolean > >   builderConsumer )   {  CycleButton . Builder < Boolean >   builder   =  CycleButton . booleanBuilder ( OPTION_ON ,  OPTION_OFF ) ;  if  ( builderConsumer   !=   null )   {  builderConsumer . accept ( builder ) ;  }  return  add ( new   CycleOptionValue <> ( optionName ,  builder ,  getter ,  setter ) ) ;  }
private   String   stripUserInfo ( String   serviceUrl )   {  return  UriComponentsBuilder . fromUriString ( serviceUrl ) . userInfo ( null ) . toUriString () ;  }
@ NonNull  @ PublicApi ( exclude   =   true )  @ RequiresPermission ( Manifest . permission . UPDATE_DEVICE_STATS )  public   Builder   setWorkSource ( @ Nullable   WorkSource   workSource )   {  this . workSource   =   workSource ;  return  this ;  }
public   boolean   isPassive ()   {  return  priority   ==   Priority . PRIORITY_PASSIVE ;  }
public   void   setOtherConfigs ( Map < String ,  Object >   otherConfigs )   {  this . otherConfigs   =   otherConfigs ;  }
public   void   setProvisioningMethod ( String   provisioningMethod )   {  this . provisioningMethod   =   provisioningMethod ;  }
@ Override  public   void   appendServerData ( CompoundTag   data ,  BlockAccessor   accessor )   {  AbstractFurnaceBlockEntity   furnace   =  ( AbstractFurnaceBlockEntity )   accessor . getBlockEntity () ;  data . putInt ( """"Fuel"""" ,  furnace . litTimeRemaining ) ;  }
@ ApiModelProperty ( example   =   """"isB2BSelfServiceApp"""" )  @ JsonProperty ( """"displayName"""" )  @ Valid  public   String   getDisplayName ()   {  return  displayName ;  }
public   boolean   supportsStatementPooling ()   throws  SQLException   {  return  false ;  }
@ Override  public   void   setGroupInfoBoolean ( String   world ,  String   group ,  String   node ,  boolean   value )   {  worldCheck ( world ) ;  privs . getGroupNode ( group ) . set ( node ,  value ) ;  }
 <argument pos:start=""""""""225:107"""""""" pos:end=""""""""225:114""""""""><expr pos:start=""""""""225:107"""""""" pos:end=""""""""225:114""""""""><name pos:start=""""""""225:107"""""""" pos:end=""""""""225:114"""""""">tmpRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Test  public   void   testGetApplicationWithInvalidId ()   {  Response   response   = getResponseOfGet ( APPLICATION_MANAGEMENT_API_BASE_PATH   +   PATH_SEPARATOR   +   INVALID_APPLICATION_ID ) ;  validateErrorResponse ( response ,  HttpStatus . SC_NOT_FOUND ,  """"APP-60006"""" ) ;  }
public   void   checkAutofillPermissionState ( IAutofillPermissionStateCallback   callback )   {  try  {  getServiceInterface () . checkAutofillPermissionState ( callback ) ;  }   catch  ( RemoteException   e )   {  try  {  callback . onCheckPermissionStateResult ( Status . INTERNAL_ERROR ,  - 1 ) ;  }   catch  ( RemoteException   ignored )   {  }  }  }
public   static   void   reset ()   {  synchronized  ( WailaCommonRegistration . class )   {  INSTANCE   =   new   WailaCommonRegistration () ;  }  }
@ Test  public   void   testStdMethods ()   {  assertEquals ( """"JacksonInject.Value(id=null,useInput=null)"""" , EMPTY . toString () ) ;  int   x   =  EMPTY . hashCode () ;  if  ( x   ==   0 )   {   
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"replyTo"""" )  @ Valid  public   String   getReplyTo ()   {  return  replyTo ;  }
@ NonNull  public   static   String   getContactName ( Object   userJid )   {  loadWADatabase () ;  if  ( mWaDatabase   ==   null   ||   userJid   ==   null )   return  """""""" ;  String   name   =  getSContactName ( userJid ,  false ) ;  if  ( ! TextUtils . isEmpty ( name ) )   return  name ;  return  getWppContactName ( userJid ) ;  }
@ Override  public   final   boolean   isRequestBody ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$"""" ) ;  }
@ Override  public   ResourceLocation   getUid ()   {  return  JadeIds . MC_BEEHIVE ;  }
@ Test  public   void   testToString ()   throws  Exception   {  Protocol   protocol0   =  new   Protocol ( """""""" ) ;  assertEquals ( """""""" ,  protocol0 . getProvidedProtocol () ) ;  Protocol   protocol1   =  new   Protocol ( """"protocol"""" ) ;  assertEquals ( """"protocol"""" ,  protocol1 . getProvidedProtocol () ) ;  }
private   void   fillArguments ()   {  if  ( missingParameters () )   {  mArguments . putString ( """"cleanoutDays"""" ,  """"0"""" ) ;  }  }
@ Test  public   void   emptyTimezones ()   throws  Exception   {  System . out . println ( """"- Empty Timezones"""" ) ;  for  ( BaseCountry   c   :  countries )   {  if  ( c . getTimezones ()   ==   null   ||   c . getTimezones () . isEmpty () )   {  System . out . println ( c . getName () ) ;  }   else  {  for ( String   timezone   :  c . getTimezones () )   {  if  ( ! timezone . contains ( """"UTC"""" ) )   {  System . out . println ( c . getName () ) ;  }  }  }  }  }
@ BeforeEach  void   setUp ()   {  extension   =   new   SpecialValueParameterResolverExtension () ;  mockProject   =   Mockito . mock ( Job . class ) ;  mockRun   =   Mockito . mock ( Run . class ) ;  when ( mockRun . getId () ) . thenReturn ( """"1234"""" ) ;  when ( mockRun . getNumber () ) . thenReturn ( 1234 ) ;  when ( mockRun . getDurationString () ) . thenReturn ( """"23:35"""" ) ;  when ( mockRun . getTimestampString () ) . thenReturn ( """"23:35"""" ) ;  when ( mockRun . getDisplayName () ) . thenReturn ( """"display name"""" ) ;  when ( mockRun . getDescription () ) . thenReturn ( """"run description"""" ) ;  }
@ Test  void   setInterval ()   {  final   Integer []   counter   =  new   Integer []   { 0 } ;  Supplier < Void >   incr   = ()  ->  {  if  ( counter [ 0 ]   <   4 )   {  counter [ 0 ] ++ ;  }  return  null ;  } ;  Underscore . setInterval ( incr ,  10 ) ;  await () . atLeast ( 45 ,  TimeUnit . MILLISECONDS )  . until ( ()  ->  {  assertTrue ( asList ( 0 ,  4 ) . contains ( counter [ 0 ] ) , """"Counter is not in range [0, 4] """"   +   counter [ 0 ] ) ;  return  true ;  } ) ;  }
private   float   choose ( boolean   expand ,  float   x ,  float   y )   {  return  vertical   ^   expand  ?   x   :  y ;  }
@ After  public   void   tearDown ()   throws  IOException   {  AllureResultsUtils . setResultsDirectory ( null ) ;  AllureTestUtils . deleteNotEmptyDirectory ( resultsDir ) ;  }
@ SuppressWarnings (  """"unchecked"""" )  public   <  T >   Entry <  T >   createEntry (  Tag   tag ,  T   values )   {  Entry <  T >   entry   =  (   Entry <  T > )   createEntry (  tag . getCode () ,  tag . getType () ,  values . getClass () . isArray ()  ?   Array . getLength (  values )   :  1 ) ;  entry . setValues (  values ) ;  return  entry ;  }
@ Test  void   emptyLinesInXmlAndIndentParameterShouldNotAffectVerify2 ()   {  SortPomImplUtil . create ()  . predefinedSortOrder ( """"default_0_4_0"""" )  . indentBLankLines ()  . testVerifyXmlIsOrdered ( """"/EmptyRow_input2.xml"""" ) ;  }
default   < T   extends  IO >   T   getIO ( String   id ,  Class < T >   ioClass )   throws  IOInvalidIDException ,  IONotFoundException   {  return  io ( id ,  ioClass ) ;  }
@ NonNull  @ Override  public   String   getDisplayName ()   {  return  Messages . CoberturaReportAdapter_displayName () ;  }
@ Test  public   void   testUpdateUserStoreByInvalidIdNegativeCase ()   throws  IOException   {  String   body   =  readResource ( """"user-store-add-secondary-user-store.json"""" ) ;  Response   response   =  getResponseOfPut ( USER_STORE_PATH_COMPONENT   +   PATH_SEPARATOR   +  INVALID_DOMAIN_ID ,  body ) ;    validateErrorResponse ( response ,  HttpStatus . SC_BAD_REQUEST ,  """"SUS-60009"""" ) ;  }
default   int   serWrite ( int   handle ,  ByteBuffer   buffer ,  int   offset ,  int   length ) {  
@ Override  public   void   onDeleted ( Context   context ,  int []   appWidgetIds )   {  Log . d ( TAG ,  """"onDeleted, widgetIds:""""   +   asList ( appWidgetIds ) ) ;  super . onDeleted ( context ,  appWidgetIds ) ;  for  ( int   widgetId   :  appWidgetIds )   {  AllSettings . delete ( context ,  widgetId ) ;  }  }
public   void   highlightRegion ( RegionBounds   region ,  Collection < Note >   allNotes )   {  clearHighlights () ;  if  ( region . equals ( RegionBounds . INVALID ) )   {  return;  }  
protected   void   listParents (  final   List <  String >   parents ,  final   File   file )   {  final   File   parent   =  file . getParentFile () ;  if  (  parent   ==   null )   return;  final   String   path   =  normalizePath (  parent . getPath () ) ;  if  (  builtins . contains (  path ) )   return;  parents . add (  path ) ;  listParents (  parents ,  parent ) ;  }
private   String   getX509CertSHA256Thumbprint ( String   cert )   {  try  {  X509Certificate   certificate   =  parseCertificate ( cert ) ;  JWK   parsedJWK   =  JWK . parse ( certificate ) ;  return  parsedJWK . getX509CertSHA256Thumbprint () . toString () ;  }   catch  ( CertificateException  |  JOSEException   e )   {  Assert . fail ( """"Failed to compute SHA 256 thumb print."""" ,  e ) ;  }  return  null ;  }
private   boolean   hasProtocol ( URI   uri )   {  return  uri . getScheme ()   !=   null ;  }
@ Override  public   void   decodeFrame ( Framedata   inputFrame )   throws  InvalidDataException   {  
@ Before  public   void   setUp ()   {  MockApplication   app   =  MockApplication . setUp ( ()  ->  { } ) ;  app . registerService ( IndexFacade . class ,  fakeIndexFacade ) ;  app . registerService ( PsiFileService . class ,  fakePsiFileService ) ;  app . registerService ( SwaggerFileService . class ,  fakeSwaggerFileService ) ;  app . registerService ( ProjectManager . class ,  fakeProjectManager ) ;  }
public   String   getSortedXml ( Document   newDocument )   {  try  ( var   out   =  new   StringWriter () ; var   writer   =  new   StringLineSeparatorWriter ( out ,  lineSeparator ) )   {  XMLWriter   xmlWriter   = new   PatchedXMLWriter ( writer , createPrettyFormat () , spaceBeforeCloseEmptyElement , indentBlankLines , indentAttribute , endWithNewline ) ;  xmlWriter . write ( newDocument ) ;  writer . writeDelayedNewline () ;  return  writer . toString () ;  }   catch  ( IOException   ioex )   {  throw  new   FailureException ( """"Could not format pom files content"""" ,  ioex ) ;  }  }
public   void   onItemClick ( AdapterView < ? >   parent ,  View   v ,  int   pos ,  long   id )  {  Config   config   =  Config . globalConfig () ;  Integer   used   =  _lastUsed . get ( _emojiArray . get ( pos ) ) ;  _lastUsed . put ( _emojiArray . get ( pos ) ,  ( used   ==   null )  ?   1   :  used . intValue ()   +   1 ) ;  config . handler . key_up ( _emojiArray . get ( pos ) . kv () ,  Pointers . Modifiers . EMPTY ) ;  saveLastUsed () ;   
@ Test ( dependsOnMethods   =   """"keywordExists"""" )  public   void   successfulSubSchemaLeadsToSuccess ()  throws  ProcessingException  {  processor   =   new   DummyProcessor ( WantedState . OK ,  msg ) ;  validator . validate ( processor ,  report ,  BUNDLE ,  data ) ;  verify ( report ,  never () ) . error ( anyMessage () ) ;  }
public   UserStoreListResponse   self ( String   self )   {  this . self   =   self ;  return  this ;  }
@ Override  protected   void   processCursorUpLine ( int   count )   {  emitter . emitInvisibleSequence () ;  }
private   static   Instant   getTimestampMicrosValueOrRandom ( final   List < String >   fieldValueList )   {  return  getRandomLocalDateTime ( fieldValueList ) . toInstant ( ZoneOffset . UTC ) ;  }
public   void   setAuthorizationDetailsTypes ( List < AuthorizationDetailsType >   authorizationDetailsTypes )   {  this . authorizationDetailsTypes   =   authorizationDetailsTypes ;  }
@ Override  void   doSetRate ( double   permitsPerSecond ,  double   stableIntervalMicros )   {  double   oldMaxPermits   =  maxPermits ;  double   coldIntervalMicros   =  stableIntervalMicros   *   coldFactor ;  thresholdPermits   =   0.5   *   warmupPeriodMicros   /   stableIntervalMicros ;  maxPermits   =  thresholdPermits   +   2.0   *   warmupPeriodMicros   /   ( stableIntervalMicros   +   coldIntervalMicros ) ;  slope   =   ( coldIntervalMicros   -   stableIntervalMicros )   /   ( maxPermits   -   thresholdPermits ) ;  if  ( oldMaxPermits   ==   Double . POSITIVE_INFINITY )   {  
private   void   doGetPassiveSTSInboundAndAssert ( String   realm ,  String   replyTo )   {  String   path   =  APPLICATION_MANAGEMENT_API_BASE_PATH   +   """"/""""   +   createdAppId   +   INBOUND_PROTOCOLS_PASSIVE_STS_CONTEXT ;  Response   responseOfGet   =  getResponseOfGet ( path ) ;  responseOfGet . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_OK )  . body ( PASSIVE_STS_RELAM ,  equalTo ( realm ) )  . body ( PASSIVE_STS_REPLY_TO ,  equalTo ( replyTo ) ) ;  }
@ Override  public   IDiscoveryManager   getDiscoveryManagerImpl ()   throws  RemoteException   {  if  ( this . discoveryManager   ==   null )   {  this . discoveryManager   =   new   DiscoveryManagerImpl ( this ) ;  }  return  this . discoveryManager ;  }
public   void   updateMetric ( CoverageMetric   metric ,  Ratio   additionalResult )   {  if  ( localResults . containsKey ( metric ) )   {  Ratio   existingResult   =  localResults . get ( metric ) ;  localResults . put ( metric ,  CoverageAggregationRule . combine ( metric ,  existingResult ,  additionalResult ) ) ;  }   else  {  localResults . put ( metric ,  additionalResult ) ;  }  }
@ Override  public   void   onGetSession ( int   status ,  Bundle   bundle )   {  Log . i ( TAG ,  """"onGetSession(""""   +   status   +   """")"""" ) ;  onGetSession ( status ) ;  }
public   String   getProperty ( String   aKey ,  String   aDefault )   {  return  properties . getProperty ( aKey ,  aDefault ) ;  }
public   static   void   updateProp ( String   methodName ,  PickerView   view ,  int   index ,  Dynamic   value ,  Class < ?   extends  com . henninghall . date_picker . DatePickerManager >   aClass ) {  String []   propNames   =  getMethodAnnotation ( methodName ,  aClass ) . names () ;  String   propName   =  propNames [ index ] ;  view . updateProp ( propName ,  value ) ;  }
public   void   addSubModels ( ModelSpec   modelSpec )   {  this . addSubModels ( modelSpec ,  false ) ;  }
public   < T >   ProcessingMessageAssert   hasField ( final   String   name , final   T   value )  {  assertThat ( msg . has ( name ) ) . isTrue () ;  final   String   input   =  msg . get ( name ) . textValue () ;  final   String   expected   =  value . toString () ;  assertThat ( input )  . overridingErrorMessage ( """"Strings differ: wanted """"   +   expected  +   """" but got """"   +   input )  . isEqualTo ( expected ) ;  return  this ;  }
public   static   TestSuiteResult   unmarshal ( Reader   testSuite )   {  return  JAXB . unmarshal ( new   BadXmlCharacterFilterReader ( testSuite ) ,  TestSuiteResult . class ) ;  }
@ Override  public   OptionValue < ? >   createUI ( OptionsList   options , String   optionName , IPluginConfig   config , BiConsumer < ResourceLocation ,  Object >   setter )   {  if  ( slider )   {  return  options . slider ( optionName , ()  ->   config . getFloat ( id ) , f  ->   setter . accept ( id ,  ( int )   ( float )   f ) , min , max , f  ->   ( float )   Math . round ( f ) ) ;  }   else  {  return  options . input ( optionName , ()  ->   config . getInt ( id ) , i  ->   setter . accept ( id ,  Mth . clamp ( i ,  min ,  max ) ) , InputOptionValue . INTEGER . and ( $  ->   isValidValue ( Integer . valueOf ( $ ) ) ) ) ;  }  }
@ Test  public   void   testGetAllEmailTemplateTypesWithIncorrectRequiredAttribute ()   throws  Exception   {  Map < String ,  Object >   requiredAttributeParam   =  new   HashMap <> () ;  requiredAttributeParam . put ( """"requiredAttributes"""" ,  """"template"""" ) ;  Response   response   =  getResponseOfGetWithQueryParams ( EMAIL_TEMPLATES_API_BASE_PATH   +   EMAIL_TEMPLATE_TYPES_PATH , requiredAttributeParam ) ;  validateErrorResponse ( response ,  HttpStatus . SC_BAD_REQUEST ,  """"ETM-50006"""" ) ;  }
@ Override   public   boolean   equals ( Object   o )   {  if  ( this   ==   o )  return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )  return  false ;  SchemaException   that   =  ( SchemaException )   o ;  return  toString () . equals ( that . toString () ) ;  }
public   ChangedSchema   setMultipleOf ( final   ChangedMultipleOf   multipleOf )   {  clearChangedCache () ;  this . multipleOf   =   multipleOf ;  return  this ;  }
@ Test  public   void   findMinAsc ()   {  double   min   =  ArrayUtils . findMin ( arrayAsc ,  0 ) ;  assertTrue ( min   ==   1 ) ;  }
public   static   CharIndexer   create ( char []   array ,  long []   sizes ,  long []   strides )   {  return  new   CharArrayIndexer ( array ,  sizes ,  strides ) ;  }
@ Override  public   final   void   onWebsocketMessage ( WebSocket   conn ,  ByteBuffer   blob )   {  onMessage ( blob ) ;  }
@ Test  void   setsTextContentOfNodes ()   throws  Exception   {  final   Iterable < Directive >   dirs   =  new   Directives ( StringUtils . join ( """"ADD 'root'; ADD 'foo';"""" , """"SET '&quot;Bonnie &amp; Clyde&quot;';"""" , """"UP; ADD 'cops'; SET 'everywhere';"""" ) ) ;  final   Document   dom   =  DocumentBuilderFactory . newInstance ()  . newDocumentBuilder () . newDocument () ;  new   Xembler ( dirs ) . apply ( dom ) ;  MatcherAssert . assertThat ( """"Can't set text content of nodes"""" , XhtmlMatchers . xhtml ( dom ) , XhtmlMatchers . hasXPaths ( """"/root/foo[.='\""""Bonnie & Clyde\""""']"""" , """"/root/cops[.='everywhere']"""" ) ) ;  }
private   Optional < String >   handleProtocol ( String   url )   {  return  HANDLED_PREFIXES . stream () . filter ( url :: startsWith )  . map ( prefix  ->   """"/""""   +   url . substring ( prefix . length () ) )  . findFirst () ;  }
@ Override   public   < R >   R   requireArray ( Function < JsonArray ,  R >   mapper )   {  return  mapper . apply ( this ) ;  }
public   static   BufferedImage   deepCopy ( BufferedImage   source )   {  return  Java2DFrameConverter . cloneBufferedImage ( source ) ;  }
private   Uri   getRecentFileUri ()   {  RecentFileRepository   repository   =  new   RecentFileRepository ( this ) ;  return  Uri . parse ( repository . getRecentFile ( getFile () . getUniqueKey () ) . getUri () ) ;  }
 <argument pos:start=""""""""4526:96"""""""" pos:end=""""""""4526:103""""""""><expr pos:start=""""""""4526:96"""""""" pos:end=""""""""4526:103""""""""><name pos:start=""""""""4526:96"""""""" pos:end=""""""""4526:103"""""""">declList</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start=""""""""4526:107"""""""" pos:end=""""""""4535:17"""""""">{<block_content pos:start=""""""""4527:21"""""""" pos:end=""""""""4534:21"""""""">
@ Deprecated  public   Task < Fido2PendingIntent >   getRegisterIntent ( BrowserPublicKeyCredentialCreationOptions   requestOptions )   {  return  getRegisterPendingIntent ( requestOptions ) . onSuccessTask ( pendingIntent  ->   Tasks . forResult ( new   Fido2PendingIntentImpl ( pendingIntent ) ) ) ;  }
@ Override  public   void   validate ( final   Processor < FullData ,  FullData >   processor , final   ProcessingReport   report ,  final   MessageBundle   bundle , final   FullData   data )  throws  ProcessingException  {  final   int   size   =  data . getInstance () . getNode () . size () ;  if  ( size   <   intValue )  report . error ( newMsg ( data ,  bundle , """"err.draftv4.minProperties.notEnoughMembers"""" )  . putArgument ( """"found"""" ,  size ) . putArgument ( """"required"""" ,  intValue ) ) ;  }
@ Test  void   singleSortOrderShouldWork ()   {  assertThat ( new   DependencySortOrder ( """"Gurka"""" ) . toString () , is ( """"DependencySortOrder{childElementNames=[Gurka]}"""" ) ) ;  assertThat ( new   DependencySortOrder ( """"Gurka"""" ) . isNoSorting () ,  is ( false ) ) ;  }
protected   void   processSetBackgroundColor ( int   color ,  boolean   bright )   throws  IOException   {  }
void   init ( long   allocatedAddress ,  long   allocatedCapacity ,  long   ownerAddress ,  long   deallocatorAddress )   {  address   =   allocatedAddress ;  position   =   0 ;  limit   =   allocatedCapacity ;  capacity   =   allocatedCapacity ;  if  ( ownerAddress   !=   0   &&   deallocatorAddress   !=   0 )   {  deallocator ( new   NativeDeallocator ( this ,  ownerAddress ,  deallocatorAddress ) ) ;  }  }
@ Override  public   boolean   playerAddGroup ( String   world ,  String   player ,  String   group )   {  group   =   group . toLowerCase () ;  this . perms . addPlayerGroup ( player ,  group ) ;  return  true ;  }
@ Override  public   void   onGetConnectedNodesResponse ( GetConnectedNodesResponse   response )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: onGetConnectedNodesResponse"""" ) ;  }
public   void   replaceWith ( List < ServerApp >   apps )   {  this . apps   =   apps ;  notifyDataSetChanged () ;  }
public   static   LR   loadFromStream ( InputStream   input )   throws  IOException   {  BufferedReader   br   =  new   BufferedReader ( new   InputStreamReader ( input ) ) ;  StringBuffer   sb   =  new   StringBuffer () ;  String   line ;  while ( ( line   =   br . readLine () )   !=   null )   {  sb . append ( line ) ;  }  return  loadFromString ( sb . toString () ) ;  }
protected   String   createB2BUser ( String   switchedM2MToken )   throws  Exception   {  UserObject   userInfo   =  new   UserObject () ;  userInfo . setUserName ( B2B_USER_EMAIL ) ;  userInfo . setPassword ( B2B_USER_PASSWORD ) ;  userInfo . setName ( new   Name () . givenName ( B2B_USER_NAME ) ) ;  userInfo . addEmail ( new   Email () . value ( B2B_USER_EMAIL ) ) ;  String   b2bUserID   =  scim2RestClient . createSubOrgUser ( userInfo ,  switchedM2MToken ) ;  Assert . assertNotNull ( b2bUserID ,  """"B2B user creation failed."""" ) ;  return  b2bUserID ;  }
@ Override  public   void   initializeDefaultPreferences ()   {  CSSPreferenceServerConstants . initializeDefaultPreferences () ;  LESSPreferenceServerConstants . initializeDefaultPreferences () ;  SCSSPreferenceServerConstants . initializeDefaultPreferences () ;  }
public   void   disableDepthStream ()   {  if  ( depthEnabled )   {  device . disable_stream ( RealSense . depth ) ;  depthEnabled   =   false ;  }  }
@ Benchmark  public   final   void   buildsLargeXml ()   {  final   Directives   dirs   =  new   Directives () . add ( """"root"""" ) ;  for  ( int   idx   =  0 ;   idx   <   100_000 ;   ++ idx )   {  dirs . add ( """"item"""" ) . attr ( """"idx"""" ,  idx ) . up () ;  }  }
private   static   URI   uriForFileObject ( Location   location ,  String   packageName ,  String   relativeName )   {  StringBuilder   uri   =  new   StringBuilder ( """"mem:
public   Edge   getInterruptEdge ()   throws  IOException   {  var   path   =  Paths . get ( pinPath ,  """"edge"""" ) ;  switch ( Files . readString ( path ) . trim () . toLowerCase () ) {  case  """"none"""" :   return  Edge . NONE ;  case  """"rising"""" :   return  Edge . RISING ;  case  """"falling"""" :   return  Edge . FALLING ;  case  """"both"""" :   return  Edge . BOTH ;  default:   return  Edge . UNKNOWN ;  }  }
@ Override  public   void   onProgressChanged ( WebView   view ,  int   newProgress )   {  if  ( downloadMode )   return;  if  ( newProgress   !=   100   &&   progressIndicator . getVisibility ()   !=   View . VISIBLE )   {  Timber . i ( """"Progress: %d, showing progress bar"""" ,  newProgress ) ;  progressIndicator . setVisibility ( View . VISIBLE ) ;  }  
@ Override   public   boolean   equals ( Object   o )   {  if  ( this   ==   o )  return  true ;  if  ( ! ( o   instanceof   ConditionalSchemaValidationEvent ) )  return  false ;  if  ( ! super . equals ( o ) )  return  false ;  ConditionalSchemaValidationEvent   that   =  ( ConditionalSchemaValidationEvent )   o ;  return  keyword   ==   that . keyword ;  }
private   static   NodeList   getEncryptedPayload ( Document   doc ,  XPath   xpath )  throws  XPathExpressionException   {  XPathExpression   expr   =  xpath  . compile ( """"
@ Before  public   void   setUp ()   throws  Exception   {  String   text   =  """"a b c"""" ;  queue   =   new   LinkedBlockingQueue < List < Token < String > > > () ;  producer   =   new   ShingleProducer ( new   EntityAnalyzer () ,  new   StringReader ( text ) ,  queue ) ;  }
@ NonNull  @ Override  public   String   toString ()   {  return  ToStringHelper . name ( """"Status"""" ) . field ( """"code"""" ,  statusCode ) . field ( """"message"""" ,  statusMessage ) . field ( """"resolution"""" ,  resolution ) . end () ;  }
@ Override  public   Void   call ()   throws  InterruptedException   {  Thread . sleep ( 100 ) ;  return  null ;  }
@ Subscribe  public   void   onFilesLoaded ( ServerFilesLoadedEvent   event )   {  showFilesContent ( event . getServerFiles () ) ;  getFilesAdapter () . setShowShimmer ( false ) ;  }
 <argument pos:start=""""""""246:81"""""""" pos:end=""""""""246:93""""""""><expr pos:start=""""""""246:81"""""""" pos:end=""""""""246:93""""""""><name pos:start=""""""""246:81"""""""" pos:end=""""""""246:93"""""""">accessesEnums</name></expr></argument>
public   ChangedSchema   setChangedType ( final   boolean   changedType )   {  clearChangedCache () ;  this . changedType   =   changedType ;  return  this ;  }
public   long   getActiveTime ( @ NonNull   TimeUnit   timeUnit )   {  if  ( activeTimeMillis   ==   null )   throw  new   IllegalStateException ( """"Active time is not set"""" ) ;  return  timeUnit . convert ( activeTimeMillis ,  TimeUnit . MILLISECONDS ) ;  }
@ Override  public   boolean   isValidValue ( Object   value )   {  return  value   instanceof   Number   &&   ( ( Number )   value ) . floatValue ()   >=   min   &&   ( ( Number )   value ) . floatValue ()   <=   max ;  }
@ Override   public   CharIndexer   put ( long   i ,  long   j ,  char []   c ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  buffer . put ( ( int ) index ( i ,  j )   +   n ,  c [ offset   +   n ] ) ;  }  return  this ;  }
private   void   fillList ( final   int   dx )   {  int   edge   =  0 ;  View   child   =  getChildAt ( getChildCount ()   -   1 ) ;  if  ( child   !=   null )   {  edge   =   child . getRight () ;  }  fillListRight ( edge ,  dx ) ;  edge   =   0 ;  child   =   getChildAt ( 0 ) ;  if  ( child   !=   null )   {  edge   =   child . getLeft () ;  }  fillListLeft ( edge ,  dx ) ;  }
@ Test  public   void   getTopLevelTypes_singleSimpleTypes ()   {  CompilationUnitTree   compilation   =  MoreTrees . parseLinesToTree ( """"import java.util.List;"""" , """""""" , """"public class HelloWorld {"""" , """"  public static void main(String[] args) {"""" , """"    System.out.println(\""""Hello World!\"""");"""" , """"  }"""" , """"}"""" ) ;  assertThat ( TypeEnumerator . getTopLevelTypes ( compilation ) ) . containsExactly ( """"HelloWorld"""" ) ;  }
SchemaException   createSchemaException ( String   message )   {  return  new   SchemaException ( locationOfCurrentObj () ,  message ) ;  }
public   static   Complex []   toComplex ( double []   signal )   {  Complex []   result   =  new   Complex [ signal . length ] ;  for  ( int   i   =  0 ;   i   <   signal . length ;   i ++ )   {  result [ i ]   =   new   Complex ( signal [ i ] ,  0 ) ;  }  return  result ;  }
static   Paint   init_border_paint ( Config   config ,  float   border_width ,  int   color )  {  Paint   p   =  new   Paint () ;  p . setAlpha ( config . keyOpacity ) ;  p . setStyle ( Paint . Style . STROKE ) ;  p . setStrokeWidth ( border_width ) ;  p . setColor ( color ) ;  return  p ;  }
public   ChangedResponse   setContent ( final   ChangedContent   content )   {  this . content   =   content ;  return  this ;  }
public   void   resetMappingAndUpdateButtons ()   {  for  ( Entry   entry   :  entries )   {  if  ( entry   instanceof   KeybindOptionButton   button )   {  button . refresh ( selectedKey ) ;  }  }  }
 <argument pos:start=""""""""281:79"""""""" pos:end=""""""""281:85""""""""><expr pos:start=""""""""281:79"""""""" pos:end=""""""""281:85""""""""><literal type=""""""""number"""""""" pos:start=""""""""281:79"""""""" pos:end=""""""""281:79"""""""">8</literal> <operator pos:start=""""""""281:81"""""""" pos:end=""""""""281:81"""""""">+</operator> <name pos:start=""""""""281:83"""""""" pos:end=""""""""281:83"""""""">j</name><operator pos:start=""""""""281:84"""""""" pos:end=""""""""281:84"""""""">*</operator><literal type=""""""""number"""""""" pos:start=""""""""281:85"""""""" pos:end=""""""""281:85"""""""">8</literal></expr></argument>
@ Override  protected   void   configure ()   {  bind ( StatusBar . class ) . asEagerSingleton () ;  bind ( AssetManager . class ) . asEagerSingleton () ;  bind ( CacheManager . class ) . asEagerSingleton () ;  bind ( FileNameFixer . class ) . asEagerSingleton () ;  bind ( IconManager . class ) . asEagerSingleton () ;  bind ( VoicebankReader . class ) . asEagerSingleton () ;  bind ( ReclistConverterMap . class ) . asEagerSingleton () ;  bind ( Scaler . class ) . to ( DiscreteScaler . class ) ;  bind ( Wavtool . class ) . to ( UtsuWavtool . class ) ;  }
@ SubscribeEvent  public   static   void   onPlayerTick ( PlayerEvent . PlayerLoggedOutEvent   event )  {  MinecraftServer   server   =  event . getEntity () . getServer () ;  if ( server   !=   null )  {  server . execute ( ()  ->   RELOAD_TRACKER_MAP . remove ( event . getEntity () ) ) ;  }  }
@ Override  public   boolean   isExcluded ( @ NotNull   VirtualFile   file )   {  final   Project []   openProjects   = ApplicationManager . getApplication () . getService ( ProjectManager . class ) . getOpenProjects () ;  IndexFacade   indexFacade   =  ApplicationManager . getApplication () . getService ( IndexFacade . class ) ;  if  ( openProjects . length   >   0   &&   indexFacade . isIndexReady ( openProjects [ 0 ] ) )   {  return  indexFacade . isMainSpecFile ( file ,  openProjects [ 0 ] ) ;  }  return  false ;  }
@ Override  public   String   toString ()  {  return  """"ReplacedImage [url=""""   +   url   +   """"]"""" ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Getting challenge questions of a user"""" ,  priority   =   1 ,  sequential   =   true )  public   void   testDefaultChallengeQuestions ()   throws  Exception   {  ChallengeQuestion []   defaultQuestions   =  challengeQuestionsBobClient . getChallengeQuestionsForTenant ( SUPER_TENANT ) ;  assertTrue ( defaultQuestions   !=   null   &&   defaultQuestions . length   >   0 , """"Default Challenge questions not found for """"   +   SUPER_TENANT   +   """" tenantDomain."""" ) ;  }
@ Override  public   MLData   call ()   {  return  svm . compute ( pair . getInput () ) ;  }
public   void   setSwipeableChildren ( final   int ...   ids )   {  assert  ids   !=   null ;  
@ Override  public   Object   columnToObject ( Cursor   cursor ,  int   columnIndex )   {  return  cursor . getString ( columnIndex ) ;  }
@ Override  public   void   describeTo ( Description   description )   {  description . appendValue ( this . foundErrorCode )  . appendText ( """" was not found instead of """" )  . appendValue ( this . expectedErrorCode ) ;  }
public   ArrayList < String >   getWidgetIDs ()  {  ArrayList < String >   ids   =  new   ArrayList < String > () ;  for ( String   id   :  wigs . keySet () )  {  ids . add ( id ) ;  }  return  ids ;  }
@ Test ( dependsOnMethods   =   """"testGetOrganizationsWithUnsupportedAttribute"""" )  public   void   testGetOrganizationsMetaAttributesWithInvalidOperator ()   {  String   filterQuery   =  """"?filter=attributes ca C&limit=10&recursive=false"""" ;  String   endpointURL   =  ORGANIZATION_MANAGEMENT_API_BASE_PATH   +   """"/meta-attributes""""   +   filterQuery ;  Response   response   =  getResponseOfGetWithOAuth2 ( endpointURL ,  m2mToken ) ;  validateErrorResponse ( response ,  HttpStatus . SC_BAD_REQUEST ,  """"ORG-60059"""" ) ;  }
@ Override  public   void   randomize ( List < String >   urlList )   {  int   listSize   =  0 ;  if  ( urlList   !=   null )   {  listSize   =   urlList . size () ;  }  if  ( ! StringUtils . hasText ( hostname )   ||   listSize   ==   0 )   {  return;  }  
public   final   boolean   childOfSchemaItems ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.**.schema.items"""" )  ||   hasPath ( psiElement ,  """"$.definitions.**.items"""" ) ;  }
@ DataBoundSetter  public   void   setIgnoreSslErrors ( boolean   ignoreSslErrors )   {  this . ignoreSslErrors   =   ignoreSslErrors ;  }
@ DataBoundSetter  public   void   setPackageCoverageTargets ( String   targets )   {  packageCoverageTargets   =   targets ;  }
public   int []   getInodes ()   {  int []   array   =  new   int [  headers . size () ] ;  int   x   =  0 ;  for  (  CpioHeader   header   :  headers )   array [  x ++ ]   =   header . getInode () ;  return  array ;  }
@ Test  public   void   inappropriateConstructorThrowsAppropriateError ()  {  try  {  builder . withValidatorClass ( DummyValidator . class ) ;  fail ( """"No exception thrown!!"""" ) ;  }   catch  ( IllegalArgumentException   e )   {  assertEquals ( e . getMessage () , BUNDLE . printf ( """"noAppropriateConstructor"""" ,  KEYWORD , DummyValidator . class . getCanonicalName () ) ) ;  }  }
public   static   Optional < SpecificationVersion >   lookupByMetaSchemaUrl ( String   metaSchemaUrl )   {  return  Arrays . stream ( values () )  . filter ( v  ->   v . metaSchemaUrls () . stream () . anyMatch ( metaSchemaUrl :: startsWith ) )  . findFirst () ;  }
@ Override   public   ShortIndexer   get ( long   i ,  short []   s ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  s [ offset   +   n ]   =   buffer . get ( ( int ) index ( i )   +   n ) ;  }  return  this ;  }
@ Test ( groups   =   """"organizationDiscoveryPaginationTests"""" ,  dependsOnGroups   =   """"organizationPaginationTests"""" )  public   void   testEnableEmailDomainDiscovery ()   {  String   enableDiscoveryPayload   =  """"{\""""properties\"""":[{\""""key\"""":\""""emailDomain.enable\"""",\""""value\"""":true}]}"""" ;  String   emailDomainIsEnabled   =  """"properties.find { it.key == 'emailDomain.enable' }.value"""" ;  
public   PlaceAutocompleteRequest   input ( String   input )   {  return  param ( """"input"""" ,  input ) ;  }
public   boolean   isAreaWithinArea ( CuboidArea   area )   {  return  ( this . containsLoc ( area . highPoints )   &&   this . containsLoc ( area . lowPoints ) ) ;  }
@ Test  public   void   dateTimeWithEightDigitsInSecFracSuccess ()   {  assertSuccess ( """"2015-02-28T11:00:00.12345678Z"""" ,  new   DateTimeFormatValidator () ) ;  }
@ Override   public   float   get ( long   i ,  long   j )   {  return  toFloat ( buffer . get ( ( int ) index ( i ,  j ) ) ) ;  }
@ Override  protected   String   getDefaultDatabaseProductName ()   {  return  """"Hibernate Spring Package"""" ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"requestValidation"""" )  @ Valid  public   SAMLRequestValidation   getRequestValidation ()   {  return  requestValidation ;  }
@ Override  public   Void   visitVersion ( VersionTree   node ,  Void   p )   {  String   name   =  node . getTagName () ;  String   content   =  CommentHelper . getText ( node . getBody () ) ;  tags . computeIfAbsent ( name ,  n  ->   new   ArrayList <> () ) . add ( content ) ;  return  null ;  }
default   void   gpioSetServoPulsewidth ( int   pin ,  int   pulseWidth ) {  gpioServo ( pin , pulseWidth ) ;  }
public   boolean   isFixPrincipalPoint ()   {  return  ( flags   &   CV_CALIB_FIX_PRINCIPAL_POINT )   !=   0 ;  }
public   final   void   getStreetViewPanoramaAsync ( OnStreetViewPanoramaReadyCallback   callback )   {  if  ( getDelegate ()   !=   null )   {  getDelegate () . getStreetViewPanoramaAsync ( callback ) ;  }   else  {  this . pendingStreetViewReadyCallbacks . add ( callback ) ;  }  }
@ Override  public   Chain < Integer >   count ( final   Predicate < T >   pred )   {  return  new   Chain <> ( Underscore . count ( value () ,  pred ) ) ;  }
protected   String   getDecrypted ( final   String   aProperty )   {  try  {  return  encryptor . decryptString ( props . getProperty ( aProperty ) ) ;  }   catch  ( final   CryptoException   e )   {  e . printStackTrace () ;  }  return  null ;  }
public   int   getHashLength ()   {  if  ( count   ==   0 )  return  0 ;  else  return  ( int )   ( hashes [ 0 ]   &   0x0f ) ;  }
public   void   requestLocationUpdates ( LocationRequest   request ,  PendingIntent   pendingIntent )  throws  RemoteException   {  getServiceInterface () . requestLocationUpdatesWithIntent ( request ,  pendingIntent ) ;  }
public   void   setImageView ( ImageView   imageView )   {  this . imageView   =   imageView ;  }
 <argument pos:start=""""""""506:94"""""""" pos:end=""""""""506:126""""""""><expr pos:start=""""""""506:94"""""""" pos:end=""""""""506:126""""""""><call pos:start=""""""""506:94"""""""" pos:end=""""""""506:126""""""""><name pos:start=""""""""506:94"""""""" pos:end=""""""""506:107"""""""">findPreference</name><argument_list pos:start=""""""""506:108"""""""" pos:end=""""""""506:126"""""""">(<argument pos:start=""""""""506:109"""""""" pos:end=""""""""506:125""""""""><expr pos:start=""""""""506:109"""""""" pos:end=""""""""506:125""""""""><literal type=""""""""string"""""""" pos:start=""""""""506:109"""""""" pos:end=""""""""506:125"""""""">""""""""pref_test_crash""""""""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ ApiModelProperty ( example   =   """"OUI-00000"""" ,  required   =   true ,  value   =   """"An error code."""" )  @ JsonProperty ( """"code"""" )  @ Valid  @ NotNull ( message   =   """"Property code cannot be null."""" )  public   String   getCode ()   {  return  code ;  }
public   Builder   setVerifyFail ( String   verifyFail ,  String   verifyFailOn )   {  this . verifyFailType   =   VerifyFailType . fromString ( verifyFail ) ;  this . verifyFailOn   =   VerifyFailOnType . fromString ( verifyFailOn ) ;  return  this ;  }
void   visitPatternProperties ( Map < Regexp ,  Schema >   patternProperties )   {  for  ( Map . Entry < Regexp ,  Schema >   entry   :  patternProperties . entrySet () )   {  visitPatternPropertySchema ( entry . getKey () ,  entry . getValue () ) ;  }  }
public   AuthorizedAPIResponse   displayName ( String   displayName )   {  this . displayName   =   displayName ;  return  this ;  }
@ Override  public   void   setCameraMoveCanceledListener ( IOnCameraMoveCanceledListener   listener )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: setCameraMoveCanceledListener"""" ) ;  }
String   resolveBody ( EnvVars   envVars , AbstractBuild < ? ,  ? >   build ,  TaskListener   listener )   throws  IOException   {  String   body   =  envVars . expand ( getRequestBody () ) ;  if  ( ( body   ==   null   ||   body . isEmpty () )   &&   Boolean . TRUE . equals ( getPassBuildParameters () ) )   {  List < HttpRequestNameValuePair >   params   =  createParams ( envVars ,  build ,  listener ) ;  if  ( ! params . isEmpty () )   {  body   =   HttpClientUtil . paramsToString ( params ) ;  }  }  return  body ;  }
@ Override  public   int   hashCode ()   {  return  Arrays . hashCode ( new   Object [] { type ,  algorithm } ) ;  }
public   void   setAttestationMetaData ( AdvancedApplicationConfigurationAttestationMetaData   attestationMetaData )   {  this . attestationMetaData   =   attestationMetaData ;  }
public   synchronized   static   Method   loadGetFiltersMethod ( ClassLoader   loader )   throws  Exception   {  return  UnobfuscatorCache . getInstance () . getMethod ( loader ,  ()  ->  {  var   clazzFilters   =  findFirstClassUsingStrings ( loader ,  StringMatchType . Contains ,  """"conversations/filter/performFiltering"""" ) ;  if  ( clazzFilters   ==   null )   throw  new   RuntimeException ( """"Filters class not found"""" ) ;  return  Arrays . stream ( clazzFilters . getDeclaredMethods () ) . parallel () . filter ( m  ->   m . getName () . equals ( """"publishResults"""" ) ) . findFirst () . orElse ( null ) ;  } ) ;  }
private   static   void   setTemplateKey ( final   Map < String ,  String >   templateSettings ,  final   String   key )   {  if  ( templateSettings . containsKey ( key )   &&   templateSettings . get ( key ) . contains ( ALL_SYMBOLS ) )   {  TEMPLATE_SETTINGS . put ( key ,  templateSettings . get ( key ) ) ;  }  }
public   AuthRequest   fromContext ( Context   context )   {  build ( context ) ;  locale ( Utils . getLocale ( context ) ) ;  if  ( AuthPrefs . shouldIncludeAndroidId ( context ) )   {  androidIdHex   =   Long . toHexString ( LastCheckinInfo . read ( context ) . getAndroidId () ) ;  }  if  ( AuthPrefs . shouldStripDeviceName ( context ) )   {  deviceName   =   """""""" ;  buildVersion   =   """""""" ;  }  return  this ;  }
private   String   convertDuplicatedPropertiesToJson ( Map < String ,  String >   properties , Map < String ,  String >   duplicatedProperties )  throws  JsonProcessingException   {  ObjectMapper   objectMapper   =  new   ObjectMapper () ;  if  ( duplicatedProperties   !=   null )   {  return  objectMapper . writeValueAsString ( properties )   +   """",""""   +   objectMapper . writeValueAsString ( duplicatedProperties ) ;  }  return  objectMapper . writeValueAsString ( properties ) ;  }
public   CLKernel []   buildKernels ( String   compilerOptions ,  String   resourceNames ,  String   ...   kernelNames )   {  return  buildKernels ( compilerOptions ,  Loader . getCallerClass ( 2 ) ,  resourceNames ,  kernelNames ) ;  }
public   List < Tab >   getTabs ()  {  return  ImmutableList . copyOf ( this . tabs ) ;  }
@ ParameterizedTest  @ MethodSource ( """"useNativeGit"""" )  public   void   shouldGenerateDescribeWithTagAndZeroAndCommitIdWhenForceLongFormatIsTrue ( boolean   useNativeGit )   throws  Exception   {  
public   static   Bfloat16Indexer   create ( short []   array ,  long ...   sizes )   {  return  new   Bfloat16ArrayIndexer ( array ,  sizes ) ;  }
private   void   setUpFullScreen ()   {  final   FullScreenHelper   fullScreen   =  new   FullScreenHelper ( getSupportActionBar () ,  getImagePager () ) ;  fullScreen . enableOnClickToggle ( false ) ;  getImagePager () . setOnViewPagerClickListener ( viewPager  ->   fullScreen . toggle () ) ;  fullScreen . init () ;  }
public   void   setTitle ( String   title )   {  this . title   =   notNull ( title ) ;  }
@ Override  @ Nullable  public   AuthenticationExtensions   getAuthenticationExtensions ()   {  return  authenticationExtensions ;  }
public   RoleRequestObject   addGroups ( ListObject   group )   {  if  ( this . groups   ==   null )   {  this . groups   =   new   ArrayList <> () ;  }  this . groups . add ( group ) ;  return  this ;  }
public   static   void   setPropertySafely ( Marshaller   marshaller ,  String   name ,  Object   value )   {  try  {  marshaller . setProperty ( name ,  value ) ;  }   catch  ( PropertyException   e )   {  LOGGER . warn ( String . format ( """"Can't set \""""%s\"""" property to given marshaller"""" ,  name ) ,  e ) ;  }  }
private   void   setUpAppsAdapter ()   {  mFastScrollView . setAdapter ( mServerAppsAdapter ) ;  }
@ Override  public   void   launch ( ILaunchConfiguration   configuration ,  String   mode ,  ILaunch   launch ,  IProgressMonitor   monitor )  throws  CoreException   {  
@ Test ( alwaysRun   =   true , groups   =   """"wso2.is"""" , description   =   """"Attempt self registration for tenanted user before enabling the functionality"""" )  public   void   testSelfRegisterBeforeEnable ()   throws  Exception   {  updateResidentIDPProperty ( ENABLE_SELF_SIGN_UP ,  """"false"""" ,  true ) ;  Response   responseOfPost   =  getResponseOfPost ( SELF_REGISTRATION_ENDPOINT ,  selfRegisterUserInfo ) ;  Assert . assertEquals ( responseOfPost . statusCode () ,  HttpStatus . SC_BAD_REQUEST ,  """"Self register user could be enabled"""" ) ;  }
 <argument pos:start=""""""""198:95"""""""" pos:end=""""""""198:101""""""""><expr pos:start=""""""""198:95"""""""" pos:end=""""""""198:101""""""""><literal type=""""""""string"""""""" pos:start=""""""""198:95"""""""" pos:end=""""""""198:101"""""""">""""""""UTF-8""""""""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
private   ValidateResult   checkFile ( String   dataPath ,  SourceType   sourceType ,  String   prefix )   throws  IOException   {  ValidateResult   result   =  new   ValidateResult ( true ) ;  if ( StringUtils . isBlank ( dataPath ) )   {  result . addCause ( prefix   +   """"is null or empty - """"   +   dataPath ) ;  }   else if ( dataPath . trim () . contains ( """"~"""" ) )   {  result . addCause ( prefix   +   """"contains ~, which is not allowed - """"   +   dataPath ) ;  }   else if ( ! ShifuFileUtils . isFileExists ( dataPath ,  sourceType ) )   {  result . addCause ( prefix   +   """"doesn't exist - """"   +   dataPath ) ;  }  return  result ;  }
private   static   int   matchKnown ( String   mime )   {  Integer   type   =  types . get ( mime ) ;  if  ( type   !=   null )   {  return  type ;  }   else  {  return  Type . UNDEFINED ;  }  }
public   Method   currentMethod ()   {  return  ( ( MethodSignature )   this . joinpoint . getSignature () ) . getMethod () ;  }
public   RoleMapping   localRole ( String   localRole )   {  this . localRole   =   localRole ;  return  this ;  }
@ Deprecated  protected   void   onReceiveOtherAction ( String   action ,  Intent   intent )   {  onReceiveOtherAction ( null ,  action ,  intent ) ;  }
@ Test  void   default100ShouldWorkAsPredefinedSortOrder ()   {  SortPomImplUtil . create ()  . predefinedSortOrder ( """"default_1_0_0"""" )  . lineSeparator ( """"\n"""" )  . testVerifyXmlIsOrdered ( """"/sortOrderFiles/sorted_default_1_0_0.xml"""" ) ;  }
@ Override  public   Entity   getEntity ()   {  return  CommonProxy . wrapPartEntityParent ( getRawEntity () ) ;  }
public   XmlStringBuilder   fillSpaces ()   {  builder . append ( String . valueOf ( identStep   ==   Step . TABS  ?   '\t'   :  ' ' ) . repeat ( Math . max ( 0 ,  ident ) ) ) ;  return  this ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  OAuth2PKCEConfiguration   oauth2PKCEConfiguration   =  ( OAuth2PKCEConfiguration )   o ;  return  Objects . equals ( this . mandatory ,  oauth2PKCEConfiguration . mandatory )   &&  Objects . equals ( this . supportPlainTransformAlgorithm ,  oauth2PKCEConfiguration . supportPlainTransformAlgorithm ) ;  }
private   static   boolean   areNotesTouching ( Note   note , String   trueLyric , Note   nextNote , Voicebank   voicebank )   {  
@ DataProvider ( name   =   """"configProvider"""" )  public   static   Object [] []   configProvider ()   {  return  new   Object [] [] { { TestUserMode . SUPER_TENANT_ADMIN } , { TestUserMode . TENANT_ADMIN } } ;  }
public   Object   getItem ( int   pos )  {  return  ( _emojiArray . get ( pos ) ) ;  }
@ Test   public   void   forSourceLines ()   throws  IOException   {  JavaFileObject   fileObject   =  JavaFileObjects . forSourceLines ( """"example.HelloWorld"""" , """"package example;"""" , """""""" , """"final class HelloWorld {"""" , """"  void sayHello() {"""" , """"    System.out.println(\""""hello!\"""");"""" , """"  }"""" , """"}"""" ) ;  assertThat ( fileObject . getCharContent ( false ) ) . isEqualTo ( """"package example;\n""""  +   """"\n""""  +   """"final class HelloWorld {\n""""  +   """"  void sayHello() {\n""""  +   """"    System.out.println(\""""hello!\"""");\n""""  +   """"  }\n""""  +   """"}"""" ) ;  }
@ Override  public   @ Nullable   IElement   getIcon ( BlockAccessor   accessor ,  IPluginConfig   config ,  IElement   currentIcon )   {  BlockEntity   blockEntity   =  accessor . getBlockEntity () ;  if  ( blockEntity   !=   null )   {  ItemStack   itemStack   =  accessor . getPickedResult () ;  CompoundTag   compoundTag   =  blockEntity . saveCustomOnly ( accessor . getLevel () . registryAccess () ) ;  
@ Override  public   boolean   containsAll ( Collection < ? >   c )   {  throw  new   UnsupportedOperationException () ;  }
public   IdTokenEncryptionConfiguration   method ( String   method )   {  this . method   =   method ;  return  this ;  }
public   void   setMinThreadsForPeerReplication ( int   minThreadsForPeerReplication )   {  this . minThreadsForPeerReplication   =   minThreadsForPeerReplication ;  }
@ NonNull  @ Override  public   String   getPluginName ()   {  return  """"Filter Groups"""" ;  }
public   ChangedParameter   setName ( final   String   name )   {  this . name   =   name ;  return  this ;  }
public   IplImage   getMaskImage ( boolean   blocking )   {  context . acquireGLObject ( maskCL [ pyramidLevel ] ) ;  mask [ pyramidLevel ]   =   context . readImage ( getMaskImageCL () ,  mask [ pyramidLevel ] ,  blocking ) ;  context . releaseGLObject ( maskCL [ pyramidLevel ] ) ;  return  mask [ pyramidLevel ] ;  }
public   long   getTimestampByMessageId ( String   msgid )   {  SQLiteDatabase   dbReader   =  this . getReadableDatabase () ;  try  ( dbReader ;  Cursor   query   =  dbReader . query ( """"delmessages"""" ,  new   String [] { """"timestamp"""" } ,  """"msgid=?"""" ,  new   String [] { msgid } ,  null ,  null ,  null ) )   {  if  ( query . moveToFirst () )   {  return  query . getLong ( query . getColumnIndexOrThrow ( """"timestamp"""" ) ) ;  }  return  0 ;  }  }
@ Override  public   boolean   processLine ( String   line )   throws  IOException   {  List < String >   synonyms   =  newArrayList ( Splitter . on ( ',' ) . trimResults () . split ( line ) ) ;  for  ( String   term :  synonyms )   {  for  ( String   synonym :  synonyms )   {  if  ( ! term . equals ( synonym ) )   {  builder . add ( new   CharsRef ( term ) ,  new   CharsRef ( synonym ) ,  true ) ;  }  }  }  return  true ;  }
@ Override   public   String   getAudioCodecName ()   {  return  audio_c   ==   null  ?   super . getAudioCodecName ()   :  audio_c . codec () . name () . getString () ;  }
@ Test  public   void   toStringNoExplicitType ()   {  JSONObject   rawSchemaJson   =  ResourceLoader . DEFAULT . readObj ( """"tostring/stringschema.json"""" ) ;  rawSchemaJson . remove ( """"type"""" ) ;  String   actual   =  SchemaLoader . load ( rawSchemaJson ) . toString () ;  assertThat ( new   JSONObject ( actual ) ,  sameJsonAs ( rawSchemaJson ) ) ;  }
@ Test  public   void   maybeWithConsumerSucceeds ()   {  Consumer < JsonValue >   consumer   =  mock ( Consumer . class ) ;  createSubject () . maybe ( """"not"""" ,  consumer ) ;  verify ( consumer ) . accept ( JsonValue . of ( original . get ( """"not"""" ) ) ) ;  }
@ Override  public   boolean   onRotate   ( MotionEvent   e ,  double   angle ) {  super . onRotate ( e , angle ) ;  
public   String   getOutPrefix ()   {  if  ( outPrefix   ==   null )  outPrefix   =   """""""" ;  return  outPrefix ;  }
public   void   onClick ( View   view )   {  startStopButton . setEnabled ( false ) ;  setProgressBarIndeterminateVisibility ( true ) ;  action . startDebian () ;  }
public   void   onCreate ()   {  IntentFilter   filter   =  new   IntentFilter ( ACTION_C2DM_REGISTRATION ) ;  filter . addCategory ( getPackageName () ) ;  registerReceiver ( registrationReceiver ,  filter ) ;  }
private   static   FileChannel   getFileChannel ( byte []   data )   throws  IOException   {  File   file   =  File . createTempFile ( UUID . randomUUID () . toString () ,  """"tmp"""" ) ;  file . deleteOnExit () ;  RandomAccessFile   raf   =  new   RandomAccessFile ( file ,  """"rw"""" ) ;  FileChannel   fc   =  raf . getChannel () ;  fc . write ( ByteBuffer . wrap ( data ) ) ;  raf . close () ;  fc . close () ;  raf   =   new   RandomAccessFile ( file ,  """"r"""" ) ;  return  raf . getChannel () ;  }
private   void   drawByWords ( TextBox   tb ,  Graphics2D   g ,  float   x ,  float   y ,  String   text )  {  String []   words   =  text . split ( """" """" ) ;  if  ( words . length   >   0 )  {  final   float [] []   offsets   =  tb . getWordOffsets ( words ) ;  for  ( int   i   =  0 ;   i   <   words . length ;   i ++ )  drawAttributedString ( tb ,  g ,  x   +   offsets [ i ] [ 0 ] ,  y ,  words [ i ] ) ;  }  else  drawAttributedString ( tb ,  g ,  x ,  y ,  text ) ;  }
public   void   setEllipse ( float   rx ,  float   ry ,  float   sx ,  float   sy )  {  circle   =   false ;  this . cx   =   sx ;  this . cy   =   sy ;  this . rx   =   rx ;  this . ry   =   ry ;  
public   void   failed ( Exception   e )   {  completionSource . setException ( e ) ;  }
@ Override  public   void   onServiceConnected ( ComponentName   componentName ,  IBinder   iBinder )   {  Log . d ( TAG ,  """"Connection(""""   +   actionString   +   """") : ServiceConnection : """"   +  """"onServiceConnected(""""   +   componentName   +   """")"""" ) ;  binder   =   iBinder ;  component   =   componentName ;  for  ( ServiceConnection   connection   :  connectionForwards )   {  connection . onServiceConnected ( componentName ,  iBinder ) ;  }  connected   =   true ;  }
public   SchemaLoaderBuilder   registerSchemaByURI ( URI   uri ,  Object   schema )   {  if  ( schemasByURI   ==   null )   {  schemasByURI   =   new   HashMap <> () ;  }  schemasByURI . put ( uri ,  schema ) ;  return  this ;  }
private   void   tryAddRendererToVideoTrack ()   {  if  ( ! rendererAttached   &&   videoTrack   !=   null   &&   ViewCompat . isAttachedToWindow ( this ) )   {  EglBase . Context   sharedContext   =  EglUtils . getRootEglBaseContext () ;  if  ( sharedContext   ==   null )   {  
public   static   < E >   boolean   all ( final   Iterable < E >   iterable ,  final   Predicate < E >   pred )   {  return  every ( iterable ,  pred ) ;  }
@ Override  public   void   savePreferences ()   {  if  ( cacheDisabled . isSelected () )   {  preferencesManager . setCache ( PreferencesManager . CacheMode . DISABLED ) ;  }   else if  ( cacheEnabled . isSelected () )   {  preferencesManager . setCache ( PreferencesManager . CacheMode . ENABLED ) ;  }  preferencesManager . setResampler ( currentResampler ) ;  preferencesManager . setWavtool ( currentWavtool ) ;  preferencesManager . setVoicebank ( voicebankContainer . getLocation () ) ;  }
public   static   void   writeShortLE ( byte []   buf ,  int   off ,  int   v )   {  buf [ off ++ ]   =   ( byte )   v ;  buf [ off ++ ]   =   ( byte )   ( v   >>>   8 ) ;  }
private   EurekaHttpClient   buildEurekaHttpClient ( Set < EurekaClientHttpRequestFactorySupplier . RequestConfigCustomizer >   customizers )   {  return  new   RestClientTransportClientFactory ( Optional . empty () ,  Optional . empty () , new   DefaultEurekaClientHttpRequestFactorySupplier ( new   RestClientTimeoutProperties () ,  customizers ) , RestClient :: builder )  . newClient ( new   DefaultEndpoint ( serviceUrl ) ) ;  }
default   < T   extends  Provider >   T   provider ( IOType   ioType )   throws  ProviderNotFoundException   {  
public   void   setBackgroundColor ( CvScalar   backgroundColor )   {  this . backgroundColor   =   backgroundColor ;  setPrewarp ( prewarp ) ;  }
public   static   void   setCpuInfoFilePath ( String   path )   {  cpuInfoFilePath   =   path ;  }
public   void   setProperty ( String   aKey ,  String   aValue )   {  properties . setProperty ( aKey ,  aValue   ==   null  ?   """"""""   :  aValue ) ;  }
static   void   lineRequestOutputFlags ( long   linePtr ,  String   consumer ,  int   flags ,  int   defaultVal )   {  int   result   =  c_gpiod_line_request_output_flags ( linePtr ,  consumer ,  flags ,  defaultVal ) ;  if  ( result   <   0 )  throw  new   GpioDException ( """"c_gpiod_line_request_output_flags failed: """"   +   result   +   """" (""""   +   c_gpiod_strerror ()   +   """")"""" ) ;  }
@ Override   public   BooleanIndexer   put ( long   i ,  long   j ,  boolean   b )   {  putRaw ( index ( i ,  j ) ,  b ) ;  return  this ;  }
public   void   setWaitTimeInMsWhenSyncEmpty ( int   waitTimeInMsWhenSyncEmpty )   {  this . waitTimeInMsWhenSyncEmpty   =   waitTimeInMsWhenSyncEmpty ;  }
@ Override  public   boolean   test ( final   E   elem )   {  for  ( Map . Entry < String ,  T >   prop   :  properties )   {  try  {  if  ( ! elem . getClass ()  . getField ( prop . getKey () )  . get ( elem )  . equals ( prop . getValue () ) )   {  return  false ;  }  }   catch  ( Exception   ex )   {  try  {  if  ( ! elem . getClass ()  . getMethod ( prop . getKey () )  . invoke ( elem )  . equals ( prop . getValue () ) )   {  return  false ;  }  }   catch  ( Exception   ignored )   {  
private   String   getServerName ()   {  return  Preferences . getServerName ( mContext ) ;  }
@ Override  public   Builder   showDetails ( boolean   showDetails )   {  this . showDetails   =   showDetails ;  return  this ;  }
 <argument pos:start=""""""""182:86"""""""" pos:end=""""""""182:86""""""""><expr pos:start=""""""""182:86"""""""" pos:end=""""""""182:86""""""""><name pos:start=""""""""182:86"""""""" pos:end=""""""""182:86"""""""">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   static   String   getStringResource ( int   resourceId ) {  return  InstrumentationRegistry . getInstrumentation () . getTargetContext () . getString ( resourceId ) ;  }
public   String   getName ()   {  if ( name == null )  return  """""""" ;  return  name ;  }
public   Builder   copy ()   {  Builder   copy   =  new   Builder () ;  if  ( this . retval   !=   null )   {  copy . build () . setReferredSchema ( this . retval . getReferredSchema () ) ;  }  return  copy ;  }
public   boolean   isMainSpecFile ( final   VirtualFile   virtualFile ,  final   Project   project )   {  return  FileBasedIndex . getInstance ()  . getContainingFiles ( getIndexId () ,  SpecIndexer . MAIN_SPEC_FILES ,  GlobalSearchScope . allScope ( project ) )  . contains ( virtualFile ) ;  }
public   static   float   BinaryHistogram ( IplImage   image )  {  CvScalar   Sum   =  cvSum ( image ) ;  float   WhitePixels   =  ( float )   (   Sum . getVal ( 0 )   /   255   ) ;  CvMat   mat   =  image . asCvMat () ;  float   TotalPixels   =  mat . cols ()   *   mat . rows () ;  
@ Override  public   boolean   hasChangePending ()   {  return  this . hasChangePending ;  }
public   SortPomImplUtil   noKeepBlankLines ()   {  keepBlankLines   =   false ;  return  this ;  }
public   boolean   isEqual ( String   lineContent ,  long   lineNo ,  String   other )   {  return  hash ( lineContent ,  lineNo ) . equals ( other ) ;  }
public   String   toPrefix ()   {  if  ( this   ==   AuthorizationType . EITHER )   {  return  """""""" ;   
private   String   getUsernameFromEmail ()   {  Assert . assertTrue ( Utils . getMailServer () . waitForIncomingEmail ( 10000 ,  1 ) ) ;  Message []   messages   =  Utils . getMailServer () . getReceivedMessages () ;  String   body   =  GreenMailUtil . getBody ( messages [ 0 ] ) . replaceAll ( """"=\r?\n"""" ,  """""""" ) ;  Document   doc   =  Jsoup . parse ( body ) ;  return  doc . select ( """"b"""" ) . get ( 1 ) . text () ;  }
public   static   List < String >   methods ( final   Object   object )   {  return  functions ( object ) ;  }
@ Deprecated  public   static   PendingIntent   getErrorPendingIntent ( int   errorCode ,  Activity   activity , int   requestCode )   {  return  null ;   
@ Override  protected   void   notifyListener ( float   currentPos )   {  observableColor . updateAlpha ( ( int ) ( currentPos   *   0xff ) ,  this ) ;  }
 <argument pos:start=""""""""234:57"""""""" pos:end=""""""""234:59""""""""><expr pos:start=""""""""234:57"""""""" pos:end=""""""""234:59""""""""><literal type=""""""""number"""""""" pos:start=""""""""234:57"""""""" pos:end=""""""""234:59"""""""">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type=""""""""line"""""""" pos:start=""""""""234:63"""""""" pos:end=""""""""234:89"""""""">
public   SortPomImplUtil   sortDependencyManagement ( String   sortOrder )   {  sortDependencyManagement   =   sortOrder ;  return  this ;  }
@ Override  public   double   getGroupInfoDouble ( String   world ,  String   group ,  String   node ,  double   defaultValue )   {  throw  new   UnsupportedOperationException ( """"iChat does not support group info nodes!"""" ) ;  }
private   Object   removeListener ( int   key )   {  if  ( key   ==   INVALID_KEY )   return  null ;  synchronized  ( mListenerMapLock )   {  Object   listener   =  mListenerMap . get ( key ) ;  mListenerMap . remove ( key ) ;  mExecutorMap . remove ( key ) ;  return  listener ;  }  }
@ Override  public   String   getDisplayName ()   {  return  Messages . Installer_displayName () ;  }
public   void   testUnusedHeaderMainFile ()   {  doTest ( """"unused/yaml/unused_header_main_file.yaml"""" ) ;  }
public   static   ArrayList < Float >   readFloatList ( Parcel   parcel ,  int   header )   {  int   size   =  readSize ( parcel ,  header ) ;  if  ( size   ==   0 )  return  null ;  int   start   =  parcel . dataPosition () ;  int   length   =  parcel . readInt () ;  ArrayList < Float >   list   =  new   ArrayList <> ( length ) ;  for  ( int   i   =  0 ;   i   <   length ;   i ++ )   {  list . add ( parcel . readFloat () ) ;  }  parcel . setDataPosition ( start   +   size ) ;  return  list ;  }
public   static   UIntIndexer   create ( IntPointer   pointer ,  long []   sizes ,  long []   strides )   {  return  new   UIntRawIndexer ( pointer ,  sizes ,  strides ) ;  }
static   Uri   parse ( String   str )   throws  URISyntaxException   {  URI   rawUri   =  new   URI ( str ) ;  int   poundIdx   =  str . indexOf ( '#' ) ;  String   fragment ;  URI   toBeQueried ;  if  ( poundIdx   ==   - 1 )   {  toBeQueried   =   rawUri ;  fragment   =   """""""" ;  }   else  {  fragment   =   str . substring ( poundIdx ) ;  toBeQueried   =   new   URI ( str . substring ( 0 ,  poundIdx ) ) ;  }  return  new   Uri ( toBeQueried ,  fragment ) ;  }
@ Nullable  public   static   List < ViewGroup < ItemStack > >   containerGroup ( Container   container ,  Accessor < ? >   accessor )   {  return  containerGroup ( container ,  accessor ,  CommonProxy :: findContainer ) ;  }
@ Override  public   void   write ( DataWriter   out )   throws  IOException   {  out . writeUnsignedInt ( byteStart ) ;  out . writeUnsignedInt ( byteSize ) ;  out . writeInt ( typeID ) ;  out . writeShort ( ( short )   classID ) ;  out . writeShort ( scriptTypeIndex ) ;  }
public   boolean   containsKey ( String   key )   {  return  data . containsKey ( key ) ;  }
@ NonNull  @ Override  public   String   toString ()   {  return  """"[Cap: type=""""   +   type   +   """"]"""" ;  }
private   void   sendContentType ( final   MimeType   mimeType )   {  registerContentTypeRequestChecker ( mimeType ,  HttpMode . GET ,  ALL_IS_WELL ) ;  }
public   static   String   encode ( String   s )   {  return  Base64 . getEncoder () . encodeToString ( s . getBytes () ) ;  }
@ Override  public   long   toNanos ( long   ticks )   {  return  tscToNano ( ticks ) ;  }
public   void   testGetUserRealmInfo ()   throws  Exception   {  loginManger . login ( isServer . getSuperTenant () . getTenantAdmin () . getUserName () , isServer . getSuperTenant () . getTenantAdmin () . getPassword () , isServer . getInstance () . getHosts () . get ( """"default"""" ) ) ;  UserRealmInfo   realmInfo   =  userMgtClient . getUserRealmInfo () ;  Assert . assertNotNull ( realmInfo ) ;  loginManger . logOut () ;  }
public   static   UShortIndexer   create ( ShortBuffer   buffer ,  Index   index )   {  return  new   UShortBufferIndexer ( buffer ,  index ) ;  }
@ Override  public   IElement   align ( Align   align )   {  Objects . requireNonNull ( align ) ;  this . align   =   align ;  return  this ;  }
public   String   getDisplayLabel ()   {  return  ( TextUtils . isEmpty ( label ) ) ?   id . substring ( 0 ,  7 )  :  label ;  }
public   static   < T >   T   elementAt ( final   List < T >   list ,  final   int   index )   {  return  list . get ( index ) ;  }
@ Before  public   void   setup ()   throws  URISyntaxException ,  JsonParseException ,  JsonMappingException , IOException   {  URL   url   =  this . getClass () . getResource ( """"/cliqueConfiguration.yaml"""" ) ;  File   configFile   =  new   File ( url . getFile () ) ;  assertThat ( configFile . exists () ,  is ( true ) ) ;  OwlLoadConfigurationLoader   owlLoadConfigurationLoader   = new   OwlLoadConfigurationLoader ( configFile ) ;  loaderConfig   =   owlLoadConfigurationLoader . loadConfig () ;  cliqueConfiguration   =   loaderConfig . getCliqueConfiguration () . get () ;  }
@ Test  void   mapArray ()   {  List < Integer >   result   =  Underscore . map ( Underscore . range ( 3 ) ,  item  ->   ( item   +   1 )   *   3 ) ;  assertEquals ( """"[3, 6, 9]"""" ,  result . toString () ) ;  }
public   EmailTemplate   body ( String   body )   {  this . body   =   body ;  return  this ;  }
@ Override  public   void   onAttach ( Context   context )   {  super . onAttach ( context ) ;  mContext   =   context ;  if  ( context   instanceof   Activity )   {  mActivity   =   ( Activity )   context ;  }  }
public   static   int   getFrequencyFromNanos ( Number   nanoseconds ) {  int   frequency ;  if ( nanoseconds . longValue ()   <=   0 ) {  return  0 ;  }  long   period   =  1_000_000_000 ;   
public   void   start ( CastContextImpl   castContext ,  CastDevice   castDevice ,  String   routeId ,  Bundle   routeInfoExtra )   throws  RemoteException   {  this . castContext   =   castContext ;  this . castDevice   =   castDevice ;  this . routeInfoExtra   =   routeInfoExtra ;  this . routeId   =   routeId ;  this . mIsConnecting   =   true ;  this . mIsConnected   =   false ;  this . castContext . getSessionManagerImpl () . onSessionStarting ( this ) ;  this . proxy . start ( routeInfoExtra ) ;  }
private   void   loadItem ( int   index )  {  WorkbenchRecipe   recipe   =  this . currentTab . getRecipes () . get ( index ) ;  this . displayStack   =   recipe . getItem () . copy () ;  this . updateColor () ;  this . materials . clear () ;  List < WorkbenchIngredient >   ingredients   =  recipe . getMaterials () ;  if ( ingredients   !=   null )  {  for ( WorkbenchIngredient   ingredient   :  ingredients )  {  MaterialItem   item   =  new   MaterialItem ( ingredient ) ;  item . updateEnabledState () ;  this . materials . add ( item ) ;  }  this . currentTab . setCurrentIndex ( index ) ;  }  }
@ Override  public   void   onGetChannelInputStreamResponse ( GetChannelInputStreamResponse   response )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: onGetChannelInputStreamResponse"""" ) ;  }
public   void   overrideForClass ( Options   opt ,  CharSequence   className )   {  opt . showQualified   =   false ;  boolean   inPackage   =  matcher . matches ( className ) ;  if  ( inPackage )  opt . showQualified   =   false ;  boolean   included   =  inPackage   ||   this . opt . matchesIncludeExpression ( className ) ;  if  ( ! included   ||   this . opt . matchesHideExpression ( className ) )   {  opt . setOption ( HIDE ) ;  }  }
private   void   addRootArchive ( List < Archive >   archives ,  Archive   archive )   {  if  ( ! archives . isEmpty () )   {  archives . add ( 0 ,  archive ) ;  }  else  {  archives . add ( archive ) ;  }  }
@ Test  void   shouldSelectFirstSuccessfulBuild ()   {  when ( mockProject . getFirstBuild () ) . thenReturn ( mockRun ) ;  when ( mockRun . getNextBuild () ) . thenReturn ( mockRun ) ;  when ( mockRun . getResult () ) . thenReturn ( Result . SUCCESS ) ;  Run   actualRun   =  extension . select ( mockProject ,  """"firstSuccessful"""" ,  null ) ;  assertThat ( actualRun ,  is ( mockRun ) ) ;  }
@ Deprecated  @ Override  public   void   getCastService ( IGmsCallbacks   callback ,  int   versionCode ,  String   packageName , IBinder   binder ,  Bundle   params )   throws  RemoteException   {  callGetService ( GmsService . CAST ,  callback ,  versionCode ,  packageName ,  params ) ;  }
public   static   void   write ( Parcel   parcel ,  int   fieldId ,  float []   val ,  boolean   mayNull )   {  if  ( val   ==   null )   {  if  ( mayNull )   {  writeHeader ( parcel ,  fieldId ,  0 ) ;  }  }   else  {  int   start   =  writeObjectHeader ( parcel ,  fieldId ) ;  parcel . writeFloatArray ( val ) ;  finishObjectHeader ( parcel ,  start ) ;  }  }
public   LaunchPod   build ()   throws  MalformedURLException ,  URISyntaxException   {  final   RunTemplate   runTemplate   = RunTemplateFactory . newRunTemplate ( this . id . value () , Arrays . asList ( this . cpus ,  this . memory ,  this . disk ) , this . buildCommand () , this . role , this . buildFetchUris () , this . containerInfo ) ;  return  LaunchPod . create ( this . id ,  runTemplate ,  this . domainInfoFilter ,  buildAgentAttributeFilters () ) ;  }
@ Test  void   shouldCreateJobBadgeAction ()   {  Collection < ?   extends  Action >   action   =  factory . createFor ( Mockito . mock ( Job . class ) ) ;  assertThat ( action . size () ,  is ( 1 ) ) ;  assertThat ( action . stream () . findFirst () . get () ,  instanceOf ( JobBadgeAction . class ) ) ;  }
@ EventHandler ( priority   =   EventPriority . MONITOR )  public   void   onPluginDisable ( PluginDisableEvent   event )   {  if  ( chat . groupManager   !=   null )   {  if  ( event . getPlugin () . getDescription () . getName () . equals ( """"GroupManager"""" ) )   {  chat . groupManager   =   null ;  log . info ( String . format ( """"[%s][Chat] %s un-hooked."""" ,  plugin . getDescription () . getName () ,  chat . name ) ) ;  }  }  }
public   EmailSender   fromAddress ( String   fromAddress )   {  this . fromAddress   =   fromAddress ;  return  this ;  }
public   void   testUrlReferenceDoubleQuoteShouldNotBeReportedAsError ()   {  doTest ( """"url_ref_double_quote.yaml"""" ) ;  }
@ Test  public   void   testPriorityQueue ()   {  EntityAnnotationGroup   group   =  new   EntityAnnotationGroup () ;  group . add ( new   EntityAnnotation ( null ,  0 ,  5 ) ) ;  group . add ( new   EntityAnnotation ( null ,  0 ,  10 ) ) ;  group . add ( new   EntityAnnotation ( null ,  0 ,  20 ) ) ;  assertEquals ( 20 ,  group . peek () . length () ) ;  }
public   final   void   reset ()   {  this . globalError   =   0 ;  this . setSize   =   0 ;  }
@ Override  public   ByteBuffer   createBinaryFrame ( Framedata   framedata )   {  getExtension () . encodeFrame ( framedata ) ;  if  ( log . isTraceEnabled () )   {  log . trace ( """"afterEnconding({}): {}"""" ,  framedata . getPayloadData () . remaining () , ( framedata . getPayloadData () . remaining ()   >   1000  ?   """"too big to display""""  :  new   String ( framedata . getPayloadData () . array () ) ) ) ;  }  return  createByteBufferFromFramedata ( framedata ) ;  }
public   static   KeyboardData   load_string ( String   src )  {  try {  return  load_string_exn ( src ) ;  }  catch  ( Exception   e )  {  return  null ;  }  }
@ Override  protected   String   getDefaultDatabaseProductName ()   {  return  """"Hibernate Classic"""" ;  }
public   FormValidation   doCheckFailedScenariosNumber ( @ QueryParameter   String   value )   {  return  isValidInteger ( value ) ;  }
public   static   double   defaultMissingValue ( Double   mean )   {  return  mean   ==   null  ?   0   :  mean . doubleValue () ;  }
private   Field   buildDefinitionObjectField ( final   String   fieldName ,  final   JsonNode   jsonNode ,  final   JsonNode   definitions )   {  return  buildDefinitionObjectField ( fieldName ,  jsonNode ,  definitions ,  null ,  null ) ;  }
@ Override  public   Map < String ,  String >   getAttributes ()   {  return  Collections . emptyMap () ;  }
public   synchronized   static   Method   loadDndModeMethod ( ClassLoader   classLoader )   throws  Exception   {  return  UnobfuscatorCache . getInstance () . getMethod ( classLoader ,  ()  ->  {  var   method   =  findFirstMethodUsingStrings ( classLoader ,  StringMatchType . Equals ,  """"MessageHandler/start"""" ) ;  if  ( method   ==   null )   throw  new   Exception ( """"DndMode method not found"""" ) ;  return  method ;  } ) ;  }
@ Override  public   boolean   isSupervised ()   {  return  this . memoryDataSet . isSupervised () ;  }
@ Test  public   void   testCommaAfterMidwayArray ()   {  completeAndCheckResultsByFile ( """"array_midway"""" ) ;  }
@ ApiModelProperty ( example   =   """"4875-jhgr-454hb"""" ,  value   =   """"id of the tenant owner."""" )  @ JsonProperty ( """"id"""" )  @ Valid  public   String   getId ()   {  return  id ;  }
public   void   connect ()   {  if  ( connectReadThread   !=   null )   {  throw  new   IllegalStateException ( """"WebSocketClient objects are not reuseable"""" ) ;  }  connectReadThread   =   new   Thread ( this ) ;  connectReadThread . setDaemon ( isDaemon () ) ;  connectReadThread . setName ( """"WebSocketConnectReadThread-""""   +   connectReadThread . getId () ) ;  connectReadThread . start () ;  }
@ Override  public   LocationRequest []   newArray ( int   size )   {  return  null ;  }
@ Override  public   void   onDragReleased ( double   absoluteX ,  double   absoluteY )   {  if  ( changed )   {  callback . modifySongPitchbend ( startData ,  getData () ) ;  }  }
@ Override  public   PwmConfig   build ()   {  PwmConfig   config   =  new   DefaultPwmConfig ( getResolvedProperties () ,  this . presets ) ;  return  config ;  }
@ Override  public   double   getGroupInfoDouble ( String   world ,  String   group ,  String   node ,  double   defaultValue )   {  return  privs . getGroupNode ( group ) . getDouble ( node ,  defaultValue ) ;  }
String   enumValueType ( Class < ? >   type )   {  try  {  Field   f   =  type . getField ( """"value"""" ) ;  if  ( ! f . getType () . isPrimitive () )   {  logger . warn ( """"Field \""""value\"""" of enum type \""""""""   +   type . getCanonicalName ()  +   """"\"""" is not of a primitive type. Compilation will most likely fail."""" ) ;  }  return  f . getType () . getName () ;  }   catch  ( NoSuchFieldException   ex )   {  logger . warn ( """"Field \""""value\"""" missing from enum type \""""""""   +   type . getCanonicalName ()  +   """". Compilation will most likely fail."""" ) ;  return  null ;  }  }
@ Override  protected   AbstractXmlStream < DependencyCheckBuildResult >   createXmlStream ()   {  return  new   DependencyCheckBuildResultXmlStream () ;  }
@ Override  public   int   read ( byte []   b )   throws  IOException   {  return  read ( b ,  0 ,  b . length ) ;  }
private   void   cbProxyTypeActionPerformed ( java . awt . event . ActionEvent   evt )   { 
private   static   Macro   parseMacro ( String   macroString )   {  return  parseMacro ( """"Parse error"""" ,  macroString ) ;  }
private   EqualPopulationBinning   createBinning ()   {  Random   rd   =  new   Random ( System . currentTimeMillis () ) ;  EqualPopulationBinning   binning   =  new   EqualPopulationBinning ( 20 ) ;  for  (  int   i   =  0 ;   i   <   18000 ;   i   ++  )   {  binning . addData ( Double . toString ( rd . nextDouble ()   %   1000 ) ) ;  }  return  binning ;  }
@ Test  public   void   cannotCreateKeywordWithNullName ()  {  try  {  Keyword . newBuilder ( null ) ;  fail ( """"No exception thrown!!"""" ) ;  }   catch  ( NullPointerException   e )   {  assertEquals ( e . getMessage () ,  BUNDLE . getMessage ( """"nullName"""" ) ) ;  }  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( key ,  value ) ;  }
private   JSONObject   getScope ( String   name )   {  Resource   userResource   =  getUserResource ( """"/name/""""   +   name ) ;  String   response   =  userResource . contentType ( MediaType . APPLICATION_JSON_TYPE ) . accept ( MediaType  . APPLICATION_JSON ) . get ( String . class ) ;  return  ( JSONObject )   JSONValue . parse ( response ) ;  }
@ Test  public   void   testCannotReadRepositoryWithInvalidRepoUrl ()   throws  IOException   {  try  ( MockedStatic < Jenkins >   mockedJenkins   =  Mockito . mockStatic ( Jenkins . class ) ; MockedStatic < GitHubBuilder >   mockedGitHubBuilder   =  Mockito . mockStatic ( GitHubBuilder . class ) )   {  mockJenkins ( mockedJenkins ) ;  GHMyself   me   =  mockGHMyselfAs ( mockedGitHubBuilder ,  """"Me"""" ) ;  
public   static   LastEntry   forEmptyList ( InstanceSettings   settings )   {  LastEntry . LastEntryType   entryType   =  PermissionsUtil . arePermissionsGranted ( settings . getContext () ) ?   EMPTY  :  NO_PERMISSIONS ;  return  new   LastEntry ( settings ,  entryType ,  settings . clock () . now () ) ;  }
public   Builder   setFormatting ( final   String   lineSeparator , final   boolean   expandEmptyElements , final   boolean   spaceBeforeCloseEmptyElement , final   boolean   keepBlankLines , final   boolean   endWithNewline )   {  this . lineSeparatorUtil   =   new   LineSeparatorUtil ( lineSeparator ) ;  this . expandEmptyElements   =   expandEmptyElements ;  this . spaceBeforeCloseEmptyElement   =   spaceBeforeCloseEmptyElement ;  this . keepBlankLines   =   keepBlankLines ;  this . endWithNewline   =   endWithNewline ;  return  this ;  }
@ Test  public   void   toStringSchemaDependencies ()   {  JSONObject   rawSchemaJson   =  loader . readObj ( """"tostring/objectschema-schemadep.json"""" ) ;  String   actual   =  SchemaLoader . load ( rawSchemaJson ) . toString () ;  assertThat ( new   JSONObject ( actual ) ,  sameJsonAs ( rawSchemaJson ) ) ;  }
default   < T   extends  Pwm >   T   create ( PwmConfigBuilder   builder )   {  return  ( T ) create ( builder . build () ) ;  }
@ Test  public   void   idAsJsonPointerWorks ()   {  Schema   actual   =  performLookup ( """"#/properties/pointerToIdIsJsonPointer"""" ) ;  assertEquals ( """"the ID can be a JSON pointer"""" ,  actual . getDescription () ) ;  }
public   static   boolean   isValidThrottleBehavior ( @ ThrottleBehavior   int   throttleBehavior )   {  switch  ( throttleBehavior )   {  default:  return  false ;  case  ThrottleBehavior . THROTTLE_BACKGROUND :  case  ThrottleBehavior . THROTTLE_ALWAYS :  case  ThrottleBehavior . THROTTLE_NEVER :  return  true ;  }  }
static   void   setupCategories ( ThrottleJobProperty . ThrottleCategory ...   categories )   {  ThrottleJobProperty . DescriptorImpl   descriptor   =  ThrottleJobProperty . fetchDescriptor () ;  assertNotNull ( descriptor ) ;  descriptor . setCategories ( Arrays . asList ( categories ) ) ;  }
@ Override  public   void   init ( FilterConfig   filterConfig )   throws  ServletException   { }
@ Nullable  public   static   CertData   unwrap ( IBinder   certDataBinder )   {  if  ( certDataBinder   instanceof   CertData )   {  return  ( CertData )   certDataBinder ;  }   else if  ( certDataBinder   instanceof   IObjectWrapper )   {  return  unwrap ( ( IObjectWrapper )   certDataBinder ) ;  }   else if  ( certDataBinder   instanceof   ICertData )   {  return  unwrap ( ( ICertData )   certDataBinder ) ;  }  return  null ;  }
public   ListObject   $ref ( String   $ref )   {  this . $ref   =   $ref ;  return  this ;  }
@ Test  void   doNotPassBuildParametersWithBuildParameters ()   throws  Exception   {  
@ Override  public   void   removeAllColumns ()   {  drawnColumns . clear () ;  drawnCurves . clear () ;  drawnSquares . clear () ;  }
@ Override  public   int   getInitialInstanceInfoReplicationIntervalSeconds ()   {  return  initialInstanceInfoReplicationIntervalSeconds ;  }
@ Override  protected   void   onSetInitialValue ( boolean   restorePersistedValue ,  Object   defaultValue )  {  if  ( restorePersistedValue )  {  _value   =   getPersistedFloat ( _min ) ;  }  else {  _value   =   ( Float ) defaultValue ;  persistFloat ( _value ) ;  }  _seekBar . setProgress ( ( int ) ( ( _value   -   _min )   *   STEPS   /   ( _max   -   _min ) ) ) ;  updateText () ;  }
public   boolean   isDescriptionAnnotationPresent ()   {  return  isAnnotationPresent ( Description . class ) ;  }
private   FieldValueMapping   fetchFieldSharingPathToMakeItRequired ( final   List < FieldValueMapping >   listFieldsSharingPath )   {  return  listFieldsSharingPath . get ( RandomUtils . nextInt ( 0 ,  listFieldsSharingPath . size () ) ) ;  }
@ Override   public   UShortIndexer   put ( long []   indices ,  int []   s ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  array [ ( int ) index ( indices )   +   n ]   =   ( short ) s [ offset   +   n ] ;  }  return  this ;  }
private   static   AffinityLock   acquireLock ( boolean   bind ,  int   cpuId ,  @ NotNull   AffinityStrategy ...   strategies )   {  Warnings . warmNoReservedCPUs () ;  return  LOCK_INVENTORY . acquireLock ( bind ,  cpuId ,  strategies ) ;  }
public   void   setMetadataFile ( String   metadataFile )   {  this . metadataFile   =   metadataFile ;  }
@ Override  public   void   sendFrame ( Collection < Framedata >   frames )   {  send ( frames ) ;  }
private   void   handleHeartbeatPing ( HeartbeatPing   ping )   {  HeartbeatAck . Builder   ack   =  new   HeartbeatAck . Builder () . status ( ping . status ) ;  if  ( inputStream . newStreamIdAvailable () )   {  ack . last_stream_id_received ( inputStream . getStreamId () ) ;  }  send ( MCS_HEARTBEAT_ACK_TAG ,  ack . build () ) ;  }
void   updateDoc ( MutableDocument   doc ,  final   int   revisions )   throws  CouchbaseLiteException   {  for  ( int   i   =  0 ;   i   <   revisions ;   i ++ )   {  doc . setValue ( """"count"""" ,  i ) ;  db . save ( doc ) ;  }  }
private   synchronized   void   readLines ()   {  String   line ;  try  {  while ( ( line   =   bufferedReader . readLine () )   !=   null )   {  if ( lastLines . size ()   >   LAST_LINES_COUNT )   {  lastLines . removeFirst () ;  }  lastLines . add ( line ) ;  LOG . info ( """"readLines: {}."""" ,  line ) ;  }  }   catch  ( IOException   e )   {  LOG . error ( """"readLines: Ignoring IOException"""" ,  e ) ;  }  }
private   void   replaceFragment ()   {  getFragmentManager () . beginTransaction () . add ( R . id . main_tv_fragment_container ,  new   MainTVFragment () ) . commit () ;  }
@ Override  public   void   setGroupPrefix ( String   world ,  String   group ,  String   prefix )   {  API . setGroupInfo ( group ,  """"prefix"""" ,  prefix ) ;  }
@ Override   public   int   get ( long   i ,  long   j ,  long   k )   {  return  getRaw ( index ( i ,  j ,  k ) )   &   0xFFFF ;  }
@ Override  public   String   toString ()  {  return  keyword   +   """": """"   +   uniqueItems ;  }
@ Override  public   boolean   getFadeIn ()   throws  RemoteException   {  return  false ;  }
@ Test  public   void   getIconClassName ()   {  assertThat ( action . getIconClassName () ,  is ( """"symbol-shield-outline plugin-ionicons-api"""" ) ) ;  }
@ Test  void   formatxmlError ()   {  ResponseEntity < Map < String ,  Object > >   result   = testObj . formatxml ( U . objectBuilder () . add ( """"xml"""" ,  """"<a/>1"""" ) . build () ) ;  assertSame ( HttpStatus . BAD_REQUEST ,  result . getStatusCode () ) ;  }
public   static   String   obtainEndUserId ()   {  String   uuid   =  UUID . randomUUID () . toString () ;  return  uuid . substring ( 0 ,  8 )   +   uuid . substring ( 9 ,  13 )   +   uuid . substring ( 14 ,  18 )   +   uuid . substring ( 19 ,  23 )   +   uuid . substring ( 24 ,  36 ) ;  }
@ Test  public   void   invokesMultipleProcesors ()   {  NoOpProcessor   noopProcessor1   =  new   NoOpProcessor () ;  NoOpProcessor   noopProcessor2   =  new   NoOpProcessor () ;  assertThat ( noopProcessor1 . invoked ) . isFalse () ;  assertThat ( noopProcessor2 . invoked ) . isFalse () ;  assertAbout ( javaSource () )  . that ( HELLO_WORLD_RESOURCE )  . processedWith ( noopProcessor1 ,  noopProcessor2 )  . compilesWithoutError () ;  assertThat ( noopProcessor1 . invoked ) . isTrue () ;  assertThat ( noopProcessor2 . invoked ) . isTrue () ;  }
@ Override  public   float   stringWidth ( String   text )  {  if  ( text . isEmpty () )  return  0 ;  else {  final   Graphics2D   cg   =  ( Graphics2D )   g . create () ;  updateGraphics ( cg ) ;  return  ( float )   fm . getStringBounds ( text ,  cg ) . getWidth () ;  }  }
public   static   boolean   isBoss ( Entity   entity )   {  EntityType < ? >   entityType   =  entity . getType () ;  return  entityType . is ( ConventionalEntityTypeTags . BOSSES )   ||   entityType   ==   EntityType . ENDER_DRAGON   ||   entityType   ==   EntityType . WITHER ;  }
public   void   removeSubEntry ( HelpEntry   entry )  {  if ( subentrys . contains ( entry ) )  {  subentrys . remove ( entry ) ;  }  }
public   DisjointLyricSet . Reader   getLyricConversions ()   {  return  lyricConversions ;  }
@ Subscribe  public   void   onFileMoved ( FileMovedEvent   event )   {  OfflineFile   offlineFile   =  offlineFileRepository . getCurrentDownloadingFile () ;  if  ( offlineFile   !=   null )   {  offlineFile . setState ( OfflineFile . DOWNLOADED ) ;  offlineFile . setDownloadId ( - 1 ) ;  offlineFileRepository . update ( offlineFile ) ;  stopForegroundService ( this ,  this ,  true ) ;  showDownloadedNotification ( offlineFile ) ;  notifyDownloadFinish ( true ) ;  startNextDownload () ;  }  }
public   CustomInboundProtocolConfiguration   inboundKey ( String   inboundKey )   {  this . inboundKey   =   inboundKey ;  return  this ;  }
private   String   print ( float   f )   {  int   i   =  ( int )   f ;  if  ( i   ==   f )  return  String . valueOf ( i ) ;  else  return  String . valueOf ( f ) ;  }
public   UserStoreConfigurationsRes   className ( String   className )   {  this . className   =   className ;  return  this ;  }
@ Test  @ SuppressWarnings ( """"unchecked"""" )  void   firstEmpty ()   {  List < Object >   iterable   =  Collections . emptyList () ;  assertThrows ( NoSuchElementException . class ,  ()  ->   Underscore . first ( iterable ) ) ;  }
public   void   addNamespace (  String   namespaceURI ,  String   prefix )   {  map . put (  prefix ,  namespaceURI ) ;  }
@ Override  public   String   getGroupSuffix ( String   worldName ,  String   group )   {  return  getGroupInfoString ( worldName ,  group ,  """"suffix"""" ,  """""""" ) ;  }
public   SeverityDistribution   getSeverityDistribution ()   {  return  getResult () . getSeverityDistribution () ;  }
protected   static   < T >   List < T >   newArrayList ( final   Iterable < T >   iterable ,  final   int   size )   {  final   List < T >   result   =  new   ArrayList <> () ;  for  ( int   index   =  0 ;   iterable . iterator () . hasNext ()   &&   index   <   size ;   index   +=   1 )   {  result . add ( iterable . iterator () . next () ) ;  }  return  result ;  }
public   long   getIdfromKey ( String   message_key )   {  if  ( sqLiteDatabase   ==   null )   return  - 1 ;  String []   columns   =  new   String [] { """"_id"""" } ;  String   selection   =  """"key_id=?"""" ;  String []   selectionArgs   =  new   String [] { message_key } ;  try  ( Cursor   cursor   =  sqLiteDatabase . query ( """"message"""" ,  columns ,  selection ,  selectionArgs ,  null ,  null ,  null ) )   {  if  ( cursor . moveToFirst () )   {  return  cursor . getLong ( 0 ) ;  }  }   catch  ( Exception   e )   {  XposedBridge . log ( e ) ;  }  return  - 1 ;  }
public   String   getPackageCoverageTargets ()   {  return  packageCoverageTargets ;  }
@ Nullable  private   AimTracker   getAimTracker ( Player   player )  {  if ( ModSyncedDataKeys . AIMING . getValue ( player )   &&   ! this . aimingMap . containsKey ( player ) )  {  this . aimingMap . put ( player ,  new   AimTracker () ) ;  }  return  this . aimingMap . get ( player ) ;  }
private   void   setUpApps ()   {  Fragments . Operator . at ( this ) . replace ( buildAppsFragment () ,  R . id . container_content ) ;  }
public   void   setFilterOnlyUpInstances ( boolean   filterOnlyUpInstances )   {  this . filterOnlyUpInstances   =   filterOnlyUpInstances ;  }
@ RequestMapping ( """"/owners/{ownerId}"""" )  public   ModelAndView   showOwner ( @ PathVariable ( """"ownerId"""" )   int   ownerId )   {  ModelAndView   mav   =  new   ModelAndView ( """"owners/ownerDetails"""" ) ;  mav . addObject ( this . owners . findById ( ownerId ) ) ;  return  mav ;  }
public   int   getInteger ( String   column ,  int   row ,  int   windowIndex )   {  return  windows [ windowIndex ] . getInt ( row ,  columnIndices . get ( column ) ) ;  }
@ Test  public   void   deserializationIsCorrect_withAllRefineFields ()   throws  Exception   {  RefineQuery   expected   =  new   RefineQuery () ;  expected . setQuery ( """"foo"""" ) ;  expected . setLimit ( 10 ) ;  expected . setType ( """"type"""" ) ;  expected . setType_strict ( """"any"""" ) ;  Map < String ,  Object >   properties   =  new   HashMap <> () ;  properties . put ( """"bar"""" ,  """"baz"""" ) ;  expected . setProperties ( properties ) ;  RefineQuery   actual   =  MAPPER . readValue ( fixture ( """"fixtures/refineQuery.json"""" ) ,  RefineQuery . class ) ;  assertThat ( actual ,  is ( expected ) ) ;  }
public   boolean   hasPseudoDef ( Element   el ,  PseudoElementType   pseudo )  {  checkStylesInherited () ;  return  istylemap . hasPseudo ( el ,  pseudo ) ;  }
public   Builder   organization ( Organization   organization )   {  this . organization   =   organization ;  return  this ;  }
public   Builder   addNull ( final   String   key )   {  data . put ( key ,  null ) ;  return  this ;  }
@ Test  void   ofPrTest ()   {  double   area   =  AreaUnderCurve . ofPr ( pr ) ;  double   weightedArea   =  AreaUnderCurve . ofWeightedPr ( pr ) ;  Assert . assertEquals ( area ,  0.55 ) ;  Assert . assertEquals ( weightedArea ,  0.5 ) ;  }
@ Override  public   ConfigScreenFactory < ? >   getModConfigScreenFactory ()   {  return  HomeConfigScreen :: new ;  }
@ Test  public   void   emptyAreas ()   throws  Exception   {  System . out . println ( """"- Empty Areas"""" ) ;  for  ( BaseCountry   c   :  countries )   {  if  ( c . getArea ()   ==   null )   {  System . out . println ( c . getName () ) ;  }  }  }
public   boolean   is_in_progress ()  {  switch  ( state )  {  case  Swiped :  case  Rotating_clockwise :  case  Rotating_anticlockwise :  return  true ;  }  return  false ;  }
@ Override  public   int   getMinCost ( int   level )  {  return  1   +   ( level   -   1 )   *   10 ;  }
@ Override  public   Context   addListener ( ShutdownListener ...   listener )   {  runtime . addListener ( listener ) ;  return  this ;  }
@ Test  public   void   testRepositoryValidation () {  String   validUser   =  OSMTracker . Preferences . VAL_GITHUB_USERNAME ;  String   validRepository   =  OSMTracker . Preferences . VAL_REPOSITORY_NAME ;  String   validBranch   =  OSMTracker . Preferences . VAL_BRANCH_NAME ;  String   invalidBranch   =  """"NONE"""" ;  checkRepositoryValidity ( validUser , validRepository , validBranch ,  true ) ;  checkRepositoryValidity ( validUser , validRepository , invalidBranch ,  false ) ;  }
public   void   setResponseSigningAlgorithm ( MetadataProperty   responseSigningAlgorithm )   {  this . responseSigningAlgorithm   =   responseSigningAlgorithm ;  }
default   String   readRegisterString ( int   register ,  Charset   charset ,  int   numberOfBytes )   {  return  readRegisterString ( register ,  charset ,  0 ,  numberOfBytes ) ;  }
@ Override  public   String   encrypt ( String   plaintext ,  String   passphrase ,  Version   cryptoVersion )   {  Preconditions . checkArgument ( Version . V1_1 . equals ( cryptoVersion ) ) ;  String   cipheredText   =  newEncryptor ( passphrase ) . encrypt ( plaintext ) ;  ObjectNode   node   =  MAPPER . createObjectNode () ;  node . put ( CIPHERED_TEXT_KEY ,  cipheredText ) ;  node . put ( ICrypto . VERSION_IDENTIFIER ,  Version . V1_1 . versionStr () ) ;  return  Crypto . encode ( node . toString () ) ;  }
 <argument pos:start=""""""""107:124"""""""" pos:end=""""""""107:139""""""""><expr pos:start=""""""""107:124"""""""" pos:end=""""""""107:139""""""""><name pos:start=""""""""107:124"""""""" pos:end=""""""""107:139""""""""><name pos:start=""""""""107:124"""""""" pos:end=""""""""107:133"""""""">McsService</name><operator pos:start=""""""""107:134"""""""" pos:end=""""""""107:134"""""""">.</operator><name pos:start=""""""""107:135"""""""" pos:end=""""""""107:139"""""""">class</name></name></expr></argument>)</argument_list></call>
@ Override  public   void   onClick ( DialogInterface   dialog ,  int   which )   {  tmpSharedPref . edit () . putBoolean ( """"isCallBack"""" ,  false ) . commit () ;  if  ( checkBoxPressed ) {  if ( ! isDefChecked ) {  toggleRepositoryOptions ( true ) ;  isDefChecked   =   true ;  
public   Frame   grabAtFrameRate ()   throws  Exception ,  InterruptedException   {  Frame   frame   =  grab () ;  if  ( frame   !=   null )   {  waitForTimestamp ( frame ) ;  }  return  frame ;  }
void   add_fake_pointer ( KeyboardData . Key   key ,  KeyValue   kv ,  boolean   locked )  {  int   flags   =  pointer_flags_of_kv ( kv )   |   FLAG_P_FAKE   |   FLAG_P_LATCHED ;  if  ( locked )  flags   |=   FLAG_P_LOCKED ;  Pointer   ptr   =  new   Pointer ( - 1 ,  key ,  kv ,  0.f ,  0.f ,  Modifiers . EMPTY ,  flags ) ;  _ptrs . add ( ptr ) ;  _handler . onPointerFlagsChanged ( false ) ;  }
private   void   listObjectsV2 ( WebContext   webContext ,  Bucket   bucket )   {  int   maxKeys   =  webContext . get ( """"max-keys"""" ) . asInt ( 1000 ) ;  String   marker   =  webContext . get ( """"start-after"""" ) . asString () ;  String   prefix   =  webContext . get ( """"prefix"""" ) . asString () ;  Response   response   =  webContext . respondWith () ;  response . setHeader ( HTTP_HEADER_NAME_CONTENT_TYPE ,  CONTENT_TYPE_XML ) ;  bucket . outputObjectsV2 ( response . xml () ,  maxKeys ,  marker ,  prefix ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  ChangedMaxLength   that   =  ( ChangedMaxLength )   o ;  return  Objects . equals ( oldValue ,  that . oldValue )  &&   Objects . equals ( newValue ,  that . newValue )  &&   Objects . equals ( context ,  that . context ) ;  }
private   void   replaceServersList ( List < Server >   servers )   {  this . serversList . clear () ;  this . serversList . addAll ( servers ) ;  }
private   String   getDefaultIfMissing (  String   value ,  String   defaultValue )   {  return  value   ==   null   ||   value . isEmpty ()  ?   defaultValue   :  value ;  }
@ Override  public   String   readString ( Charset   charset ,  int   length )   {  if ( raw . isEmpty () )   return  null ;  byte []   buffer   =  new   byte [ length ] ;  for ( int   p   =  0 ;   p   <   length ;   p ++ )   {  if ( raw . isEmpty () )   break;  buffer [ p ]   =   raw . pop () ;  }  String   result   =  new   String ( buffer ,  charset ) ;  logger . debug ( """"[{}::{}] :: READ()"""" ,  Mock . I2C_PROVIDER_NAME ,  this . id ,  result ) ;  return  result ;  }
private   void   updateVersioningType ( int   position )   {  mArguments . putString ( """"type"""" ,  mTypes . get ( position ) ) ;  }
public   void   removeCustomListFile ( long   number )  {  FileReaderWriter   frw   =  new   FileReaderWriter ( defaultPrefs . getString ( Constants . PREFS_PATH_BACKUP_DIRECTORY ,  FileCreationHelper  . getDefaultBackupDirPath () ) ,  SCHEDULECUSTOMLIST   +   number ) ;  frw . delete () ;  }
@ Override  public   boolean   onShowFileChooser ( WebView   webView ,  ValueCallback < Uri [] >   filePathCallback ,  FileChooserParams   fileChooserParams )   {  FoxActivity . getFoxActivity ( webView ) . startActivityForResult ( fileChooserParams . createIntent () ,  ( code ,  data )  ->   filePathCallback . onReceiveValue ( FileChooserParams . parseResult ( code ,  data ) ) ) ;  return  true ;  }
public   void   setResponseCacheUpdateIntervalMs ( long   responseCacheUpdateIntervalMs )   {  this . responseCacheUpdateIntervalMs   =   responseCacheUpdateIntervalMs ;  }
public   void   stop ( StopParams   params )   throws  RemoteException   {  getServiceInterface () . stop ( params ) ;  }
public   void   setSharedUserId ( String   sharedUserId )   {  this . sharedUserId   =   sharedUserId ;  }
@ Override  public   void   closeConnection ( int   code ,  String   message )   {  engine . closeConnection ( code ,  message ) ;  }
private   boolean   drawPieMenu ( Canvas   canvas ,  float   f )   {  if  ( f   <=   0 )   {  return  false ;  }  CanvasPieMenu . paint . setAlpha ( Math . round ( f   *   255f ) ) ;  PieLauncherApp . appMenu . calculate ( touch . x ,  touch . y , prefs . animateInOut ()  ?   easeSlowerOut ( f )   :  1f ) ;  PieLauncherApp . appMenu . draw ( canvas ) ;  int   selectedIcon   =  PieLauncherApp . appMenu . getSelectedIcon () ;  if  ( selectedIcon   !=   lastSelectedIcon )   {  lastSelectedIcon   =   selectedIcon ;  performHapticFeedbackIfAllowed ( HAPTIC_FEEDBACK_CHOICE ) ;  }  return  f   <   1f ;  }
public   boolean   equals ( int   state ) {  return  equals ( DigitalState . getState ( state ) ) ;  }
public   static   long   timeUntilNextEvent ( int   interval ,  int   hour , long   placed ,  long   now )   {  Calendar   c   =  Calendar . getInstance () ;  c . setTimeInMillis ( placed ) ;  c . add ( Calendar . DAY_OF_MONTH ,  interval ) ;  c . set ( Calendar . HOUR_OF_DAY ,  hour ) ;  c . set ( Calendar . MINUTE ,  0 ) ;  return  c . getTimeInMillis ()   -   now ;  }
public   final   SchemaBuilder   descriptions ( final   Collection < Field >   fieldList )   {  definitions . addAll ( fieldList ) ;  return  this ;  }
public   boolean   isServerFileSupported ( ServerFile   file )   {  return  getServerFileActivity ( file . getMime () )   !=   null ;  }
@ Test  public   void   testGetApplicationsWithSortOrderQueryParam ()   {  Response   response   =  getResponseOfGet ( APPLICATION_MANAGEMENT_API_BASE_PATH   +   """"?sortOrder=ASC"""" ) ;  validateErrorResponse ( response ,  HttpStatus . SC_NOT_IMPLEMENTED ,  """"APP-65002"""" ) ;  }
public   void   setwGrads ( Map < Integer ,  Float >   wGrads )   {  this . wGrads   =   wGrads ;  }
public   Map < String ,  String >   getJobs ()   {  return  Collections . emptyMap () ;  }
@ Override   public   void   callback ( int   value )   {  System . out . println ( """"Callback from """"   +   Thread . currentThread () ) ;  callbackValueRefs . add ( Integer . valueOf ( value ) ) ;  threadRefs . add ( Thread . currentThread () ) ;  }
@ Override  public   ResourceLocation   getUid ()   {  return  JadeIds . DEBUG_ENTITY_ATTRIBUTES ;  }
@ Override   public   CharIndexer   get ( long   i ,  long   j ,  char []   c ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  c [ offset   +   n ]   =   array [ ( int ) index ( i ,  j )   +   n ] ;  }  return  this ;  }
@ Override  public   void   setPlayerInfoString ( String   world ,  String   playerName ,  String   node ,  String   value )   {  PermissionUser   user   =  getUser ( playerName ) ;  if  ( user   !=   null )   {  user . setOption ( node ,  String . valueOf ( value ) ,  world ) ;  }  }
public   static   DefaultEndpoint   randomEndpoint ( EurekaClientConfig   config ,  Environment   env )   {  String   hostname   =  env . getProperty ( EUREKA_INSTANCE_HOSTNAME ) ;  return  new   DefaultEndpoint ( getEurekaUrl ( config ,  hostname ) ) ;  }
public   void   setAutoExposureLeftEdge ( int   value )   {  setOption ( RealSense . RS_OPTION_R200_AUTO_EXPOSURE_LEFT_EDGE ,  value ) ;  }
 <argument pos:start=""""""""224:61"""""""" pos:end=""""""""224:64""""""""><expr pos:start=""""""""224:61"""""""" pos:end=""""""""224:64""""""""><name pos:start=""""""""224:61"""""""" pos:end=""""""""224:64"""""""">page</name></expr></argument>)</argument_list></call></expr>;</return>
public   RepoData   get ( String   url )   {  if  ( url   ==   null )   return  null ;  if  ( MAGISK_ALT_REPO_JSDELIVR . equals ( url ) )   {  url   =   MAGISK_ALT_REPO ;  }  return  this . repoData . get ( url ) ;  }
String   getProperty ( String   key )   {  if  ( properties   !=   null   &&   properties . getProperty ( key )   !=   null )   {  return  properties . getProperty ( key ) ;  }  if  ( System . getProperty ( key )   !=   null )   {  return  System . getProperty ( key ) ;  }  return  System . getenv ( key . replace ( """"."""" ,  """"_"""" ) . toUpperCase () ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( id ,  policyIdentifier ,  scopes ) ;  }
@ Test  public   void   testGetAutoUpdateHealth ()   {  CoberturaPublisher   testObjectTrue   =  new   CoberturaPublisher ( null ,  false ,  false ,  false ,  true ,  false ,  false ,  false ,  null ,  0 ) ;  CoberturaPublisher   testObjectFalse   =  new   CoberturaPublisher ( null ,  false ,  false ,  false ,  false ,  false ,  false ,  false ,  null ,  0 ) ;  assertTrue ( testObjectTrue . getAutoUpdateHealth () ) ;  assertTrue ( ! testObjectFalse . getAutoUpdateHealth () ) ;  }
public   String   adjustValueIfNecessary ( String   displayValue )   {  if ( ! shouldApply ( displayValue ) )   return  displayValue ;  return  adjust ( displayValue ) ;  }
protected   static   List < Integer >   newIntegerList ( int ...   array )   {  final   List < Integer >   result   =  new   ArrayList <> ( array . length ) ;  for  ( final   int   item   :  array )   {  result . add ( item ) ;  }  return  result ;  }
public   IdTokenConfiguration   expiryInSeconds ( Long   expiryInSeconds )   {  this . expiryInSeconds   =   expiryInSeconds ;  return  this ;  }
@ Override  public   SerialConfig   build ()   {  SerialConfig   config   =  new   DefaultSerialConfig ( getResolvedProperties () ) ;  return  config ;  }
public   record   PetDetails ( int   id , String   name , String   birthDate , PetType   type , List < VisitDetails >   visits ) {  }
@ Deprecated  public   String   resolveStartQuery ( String   cypher )   {  String   resolvedCypher   =  cypher ;  Pattern   p   =  Pattern . compile ( """"\\(\\s*iri\\s*=\\s*['|\""""]([\\w:/\\?=]+)['|\""""]\\s*\\)"""" ) ;  Matcher   m   =  p . matcher ( cypher ) ;  while  ( m . find () )   {  String   curie   =  m . group ( 1 ) ;  String   iri   =  curieUtil . getIri ( curie ) . orElse ( curie ) ;  resolvedCypher   =   resolvedCypher . replace ( curie ,  iri ) ;  }  return  resolvedCypher ;  }
@ Override   void   accept ( Visitor   visitor )   {  visitor . visitNullSchema ( this ) ;  }
private   int   getUpdatePeriod ()   {  if  ( getView ()   ==   null   ||   mPlaybackControlsRow . getTotalTime ()   <=   0 )   {  return  DEFAULT_UPDATE_PERIOD ;  }  return  Math . max ( UPDATE_PERIOD ,  mPlaybackControlsRow . getTotalTime ()   /   getView () . getWidth () ) ;  }
public   List < String >   getEngines ()   {  return  Arrays . asList ( environment . getRequiredProperty ( """"sql.query.engines"""" ) . split ( """","""" ) ) ;  }
public   static   String   fmt ( double   val )   {  return  val   ==   Math . round ( val )  ?   Long . toString ( ( long )   val )   :  Double . toString ( val ) ;  }
 <argument pos:start=""""""""1318:91"""""""" pos:end=""""""""1318:91""""""""><expr pos:start=""""""""1318:91"""""""" pos:end=""""""""1318:91""""""""><literal type=""""""""number"""""""" pos:start=""""""""1318:91"""""""" pos:end=""""""""1318:91"""""""">0</literal></expr></argument>
@ Test  public   void   testQueryContinuation ()   throws  Exception  {  UriTemplate   template   =  UriTemplate . buildFromTemplate ( BASE_URI ) . continuation ( """"foo"""" ) . build () ;  Assert . assertEquals ( """"http:
@ Override  public   int   hashCode ()   {  return  Objects . hashCode ( key ,  name ,  severity ,  lan ,  langName ,  htmlDesc ) ;  }
public   InstanceSettings   getSettings ()   {  return  AllSettings . instanceFromId ( context ,  widgetId ) ;  }
@ Override  protected   Boolean   doInBackground ( Void ...   params )   {  return  Shell . SU . available () ;  }
@ JavascriptInterface  public   int   getBackgroundColor ()   {  Resources . Theme   theme   =  this . activity . getTheme () ;  TypedValue   typedValue   =  new   TypedValue () ;  theme . resolveAttribute ( com . google . android . material . R . attr . backgroundColor ,  typedValue ,  true ) ;  if  ( typedValue . type   >=   TypedValue . TYPE_FIRST_COLOR_INT   &&   typedValue . type   <=   TypedValue . TYPE_LAST_COLOR_INT )   {  return  typedValue . data ;  }  theme . resolveAttribute ( android . R . attr . background ,  typedValue ,  true ) ;  return  typedValue . data ;  }
@ Override  public   float   getAvailableContentWidth ()  {  float   ret   =  availwidth   -   margin . left   -   border . left   -   padding . left  -   padding . right   -   border . right   -   margin . right ;  if  ( max_size . width   !=   - 1   &&   ret   >   max_size . width )  ret   =   max_size . width ;  return  ret ;  }
@ Test  public   void   maybeSucceeds ()   {  assertTrue ( createSubject () . maybe ( """"not"""" ) . isPresent () ) ;  }
protected   Response   getResponseOfDeleteWithOAuth2 ( String   endpointURL ,  String   accessToken )   {  return  given () . auth () . preemptive () . oauth2 ( accessToken )  . contentType ( ContentType . JSON )  . when ()  . delete ( endpointURL ) ;  }
public   void   updateNumberPicker ( int   maxValue ,  int   minValue ,  int   currentValue ) {  mNumberPicker . setMaxValue ( maxValue ) ;  mNumberPicker . setMinValue ( minValue ) ;  mNumberPicker . setValue ( currentValue ) ;  }
@ SuppressWarnings ( """"PMD.AvoidCatchingThrowable"""" )  private   void   update ()   {  while  ( true )   {  try  {  final   MethodCacher . Key   key   =  this . updatekeys . take () ;  final   MethodCacher . Tunnel   tunnel   =  this . tunnels . get ( key ) ;  if  ( tunnel   !=   null   &&   tunnel . expired () )   {  final   MethodCacher . Tunnel   after   =  tunnel . copy () ;  after . through () ;  this . tunnels . put ( key ,  after ) ;  }  }   catch  ( final   InterruptedException   ex )   {  LogHelper . log ( Loggable . ERROR , this , """"%s:%s"""" , ex . getMessage () , ex ) ;  
static   MockPwmProvider   newInstance ()   {  return  new   MockPwmProviderImpl () ;  }
public   static   String   peekMirrorPath ()   {  return  InstallerInitializer . MAGISK_PATH   ==   null  ?   null   : InstallerInitializer . MAGISK_PATH   +   """"/.magisk/mirror"""" ;  }
private   String   getTextFromSchemaAssociation ( SchemaAssociation   schemaAssociation )   {  return  schemaAssociation . getContentTypeId ()   +   """" (""""   +   schemaAssociation . getContentType ()   +   """")"""" ;  }
@ Test  public   void   testArraySchema ()   {  ArraySchema   subject   =  ArraySchema . builder ()  . uniqueItems ( true )  . minItems ( 5 ) . maxItems ( 10 )  . allItemSchema ( BooleanSchema . INSTANCE ) . build () ;  String   actual   =  subject . toString () ;  assertThat ( new   JSONObject ( actual ) ,  sameJsonAs ( LOADER . readObj ( """"arrayschema-list.json"""" ) ) ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  ActivityTransitionResult   that   =  ( ActivityTransitionResult )   o ;  return  transitionEvents . equals ( that . transitionEvents ) ;  }
private   void   tearDownImageContent ()   {  getImageView () . setScaleType ( ImageView . ScaleType . CENTER_INSIDE ) ;  getImageView () . setImageBitmap ( BitmapFactory . decodeResource ( getResources () ,  R . drawable . default_audiotrack ) ) ;  }
public   void   setLocalAndOutboundAuthenticationConfig ( LocalAndOutboundAuthenticationConfig  localAndOutboundAuthenticationConfig )   {  this . localAndOutboundAuthenticationConfig   =   localAndOutboundAuthenticationConfig ;  }
@ Override  public   int   compareTo ( EntityAnnotation   o )   {  if  ( range . equals ( o . range ) )  return  0 ;  else if  ( getEnd ()   >   o . getEnd () )  return  1 ;  else if  ( getEnd ()   <   o . getEnd () )  return  - 1 ;  else if  ( getStart ()   <   o . getStart () )  return  1 ;  else  return  - 1 ;  }
@ Override  public   String   call ()   throws  Exception   {  return  watcher . getContent () ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"accessTokenBindingType"""" )  @ Valid  public   MetadataProperty   getAccessTokenBindingType ()   {  return  accessTokenBindingType ;  }
public   String   getNamespaceURI (  String   prefix )   {  if  (  prefix   ==   null )   throw  new   IllegalArgumentException (  prefix ) ;  String   result   =  map . get (  prefix ) ;  if  (  result   !=   null )   return  result ;  if  (  DEFAULT_NS_PREFIX . equals (  prefix ) )   return  NULL_NS_URI ;  if  (  XML_NS_PREFIX . equals (  prefix ) )   return  XML_NS_URI ;  if  (  XMLNS_ATTRIBUTE . equals (  prefix ) )   return  XMLNS_ATTRIBUTE_NS_URI ;  return  NULL_NS_URI ;  }
public   static   int   getEventRange ( Context   context )   {  return  parseIntSafe ( getString ( context ,  PREF_EVENT_RANGE ,  PREF_EVENT_RANGE_DEFAULT ) ) ;  }
@ Override  public   void   setOnGroundOverlayClickListener ( IOnGroundOverlayClickListener   listener )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: setOnGroundOverlayClickListener"""" ) ;  }
public   DirectionsApiRequest   waypoints ( LatLng ...   waypoints )   {  Waypoint []   objWaypoints   =  new   Waypoint [ waypoints . length ] ;  for  ( int   i   =  0 ;   i   <   waypoints . length ;   i ++ )   {  objWaypoints [ i ]   =   new   Waypoint ( waypoints [ i ] ) ;  }  return  waypoints ( objWaypoints ) ;  }
public   UriTemplateBuilder   label ( VarSpec ...   var )  {  addComponent ( Expression . label ( var ) . build () ) ;  return  this ;  }
@ Override  protected   void   succeeded ()   {  super . succeeded () ;  ArrayList < File >   allVoicebanks   =  getValue () ;  voicebankChoiceBox . setItems ( FXCollections . observableArrayList ( allVoicebanks ) ) ;  voicebankChoiceBox . getItems () . add ( 0 ,  preferencesManager . getVoicebankDefault () ) ;  voicebankChoiceBox . setValue ( file ) ;  }
public   Integer   getLastResultBuild ()   {  for  ( Run < ? ,  ? >   b   =  getLastBuildToBeConsidered () ;   b   !=   null ;   b   =   BuildUtils . getPreviousNotFailedCompletedBuild ( b ) )   {  if  ( b . getResult ()   ==   Result . FAILURE   ||   ( b . getResult ()   !=   Result . SUCCESS   &&   onlyStable ) )  continue;  CoberturaBuildAction   r   =  b . getAction ( CoberturaBuildAction . class ) ;  if  ( r   !=   null )  return  b . getNumber () ;  }  return  null ;  }
@ Override  public   final   List < Field >   getProperties ()   {  return  values ;  }
private   void   checkRpmFileSetAttributesAllowed ()   {  if  ( getProject ()   ==   null  ||   ( isReference ()  &&   ( getRefid () . getReferencedObject ( getProject () )  instanceof   RpmFileSet ) ) )   {  checkAttributesAllowed () ;  }  }
static   OnOffBinding   newInstance ( OnOff   ...   target ) {  return  new   DefaultOnOffBinding ( target ) ;  }
private   static   Compiler   compilerWithGeneratorAndError ()   {  return  javac () . withProcessors ( new   FailingGeneratingProcessor () ) ;  }
@ NonNull  public   Builder   setConsentPendingIntent ( PendingIntent   consentPendingIntent )   {  this . consentPendingIntent   =   consentPendingIntent ;  return  this ;  }
@ Override  public   final   int   hashCode ()   {  return  Objects . hash ( super . hashCode () ,  defaultValue ,  minimum ,  maximum ,  exclusiveMinimum ,  exclusiveMaximum ,  multipleOf ) ;  }
public   void   setShowAppNames ( int   showAppNames )   {  this . showAppNames   =   showAppNames ;  put ( SHOW_APP_NAMES ,  showAppNames ) . apply () ;  }
public   static   void   addSentryBreadcrumb ( SentryBreadcrumb   sentryBreadcrumb )   {  if  ( MainApplication . isCrashReportingEnabled () )   {  Sentry . addBreadcrumb ( sentryBreadcrumb . breadcrumb ) ;  }  }
private   void   assertHeaderCompletions ( final   AssertableList   completions )   {  completions  . assertContains ( """"$ref"""" , """"description"""" , """"required"""" , """"deprecated"""" , """"allowEmptyValue"""" , """"style"""" , """"explode"""" , """"allowReserved"""" , """"schema"""" , """"example"""" , """"examples"""" , """"content"""" )  . isOfSize ( 12 ) ;  }
@ Test  void   canParseActionCurrentWhileBuildRunning ()   {  when ( buildRunOneCurrent . isBuilding () ) . thenReturn ( true ) ;  final   MarkupText   markupText   =  new   MarkupText ( """"Log line"""" ) ;  assertEquals ( ACTION_5 ,  ColorizedAction . parseAction ( markupText ,  buildRunOneCurrent ) ) ;  }
@ Override  public   ICircleDelegate   addCircle ( CircleOptions   options )   throws  RemoteException   {  return  backendMap . add ( new   CircleImpl ( getNextCircleId () ,  options ,  this ) ) ;  }
@ Test  public   void   launcher ( CapturedOutput   output )   throws  Exception   {  String []   args   =  new   String []   {  """"--thin.classpath"""" , """"--thin.archive=src/test/resources/apps/launcher""""  } ;  ThinJarLauncher . main ( args ) ;  assertThat ( output . toString () ) . contains ( """"spring-cloud-deployer-thin-1.0.22.RELEASE.jar""""   +   File . pathSeparator ) ;  }
@ Before  public   void   setUp ()   throws  Exception   {  recognizer   =   new   EntityRecognizer ( null ,  null ) ;  concept . setIri ( """"http:
@ NonNull  public   static   SmsCodeAutofillClient   getAutofillClient ( Context   context )   {  return  new   SmsCodeAutofillClientImpl ( context ) ;  }
public   ResultSet   getColumnPrivileges ( String   catalog ,  String   schema ,  String   table ,  String   columnNamePattern )   throws  SQLException   {  return  null ;  }
public   void   start ()   {  thread   =   new   Thread ( this ) ;  thread . start () ;  }
@ Override   public   UIntIndexer   put ( long []   indices ,  long []   m ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  putRaw ( index ( indices )   +   n ,  m [ offset   +   n ] ) ;  }  return  this ;  }
public   boolean   matchesHideExpression ( CharSequence   s )   {  for  ( Pattern   hidePattern   :  hidePatterns )   {  
private   void   waitTillWidgetIsReloaded ( String   tag )   {  long   start   =  System . currentTimeMillis () ;  while  ( Math . abs ( System . currentTimeMillis ()   -   start )   <   MAX_MILLIS_TO_WAIT_FOR_LAUNCHER ) {  if  ( InstanceState . get ( provider . getWidgetId () ) . listReloaded   >   0 )   {  Log . d ( tag ,  provider . getWidgetId ()   +   """" reloaded"""" ) ;  break;  }  EnvironmentChangedReceiver . sleep ( 20 ) ;  }  }
protected   void   openDB ()   {  try  {  db   =   new   Database ( dbName ,  dbConfig ) ;  }   catch  ( CouchbaseLiteException   e )   {  e . printStackTrace () ;  }  }
@ Nullable  public   LocationSettingsStates   getLocationSettingsStates ()   {  return  getResult () . getLocationSettingsStates () ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"options"""" )  @ Valid  public   List < ClientAuthenticationMethod >   getOptions ()   {  return  options ;  }
private   void   paint ( IplImage   img ,  int   posX ,  int   posY )   {  Graphics   g   =  jp . getGraphics () ;  path . setSize ( img . width () ,  img . height () ) ;  
public   Builder   configProperty ( String   propKey ,  String   propVal )   {  built . getConfig () . setProperty ( propKey ,  propVal ) ;  return  this ;  }
@ Override   public   BigInteger   get ( long ...   indices )   {  return  getRaw ( index ( indices ) ) ;  }
private   static   void   setShowPastEventsUnderOneHeader ( Context   context ,  boolean   value )   {  setBoolean ( context ,  PREF_SHOW_PAST_EVENTS_UNDER_ONE_HEADER ,  value ) ;  }
public   static   LauncherItemKey   unflattenFromString ( Context   context , String   s )   {  return  AppMenu . HAS_LAUNCHER_APP ?   unflattenFromStringWithUserHandle ( context ,  s )  :  new   LauncherItemKey ( ComponentName . unflattenFromString ( s ) ,  null ) ;  }
@ EventHandler ( priority   =   EventPriority . MONITOR )  public   void   onPluginEnable ( PluginEnableEvent   event )   {  if  ( permission . perms   ==   null )   {  Plugin   perms   =  event . getPlugin () ;  if  ( perms . getDescription () . getName () . equals ( """"SimplyPerms"""" ) )   {  permission . perms   =   ( ( SimplyPlugin )   perms ) . getAPI () ;  log . info ( String . format ( """"[%s][Permission] %s hooked."""" ,  plugin . getDescription () . getName () ,  permission . name ) ) ;  }  }  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"idTokenSignatureAlgorithm"""" )  @ Valid  public   MetadataProperty   getIdTokenSignatureAlgorithm ()   {  return  idTokenSignatureAlgorithm ;  }
public   void   testUnknownResponseRef ()   {  doTest ( """"unknown_response_ref.yaml"""" ) ;  }
public   void   setPBS ( double []   pbsValues )   {  ImmutableList . Builder < Double >   builder   =  ImmutableList . builder () ;  for  ( double   value   :  pbsValues )   {  builder . add ( value ) ;  }  pbs   =   builder . build () ;  }
public   static   String   toPaddedMinutes ( int   minutes ) {  DecimalFormat   df   =  new   DecimalFormat ( """"00"""" ) ;  return  df . format ( minutes ) ;  }
default   < I   extends  IO > I   create ( IOConfigBuilder   builder ,  IOType   ioType )   {  return  create ( ( IOConfig ) builder . build () ,  ioType ) ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Request access token without scopes and validate."""" , dependsOnMethods   =   """"testIntrospectionWithoutAuthentication"""" )  public   void   testValidateTokenWithoutScope ()   throws  Exception   {  Assert . assertFalse ( getTokenAndValidate ( null ) ,  """"Introspection endpoint called without authentication valid scope"""" ) ;  }
public   void   run ()  {  final   String   userIds   =  PreferenceManager  . getDefaultSharedPreferences ( BaseActivity . this )  . getString ( """"cryptoUserIds"""" ,  """""""" ) ;  final   String   provider   =   PreferenceManager  . getDefaultSharedPreferences ( BaseActivity . this ) . getString ( """"openpgpProviderList"""" ,  """"org.sufficientlysecure.keychain"""" ) ;  crypto   =   new   Crypto ( userIds ,  provider ) ;  crypto . bind ( BaseActivity . this ) ;  }
private   int   getIndexOfNumberOfDaysLetter ( String   pattern ,  int   startIndex )   {  boolean   inQuotes   =  false ;  for  ( int   ind   =  startIndex ;   ind   <   pattern . length () ;   ind ++ )   {  if  ( ( pattern . charAt ( ind )   ==   NUMBER_OF_DAYS_LOWER_LETTER   ||   pattern . charAt ( ind )   ==   NUMBER_OF_DAYS_UPPER_LETTER )  &&   ! inQuotes )   return  ind ;  if  ( pattern . charAt ( ind )   ==   '\'' )   inQuotes   =   ! inQuotes ;  }  return  - 1 ;  }
public   void   performReplacement ( Properties   properties ,  List < ReplacementProperty >   replacementProperties )   {  if  ( ( replacementProperties   !=   null )   &&   ( properties   !=   null ) )   {  for  ( ReplacementProperty   replacementProperty   :  replacementProperties )   {  String   propertyKey   =  replacementProperty . getProperty () ;  if  ( propertyKey   ==   null )   {  performReplacementOnAllGeneratedProperties ( properties ,  replacementProperty ) ;  }   else  {  performReplacementOnSingleProperty ( properties ,  replacementProperty ,  propertyKey ) ;  }  }  }  }
@ Override  public   boolean   shouldDisplayFluids ()   {  return  fluidMode   !=   FluidMode . NONE ;  }
@ Override  public   void   setHasVibrato ( int   position ,  boolean   hasVibrato )   {  if  ( noteMap . hasPitchbend ( position ) )   {  noteMap . getPitchbend ( position ) . setHasVibrato ( hasVibrato ) ;  }  }
public   < T   extends  ObjectInfo >   ObjectInfoTable < T >   objectInfoTable ()   {  return  objectInfoTable ;  }
public   void   setPrefixes (  final   String ...   prefixes )   {  if  (  prefixes   !=   null   &&   0   <   prefixes . length )   format . getHeader () . createEntry (  PREFIXES ,  prefixes ) ;  }
@ Test  public   void   multipleOfFailure ()   {  NumberSchema   subject   =  buildWithLocation ( NumberSchema . builder () . multipleOf ( 10 ) ) ;  TestSupport . failureOf ( subject )  . expectedKeyword ( """"multipleOf"""" )  . input ( 15 )  . expect () ;  }
@ Test  public   void   emptyPom ()   throws  Exception   {  Resource   resource   =  new   ClassPathResource ( """"META-INF/thin/empty-pom.xml"""" ) ;  Model   model   =  resolver . readModel ( resource ) ;  assertThat ( model . getDependencies () . size () ) . isEqualTo ( 0 ) ;  ProjectBuildingRequest   request   =  getProjectBuildingRequest ( resolver ) ;  List < ArtifactRepository >   repositories   =  request . getRemoteRepositories () ;  assertThat ( repositories ) . filteredOnNull ( """"snapshots"""" ) . isEmpty () ;  assertThat ( repositories . get ( 0 ) . getSnapshots () . isEnabled () ) . isTrue () ;  }
@ Override  MessageBodyWriter < Graph >   getWriter ()   {  return  new   GmlWriter () ;  }
public   static   void   main ( String []   args )   throws  IOException ,  InvalidDatabaseException   {  File   file   =  new   File ( args . length   >   0  ?   args [ 0 ]   :  """"GeoLite2-City.mmdb"""" ) ;  System . out . println ( """"No caching"""" ) ;  loop ( """"Warming up"""" ,  file ,  WARMUPS ,  NoCache . getInstance () ) ;  loop ( """"Benchmarking"""" ,  file ,  BENCHMARKS ,  NoCache . getInstance () ) ;  System . out . println ( """"With caching"""" ) ;  loop ( """"Warming up"""" ,  file ,  WARMUPS ,  new   CHMCache () ) ;  loop ( """"Benchmarking"""" ,  file ,  BENCHMARKS ,  new   CHMCache () ) ;  }
public   String   getTmpModelsPath ( SourceType   sourceType )   {  return  getPathBySourceType ( new   Path ( Constants . TMP ,  Constants . DEFAULT_MODELS_TMP_FOLDER ) ,  sourceType ) ;  }
@ Test  public   void   toStringWithDefault ()   {  JSONObject   rawSchemaJson   =  loader . readObj ( """"tostring/objectschema-default.json"""" ) ;  Schema   schema   =  ObjectSchema . builder ()  . addPropertySchema ( """"a"""" ,  EmptySchema . builder ()  . defaultValue ( new   JSONObject ( """"{\""""description\"""":\""""default empty value\""""}"""" ) )  . build () )  . build () ;  String   actual   =  schema . toString () ;  assertThat ( new   JSONObject ( actual ) ,  sameJsonAs ( rawSchemaJson ) ) ;  }
public   boolean   hasSong ( File   location )   {  File   normalized   =  normalize ( location ) ;  return  songs . containsKey ( normalized ) ;  }
@ Override  public   float   getLastLineLength ()  {  return  getMaximalContentWidth () ;  }
@ Nullable  @ Override  public   Object   getTarget ()   {  return  getBlockEntity () ;  }
protected   Object   getBody ()   {  if  ( scalaRequest   !=   null   &&   scalaRequest . hasBody ()   &&   scalaRequest   instanceof   Request )   {  return  ( ( Request < ? > )   scalaRequest ) . body () ;  }   else if  ( javaRequest . hasBody ()   &&   javaRequest   instanceof   Http . Request )   {  return  ( ( Http . Request )   javaRequest ) . body () ;  }  return  null ;  }
 <argument pos:start=""""""""230:62"""""""" pos:end=""""""""230:65""""""""><expr pos:start=""""""""230:62"""""""" pos:end=""""""""230:65""""""""><name pos:start=""""""""230:62"""""""" pos:end=""""""""230:65"""""""">page</name></expr></argument>)</argument_list></call></expr>;</return>
public   static   double   getModifiedProjectileSpeed ( ItemStack   weapon ,  double   speed )  {  for ( int   i   =  0 ;   i   <   IAttachment . Type . values () . length ;   i ++ )  {  IGunModifier []   modifiers   =  getModifiers ( weapon ,  IAttachment . Type . values () [ i ] ) ;  for ( IGunModifier   modifier   :  modifiers )  {  speed   =   modifier . modifyProjectileSpeed ( speed ) ;  }  }  return  speed ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   ArrayBuilder   merge ( final   List < Object >   list )   {  U . merge ( data ,  ( List < Object > )   ( ( ArrayList < ? > )   list ) . clone () ) ;  return  this ;  }
@ Override   public   Bfloat16Indexer   get ( long   i ,  float []   h ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  h [ offset   +   n ]   =   getRaw ( index ( i )   +   n ) ;  }  return  this ;  }
@ Override  public   List < Field >   getProperties ()   {  return  Collections . singletonList ( this ) ;  }
private   static   float   clamp ( float   value ,  float   min ,  float   max )   {  return  Math . max ( min ,  Math . min ( max ,  value ) ) ;  }
default   void   gpioWrite ( int   pin ,  int   state ) {  gpioWrite ( pin ,  PiGpioState . from ( state ) ) ;  }
protected   synchronized   IntBuffer   getOffsetsBuffer ( int   size )   {  final   int   byteSize   =  size   *   4 ;  IntBuffer   buf   =  localOffsetsBuffer . get () ;  if  ( byteSize   >   localBufferSize )  throw  new   ScratchBufferOverrun () ;  
@ Test   public   void   testDoubleIndexerPutGet ()   {  double   value   =  1.0 ;  assertEquals ( value ,  DoubleIndexer . create ( new   double [ 1 ] ) . put ( 0 ,  value ) . get ( 0 ) ,  0.0 ) ;  assertEquals ( value ,  DoubleIndexer . create ( DoubleBuffer . allocate ( 1 ) ) . put ( 0 ,  value ) . get ( 0 ) ,  0.0 ) ;  assertEquals ( value ,  DoubleIndexer . create ( new   DoublePointer ( 1 ) ) . put ( 0 ,  value ) . get ( 0 ) ,  0.0 ) ;  }
public   ServerApp   getItem ( int   position )   {  return  apps . get ( position ) ;  }
@ Deprecated  public   Task < Fido2PendingIntent >   getSignIntent ( PublicKeyCredentialRequestOptions   requestOptions )   {  return  getSignPendingIntent ( requestOptions ) . onSuccessTask ( pendingIntent  ->   Tasks . forResult ( new   Fido2PendingIntentImpl ( pendingIntent ) ) ) ;  }
@ BeforeClass  public   void   setUp ()   throws  Exception   {  File   tmpCommon   =  new   File ( """"common"""" ) ;  File   common   =  new   File ( """"src/test/resources/common"""" ) ;  FileUtils . copyDirectory ( common ,  tmpCommon ) ;  Environment . setProperty ( Environment . SHIFU_HOME ,  """"."""" ) ;  instance   =   new   CalculateReasonCodeUDF ( """"LOCAL"""" , """"src/test/resources/example/cancer-judgement/ModelStore/ModelSet1/ModelConfig.json"""" , """"src/test/resources/example/cancer-judgement/ModelStore/ModelSet1/ColumnConfig.json"""" , """"EvalA"""" ) ;  }
private   int   optionInt ( ArrayList < Object >   options ,  int   index )   {  if  ( options . size ()   <=   index )  throw  new   IllegalArgumentException () ;  Object   value   =  options . get ( index ) ;  if  ( value   ==   null )  throw  new   IllegalArgumentException () ;  if  ( ! value . getClass () . equals ( Integer . class ) )  throw  new   IllegalArgumentException () ;  return  ( ( Integer )   value ) . intValue () ;  }
public   static   void   save ( Context   context ,  int   wigdetId )   {  if  ( wigdetId   !=   0   &&   wigdetId   ==   getWidgetId ( context ) )   {  AllSettings . saveFromApplicationPreferences ( context ,  wigdetId ) ;  }  }
public   NPC   getNpc ( String   npcId )   {  if  ( npcId   ==   null   ||   npcId . trim () . length ()   ==   0 )   {  return  null ;  }  if  ( ! npcMap . containsKey ( npcId ) )   {  throw  new   RepositoryException ( """"Argument 'npcId' with value '""""   +   npcId   +   """"' not found in repository."""" ) ;  }  return  npcMap . get ( npcId ) ;  }
@ Override  AnnotatedArrayList < DataMap >   loadList ( DataMap   dataMap ,  String   key )   {  AnnotatedArrayList < DataMap >   list   =  new   AnnotatedArrayList < DataMap > ( this ) ;  list . addAll ( dataMap . getDataMapArrayList ( key ) ) ;  return  list ;  }
public   void   updateSmoothing ()   {  lastChange   =   SystemClock . uptimeMillis () ;  lastT   =   0 ;  }
@ Override   public   CharIndexer   put ( long   i ,  long   j ,  long   k ,  char   c )   {  putRaw ( index ( i ,  j ,  k ) ,  c ) ;  return  this ;  }
@ Override  public   boolean   addAll ( @ NonNull   Collection   c )   {  for  ( var   chat   :  c )   {  if  ( checkGroup ( chat ) )   {  super . add ( chat ) ;  }  }  return  true ;  }
@ Override  public   boolean   shouldHide ( Entity   entity )   {  return  hideEntitiesReloadable . contains ( entity . getType () ) ;  }
public   boolean   interrupted ()   {  final   boolean   dead ;  if  ( this . thread . isAlive () )   {  this . thread . interrupt () ;  final   Method   method   =  ( ( MethodSignature )   this . point . getSignature () )  . getMethod () ;  if  ( Logger . isWarnEnabled ( method . getDeclaringClass () ) )   {  Logger . warn ( method . getDeclaringClass () , """"%s: interrupted on %[ms]s timeout (over %[ms]s)"""" , Mnemos . toText ( this . point ,  true ,  false ) , System . currentTimeMillis ()   -   this . start , this . deadline   -   this . start ) ;  }  dead   =   false ;  }   else  {  dead   =   true ;  }  return  dead ;  }
@ Test  public   void   testRemovedResponseContentTypeDiff ()   {  ChangedOpenApi   changedOpenApi   = OpenApiCompare . fromLocations ( """"content_type_response_add_2.yaml"""" ,  """"content_type_response_add_1.yaml"""" ) ;  assertThat ( changedOpenApi . isCompatible () ) . isFalse () ;  }
boolean   okAllIsWell ( Response   response ,  Callback   callback )   {  return  okText ( response ,  ALL_IS_WELL ,  callback ) ;  }
@ AfterAll  public   static   void   tearDownAll ()   {  stopService ( service ) ;  stopEurekaServer ( server ) ;  }
@ Override  public   boolean   onStartJob ( JobParameters   params )   {  Log . i ( TAG ,  """"JOB STARTED!"""" ) ;  mRunningParams   =   params ;  
@ JsonIgnore  public   List < Double >   getBinBoundary ()   {  return  columnBinning . getBinBoundary () ;  }
default   void   gpioWrite ( int   pin ,  boolean   state ) {  gpioWrite ( pin ,  PiGpioState . from ( state ) ) ;  }
default   int   i2cReadI2CBlockData ( int   handle ,  int   register ,  byte []   buffer ,  int   length ) {  return  i2cReadI2CBlockData ( handle ,  register ,  buffer ,  0 ,  length ) ;  }
@ Test  public   void   testMixTypeWoeZscorePmmlCase ()   throws  Exception   {  PMMLVerifySuit   verifySuit   =  new   PMMLVerifySuit ( """"TestMixTypeWoeZscale"""" , """"src/test/resources/example/labor-neg/DataStore/ModelSet3/ModelConfig.json"""" , """"src/test/resources/example/labor-neg/DataStore/ModelSet3/ColumnConfig.json"""" , """"src/test/resources/example/labor-neg/DataStore/ModelSet3/models"""" ,  5 ,  """"EvalA"""" , """"src/test/resources/example/labor-neg/DataStore/DataSet1/data.dat"""" ,  """","""" ,  1.0d ,  true ) ;  Assert . assertTrue ( verifySuit . doVerification () ) ;  }
@ Test  public   void   getAffinityReturnsValuePreviouslySet ()   {  String   osName   =  System . getProperty ( """"os.name"""" ) ;  if  ( ! osName . startsWith ( """"Linux"""" ) )   {  System . out . println ( """"Skipping Linux tests"""" ) ;  return;  }  final   IAffinity   impl   =  LinuxJNAAffinity . INSTANCE ;  final   int   cores   =  CORES ;  for  ( int   core   =  0 ;   core   <   cores ;   core ++ )   {  final   BitSet   mask   =  new   BitSet () ;  mask . set ( core ,  true ) ;  getAffinityReturnsValuePreviouslySet ( impl ,  mask ) ;  }  }
public   boolean   playerHas ( String   player ,  String   flag ,  boolean   def )  {  return  this . playerHas ( player ,  world ,  flag ,  def ) ;  }
@ Deprecated  @ NonNull  public   LocationRequest   setFastestInterval ( long   fastestIntervalMillis )   throws  IllegalArgumentException   {  if  ( fastestIntervalMillis   <   0 )   throw  new   IllegalArgumentException ( """"illegal fastest interval: """"   +   fastestIntervalMillis ) ;  this . minUpdateIntervalMillis   =   fastestIntervalMillis ;  explicitFastestInterval   =   true ;   
public   double   getTotalWarp ( Marker []   imagedMarkers ,  CvMat   totalWarp )   {  return  getTotalWarp ( imagedMarkers ,  totalWarp ,  false ) ;  }
private   String   getEurekaServiceUrlsForDefaultZone ()   {  return  getEurekaServiceUrls ( """"defaultZone"""" ) ;  }
@ Override   public   ByteIndexer   putChar ( long   i ,  char   c )   {  buffer . putChar ( ( int ) i ,  c ) ;  return  this ;  }
@ Override  public   boolean   groupRemove ( String   worldName ,  String   groupName ,  String   permission )   {  if  ( worldName   ==   null )   {  worldName   =   """"*"""" ;  }  perms . removeGroupPermission ( worldName ,  groupName ,  permission ) ;  return  true ;  }
@ Override  public   void   setGroupSuffix ( String   world ,  String   group ,  String   suffix )   {  PermissionGroup   pGroup   =  PermissionsEx . getPermissionManager () . getGroup ( group ) ;  if  ( group   !=   null )   {  pGroup . setSuffix ( suffix ,  world ) ;  }  }
public   boolean   containsLoc ( Location   loc )   {  Collection < CuboidArea >   keys   =  areas . values () ;  for  ( CuboidArea   key   :  keys )   {  if  ( key . containsLoc ( loc ) )   {  if  ( parent   !=   null )  return  parent . containsLoc ( loc ) ;  return  true ;  }  }  return  false ;  }
public   Song   build ()   {  noteListBuilder . standardize ( newSong . standardizer ,  newSong . voicebank . get () ) ;  newSong . noteList   =   noteListBuilder . build () ;  return  newSong ;  }
private   String   getStatus ()   {  return  """"status-is-""""   +   testName . getMethodName () ;  }
private   static   void   getFiles ( File   dir ,  ArrayList < String >   fileList )  {  
public   List < Crosshair >   getRegisteredCrosshairs ()  {  return  ImmutableList . copyOf ( this . registeredCrosshairs ) ;  }
@ Override  public   < T >   Collection < T >   getNodeProperties ( long   node ,  String   property ,  Class < T >   type )   {  Map < String ,  Object >   propertyMap ;  synchronized  ( graphLock )   {  propertyMap   =   inserter . getNodeProperties ( node ) ;  }  if  ( propertyMap . containsKey ( property ) )   {  return  GraphUtil . getPropertiesAsSet ( propertyMap . get ( property ) ,  type ) ;  }   else  {  return  emptyList () ;  }  }
@ Test  public   void   formatValidatorWithoutExplicitName ()   {  SchemaLoader   schemaLoader   =  SchemaLoader . builder ()  . schemaJson ( baseSchemaJson () )  . addFormatValidator ( new   EvenCharNumValidator () )  . build () ;  Object   actual   =  fetchFormatValueFromOutputJson ( schemaLoader ) ;  Assertions . assertEquals ( """"evenlength"""" ,  actual ) ;  }
private   List < ArtifactResult >   collectNonTransitive ( List < Dependency >   dependencies , Properties   properties )   {  try  {  DefaultRepositorySystemSession   session   =  createSession ( properties ) ;  List < ArtifactRequest >   artifactRequests   =  getArtifactRequests ( dependencies , session ,  properties ) ;  List < ArtifactResult >   result   =  this . repositorySystem . resolveArtifacts ( session , artifactRequests ) ;  return  result ;  }  catch  ( Exception   ex )   {  throw  new   IllegalStateException ( ex ) ;  }  }
@ Test  public   void   builderTest ()   {  JSONPointer   pointer   =  JSONPointer . builder ()  . append ( """"obj"""" )  . append ( """"other~key"""" ) . append ( """"another/key"""" )  . append ( 0 )  . build () ;  assertEquals ( """"val"""" ,  pointer . queryFrom ( document ) ) ;  }
@ Override  public   AnonymousIpResponse   anonymousIp ( InetAddress   ipAddress )   throws  IOException , GeoIp2Exception   {  Optional < AnonymousIpResponse >   r   =  getAnonymousIp ( ipAddress ) ;  if  ( r . isEmpty () )   {  throw  new   AddressNotFoundException ( """"The address """"  +   ipAddress . getHostAddress ()   +   """" is not in the database."""" ) ;  }  return  r . get () ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( displayName ,  audience ) ;  }
@ Override  public   void   onCreateFoxActivity ( FoxActivity   compatActivity )   {  super . onCreateFoxActivity ( compatActivity ) ;  compatActivity . setTheme ( this . managerThemeResId ) ;  }
@ Override   public   UShortIndexer   get ( long   i ,  long   j ,  int []   s ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  s [ offset   +   n ]   =   array [ ( int ) index ( i ,  j )   +   n ]   &   0xFFFF ;  }  return  this ;  }
public   String   getConsumer ()   {  return  GpioD . lineGetConsumer ( getCPointer () ) ;  }
@ Override   public   BooleanIndexer   put ( long   i ,  long   j ,  long   k ,  boolean   b )   {  buffer . put ( ( int ) index ( i ,  j ,  k ) ,  b  ?   ( byte ) 1   :  ( byte ) 0 ) ;  return  this ;  }
@ Test  public   void   compilesWithoutError_noWarning ()   {  expectFailure  . whenTesting ()  . about ( javaSource () )  . that ( HELLO_WORLD )  . processedWith ( new   DiagnosticMessage . Processor ( Diagnostic . Kind . WARNING ) )  . compilesWithoutError ()  . withWarningContaining ( """"what is it?"""" ) ;  AssertionError   expected   =  expectFailure . getFailure () ;  assertThat ( expected . getMessage () )  . contains ( """"Expected a warning containing \""""what is it?\"""", but only found:\n"""" ) ;  
public   Options   getGlobalOptions ()   {  Options   go   =  parent . getGlobalOptions () ;  go . setOption ( new   String []   {  """"output"""" ,  outputPath  } ) ;  go . setOption ( HIDE ) ;  return  go ;  }
@ Override   public   int   hashCode ()   {  return  Objects . hash ( super . hashCode () ,  subSchema ) ;  }
public   static   boolean   isNumeric ( String   str )   {  try  {  Double . parseDouble ( str ) ;  return  true ;  }   catch  ( NumberFormatException   e )   {  return  false ;  }  }
 <argument pos:start=""""""""88:59"""""""" pos:end=""""""""88:62""""""""><expr pos:start=""""""""88:59"""""""" pos:end=""""""""88:62""""""""><literal type=""""""""number"""""""" pos:start=""""""""88:59"""""""" pos:end=""""""""88:62"""""""">1.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Override  public   ResourceLocation   getUid ()   {  return  JadeIds . ACCESS_BLOCK_DETAILS ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  ChangedOneOfSchema   that   =  ( ChangedOneOfSchema )   o ;  return  Objects . equals ( oldMapping ,  that . oldMapping )  &&   Objects . equals ( newMapping ,  that . newMapping )  &&   Objects . equals ( context ,  that . context )  &&   Objects . equals ( increased ,  that . increased )  &&   Objects . equals ( missing ,  that . missing )  &&   Objects . equals ( changed ,  that . changed ) ;  }
@ Override   public   double   get ( long   i ,  long   j )   {  return  getRaw ( index ( i ,  j ) ) ;  }
public   void   onClick ( DialogInterface   dialogInterface ,  int   id )  {  try {  ConfirmListener   activity   =  ( ConfirmListener )   getActivity () ;  activity . onConfirmed ( selectedList ) ;  }  catch ( ClassCastException   e )  {  Log . e ( TAG ,  """"BatchConfirmDialog: """"   +   e . toString () ) ;  }  }
private   void   validateNextLinkBasedOnMetaAttributeCount ( Response   response )   {  List < Map < String ,  String > >   links   =  response . jsonPath () . getList ( LINKS_PATH_PARAM ) ;  if  ( metaAttributes . size ()   >   DEFAULT_META_ATTRIBUTES_LIMIT )   {  Assert . assertNotNull ( getLink ( links ,  LINK_REL_NEXT ) , """"'next' link should be present when meta attributes exceed the default limit of 15."""" ) ;  }   else  {  Assert . assertNull ( links , """"'links' should not be present when meta attributes are within the default limit."""" ) ;  }  }
@ Test  public   void   validationNotMatchingAndValidationShouldFailIfNoMatch ()  throws  MojoExecutionException   {  assertThrows ( MojoExecutionException . class ,  ()  ->  {  List < ValidationProperty >   validationProperties   =  getNonMatchingValidationProperties () ;  executeMojo ( validationProperties ,  true ) ;  } ) ;  }
@ JavascriptInterface  public   final   void   sendFido2SkUiEvent ( String   event )   {  Log . d ( TAG ,  """"JSBridge: sendFido2SkUiEvent"""" ) ;  fidoHandler . onEvent ( event ) ;  }
public   void   setPositiveCnt ( long   positiveCnt )   {  this . positiveCnt   =   positiveCnt ;  }
private   void   onReceiveConnections ( Connections   connections )   {  boolean   viewsExist   =  binding . syncthingVersion   !=   null   &&   binding . currentAddress   !=   null ;  if  ( viewsExist   &&   connections . connections . containsKey ( mDevice . deviceID ) )   {  binding . currentAddress . setVisibility ( VISIBLE ) ;  binding . syncthingVersion . setVisibility ( VISIBLE ) ;  binding . currentAddress . setText ( connections . connections . get ( mDevice . deviceID ) . address ) ;  binding . syncthingVersion . setText ( connections . connections . get ( mDevice . deviceID ) . clientVersion ) ;  }  }
@ Override  public   String   toString ()   {  return  TAG   +   """":""""   +   jsonData ;  }
@ Test  public   void   hadNoteContainingMatch_pattern ()   {  assertThat ( compilerWithNote () . compile ( sourceFile ) )  . hadNoteContainingMatch ( Pattern . compile ( """"this is a? message"""" ) )  . inFile ( sourceFile )  . onLine ( 6 )  . atColumn ( 8 ) ;  assertThat ( compilerWithNote () . compile ( sourceFile ) )  . hadNoteContainingMatch ( Pattern . compile ( """"(this|here) is a message"""" ) )  . inFile ( sourceFile )  . onLine ( 7 )  . atColumn ( 29 ) ;  }
protected   void   onPostExecute ( String   result )   {  final   TextView   installLog   =  ( TextView )   findViewById ( R . id . installLogView ) ;  installLog . setText ( result ) ;  setProgressBarIndeterminateVisibility ( false ) ;  }
public   EmailTemplateDTO []   getEmailConfig ()   throws  RemoteException , AccountCredentialMgtConfigServiceIdentityMgtServiceExceptionException   {  return  accCredentialMgtConfigStub . getEmailConfig () ;  }
static   boolean   readIntEquals ( byte []   buf ,  int   i ,  int   j )   {  return  buf [ i ]   ==   buf [ j ]   &&   buf [ i + 1 ]   ==   buf [ j + 1 ]   &&   buf [ i + 2 ]   ==   buf [ j + 2 ]   &&   buf [ i + 3 ]   ==   buf [ j + 3 ] ;  }
@ Override  public   void   init ( Locale   locale ,  Reporter   reporter )   {  this . locale   =   locale ;  this . reporter   =   reporter ;  }
private   void   addModelScoreData ( StringBuilder   buf ,  CaseScoreResult   cs )   {  if  (  ! ( modelConfig . isClassification ()  &&   ModelTrainConf . MultipleClassification . NATIVE . equals ( modelConfig . getTrain () . getMultiClassifyMethod () ) )  )   {  buf . append ( """"|""""   +   cs . getAvgScore () ) ;  buf . append ( """"|""""   +   cs . getMaxScore () ) ;  buf . append ( """"|""""   +   cs . getMinScore () ) ;  buf . append ( """"|""""   +   cs . getMedianScore () ) ;  }  
@ Test  void   serviceUrlsValueAsSoonAsRefreshed ()   {  changeProperty ( """"eureka.client.service-url.defaultZone=https:
@ Test  public   void   changedButCompatible ()   {  assertSpecChangedButCompatible ( BASE ,  """"bc_request_param_changed_but_compatible.yaml"""" ) ;  }
 <argument pos:start=""""""""291:89"""""""" pos:end=""""""""291:96""""""""><expr pos:start=""""""""291:89"""""""" pos:end=""""""""291:96""""""""><name pos:start=""""""""291:89"""""""" pos:end=""""""""291:96"""""""">obsolete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   void   setIsFIDOTrustedApp ( Boolean   isFIDOTrustedApp )   {  this . isFIDOTrustedApp   =   isFIDOTrustedApp ;  }
public   QueryRow   setAllDay ( Object   obj )   {  return  setColumn ( CalendarContract . Instances . ALL_DAY ,  obj ) ;  }
private   void   hidePrefsButton ()   {  if  ( prefsButton . getVisibility ()   ==   View . VISIBLE )   {  prefsButton . setVisibility ( View . GONE ) ;  }  }
public   static   void   loadLibrary ( String   libraryPath )  {  if ( libraryLoaded )     return;  try {  System . load ( libraryPath ) ;  System . out . println ( """"CLEyeMulticam.dll loaded"""" ) ;  }  catch ( UnsatisfiedLinkError   e1 )  {  System . out . println ( """"(3) Could not find the CLEyeMulticam.dll (Custom Path)"""" ) ;  }  }
public   void   setDocument (  Document   document )   {  context . push (  document . getDocumentElement () ) ;  this . modified   =   false ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"alias"""" )  @ Valid  public   String   getAlias ()   {  return  alias ;  }
public   synchronized   Console   goodbye ()   {  emptyLine () ;  separatorLine () ;  println ( StringUtil . center ( """"GOODBYE"""" ,  LINE_WIDTH ) ) ;  separatorLine () ;  emptyLine () ;  return  this ;  }
default   DigitalInput   create ( DigitalInputConfigBuilder   config )   {  return  create ( config . build () ) ;  }
@ BeforeClass  public   void   setUp ()   throws  Exception   {  instance   =   new   AddColumnNumUDF ( """"LOCAL"""" , """"src/test/resources/example/cancer-judgement/ModelStore/ModelSet1/ModelConfig.json"""" , """"src/test/resources/example/cancer-judgement/ModelStore/ModelSet1/ColumnConfig.json"""" , """"false"""" ) ;  }
@ Override  public   String   getPlayerInfoString ( String   world ,  String   playerName ,  String   node ,  String   defaultValue )   {  return  getUser ( playerName ) . getOption ( node ,  world ,  defaultValue ) ;  }
@ Test  public   void   successWithObject ()   {  JSONObject   schemaJson   =  LOADER . readObj ( """"constobject.json"""" ) ;  loadAsV6 ( schemaJson ) . validate ( schemaJson . get ( """"const"""" ) ) ;  testSuccess ( new   JSONObject ( """"{\""""a\"""":\""""b\"""", \""""b\"""":\""""a\""""}"""" ) ) ;  }
Concept   buildConcept ( String   iri ,  String   label ,  String ...   categories )   {  Node   concept   =  createNode ( iri ) ;  GraphUtil . addProperty ( concept ,  Concept . LABEL ,  label ) ;  GraphUtil . addProperty ( concept ,  NodeProperties . LABEL   +   LuceneUtils . EXACT_SUFFIX ,  label ) ;  for  ( String   category   :  categories )   {  GraphUtil . addProperty ( concept ,  Concept . CATEGORY ,  category ) ;  }  return  transformer . apply ( concept ) ;  }
public   void   setConnector ( String   connector )   {  this . connector   =   connector ;  }
 <argument pos:start=""""""""300:39"""""""" pos:end=""""""""300:39""""""""><expr pos:start=""""""""300:39"""""""" pos:end=""""""""300:39""""""""><literal type=""""""""number"""""""" pos:start=""""""""300:39"""""""" pos:end=""""""""300:39"""""""">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ EventHandler ( priority   =   EventPriority . MONITOR )  public   void   onPluginDisable ( PluginDisableEvent   event )  {  if  ( ( permission . overPerms   !=   null )   &&  ( event . getPlugin () . getDescription () . getName () . equals ( """"OverPermissions"""" ) ) )   {  permission . overPerms   =   null ;  Permission_OverPermissions . log . info ( String  . format ( """"[%s][Permission] %s un-hooked."""" ,  new   Object []   { Permission_OverPermissions . this . plugin . getDescription () . getName () ,  """"OverPermissions"""" } ) ) ;  }  }
public   String   openExternal ( String   url )   {  try  {  Intent   intent   =  null ;  intent   =   new   Intent ( Intent . ACTION_VIEW ) ;  
public   void   setOriginalColor ( int   color )   {  swatchView . setOriginalColor ( color ) ;  }
public   static   Collection < Class >   getAllInterfaces ( Class   targetClass ) {  Set < Class >   results   =  new   HashSet <> () ;  
@ Test  public   void   test_collectItems_nullList ()   {  final   Optional < ArrayList < AppInfo > >   appInfoList   =  Optional . empty () ;  CustomPackageList . appInfoList   =   appInfoList ;  final   CharSequence []   result   =  CustomPackageList . collectItems () ;  assertThat ( result . length ,  is ( 0 ) ) ;  }
public   OpenIDConnectConfiguration   validateRequestObjectSignature ( Boolean   validateRequestObjectSignature )   {  this . validateRequestObjectSignature   =   validateRequestObjectSignature ;  return  this ;  }
@ Override  protected   void   setup ( Context   context )   throws  IOException ,  InterruptedException   {  this . outputKey   =   new   IntWritable () ;  this . outputValue   =   new   Text () ;  loadConfigFiles ( context ) ;  }
@ Test  public   void   sameArtifactNames ( CapturedOutput   output )   throws  Exception   {  String []   args   =  new   String []   {  """"--thin.classpath=properties"""" , """"--thin.archive=src/test/resources/apps/same-artifact-names""""  } ;  ThinJarLauncher . main ( args ) ;  assertThat ( output . toString () ) . contains ( """"dependencies.jersey-client=org.glassfish.jersey.core:jersey-client:2.27\n"""" ) ;  assertThat ( output . toString () ) . contains ( """"dependencies.jersey-client.1=com.sun.jersey:jersey-client:1.19.1\n"""" ) ;  }
private   void   propagateCellSpacing ( float   spacing )  {  if  ( header   !=   null )  header . setSpacing ( spacing ) ;  for  ( TableBodyBox   body   :  bodies )  body . setSpacing ( spacing ) ;  if  ( footer   !=   null )  footer . setSpacing ( spacing ) ;  }
@ Override  public   Set < ?   extends  Class < ? > >   getRequiredContext ()   {  Set < Class < ? > >   context   =  new   HashSet <> () ;  Collections . addAll ( context ,  Run . class ,  TaskListener . class ) ;  return  Collections . unmodifiableSet ( context ) ;  }
@ Override  public   void   onRestored ( Context   context ,  int []   oldWidgetIds ,  int []   newWidgetIds )   {  Log . d ( TAG ,  """"onRestored, oldWidgetIds:""""   +   asList ( oldWidgetIds )   +  """", newWidgetIds:""""   +   asList ( newWidgetIds ) ) ;  super . onRestored ( context ,  oldWidgetIds ,  newWidgetIds ) ;  }
public   boolean   completeSchemaRefValue ()   {  return  pathResolver . isSchemaRefValue ( psiElement ) ;  }
@ Override   public   synchronized   void   trigger ()   throws  Exception   {  if  ( oc   ==   null   ||   oc . isNull () )   {  throw  new   Exception ( """"Could not trigger: No AVFormatContext. (Has start() been called?)"""" ) ;  }  if  ( pkt . stream_index ()   !=   - 1 )   {  av_packet_unref ( pkt ) ;  pkt . stream_index ( - 1 ) ;  }  for  ( int   i   =  0 ;   i   <   numBuffers + 1 ;   i ++ )   {  if  ( av_read_frame ( oc ,  pkt )   <   0 )   {  return;  }  av_packet_unref ( pkt ) ;  }  }
public   int   getModelCnt ()   {  return  ( ( models   !=   null )  ?   this . models . size ()   :  0 ) ;  }
public   void   setContentType ( ContentTypeEnum   contentType )   {  this . contentType   =   contentType ;  }
@ Test  public   void   testShutdown ()   throws  InterruptedException   {  GeoApiContext   context   =  builder . build () ;  final   Thread   delayThread   =  findLastThreadByName ( """"RateLimitExecutorDelayThread"""" ) ;  assertNotNull ( """"Delay thread should be created in constructor of RateLimitExecutorService"""" ,  delayThread ) ;  assertTrue ( """"Delay thread should start in constructor of RateLimitExecutorService"""" , delayThread . isAlive () ) ;  
@ Override   public   LongIndexer   get ( long   i ,  long   j ,  long []   l ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  l [ offset   +   n ]   =   buffer . get ( ( int ) index ( i ,  j )   +   n ) ;  }  return  this ;  }
public   int   getColumnOps ( String   column )   {  return  ArrayUtils . indexOf ( this . iterator . getHeader () ,  column ) ;  }
private   void   setVideoTrack ( VideoTrack   videoTrack )   {  VideoTrack   oldVideoTrack   =  this . videoTrack ;  if  ( oldVideoTrack   !=   videoTrack )   {  if  ( oldVideoTrack   !=   null )   {  if  ( videoTrack   ==   null )   {  
private   static   void   addFileToZip ( File   file ,  ZipOutputStream   zos )   throws  IOException   {  if  ( ! file . exists () )   {  Log . e ( TAG ,  """"File does not exist: """"   +   file . getAbsolutePath () ) ;  return;  }  try  ( FileInputStream   fis   =  new   FileInputStream ( file ) )   {  ZipEntry   zipEntry   =  new   ZipEntry ( file . getName () ) ;  zos . putNextEntry ( zipEntry ) ;  byte []   buffer   =  new   byte [ 1024 ] ;  int   length ;  while  ( ( length   =   fis . read ( buffer ) )   >   0 )   {  zos . write ( buffer ,  0 ,  length ) ;  }  zos . closeEntry () ;  }  }
public   void   onClick ( DialogInterface   _dialog ,  int   which )  {  IME   selected   =  imes . get ( which ) ;  prefs . edit ()  . putString ( PREF_LAST_USED ,  selected . get_id () )  . putString ( PREF_KNOWN_IMES ,  serialize_ime_ids ( imes ) )  . apply () ;  switch_input_method ( ims ,  selected ) ;  }
@ Override  public   void   setGroupInfoDouble ( String   world ,  String   group ,  String   node ,  double   value )   {  throw  new   UnsupportedOperationException ( """"iChat does not support mutable info nodes!"""" ) ;  }
@ Override  public   void   onResults ( Status   status ,  InitResults   results )   throws  RemoteException   {  if  ( status . isSuccess () )   {  completionSource . trySetResult ( results . handle ) ;  }   else  {  completionSource . trySetException ( new   RuntimeException ( status . getStatusMessage () ) ) ;  }  }
private   String   getActionName ()   {  return  StringUtils . isEmpty ( reportTitle )  ?   Messages . SidePanel_DisplayNameNoTitle ()   :  String . format ( Messages . SidePanel_DisplayName () ,  reportTitle ) ;  }
 sharedPtr(*(S*)sharedPtr) { }""""""""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   SortingMethod   getSortingMethod ()  {  if ( sortingMethod   !=   null )  {  return  sortingMethod ;  }  return  SortingMethod . PACKAGENAME ;  }
public   static   void   addDefaultProfile ( SpringApplication   app )   {  Map < String ,  Object >   defaultProperties   =  new   HashMap <> () ;    defaultProperties . put ( SPRING_PROFILE_DEFAULT ,  SPRING_PROFILE_LOCAL ) ;  app . setDefaultProperties ( defaultProperties ) ;  log . info ( """"Added {}: {}"""" ,  SPRING_PROFILE_DEFAULT ,  SPRING_PROFILE_LOCAL ) ;  }
public   static   List < Integer >   range ( int   stop )   {  return  range ( 0 ,  stop ,  1 ) ;  }
private   long   toAllDayMillis ( DateTime   date )   {  DateTime   utcDate   =  new   DateTime ( date . getYear () ,  date . getMonthOfYear () ,  date . getDayOfMonth () ,  0 ,  0 , DateTimeZone . UTC ) ;  return  utcDate . getMillis () ;  }
public   ApplicationModel   claimConfiguration ( ClaimConfiguration   claimConfiguration )   {  this . claimConfiguration   =   claimConfiguration ;  return  this ;  }
private   Optional < YAMLKeyValue >   getYAMLKeyValue ( final   String   jsonPointer ,  final   PsiFile   file )   {  return  getPsiElement ( jsonPointer ,  file )  . filter ( el  ->   el   instanceof   YAMLKeyValue )  . map ( YAMLKeyValue . class :: cast ) ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Send init authorize POST request to primary IDP."""" , dependsOnMethods   =   """"testJITProvisioningWithAssociation"""" )  public   void   testJITProvisioningWithoutAssociation ()   throws  Exception   {  resetISConfiguration () ;  deleteAddedUsersInPrimaryIS () ;  addUserToPrimaryIS () ;  executeAuthorizationAndTokenRetrieval ( LOCAL_GIVEN_NAME ,  LOCAL_FAMILY_NAME ) ;  }
@ Override  protected   void   onRestoreInstanceState ( Bundle   state )   {  super . onRestoreInstanceState ( state ) ;  prevItemVisible   =   state . getInt ( PREV_VISIBLE ,  - 1 ) ;  }
public   void   setClientId ( String   clientId )   {  this . clientId   =   clientId ;  }
public   void   setBinCountNeg ( List < Integer >   binCountNeg )   {  columnBinning . setBinCountNeg ( binCountNeg ) ;  }
public   < T >   T   create ( Class < T >   api ,  String   apiUrl )   {  return  apiBuilder . baseUrl ( apiUrl ) . build () . create ( api ) ;  }
@ Test ( dependsOnMethods   =   """"testAddRoleWithId"""" )  public   void   testIsUserInRoleWithID ()   throws  Exception   {  super . testIsUserInRoleWithID () ;  }
public   void   setFisheyeAutoExposureAntiflickerRate ( int   value )   {  setOption ( RealSense . RS_OPTION_FISHEYE_AUTO_EXPOSURE_ANTIFLICKER_RATE ,  value ) ;  }
@ Test ( alwaysRun   =   true , groups   =   """"wso2.is"""" , description   =   """"Generate access token and check if the added scope is returned in introspect response """"   +  """"when single scope is added"""" )  public   void   testScopeReturnedWithSingleNonInternalScopeAdded ()   throws  Exception   {  String   scope   =  """"test"""" ;  AccessToken   accessToken   =  requestAccessToken ( scope ) ;  TokenIntrospectionResponse   activeTokenIntrospectionResponse   =  introspectAccessToken ( accessToken ) ;  Assert . assertEquals ( String . valueOf ( activeTokenIntrospectionResponse . toSuccessResponse () . getScope () ) ,  scope ) ;  }
@ Override  public   SerialConfigBuilder   dataBits ( DataBits   bits )   {  this . properties . put ( SerialConfig . DATA_BITS_KEY ,  Integer . toString ( bits . value () ) ) ;  return  this ;  }
private   void   runNormalize ( List < EvalConfig >   evalConfigList )   throws  IOException   {  for ( EvalConfig   evalConfig :  evalConfigList )   {  runNormalize ( evalConfig ) ;  }  }
@ Override  public   void   sendRemoteCommand ( IWearableCallbacks   callbacks ,  byte   b )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: sendRemoteCommand: """"   +   b ) ;  }
 <argument pos:start=""""""""223:74"""""""" pos:end=""""""""223:74""""""""><expr pos:start=""""""""223:74"""""""" pos:end=""""""""223:74""""""""><literal type=""""""""number"""""""" pos:start=""""""""223:74"""""""" pos:end=""""""""223:74"""""""">7</literal></expr></argument>
public   APIResourcePatchModel   addedAuthorizationDetailsTypes ( List < AuthorizationDetailsType >   addedAuthorizationDetailsTypes )   {  this . addedAuthorizationDetailsTypes   =   addedAuthorizationDetailsTypes ;  return  this ;  }
@ Override  public   void   setGroupInfoDouble ( String   world ,  String   group ,  String   node ,  double   value )   {  setGroupInfoValue ( world ,  group ,  node ,  value ) ;  }
public   String   getPortraitPath ()   {  return  new   File ( pathToVoicebank ,  portraitName ) . getAbsolutePath () ;  }
public   void   testRenameLocalDefinitionDeclaration ()   {  testRename ( """"NewPets"""" , """"rename_definition_ref_declaration.json"""" , """"rename_definition_ref_declaration_after.json"""" ) ;  }
@ Override  public   Chain < Boolean >   every ( final   Predicate < T >   pred )   {  return  new   Chain <> ( Underscore . every ( value () ,  pred ) ) ;  }
public   boolean   isMarkedDeleted ()   {  return  getProperties () . containsKey ( DELETED_MARKER ) ;  }
public   static   final   SourceDirectTransferClient   getSourceDirectTransferClient ( Context   context )   {  throw  new   UnsupportedOperationException () ;  }
public   AuthResponse   getResponse ()   throws  IOException   {  return  HttpFormClient . request ( SERVICE_URL ,  this ,  AuthResponse . class ) ;  }
@ Test  public   void   thatValueInsideDoubleQuotesIsHandled ()   {  completeAndCheckResultsByFile ( """"value_inside_double_quotes"""" ) ;  }
@ Override   public   HalfIndexer   get ( long   i ,  float []   h ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  h [ offset   +   n ]   =   getRaw ( index ( i )   +   n ) ;  }  return  this ;  }
@ Override  public   boolean   playerInGroup ( String   world ,  String   player ,  String   group )   {  String   groupForWorld   =  perms . getXplayer () . getGroupForWorld ( player ,  world ) ;  if ( groupForWorld . equals ( group ) ) {  return  true ;  }  return  false ;  }
public   boolean   fieldEnabled ()   {  return  ( this   ==   FIELD )   ||   ( this   ==   ALL ) ;  }
@ Test  public   void   testOtherParams ()   {  String   targetTableName   =  """"db.target"""" ;  String   otherParams   =  """"testKey1=testVal1,nummappers=24"""" ;   
private   void   redrawVibrato ()   {  for  ( double   offsetX   :  drawnVibratoPaths . keySet () )   {  redrawVibrato ( drawnVibratoPaths . get ( offsetX ) ,  offsetX ) ;  }  }
public   void   addAllowUnderbarSuffix ( SuffixType   suffixType )   {  newConfig . allowUnderbarSuffixes . add ( suffixType ) ;  }
public   static   long   countMatchingMessage ( final   List < String >   messages ,  final   String   expectedSubstring )   {  return  messages . stream ()  . filter ( message  ->   message . contains ( expectedSubstring ) )  . count () ;  }
@ Test  public   void   thatContactKeysAreSuggested ()   {  getCaretCompletions ( """"contact"""" ) . assertContains ( """"name"""" ,  """"url"""" ,  """"email"""" ) . isOfSize ( 3 ) ;  }
private   boolean   shouldBeThrottled ( @ NonNull   Task   task ,  @ CheckForNull   ThrottleJobProperty   tjp )   {  if  ( tjp   ==   null )   {  return  false ;  }  if  ( ! tjp . getThrottleEnabled () )   {  return  false ;  }  
@ Override  public   String   toString ()   {  return  """"Framedata{ opcode:""""   +   getOpcode ()   +   """", fin:""""   +   isFin ()   +   """", rsv1:""""   +   isRSV1 ()  +   """", rsv2:""""   +   isRSV2 ()   +   """", rsv3:""""   +   isRSV3 ()   +   """", payload length:[pos:""""   +   unmaskedpayload  . position ()   +   """", len:""""   +   unmaskedpayload . remaining ()   +   """"], payload:""""   +   (  unmaskedpayload . remaining ()   >   1000  ?   """"(too big to display)""""  :  new   String ( unmaskedpayload . array () ) )   +   '}' ;  }
public   InboundProtocols   passiveSts ( PassiveStsConfiguration   passiveSts )   {  this . passiveSts   =   passiveSts ;  return  this ;  }
@ Override  public   void   downloadProgress ( int   id ,  int   progress )   {  NotificationManager   notificationManager   =  ( NotificationManager )   getApplicationContext ()  . getSystemService ( Context . NOTIFICATION_SERVICE ) ;  notificationBuilder  . setProgress ( 100 ,  progress ,  false ) ;  Notification   notification   =  notificationBuilder . build () ;  if  ( progress   ==   100 )   {  notificationManager . notify ( NOTIFICATION_OFFLINE_ID ,  notification ) ;  }  updateOfflineActivityUI ( progress ) ;  }
public   void   consoleMessage ( String   message ) {  ConsoleCommandSender   console   =  Bukkit . getConsoleSender () ;  console . sendMessage ( """"[Residence] """"   +   message ) ;  }
public   Frame   build ()   {  if  ( this . frame . bitmap   ==   null   &&   this . frame . imageData   ==   null )   {  throw  new   IllegalStateException ( """"Missing image data.  Call either setBitmap or setImageData to specify the image"""" ) ;  }  return  frame ;  }
private   ServerShare   getVideoShare ()   {  return  getIntent () . getParcelableExtra ( Intents . Extras . SERVER_SHARE ) ;  }
public   Settings   toSettings ()   {  return  Settings . of ( mySonarServersComboBox . getSelectedItem () . toString () , ImmutableList . copyOf ( mySonarResourcesTableView . getTable () . getItems () ) , myLocalAnalysisScriptComboBox . getSelectedItem () . toString () , myWorkingDirComboBox . getSelectedItem () . toString () , myAlternativeWorkingDirTextFieldWithBrowseButton . getText () , myUseAlternativeWorkingDirCheckBox . isSelected () ) ;  }
@ Bean  public   HasFeatures   eurekaServerFeature ()   {  return  HasFeatures . namedFeature ( """"Eureka Server"""" ,  EurekaServerAutoConfiguration . class ) ;  }
public   List < T >   replace ( final   Predicate < T >   pred ,  final   T   value )   {  return  replace ( value () ,  pred ,  value ) ;  }
public   final   synchronized   String   dumpLocks ()   {  return  dumpLocks ( logicalCoreLocks ) ;  }
private   void   btnRightsActionPerformed ( java . awt . event . ActionEvent   evt )   { 
@ Override  public   void   projectOpened ( @ NotNull   Project   project )   {  CHANGED_FILES . clear () ;  }
private   List < AbstractBinInfo >   genBinInfos ( ColumnConfig   columnConfig )   {  if ( columnConfig . isCategorical () )   {  return  genCategoricalBinInfos ( columnConfig ) ;  }   else  {  return  genNumericalBinInfos ( columnConfig ) ;  }  }
private   void   increaseInotifyWatches ()   {  if  ( ! mUseRoot   ||   ! Shell . SU . available () )   {  Log . i ( TAG ,  """"increaseInotifyWatches: Root is not available. Cannot increase inotify limit."""" ) ;  return;  }  int   exitCode   =  Util . runShellCommand ( """"sysctl -n -w fs.inotify.max_user_watches=131072\n"""" ,  true ) ;  Log . i ( TAG ,  """"increaseInotifyWatches: sysctl returned """"   +   Integer . toString ( exitCode ) ) ;  }
public   SelectableChannel   configureBlocking ( boolean   b )   throws  IOException   {  return  socketChannel . configureBlocking ( b ) ;  }
@ Override  public   Void   visitReference ( ReferenceTree   node ,  Void   p )   {  sb . append ( node . getSignature () ) ;  return  null ;  }
private   void   resetISConfiguration ()   throws  Exception   {  log . info ( """"Replacing deployment.toml with default configurations"""" ) ;  serverConfigurationManager . restoreToLastConfiguration ( false ) ;  }
private   String   getRequestPayloadForRejectTask ()   throws  IOException   {  return  getPayLoad ( APPROVAL_ACTION . REJECT ) ;  }
public   void   onPointerDown ( KeyValue   k ,  boolean   isSwipe )  {  updateFlags () ;  _config . handler . key_down ( k ,  isSwipe ) ;  invalidate () ;  vibrate () ;  }
@ Override  public   float []   forward ( SparseInput   si )   {  this . lastInput   =   si ;  int   valueIndex   =  si . getValueIndex () ;  float []   results   =  new   float [ this . out ] ;  for ( int   i   =  0 ;   i   <   results . length ;   i ++ )   {  results [ i ]   =   si . getValue ()   *   this . getWeights () [ valueIndex ] [ i ] ;  }  return  results ;  }
@ ApiModelProperty ( example   =   """"3600"""" ,  value   =   """""""" )  @ JsonProperty ( """"userAccessTokenExpiryInSeconds"""" )  @ Valid  public   Long   getUserAccessTokenExpiryInSeconds ()   {  return  userAccessTokenExpiryInSeconds ;  }
public   int   getFluentdPort ()   {  return  Integer . parseInt ( firstNonNull ( environment . getProperty ( """"fluentd.port"""" ) ,  """"24224"""" ) ) ;  }
public   static   boolean   deleteAttachment ( Attachment   attachment )   {  File   attachmentFile   =  new   File ( getResultsDirectory () ,  attachment . getSource () ) ;  return  attachmentFile . exists ()   &&   attachmentFile . canWrite ()   &&   attachmentFile . delete () ;  }
@ Override  public   void   handleServiceRequest ( IGmsCallbacks   callback ,  GetServiceRequest   request ,  GmsService   service )   throws  RemoteException   {  callback . onPostInitComplete ( 0 ,  new   CastDeviceControllerImpl ( this ,  request . packageName ,  request . extras ) ,  null ) ;  }
public   void   setSocketTimeout ( int   socketTimeout )   {  this . socketTimeout   =   socketTimeout ;  }
public   ApiResponses   getOldApiResponses ()   {  return  this . oldApiResponses ;  }
@ ParameterizedTest ()  @ ValueSource ( ints   =   { 0 ,  1 ,  4 ,  - 1 } )  void   differentIndentsShouldWork ( int   indent )   {  var   expectedFile   =  """"/SortModules_expectedIndent""""   +   indent   +   """".xml"""" ;  SortPomImplUtil . create ()  . sortProperties ()  . sortPlugins ( """"groupId,artifactId"""" )  . sortModules ()  . sortDependencies ( """"groupId,artifactId"""" )  . lineSeparator ( """"\n"""" )  . nrOfIndentSpace ( indent )  . testFiles ( """"/SortModules_input.xml"""" ,  expectedFile ) ;  }
@ Test  void   medianForEmpty ()   {  ArrayList < Double >   iterable   =  new   ArrayList <> () ;  assertThrows ( IllegalArgumentException . class ,  ()  ->   U . median ( iterable ) ) ;  }
public   Document   domQuietly ()   {  try  {  return  this . dom () ;  }   catch  ( final   ImpossibleModificationException   ex )   {  throw  new   IllegalStateException ( String . format ( """"Failed to create DOM quietly: %s"""" , this . directives ) , ex ) ;  }  }
@ Override  public   ServerShare   createFromParcel ( Parcel   parcel )   {  return  new   ServerShare ( parcel ) ;  }
@ Test  void   getCsvByDifferentUserThenForbidden ()   throws  Exception   {  String   publishId   =  getPublishId () ;  Publish   publish   =  new   Publish () ;  publish . setPublishId ( publishId ) ;  publish . setQueryId ( getQueryId () ) ;  publish . setUser ( """"Alice"""" ) ;  when ( publishRepository . findByPublishId ( anyString () ) )  . thenReturn ( Optional . of ( publish ) ) ;  mockMvc  . perform ( get ( SHARE_CSV_DOWNLOAD )  . param ( """"publish_id"""" ,  publishId )  . header ( """"empno"""" ,  """"Bob"""" ) )  . andDo ( print () )  . andExpect ( status () . isForbidden () ) ;  }
@ Test  void   testSortXmlFullFromAlphabeticalOrderShouldNotAffectVerify ()   {  SortPomImplUtil . create ()  . predefinedSortOrder ( """"default_0_4_0"""" )  . testVerifyXmlIsOrdered ( """"/full_expected.xml"""" ) ;  }
public   UriTemplateBuilder   label ( String ...   var )  {  label ( toVarSpec ( var ) ) ;  return  this ;  }
 <argument pos:start=""""""""204:96"""""""" pos:end=""""""""204:102""""""""><expr pos:start=""""""""204:96"""""""" pos:end=""""""""204:102""""""""><name pos:start=""""""""204:96"""""""" pos:end=""""""""204:102"""""""">dirmode</name></expr></argument>
@ Test  public   void   testValidateStats ()   throws  Exception   {  ModelConfig   config   =  CommonUtils . loadModelConfig () ;  ValidateResult   result   =  instance . probe ( config ,  ModelStep . STATS ) ;  Assert . assertTrue ( result . getStatus () ) ;  }
@ Override  protected   void   processEraseLine ( int   eraseOption )   {  emitter . emitInvisibleSequence () ;  }
@ Override  public   void   setTag ( IObjectWrapper   tag )   throws  RemoteException   {  }
@ Override  protected   void   onResume ()   {  super . onResume () ;  loadHiddenApps () ;   
@ Test  void   setsAttributesToCurrentNodes ()   throws  Exception   {  final   Iterable < Directive >   dirs   =  new   Directives ( StringUtils . join ( """"ADD 'root'; ADD 'foo'; UP; ADD 'foo';"""" , """"XPATH '
@ Override  public   void   onOpen ( ServerHandshake   handshakedata )   {  countClientDownLatch . countDown () ;  countServerDownLatch . countDown () ;  }
@ Override  public   void   onClick ( View   v )   {  showRoutingDialogFragment () ;  }
@ Override  public   AuthenticationInfo   getAuthenticationToken ( AuthenticationInfo   authInfo )   {  String   userName   =  ( ( BasicAuthInfo )   authInfo ) . getUserName () ;  String   password   =  ( ( BasicAuthInfo )   authInfo ) . getPassword () ;  ( ( BasicAuthInfo )   authInfo ) . setAuthorizationHeader ( getBase64EncodedBasicAuthHeader ( userName ,  password ) ) ;  return  authInfo ;  }
private   void   updateNumberPicker ()   {  NumberPickerFragment   numberPicker   =  ( NumberPickerFragment )   getChildFragmentManager () . findFragmentByTag ( """"numberpicker_simple_versioning"""" ) ;  numberPicker . updateNumberPicker ( 100000 ,  1 ,  getKeepVersions () ) ;  numberPicker . setOnValueChangedLisenter ( ( picker ,  oldVal ,  newVal )  ->   updateKeepVersions ( ( String . valueOf ( newVal ) ) ) ) ;  }
@ Override  public   ITextElement   scale ( float   scale )   {  return  toSpecial () . scale ( scale ) ;  }
@ Override  public   void   setRelationshipProperty ( long   batchId ,  String   property ,  Object   value )   {  if  ( GraphUtil . ignoreProperty ( value ) )   {  return;  }  synchronized  ( graphLock )   {  inserter . setRelationshipProperty ( batchId ,  property ,  value ) ;  }  }
@ Override  protected   void   onCreate ( @ Nullable   Bundle   savedInstanceState )   {  super . onCreate ( savedInstanceState ) ;  setContentView ( R . layout . activity_tv_web ) ;  setUpInjections () ;  setWebPage () ;  }
@ ApiModelProperty ( example   =   """"http:
@ Override  public   String   getLibraryLocation ( String   libraryName ,  LibraryScope   scope )   {  return  null ;  }
private   Monster   getCaveMonster ( int   playerLevel )   {  int   randomInt   =  random . nextInt ( 4 ) ;  if  ( randomInt   ==   0 )  return  new   Troll ( playerLevel ) ;  else if  ( randomInt   ==   1 )  return  new   Skeleton ( playerLevel ) ;  else  return  new   Goblin ( playerLevel ) ;  }
@ Override  public   Object   call ()   throws  Exception   {  for  ( int   i   =  0 ;   i   <   testCases ;   i ++ )   {  lifecycle . fire ( new   TestCaseStartedEvent ( uid ,  """"test-case"""" ) ) ;  lifecycle . fire ( new   StepFinishedEvent () ) ;  }  return  """""""" ;  }
@ Override  public   void   apply ( @ NotNull   final   PsiFile   file , final   AnnotationResult   annotationResult , @ NotNull   final   AnnotationHolder   holder )   {  if  ( null   ==   file . getVirtualFile ()   ||  null   ==   ProjectFileIndex . SERVICE . getInstance ( file . getProject () ) . getContentRootForFile ( file . getVirtualFile () )   ||  (  
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  PropertyReq   propertyReq   =  ( PropertyReq )   o ;  return  Objects . equals ( this . name ,  propertyReq . name )   &&  Objects . equals ( this . value ,  propertyReq . value ) ;  }
@ Override  public   boolean   handle ( Request   request ,  Response   response ,  Callback   callback )   throws  Exception   {  String   target   =  request . getHttpURI () . getPath () ;  Map < HttpMode ,  Handler >   handlerByMethod   =  handlersByMethodByTarget . get ( target ) ;  if  ( handlerByMethod   !=   null )   {  Handler   handler   =  handlerByMethod . get ( HttpMode . valueOf ( request . getMethod () ) ) ;  if  ( handler   !=   null )   {  return  handler . handle ( request ,  response ,  callback ) ;  }  }  return  super . handle ( request ,  response ,  callback ) ;  }
@ Test  public   void   exclusiveMinimumLimit ()   {  TestSupport . failureOf ( NumberSchema . builder () . exclusiveMinimum ( 10 ) )  . expectedKeyword ( """"exclusiveMinimum"""" )  . expectedMessageFragment ( """"10 is not greater than 10"""" )  . input ( 10 )  . expect () ;  }
public   static   JvmMemory   getJvmMemory ()   {  return  new   JvmMemory ( Runtime . getRuntime () ) ;  }
public   Uri   getFileUri ( ServerShare   share ,  ServerFile   file )   {  return  Uri . parse ( serverAddress )  . buildUpon ()  . path ( """"files"""" )  . appendQueryParameter ( """"s"""" ,  share . getName () )  . appendQueryParameter ( """"p"""" ,  file . getPath () )  . appendQueryParameter ( """"mtime"""" ,  Time . getEpochTimeString ( file . getModificationTime () ) )  . appendQueryParameter ( """"session"""" ,  server . getSession () )  . build () ;  }
public   static   DateFormatValue   unknownValue ()   {  return  UNKNOWN . defaultValue () ;  }
public   static   FloatIndexer   create ( FloatBuffer   buffer )   {  return  new   FloatBufferIndexer ( buffer ) ;  }
private   String   getColumnIndexes ()   {  StringBuilder   header   =  new   StringBuilder ( """"ColumnIndex,"""" ) ;  for ( ColumnConfig   config :  columnConfigList )   {  header . append ( ',' ) . append ( config . getColumnNum () ) ;  }  return  header . toString () ;  }
@ Test  public   void   allowEmptyValueDecreased ()   {  BackwardIncompatibleProp   prop   =  REQUEST_PARAM_ALLOWEMPTY_DECREASED ;  assertSpecIncompatible ( BASE ,  """"bc_request_param_allowemptyvalue_decreased.yaml"""" ,  prop ) ;  }
@ Override  public   File   getProjectDirectory ()   {  return  new   File ( """"."""" ) ;  }
@ Override  public   boolean   isBefore ( Wrapper < ?   extends  Node >   wrapper )   {  throw  new   UnsupportedOperationException () ;  }
@ BeforeEach  void   setUp ()   {  extension   =   new   BuildParameterRunSelectorExtension () ;  mockProject   =   Mockito . mock ( Job . class ) ;  mockRun   =   Mockito . mock ( Run . class ) ;  }
@ DataBoundSetter  public   void   setValidResponseCodes ( String   validResponseCodes )   {  this . validResponseCodes   =   validResponseCodes ;  }
@ BeforeEach  void   setUp ()   {  parent   =   new   BaseElement ( """"Parent"""" ) ;  child   =   new   BaseElement ( """"Child"""" ) ;  parent . add ( child ) ;  }
public   static   void   remove ( @ NotNull   final   String   name )   {  final   Optional < LocalAnalysisScript >   bean   =  get ( name ) ;  Preconditions . checkArgument ( bean . isPresent () ) ;  getInstance () . beans   =   getAll () . stream ()  . filter ( localAnalysisScript  ->   ! bean . get () . equals ( localAnalysisScript ) )  . collect ( Collectors . toList () ) ;  }
@ NonNull  public   StreetViewPanoramaOptions   zoomGesturesEnabled ( boolean   enabled )   {  this . zoomGesturesEnabled   =   enabled ;  return  this ;  }
public   void   run ()   {  soundLine . write ( outBuffer . array () ,  0 ,  outBuffer . capacity () ) ;  outBuffer . clear () ;  }
public   HierarchyRootWrapper   createFromRootElement ( Element   rootElement )   {  initializeSortOrderMap () ;  return  new   HierarchyRootWrapper ( create ( rootElement ) ) ;  }
public   static   String   loadLibrary ( String   libnameversion ,  String   ...   preloaded )   {  return  loadLibrary ( getCallerClass ( 2 ) ,  libnameversion ,  preloaded ) ;  }
@ Test ( description   =   """"Add service provider"""" ,  groups   =   """"wso2.is"""" )  public   void   testAddSP ()   throws  Exception   {  super . testAddSP () ;  }
public   AuthRequest   oauth2IncludeEmail ( String   oauth2IncludeProfile )   {  this . oauth2IncludeEmail   =   oauth2IncludeEmail ;  return  this ;  }
@ Override  public   Void   visitSince ( SinceTree   node ,  Void   p )   {  String   name   =  node . getTagName () ;  String   content   =  CommentHelper . getText ( node . getBody () ) ;  tags . computeIfAbsent ( name ,  n  ->   new   ArrayList <> () ) . add ( content ) ;  return  null ;  }
public   static   void   handleAttachments ( ServerPlayer   player )  {  ItemStack   heldItem   =  player . getMainHandItem () ;  if ( heldItem . getItem ()   instanceof   GunItem )  {  NetworkHooks . openScreen ( player ,  new   SimpleMenuProvider ( ( windowId ,  playerInventory ,  player1 )  ->   new   AttachmentContainer ( windowId ,  playerInventory ,  heldItem ) ,  Component . translatable ( """"container.cgm.attachments"""" ) ) ) ;  }  }
@ Override  public   boolean   isWhitespace ()  {  for  ( int   i   =  startChild ;   i   <   endChild ;   i ++ )  if  ( ! getSubBox ( i ) . isWhitespace () )  return  false ;  return  true ;  }
public   APIResourceListResponse   links ( List < PaginationLink >   links )   {  this . links   =   links ;  return  this ;  }
@ Override  public   void   openVoicebank ( File   location ,  String   trueLyric )   {  this . openVoicebank ( location ) ;  Tab   curTab   =  tabs . getSelectionModel () . getSelectedItem () ;  
public   final   PermissionTemplate   getPermissionTemplate ()   {  if  ( permissionTemplate   ==   null )   {  permissionTemplate   =   new   PermissionTemplate ( name ,  permissions ) ;  }  return  permissionTemplate ;  }
public   void   actionPerformed ( java . awt . event . ActionEvent   evt )   {  chkbAcro6LayersActionPerformed ( evt ) ;  }
private   void   setUploadLocationSummary ( String   location )   {  if  ( ! location . isEmpty () )   {  if  ( location . length ()   >   25 )   {  location   =   location . substring ( 0 ,  21 ) ;  location   +=   """"..."""" ;  }  getPreference () . setSummary ( location ) ;  }  }
@ Override   public   ShortPointer   capacity ( long   capacity )   {  return  super . capacity ( capacity ) ;  }
@ Test  void   testIsContentElement ()   {  Executable   testMethod   =  ThrowAwayNewlineWrapper . THROW_AWAY_NEWLINE_INSTANCE :: isContentElement ;  var   thrown   =  assertThrows ( UnsupportedOperationException . class ,  testMethod ) ;  assertThat ( thrown . getMessage () ,  is ( nullValue () ) ) ;  }
@ Override  public   ItemStack   getPickedResult ()   {  return  CommonProxy . getBlockPickedResult ( blockState ,  getPlayer () ,  getHitResult () ) ;  }
public   Builder   setForNewAccount ( boolean   forNewAccount )   {  this . forNewAccount   =   forNewAccount ;  return  this ;  }
public   void   setSubjectType ( MetadataProperty   subjectType )   {  this . subjectType   =   subjectType ;  }
public   final   Object   generateObject ( final   FieldDescriptor   descriptor ,  final   String   fieldType ,  final   Integer   valueLength ,  final   List < String >   fieldValuesList ,  final   Map < ConstraintTypeEnum ,  String >   constraints )   {  Object   result   =  null ;  if  ( Objects . nonNull ( descriptor . getJavaType () ) )   {  result   =   generateRawObject ( fieldType ,  valueLength ,  fieldValuesList ,  constraints ) ;  }  return  result ;  }
public   static   void   writeShortLE ( ByteBuffer   dest ,  int   off ,  int   i )   {  dest . put ( off ,  ( byte )   i ) ;  dest . put ( off   +   1 ,  ( byte )   ( i   >>>   8 ) ) ;  }
public   Map < String ,  PathItem >   getNewPathMap ()   {  return  this . newPathMap ;  }
@ Override  public   IObjectWrapper   fromPath ( String   absolutePath )   throws  RemoteException   {  return  ObjectWrapper . wrap ( new   PathBitmapDescriptor ( absolutePath ) ) ;  }
@ Override  protected   void   onCreate ( Bundle   savedInstanceState )   {  super . onCreate ( savedInstanceState ) ;  setContentView ( R . layout . activity_recent_files ) ;  setUpInjections () ;  setUpCast () ;  setUpHomeNavigation () ;  setUpFilesContentRefreshing () ;  
public   static   Stopwatch   createUnstarted ( Ticker   ticker )   {  return  new   Stopwatch ( ticker ) ;  }
public   final   void   beginLoad ( final   int   inputSize ,  final   int   idealSize )   {  this . egb . create ( inputSize ,  idealSize ) ;  this . loading   =   true ;  }
@ Override  public   String   getGroupPrefix ( String   world ,  String   group )   {  throw  new   UnsupportedOperationException ( """"mChat does not support group info nodes"""" ) ;  }
public   void   addVowelVolume ( String   vowel ,  Integer   volume )   {  newConfig . vowelVolumes . put ( vowel ,  volume ) ;  }
@ NonNull  public   Builder   setAppPackageName ( @ NonNull   String   packageName )   {  Application   application   =  Application . GMS_APP ;  this . application   =   Constants . GMS_PACKAGE_NAME . equals ( packageName )  ?   Application . GMS_APP   :  new   Application ( packageName ) ;  return  this ;  }
public   DataMap   getDataMap ( String   key )   {  return  types . get ( key )   ==   StoredType . DataMap  ?   ( DataMap )   data . get ( key )   :  null ;  }
public   void   setRoutingDirections ( List < DirectionManeuver >   routingDirections ,  DirectionsDialogListener   listener )   {  mRoutingDirections   =   routingDirections ;  mDirectionsDialogListener   =   listener ;  }
@ NonNull  public   GoogleMapOptions   liteMode ( boolean   enabled )   {  this . liteMode   =   enabled  ?   1   :  0 ;  return  this ;  }
@ Deprecated  @ NonNull  public   LocationRequest   setWaitForAccurateLocation ( boolean   waitForAccurateLocation )   {  this . waitForAccurateLocation   =   waitForAccurateLocation ;  return  this ;  }
private   static   String   replacePlaceholder ( Properties   properties ,  String   value )   {  PropertyPlaceholderHelper   helper   =  new   PropertyPlaceholderHelper ( """"${"""" ,  """"}"""" ) ;  return  helper . replacePlaceholders ( value ,  properties ) ;  }
@ PublicApi ( exclude   =   true )  public   boolean   isBypass ()   {  return  bypass ;  }
@ Test  public   void   thatPathKeysAreSuggested ()   {  getCaretCompletions ( """"path"""" )  . assertContains ( """"$ref"""" , """"description"""" , """"summary"""" , """"get"""" , """"put"""" , """"post"""" , """"delete"""" , """"options"""" , """"head"""" , """"patch"""" , """"trace"""" , """"servers"""" , """"parameters"""" )  . isOfSize ( 13 ) ;  }
protected   String   getISResourceLocation ()   {  return  TestConfigurationProvider . getResourceLocation ( """"IS"""" ) ;  }
public   ChangedSchema   setDescription ( final   ChangedMetadata   description )   {  clearChangedCache () ;  this . description   =   description ;  return  this ;  }
public   String   getMainModuleNameLowercase ()   {  return  this . getMainModuleName () . toLowerCase ( Locale . ROOT ) ;  }
private   void   initSourceCodeTemplateProcessor ()   {  final   String   sourceCodeTemplate   =  localAnalysisScript . getSourceCode () ;  sourceCodeTemplateProcessor   =   TemplateProcessor . of ( sourceCodeTemplate ) ;  sourceCodeTemplateProcessor  . withProject ( enrichedSettings . project )  . withModule ( enrichedSettings . module ) ;  }
@ NonNull  private   static   List < InetAddress >   fromString ( @ NonNull   String   string )   throws  UnknownHostException   {  if  ( string . isEmpty () )   return  Collections . emptyList () ;  String []   strings   =  string . split ( """"\\|"""" ) ;  ArrayList < InetAddress >   inetAddresses   =  new   ArrayList <> ( strings . length ) ;  for  ( String   address   :  strings )   {  inetAddresses . add ( InetAddress . getByName ( address ) ) ;  }  return  inetAddresses ;  }
@ ApiModelProperty ( example   =   """"organization"""" ,  required   =   true ,  value   =   """"Type of the audience, e.g., 'organization' or 'application'"""" )  @ JsonProperty ( """"type"""" )  @ Valid  @ NotNull ( message   =   """"Property type cannot be null."""" )  public   String   getType ()   {  return  type ;  }
@ Override  public   MetadatumImpl   key ( String   key )   {  this . key   =   key ;  return  this ;  }
@ Override  public   Chain < T >   lastOrNull ()   {  return  new   Chain <> ( Underscore . lastOrNull ( value () ) ) ;  }
public   synchronized   Console   print ( String   format ,  Object   ...   args ) {  return  print ( String . format ( format ,  args ) ) ;  }
private   Map < String ,  String >   toMap ( int   code ,  String   message )   {  return  Map . of ( """"state"""" ,  """"FAILED"""" , """"failureInfo"""" ,  """""""" , """"error"""" ,  format ( """"code=%d, message=%s"""" ,  code ,  message ) ) ;  }
public   Optional < String >   getParentKeyName ()   {  return  traversal . getParentKeyName ( psiElement ) ;  }
@ Test  public   void   testGetFailUnstable ()   {  CoberturaPublisher   testObjectTrue   =  new   CoberturaPublisher ( null ,  false ,  false ,  true ,  false ,  false ,  false ,  false ,  null ,  0 ) ;  CoberturaPublisher   testObjectFalse   =  new   CoberturaPublisher ( null ,  false ,  false ,  false ,  false ,  false ,  false ,  false ,  null ,  0 ) ;  assertTrue ( testObjectTrue . getFailUnstable () ) ;  assertTrue ( ! testObjectFalse . getFailUnstable () ) ;  }
public   EnvelopeData   deepcopy ()   {  return  new   EnvelopeData ( envPreutter ,  envLength ,  widths . clone () ,  heights . clone () ) ;  }
public   static   File []   getFiles ( String []   paths )   {  List < File >   files   =  new   ArrayList <> () ;  for  ( String   path   :  paths )   {  files . add ( new   File ( path ) ) ;  }  return  files . toArray ( new   File [ files . size () ] ) ;  }
public   FormValidation   doCheckValidResponseCodes ( @ QueryParameter   String   value )   {  return  HttpRequest . DescriptorImpl . checkValidResponseCodes ( value ) ;  }
public   RequestObjectConfiguration   encryption ( RequestObjectEncryptionConfiguration   encryption )   {  this . encryption   =   encryption ;  return  this ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( ! ( o   instanceof   AuthenticatorAttestationResponse ) )   return  false ;  AuthenticatorAttestationResponse   that   =  ( AuthenticatorAttestationResponse )   o ;  if  ( ! Arrays . equals ( keyHandle ,  that . keyHandle ) )   return  false ;  if  ( ! Arrays . equals ( clientDataJSON ,  that . clientDataJSON ) )   return  false ;  if  ( ! Arrays . equals ( attestationObject ,  that . attestationObject ) )   return  false ;  if  ( ! Arrays . equals ( transports ,  that . transports ) )   return  false ;  return  true ;  }
@ Override  public   boolean   shouldFilterOnlyUpInstances ()   {  return  this . filterOnlyUpInstances ;  }
private   void   handleRenewal ( final   String   appName ,  final   String   serverId ,  boolean   isReplication )   {  log ( """"renewed """"   +   appName   +   """", serverId """"   +   serverId   +   """", isReplication """"   +   isReplication ) ;  final   Application   application   =  getApplication ( appName ) ;  if  ( application   !=   null )   {  final   InstanceInfo   instanceInfo   =  application . getByInstanceId ( serverId ) ;  if  ( instanceInfo   !=   null )   {  publishEvent ( new   EurekaInstanceRenewedEvent ( this ,  appName ,  serverId ,  instanceInfo ,  isReplication ) ) ;  }  }  }
@ Override  public   boolean   isCanceled ()   {  synchronized  ( lock )   {  return  cancelled ;  }  }
public   void   endElement (  String   namespaceURI ,  String   localName ,  String   qName )   {  if  (  current   instanceof   Text )   current   =   current . getParentNode () ;  current   =   current . getParentNode () ;  }
public   static   File   getContactPhotoFile ( String   jid )   {  String   datafolder   =  Utils . getApplication () . getCacheDir () . getParent ()   +   """"/"""" ;  File   file   =  new   File ( datafolder   +   """"/cache/""""   +   """"Profile Pictures""""   +   """"/""""   +   stripJID ( jid )   +   """".jpg"""" ) ;  if  ( ! file . exists () )  file   =   new   File ( datafolder   +   """"files""""   +   """"/""""   +   """"Avatars""""   +   """"/""""   +   jid   +   """".j"""" ) ;  if  ( file . exists () )   return  file ;  return  null ;  }
public   void   setStartPos ( int   startPos )   {  this . startPos   =   startPos ;  }
public   static   void   main ( String []   args )   {  String   version   =  JavaCV . class . getPackage () . getImplementationVersion () ;  if  ( version   ==   null )   {  version   =   """"unknown"""" ;  }  System . out . println ( """"JavaCV version """"   +   version   +   """"\n""""   +  """"Copyright (C) 2009-2018 Samuel Audet <samuel.audet@gmail.com>\n""""   +  """"Project site: https:
@ Before  public   void   clearPreferences ()   {  final   Context   appContext   =  InstrumentationRegistry . getTargetContext () ;  final   ScheduleDatabase   scheduleDatabase   =  ScheduleDatabaseHelper  . getScheduleDatabase ( appContext ,  Scheduler . DATABASE_NAME ) ;  scheduleDao   =   scheduleDatabase . scheduleDao () ;  scheduleDao . deleteAll () ;  preferences   =   appContext . getSharedPreferences ( Constants . PREFS_SCHEDULES ,  0 ) ;  preferences . edit () . clear () . commit () ;  assertThat ( """"clean preferences"""" ,  preferences . getAll () . isEmpty () , is ( true ) ) ;  }
@ ApiModelProperty ( example   =   """"suspension.notification.enable"""" ,  required   =   true ,  value   =   """"Property name."""" )  @ JsonProperty ( """"name"""" )  @ Valid  @ NotNull ( message   =   """"Property name cannot be null."""" )  public   String   getName ()   {  return  name ;  }
public   static   JadeFluidObject   of ( Fluid   fluid )   {  return  of ( fluid ,  blockVolume () ) ;  }
@ Override  public   IProtocol   copyInstance ()   {  return  new   Protocol ( getProvidedProtocol () ) ;  }
public   XmlProcessorTestUtil   sortModules ()   {  this . sortModules   =   true ;  return  this ;  }
@ NonNull  @ Override  public   Set < T >   keySet ()   {  return  new   PinnedKeySet <> ( this ,  super . keySet () ) ;  }
private   void   addUserToPrimaryIS ()   throws  Exception {  UserObject   user   =  new   UserObject ()  . userName ( SECONDARY_IS_TEST_USERNAME )  . password ( SECONDARY_IS_TEST_PASSWORD )  . name ( new   Name () . givenName ( LOCAL_GIVEN_NAME ) . familyName ( LOCAL_FAMILY_NAME ) ) ;  primaryISUserId   =   primaryISScim2RestClient . createUser ( user ) ;  Assert . assertNotNull ( primaryISUserId ,  """"User creation failed in primary IS."""" ) ;  }
@ Test  public   void   createTestLabelTest ()   {  Label   label   =  AllureModelUtils . createTestLabel ( """"some-test"""" ) ;  assertThat ( label . getValue () ,  is ( """"some-test"""" ) ) ;  assertThat ( label . getName () ,  is ( LabelName . TEST_ID . value () ) ) ;  }
public   Direction   opposite ()   {  if  ( this   ==   BOTTOM )  return  TOP ;  else if  ( this   ==   TOP )  return  BOTTOM ;  else if  ( this   ==   LEFT )  return  RIGHT ;  else  return  LEFT ;  }
public   boolean   accept ( File   dir ,  String   name )   {  return  name . endsWith ( extension ) ;  }
@ RequiresApi ( Build . VERSION_CODES . S )  public   void   set6GhzPscOnlyEnabled ( boolean   enable )   {  throw  new   UnsupportedOperationException () ;  }
public   Builder   setRequestId ( String   requestId )   {  this . requestId   =   requestId ;  return  this ;  }
private   boolean   playerAddTransient ( String   worldName ,  String   player ,  String   permission )   {  if  ( worldName   ==   null )   {  worldName   =   """"*"""" ;  }  try  {  perms . safeGetUser ( worldName ,  player ) . addTransientPermission ( permission ) ;  return  true ;  }   catch ( Exception   e )   {  return  false ;  }  }
@ Override  public   TransportClientFactory   newTransportClientFactory ( final   EurekaClientConfig   clientConfig , final   Collection < Void >   additionalFilters ,  final   InstanceInfo   myInstanceInfo , final   Optional < SSLContext >   sslContext ,  final   Optional < HostnameVerifier >   hostnameVerifier )   {  return  new   WebClientTransportClientFactory ( builder ) ;  }
private   void   verifyTaskCreation ( int   taskCount )   throws  InterruptedException   {  
public   OpenIDConnectConfiguration   hybridFlow ( HybridFlowConfiguration   hybridFlow )   {  this . hybridFlow   =   hybridFlow ;  return  this ;  }
@ NonNull  @ Override  public   String   getPluginName ()   {  return  """"Text Status Composer"""" ;  }
public   Builder   setProfilePictureUri ( Uri   profilePictureUri )   {  this . profilePictureUri   =   profilePictureUri ;  return  this ;  }
@ Override  public   void   onConnected ( Bundle   connectionHint )   {  onInstanceConnected ( apiInstance ,  connectionHint ) ;  }
protected   Optional < String >   failure ( String   subject )   {  return  Optional . of ( format ( """"[%s] is not a valid URI reference"""" ,  subject ) ) ;  }
private   static   byte []   getBytes ( File   file )   {  byte []   bytesArray   =  new   byte [ ( int )   file . length () ] ;  FileInputStream   fis   =  null ;  try  {  fis   =   new   FileInputStream ( file ) ;  fis . read ( bytesArray ) ;   
private   int   getFistWorstIndex ( List < CandidatePerf >   perfs )   {  return  perfs . size ()   *   ( 100   -   crossPercent )   /   100 ;  }
public   static   boolean   hasAccessibilityMod ()   {  return  hasAccessibilityMod ;  }
@ TargetApi ( Build . VERSION_CODES . JELLY_BEAN_MR1 )  @ Override  public   void   onNewVideoLayout ( IVLCVout   vout ,  int   width ,  int   height ,  int   visibleWidth ,  int   visibleHeight ,  int   sarNum ,  int   sarDen )   {  mVideoWidth   =   width ;  mVideoHeight   =   height ;  mVideoVisibleWidth   =   visibleWidth ;  mVideoVisibleHeight   =   visibleHeight ;  mVideoSarNum   =   sarNum ;  mVideoSarDen   =   sarDen ;  updateVideoSurfaces () ;  }
public   void   testThatSingleHeaderFileIsAutoCompleted ()   {  withSpecFiles ( """"pet.json"""" ,  """"header.json"""" ) ;  final   AssertableList   completions   =  new   AssertableList ( geCompletions ( """"pet.json"""" ) ) ;  assertHeaderCompletions ( completions ) ;  }
public   void   setDeltaRetentionTimerIntervalInMs ( long   deltaRetentionTimerIntervalInMs )   {  this . deltaRetentionTimerIntervalInMs   =   deltaRetentionTimerIntervalInMs ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  ProvisioningClaim   provisioningClaim   =  ( ProvisioningClaim )   o ;  return  Objects . equals ( this . claim ,  provisioningClaim . claim )   &&  Objects . equals ( this . defaultValue ,  provisioningClaim . defaultValue ) ;  }
public   void   callBackup ( final   AppInfo   appInfo ,  final   int   backupMode )  {  final   BackupTask   backupTask   =  new   BackupTask ( appInfo , handleMessages ,  this ,  backupDir ,  shellCommands ,  backupMode ) ;  backupTask . execute () ;  }
public   static   void   deallocateReferences ()   {  DeallocatorReference   r ;  while  ( referenceQueue   !=   null   &&   ( r   =   ( DeallocatorReference ) referenceQueue . poll () )   !=   null )   {  r . clear () ;  r . remove () ;  }  }
@ Override  protected   void   enrichFactory ( ElasticsearchClientFactoryBean   factory )   {  factory . setClasspathRoot ( """"/esdoesnotexist"""" ) ;  }
@ JsonIgnore  public   boolean   isTarget ()   {  return  ColumnFlag . Target . equals ( columnFlag ) ;  }
public   void   setOptions ( DocTrees   docTrees ,  Element   p )   {  if  ( p   ==   null )   {  return;  }  List < String >   tags   =  TagUtil . getTag ( docTrees ,  p ,  """"opt"""" ) ;  for  ( String   tag   :  tags )   {  setOption ( StringUtil . tokenize ( tag ) ) ;  }  }
private   DataSource   source ()   {  final   MysqlDataSource   src   =  new   MysqlDataSource () ;  src . setUrl ( this . container . getJdbcUrl () ) ;  src . setUser ( this . container . getUsername () ) ;  src . setPassword ( this . container . getPassword () ) ;  return  src ;  }
@ Override  public   void   onClick ( View   v )   {  if  ( mDrawerLayout . isDrawerOpen ( mDrawerList ) )   {  mDrawerLayout . closeDrawer ( mDrawerList ) ;  }   else  {  mDrawerLayout . openDrawer ( mDrawerList ) ;  }  }
@ Override  public   Directive . Cursor   exec ( final   Node   dom , final   Directive . Cursor   cursor ,  final   Directive . Stack   stack )  throws  ImpossibleModificationException   {  return  stack . pop () ;  }
@ Override  public   Set < String >   getSupportedAnnotationTypes ()   {  return  ImmutableSet . of ( """"*"""" ) ;  }
public   static   void   writeFile ( String   path ,  String   str )   {  createNewFile ( path ) ;  FileWriter   fileWriter   =  null ;  try  {  fileWriter   =   new   FileWriter ( new   File ( path ) ,  false ) ;  fileWriter . write ( str ) ;  fileWriter . flush () ;  }   catch  ( IOException   e )   {  e . printStackTrace () ;  }   finally  {  try  {  if  ( fileWriter   !=   null )  fileWriter . close () ;  }   catch  ( IOException   e )   {  e . printStackTrace () ;  }  }  }
@ Test  public   void   requestMaxLengthDecreased ()   {  BackwardIncompatibleProp   prop   =  REQUEST_MAX_LENGTH_DECREASED ;  assertSpecIncompatible ( BASE ,  """"bc_request_maxlength_decreased.yaml"""" ,  prop ) ;  }
default   int   writeRegister ( int   register ,  CharBuffer   ...   data )   throws  IOException   {  return  writeRegister ( register ,  StandardCharsets . US_ASCII ,  data ) ;  }
public   Builder   setUserVerificationMethod ( int   userVerificationMethod )   {  this . userVerificationMethod   =   userVerificationMethod ;  return  this ;  }
@ Override  public   int   getRowWidth ()  {  return  EditorScreen . this . windowWidth   -   20   -   2   -   ( this . getMaxScroll ()   >   0  ?   6   :  0 ) ;  }
private   boolean   isOfflineMode ()   {  return  getAdapterMode ()   ==   AdapterMode . OFFLINE ;  }
public   static   ExecutionService   getExecutionService ()   {  ExecutionService   executionService   =  EXECUTION_SERVICE . get () ;  if  ( executionService   ==   null )   {  EXECUTION_SERVICE . compareAndSet ( null ,  new   AndroidExecutionService () ) ;  executionService   =   EXECUTION_SERVICE . get () ;  }  return  executionService ;  }
@ Test  public   void   doIconDotSvgShouldReturnCorrectResponseForValidJob ()   throws  Exception   {  Run < ? ,  ? >   build   =  job . scheduleBuild2 ( 0 ) . get () ;  j . assertBuildStatusSuccess ( build ) ;  try  ( JenkinsRule . WebClient   webClient   =  j . createWebClient () )   {  String   url   =  j . getURL () . toString ()   +   """"buildStatus/icon.svg?job=""""   +   job . getName () ;  JenkinsRule . JSONWebResponse   json   =  webClient . getJSON ( url ) ;  String   result   =  json . getContentAsString () ;  assertThat ( result ,  containsString ( PASSING_MARKER ) ) ;  }  }
 <decl pos:start=""""""""520:78"""""""" pos:end=""""""""520:101""""""""><type ref=""""""""prev"""""""" pos:start=""""""""520:25"""""""" pos:end=""""""""520:30""""""""/><name pos:start=""""""""520:78"""""""" pos:end=""""""""520:85"""""""">brackets</name> <init pos:start=""""""""520:87"""""""" pos:end=""""""""520:101"""""""">= <expr pos:start=""""""""520:89"""""""" pos:end=""""""""520:101""""""""><name pos:start=""""""""520:89"""""""" pos:end=""""""""520:101"""""""">arrayBrackets</name></expr></init></decl>;</decl_stmt>
@ PublicApi ( exclude   =   true )  public   FrameMetadataParcel   createParcel ()   {  FrameMetadataParcel   parcel   =  new   FrameMetadataParcel () ;  parcel . width   =   width ;  parcel . height   =   height ;  parcel . id   =   id ;  parcel . timestampMillis   =   timestampMillis ;  parcel . rotation   =   rotation ;  return  parcel ;  }
@ AfterClass  public   void   tearDown ()   throws  IOException   {  FileUtils . deleteDirectory ( new   File ( """"./models/"""" ) ) ;  FileUtils . deleteDirectory ( new   File ( """"./modelsTmp/"""" ) ) ;  FileUtils . deleteQuietly ( new   File ( """"ModelConfig.json"""" ) ) ;  FileUtils . deleteDirectory ( new   File ( """"test"""" ) ) ;  }
public   static   double   getDefaultGamma ()   {  return  getGamma ( getDefaultScreenDevice () ) ;  }
public   static   IndependentTreeModel   loadFromStream ( InputStream   input ,  boolean   isConvertToProb , boolean   isOptimizeMode ,  String   gbtScoreConvertStrategy )   throws  IOException   {  return  loadFromStream ( input ,  isConvertToProb ,  isOptimizeMode ,  true ,  gbtScoreConvertStrategy ) ;  }
@ Test  public   void   testConstruct ()   throws  Exception  {  JsonSetter . Value   v   =  JsonSetter . Value . construct ( null ,  null ) ;  assertSame ( EMPTY ,  v ) ;  }
private   boolean   serviceUrlMatches ( final   String   serviceUrl )   {  return  this . peerEurekaNodes . getPeerEurekaNodes () . get ( 0 ) . getServiceUrl () . equals ( serviceUrl ) ;  }
@ Override  public   void   notifySessionSuspended ( int   reason )   {  Log . d ( TAG ,  """"unimplemented Method: notifySessionSuspended"""" ) ;  }
public   SMSSenderUpdateRequest   addPropertiesItem ( Properties   propertiesItem )   {  if  ( this . properties   ==   null )   {  this . properties   =   new   ArrayList < Properties > () ;  }  this . properties . add ( propertiesItem ) ;  return  this ;  }
String   read_initial_custom_layout ()  {  try {  Resources   res   =  getContext () . getResources () ;  return  Utils . read_all_utf8 ( res . openRawResource ( R . raw . latn_qwerty_us ) ) ;  }  catch  ( Exception   _e )  {  return  """""""" ;  }  }
@ SuppressWarnings ( """"unchecked"""" )  public   static   < E >   List < E > []   partition ( final   E []   iterable ,  final   Predicate < E >   pred )   {  return  partition ( Arrays . asList ( iterable ) ,  pred ) . toArray ( new   List [ 0 ] ) ;  }
@ Override  public   InsertHandler < LookupElement >   createInsertFieldHandler ( final   Field   field )   {  return  new   JsonInsertFieldHandler ( this ,  field ) ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"defaultAuthenticatorId"""" )  @ Valid  public   String   getDefaultAuthenticatorId ()   {  return  defaultAuthenticatorId ;  }
@ Test ( groups   =   """"wso2.is"""" , description   =   """"Testing updating Oauth2 application"""" , dependsOnMethods   =   {  """"testRegisterApplication"""" ,  """"testUpdateOauthAppState"""" ,  """"testUpdateOauthSecretKey""""  } )  public   void   testUpdateOauthApplication ()   throws  Exception   {  updateApplication ( getApplication ( applicationName ) ) ;  Assert . assertEquals ( getApplication ( updatedApplicationName ) . getApplicationName () ,  updatedApplicationName , """"Application update has failed""""   +   """".Received incorrect application name"""" ) ;  }
public   void   setTextSize ( @ FloatRange ( from   =   0.0 ,  fromInclusive   =   false )   float   size )   {  mSelectorWheelPaint . setTextSize ( size ) ;  mInputText . setTextSize ( TypedValue . COMPLEX_UNIT_PX ,  size ) ;  invalidate () ;  }
@ Nullable  @ Override  public   View   onCreateView ( @ NonNull   LayoutInflater   inflater ,  @ Nullable   ViewGroup   container ,  @ Nullable   Bundle   savedInstanceState )   {  var   root   =  super . onCreateView ( inflater ,  container ,  savedInstanceState ) ;  if  ( savedInstanceState   ==   null )   {  getChildFragmentManager () . beginTransaction () . add ( R . id . frag_container ,  new   GeneralPreferenceFragment () ) . commitNow () ;  }  return  root ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( name ,  severity ,  source ) ;  }
private   HttpResponse   sendLoginPost ( HttpClient   client ,  String   sessionDataKey )   throws  IOException   {  List < NameValuePair >   urlParameters   =  new   ArrayList <> () ;  urlParameters . add ( new   BasicNameValuePair ( """"username"""" ,  SECONDARY_IS_TEST_USERNAME ) ) ;  urlParameters . add ( new   BasicNameValuePair ( """"password"""" ,  SECONDARY_IS_TEST_PASSWORD ) ) ;  urlParameters . add ( new   BasicNameValuePair ( """"sessionDataKey"""" ,  sessionDataKey ) ) ;  HttpResponse   response   =  sendPostRequestWithParameters ( client ,  urlParameters ,  SECONDARY_IS_COMMONAUTH_URL ) ;  return  response ;  }
@ Test  public   void   matchConditionShouldMatchCharType ()   {  Player   player   =  new   Player () ;  player . setCurrentCharacterType ( """"Recruit"""" ) ;  Line   line   =  new   Line ( 1 , """""""" , """""""" , ConditionType . CHAR_TYPE , """"Recruit"""" , Collections . < Integer > emptyList () , ActionType . NONE ) ;  assertTrue ( ConversationManager . matchesConditions ( null ,  player ,  line ) ) ;  }
public   Map < Integer ,  Double >   getWgtWoeMeanMap ()   {  return  wgtWoeMeanMap ;  }
private   void   setChangedExtension ( ChangedExtensions   changedExtension )   {  this . changedExtensions   =   changedExtension ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( oldMapping ,  newMapping ,  context ,  increased ,  missing ,  changed ) ;  }
@ Override  public   Void   visitReturn ( ReturnTree   node ,  Void   p )   {  String   name   =  node . getTagName () ;  String   content   =  CommentHelper . getText ( node . getDescription () ) ;  tags . computeIfAbsent ( name ,  n  ->   new   ArrayList <> () ) . add ( content ) ;  return  null ;  }
private   void   createApplications ()   throws  Exception   {  log . info ( """"Creating the service providers required for the testcase."""" ) ;  for  ( int   i   =  1 ;   i   <   10 ;   i ++ )   {  ServiceProvider   serviceProvider   =  new   ServiceProvider () ;  serviceProvider . setApplicationName ( APPLICATION_PREFIX   +   i ) ;  serviceProvider . setDescription ( SERVICE_PROVIDER_DESCRIPTION ) ;  applicationManagementServiceClient . createApplication ( serviceProvider ) ;  }  }
private   QueryRow   setColumn ( String   columnName ,  Object   columnValue )   {  mRow . put ( columnName ,  new   TypedValue ( columnValue ) ) ;  return  this ;  }
private   static   KeyPair   parseKeyPair ( String   key )   throws  Throwable   {  Object   object ;  try  ( PEMParser   parser   =  new   PEMParser ( new   StringReader ( key ) ) )   {  object   =   parser . readObject () ;  }  PEMKeyPair   pemKeyPair   =  ( PEMKeyPair )   object ;  return  new   JcaPEMKeyConverter () . getKeyPair ( pemKeyPair ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   clearObjects ()   throws  Exception   {  deleteObjects () ;  clear () ;  mockApplicationServer . stop () ;  }
@ Override  protected   Status   getStatus ()   {  return  throwable   instanceof   AssertionError  ?   Status . FAILED   :  Status . BROKEN ;  }
public   void   setMinIvThreshold ( Float   minIvThreshold )   {  this . minIvThreshold   =   minIvThreshold ;  }
public   Duration   getConnectionMinBackoff ()   {  return  this . connectionMinBackoff ;  }
@ Test  public   void   testGetProvidedExtensionAsClient ()   throws  Exception   {  DefaultExtension   defaultExtension   =  new   DefaultExtension () ;  assertEquals ( """""""" ,  defaultExtension . getProvidedExtensionAsClient () ) ;  }
public   InboundProtocols   wsTrust ( WSTrustConfiguration   wsTrust )   {  this . wsTrust   =   wsTrust ;  return  this ;  }
@ Test  public   void   err_WrongEnding ()   {  parseWrongMacro ( """"@test:1(aaa,bbb)error"""" ,  MacroExceptionCode . WrongFormat ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   testConclude ()   {  super . conclude () ;  try  {  deleteUser ( testUser1Id ) ;  deleteUser ( testUser2Id ) ;  deleteIdP ( EXTERNAL_IDP_NAME ) ;  }   catch  ( Exception   e )   {  log . error ( """"Error while deleting the users :""""   +   TEST_USER_1   +   """", and """"   +   TEST_USER_2 ,  e ) ;  }  }
private   String   getFileUniqueKey ()   {  ServerFile   file   =  getArguments () . getParcelable ( Fragments . Arguments . SERVER_FILE ) ;  return  file . getUniqueKey () ;  }
@ Test  public   void   sameDocumentReferenceResolution ()   {  v6Loader () . schemaJson ( get ( """"v6SameDocumentRef"""" ) ) . build () . load () . build () ;  }
private   static   List < Finding >   convert ( final   Analysis   collection )   {  List < Finding >   findings   =  new   ArrayList <> () ;  for  ( Dependency   dependency   :  collection . getDependencies () )   {  for  ( Vulnerability   vulnerability   :  dependency . getVulnerabilities () )   {  final   Finding   finding   =  new   Finding ( dependency ,  vulnerability ) ;  findings . add ( finding ) ;  }  }  return  findings ;  }
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( """"class EmailTemplateType {\n"""" ) ;  sb . append ( """"    displayName: """" ) . append ( toIndentedString ( displayName ) ) . append ( """"\n"""" ) ;  sb . append ( """"    templates: """" ) . append ( toIndentedString ( templates ) ) . append ( """"\n"""" ) ;  sb . append ( """"}"""" ) ;  return  sb . toString () ;  }
@ Override  public   WebSocketImpl   createWebSocket ( WebSocketAdapter   a ,  Draft   d )   {  return  new   WebSocketImpl ( a ,  d ) ;  }
@ Test  public   void   equalsVerifier ()   {  EqualsVerifier . forClass ( NumberSchema . class )  . withRedefinedSuperclass ()  . withIgnoredFields ( """"schemaLocation"""" ,  """"location"""" )  . suppress ( Warning . STRICT_INHERITANCE )  . verify () ;  }
public   static   EditTextPreferenceDialog   newInstance ( String   key )   {  final   EditTextPreferenceDialog  fragment   =  new   EditTextPreferenceDialog () ;  final   Bundle   b   =  new   Bundle ( 1 ) ;  b . putString ( ARG_KEY ,  key ) ;  fragment . setArguments ( b ) ;  return  fragment ;  }
@ Test  public   void   beansNotCreatedWhenEurekaClientEnabled ()   {  new   ApplicationContextRunner ()  . withConfiguration ( AutoConfigurations . of ( EurekaConfigServerBootstrapConfiguration . class ) )  . withPropertyValues ( """"eureka.client.enabled=true"""" )  . run ( this :: assertEurekaBeansNotPresent ) ;  }
public   String   getPlayerGroup ( Player   player )   {  String   group   =  permissions . getPrimaryGroup ( player ) . toLowerCase () ;  if  ( group   ==   null )   {  return  group ;  }   else  {  return  group . toLowerCase () ;  }  }
@ Override   public   void   deallocate ()   {  try  {  method . invoke ( null ,  pointer ) ;  pointer . setNull () ;  }   catch  ( Exception   ex )   {  throw  new   RuntimeException ( ex ) ;  }  }
private   String   getDateFormatPattern () {  ArrayList < Wheel >   wheels   =  getOrderedVisibleWheels () ;  if ( state . getMode ()   ==   Mode . date ) {  return  wheels . get ( 0 ) . getFormatPattern ()   +   """" """"  +   wheels . get ( 1 ) . getFormatPattern ()   +   """" """"  +   wheels . get ( 2 ) . getFormatPattern () ;  }  return  dayWheel . getFormatPattern () ;  }
private   void   btnNextActionPerformed ( java . awt . event . ActionEvent   evt )   { 
@ Override  public   void   fill ()   {  SwaggerValues . audience () . forEach ( this :: addValue ) ;  }
@ FXML  void   cut ( ActionEvent   event )   {  if  ( ! tabs . getTabs () . isEmpty () )   {  editors . get ( tabs . getSelectionModel () . getSelectedItem () . getId () ) . cut () ;  }  }
@ Test  public   void   nullPointer ()   {  assertThrows ( NullPointerException . class ,  ()  ->  {  new   JSONPointer ( ( String )   null ) ;  } ) ;  }
@ Override  public   AnalogOutput   bind ( AnalogBinding ...   binding )   {  return  null ;  }
@ Override  public   void   makeRecurrenceSingleInstance ( IRemindersCallbacks   callbacks ,  String   s1 ,  TaskEntity   task ,  UpdateRecurrenceOptions   options )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: makeRecurrenceSingleInstance"""" ) ;  }
@ Contract ( """"_ -> this"""" )  public   ProgressStyle   color ( int   color )   {  return  color ( color ,  color ) ;  }
@ Override  public   void   closeChannelWithError ( IWearableCallbacks   callbacks ,  String   s ,  int   errorCode )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: closeChannelWithError:""""   +   s   +   """", """"   +   errorCode ) ;  }
public   void   start ()   throws  Exception   {  writer   =   new   VideoWriter ( filename ,  fourCCCodec () ,  frameRate ,  new   Size ( imageWidth ,  imageHeight ) ,  isColour () ) ;  for  ( Entry < String ,  String >   e   :  options . entrySet () )   {  writer . set ( Integer . parseInt ( e . getKey () ) ,  Double . parseDouble ( e . getValue () ) ) ;  }  }
public   void   setWindow ( View   view )   {  window   =   view ;  if  ( window   !=   null )   {  window . measure ( 0 ,  0 ) ;  }  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  deleteApp ( applicationId ) ;  client . close () ;  restClient . closeHttpClient () ;  consumerKey   =   null ;  accessToken   =   null ;  }
@ Override   public   int   get ( long   i ,  long   j )   {  return  buffer . get ( ( int ) index ( i ,  j ) )   &   0xFF ;  }
private   void   rememberChangedFile ( final   DocumentEvent   e )   {  ApplicationManager . getApplication () . invokeLater ( ()  ->   ApplicationManager . getApplication () . runReadAction ( ()  ->   addFileFromEventToChangedFiles ( e ) ) ) ;  }
@ Override  public   Vec2   getCachedSize ()   {  if  ( size   ==   null )   {  size   =   getSize () ;  }  return  size ;  }
public   Claim   getClaim ( String   name )   {  if  ( claims   !=   null )   {  for  ( Claim   claim   :  claims )   {  if  ( claim . getName () . equals ( name ) )   {  return  claim ;  }  }  }  return  null ;  }
private   void   logRuntimeException ( WebSocketImpl   webSocketImpl ,  RuntimeException   e )   {  log . error ( """"Runtime exception during onWebsocketMessage"""" ,  e ) ;  webSocketImpl . getWebSocketListener () . onWebsocketError ( webSocketImpl ,  e ) ;  }
private   String   getRequestPayLoadForClaimTask ()   throws  IOException   {  return  getPayLoad ( APPROVAL_ACTION . CLAIM ) ;  }
private   void   cbTsaAuthnActionPerformed ( java . awt . event . ActionEvent   evt )   { 
public   static   String   formatJson ( String   json ,  Json . JsonStringBuilder . Step   identStep )   {  return  Json . formatJson ( json ,  identStep ) ;  }
public   static   IntIndexer   create ( IntBuffer   buffer ,  Index   index )   {  return  new   IntBufferIndexer ( buffer ,  index ) ;  }
@ Test  void   testPartialCpuinfoData ()   throws  IOException   {  mockCpuInfoResponse ( """"Processor: ARMv7 Processor\n"""" ) ;  BoardInfoHelper . reinitialize () ;  var   detectedBoard   =  BoardInfoHelper . current () ;  assertEquals ( PiModel . UNKNOWN ,  detectedBoard . getBoardModel () . getModel () ) ;  }
public   void   onCreate ( Bundle   savedInstanceState )   {  helper . onCreate ( savedInstanceState ) ;  }
private   void   afterSelectionUpdate ( Player   player )  {  if  ( hasPlacedBoth ( player . getName () ) )  {  WorldEditPlugin   wep   =  ( WorldEditPlugin )   server . getPluginManager () . getPlugin ( """"WorldEdit"""" ) ;  World   world   =  playerLoc1 . get ( player . getName () ) . getWorld () ;  Selection   selection   =  new   CuboidSelection ( world ,  playerLoc1 . get ( player . getName () ) ,  playerLoc2 . get ( player . getName () ) ) ;  wep . setSelection ( player ,  selection ) ;  }  }
@ NonNull  public   Builder   setRpId ( @ NonNull   String   rpId )   {  this . rpId   =   rpId ;  return  this ;  }
@ SuppressWarnings ( """"unchecked"""" )  @ Test  void   toXml2 ()   {  String   string   =  """"{\n  \""""root\"""": {\n  }\n}"""" ;  assertEquals ( """"<?xml version=\""""1.0\"""" encoding=\""""UTF-8\""""?>\n<root></root>"""" , U . toXml ( ( Map < String ,  Object > )   U . fromJson ( string ) ) ) ;  }
@ DisplayName ( """"SERIAL :: Write Byte Array"""" )  @ Order ( 3 )  @ Test  public   void   writeByteArray ()   {  
private   GoogleApiClient   getApiClient ()   {  if  ( apiClient   ==   null )   {  apiClient   =   new   GoogleApiClient . Builder ( this ) . addApi ( Wearable . API ) . build () ;  }  if  ( ! apiClient . isConnected () )   {  apiClient . connect () ;  }  return  apiClient ;  }
 <argument pos:start=""""""""449:112"""""""" pos:end=""""""""449:117""""""""><expr pos:start=""""""""449:112"""""""" pos:end=""""""""449:117""""""""><literal type=""""""""string"""""""" pos:start=""""""""449:112"""""""" pos:end=""""""""449:117"""""""">""""""""lst0""""""""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Issue ( """"JENKINS-66684"""" )  @ Test  void   canGetConstructorParametersForSnippetGenerator ( JenkinsRule   jenkinsRule )   {  final   String   colorMapName   =  AnsiColorMap . VGA . getName () ;  final   AnsiColorStep   step   =  new   AnsiColorStep ( colorMapName ) ;  assertEquals ( colorMapName ,  step . getColorMapName () ) ;  }
@ Test  public   void   testLocaleListFile ()   throws  Exception   {  try  ( DatabaseReader   reader   =  new   DatabaseReader . Builder ( this . geoipFile )  . locales ( Arrays . asList ( """"xx"""" ,  """"ru"""" ,  """"pt-BR"""" ,  """"es"""" ,  """"en"""" ) )  . build () )   {  this . testLocaleList ( reader ) ;  }  }
@ Before  public   void   setUp ()   throws  IOException   {  resultsDir   =   Files . createTempDirectory ( ALLURE_RESULTS ) ;  AllureResultsUtils . setResultsDirectory ( resultsDir . toFile () ) ;  TestNG   testNG   =  new   TestNG () ;  testNG . setDefaultSuiteName ( DEFAULT_SUITE_NAME ) ;  testNG . setTestClasses ( new   Class [] { TestDataClass . class } ) ;  testNG . setUseDefaultListeners ( false ) ;  testNG . run () ;  }
public   boolean   completeParametersCollectionFormat ()   {  return  pathResolver . childOfParametersCollectionFormat ( psiElement ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   List < T >   xor ( final   List < T >   list )   {  return  xor ( ( List < T > )   getIterable () ,  list ) ;  }
@ Override  public   void   applyAnimated ( Map   map ,  int   duration )   {  map . animator () . animateTo ( duration ,  getMapPosition ( map ) ) ;  }
@ Test ( alwaysRun   =   true ,  groups   =   """"wso2.is"""" ,  description   =   """"Testing create new tenant"""" )  public   void   testCreateTenant ()   throws  Exception   {  tenantServiceClient . addTenant ( """"friends.com"""" ,  """"phoebe"""" ,  """"password"""" ,  """"phoebe@friends.com"""" ,  """"Phoebe"""" ,  """"Buffay"""" ) ;  Assert . assertNotNull ( tenantServiceClient . getTenant ( """"friends.com"""" ) ,  """"Unable to create a new tenant"""" ) ;  }
@ Override  public   void   run ()   {  try  {  run ( callbacks ) ;  }   catch  ( RemoteException   e )   {  mainHandler . post ( ()  ->  {  try  {  callbacks . onStatus ( Status . CANCELED ) ;  }   catch  ( RemoteException   e2 )   {  Log . w ( TAG ,  e ) ;  }  } ) ;  }  }
public   Dictionary < FormatAttribute >   getFormatAttributes ()  {  return  formatAttributes ;  }
@ Test  void   pairs ()   {  List < Map . Entry < String ,  Integer > >   result   = Underscore . pairs ( new   LinkedHashMap < String ,  Integer > ()   { {  put ( """"one"""" ,  1 ) ;  put ( """"two"""" ,  2 ) ;  put ( """"three"""" ,  3 ) ;  } } ) ;  assertEquals ( """"[one=1, two=2, three=3]"""" ,  result . toString () ) ;  }
public   synchronized   static   Mat   toMat ( IplImage   src ) {  return  matConv . convertToMat ( iplConv . convert ( src ) . clone () ) ;  }
public   Boolean   getNewMaximumExclusiveValue ()   {  return  newMaximumExclusiveValue ;  }
public   void   setFileUri ( String   fileUri )   {  this . fileUri   =   fileUri ;  }
public   static   void   clearInterval ( java . util . concurrent . ScheduledFuture   scheduledFuture )   {  clearTimeout ( scheduledFuture ) ;  }
public   static   ValidateResult   validate ( ModelSourceDataConf   sourceData )   throws  Exception   {  return  iterateCheck ( false ,  DATASET_TAG ,  sourceData ) ;  }
@ Test  public   void   testWhiteHouseHashDecode ()   {  LatLong   point   =  decodeHash ( """"dqcjqcp84c6e"""" ) ;  assertEquals ( point . getLat () ,  38.89710201881826 ,  PRECISION ) ;  assertEquals ( point . getLon () ,  - 77.03669792041183 ,  PRECISION ) ;  }
@ Test  public   void   decreased ()   {  BackwardIncompatibleProp   prop   =  OPENAPI_ENDPOINTS_DECREASED ;  assertSpecIncompatible ( BASE ,  """"bc_paths_decreased.yaml"""" ,  prop ) ;  }
@ Test  void   willPrintAdditionalNlOnKubernetesPlugin ( JenkinsRule   jenkinsRule )   throws  Exception   {  ExtensionList . lookup ( DynamicContext . Typed . class ) . add ( 0 ,  new   SecretsMasker () ) ;  assertNlsOnRunningPipeline ( jenkinsRule ) ;  }
private   void   createB2BApplication ( JSONObject   authorizedAPIs )  throws  IOException ,  JSONException ,  InterruptedException   {  String   body   =  getB2BAppCreationRequestBody () ;  try  ( CloseableHttpResponse   appCreationResponse   =  getResponseOfHttpPost ( applicationManagementApiBasePath ,  body , getHeaders () ) )   {  String []   locationElements   = appCreationResponse . getHeaders ( LOCATION_HEADER ) [ 0 ] . toString () . split ( PATH_SEPARATOR ) ;  b2bAppId   =   locationElements [ locationElements . length   -   1 ] ;  }  
@ Test   public   void   testDefaultStrides ()   {  long []   sizes   =  { 640 ,  480 ,  3 } ;  long []   strides   =  StrideIndex . defaultStrides ( sizes ) ;  System . out . println ( Arrays . toString ( strides ) ) ;  assertEquals ( 1440 ,  strides [ 0 ] ) ;  assertEquals (    3 ,  strides [ 1 ] ) ;  assertEquals (    1 ,  strides [ 2 ] ) ;  }
@ Override   public   CharIndexer   reindex ( Index   index )   {  return  new   CharArrayIndexer ( array ,  index ) ;  }
@ Test  void   formatxml ()   {  ResponseEntity < Map < String ,  Object > >   result   = testObj . formatxml ( U . objectBuilder () . add ( """"xml"""" ,  """"<a/>"""" ) . build () ) ;  assertSame ( HttpStatus . OK ,  result . getStatusCode () ) ;  }
@ NonNull  public   Builder   requestProfile ()   {  this . scopes . add ( new   Scope ( Scopes . PROFILE ) ) ;  return  this ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( name ,  provider ,  providerURL ,  key ,  secret ,  sender ,  contentType ,  properties ) ;  }
public   String   insertMessages ( Player   player ,  String   areaname ,  ClaimedResidence   res ,  String   message )   {  try  {  message   =   message . replaceAll ( """"%player"""" ,  player . getName () ) ;  message   =   message . replaceAll ( """"%owner"""" ,  res . getPermissions () . getOwner () ) ;  message   =   message . replaceAll ( """"%residence"""" ,  areaname ) ;  }   catch  ( Exception   ex )   {  return  """""""" ;  }  return  message ;  }
@ Test  public   void   pomInJar ()   throws  Exception   {  Resource   resource   =  new   UrlResource ( """"jar:file:src/test/resources/app-with-web-in-lib-properties.jar!/META-INF/maven/com.example/app/pom.xml"""" ) ;  assertThat ( resource . exists () ) . isTrue () ;  List < Dependency >   dependencies   =  resolver . dependencies ( resource ) ;  assertThat ( dependencies . size () ) . isGreaterThan ( 10 ) ;  }
@ Override  public   void   updateNarration ( NarrationElementOutput   output )   {  super . updateNarration ( output ) ;  if  ( ! description . isEmpty () )   {  output . add ( NarratedElementType . HINT ,  NarrationThunk . from ( description ) ) ;  }  }
@ Override  public   void   onWebsocketError ( WebSocket   conn ,  Exception   ex )   {  }
static   boolean   deepEquals ( Number   num1 ,  Number   num2 )   {  if  ( num1 . getClass ()   !=   num2 . getClass () )   {  return  compare ( num1 ,  num2 )   ==   0 ;  }  return  Objects . equals ( num1 ,  num2 ) ;  }
 <argument pos:start=""""""""229:60"""""""" pos:end=""""""""229:63""""""""><expr pos:start=""""""""229:60"""""""" pos:end=""""""""229:63""""""""><name pos:start=""""""""229:60"""""""" pos:end=""""""""229:63"""""""">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Test  void   sendAllContentTypes ()   {  for  ( MimeType   mimeType   :  MimeType . values () )   {  sendContentType ( mimeType ) ;  }  }
private   float   valueForTouchPos ( float   x ,  float   y )   {  final   float   val   =  isWide ()  ?   x   /   w   :  1   -   y   /   h ;  return  Math . max ( 0 ,  Math . min ( 1 ,  val ) ) ;  }
@ Override  public   boolean   isResponse ( PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.components.responses"""" ) ;  }
@ Test ( expectedExceptions   =   RuntimeException . class )  public   void   binningObjectGetData ()   {  BinningObject   object   =  new   BinningObject ( DataType . Numerical ) ;  object . getCategoricalData () ;  }
public   double []   range ()   {  sort () ;  if ( _times . isEmpty () )  return  new   double [] { 0.0 , 0.0 } ;  else  return  new   double [] { _times . get ( 0 ) ,  _times . get ( _times . size ()   -   1 ) } ;  }
public   static   String   getSimpleColumnName ( String   columnName )   {  String   result   =  columnName ;  
protected   InstanceSettings   getSettings ()   {  return  provider . getSettings () ;  }
public   void   setIsPrimary ( Boolean   isPrimary )   {  this . isPrimary   =   isPrimary ;  }
public   void   fill ()   {  CommonFields . contact () . forEach ( this :: addUnique ) ;  }
 <argument pos:start=""""""""205:44"""""""" pos:end=""""""""205:47""""""""><expr pos:start=""""""""205:44"""""""" pos:end=""""""""205:47""""""""><literal type=""""""""number"""""""" pos:start=""""""""205:44"""""""" pos:end=""""""""205:47"""""""">2.65</literal></expr></argument>)</argument_list></call>
public   boolean   isKeyDown ( KeyboardData . Key   k )  {  for  ( Pointer   p   :  _ptrs )  if  ( p . key   ==   k )  return  true ;  return  false ;  }
@ Override  public   int   compareTo ( AbstractBinInfo   other )   {  return  Double . compare ( getPositiveRate () ,  other . getPositiveRate () ) ;  }
public   void   setTextColor ( @ ColorInt   int   color )   {  mSelectorWheelPaint . setColor ( color ) ;  mInputText . setTextColor ( color ) ;  invalidate () ;  }
@ Test ( dependsOnMethods   =   """"testGetOrganizationsMetaAttributesWithUnsupportedAttribute"""" )  public   void   testGetDiscoveryConfigWithoutAddingConfig ()   {  String   endpointURL   =  ORGANIZATION_CONFIGS_API_BASE_PATH   +   ORGANIZATION_DISCOVERY_API_PATH ;  Response   response   =  getResponseOfGetWithOAuth2 ( endpointURL ,  m2mToken ) ;  validateErrorResponse ( response ,  HttpStatus . SC_NOT_FOUND ,  """"OCM-60002"""" ) ;  }
private   boolean   isOAuth ()   {  return  data . service . startsWith ( """"oauth2:"""" )   ||   data . service . startsWith ( """"oauth:"""" ) ;  }
public   static   void   installIfNeededAsync ( Context   context ,  ProviderInstallListener   listener )   {  if  ( listener   !=   null )   listener . onProviderInstalled () ;  }
@ Override  public   void   performApply ( ILaunchConfigurationWorkingCopy   configuration )   {  String   programPath   =  this . programPathText . getText () ;  configuration . setAttribute ( LaunchConstants . PROGRAM ,  programPath ) ;  configuration . setAttribute ( NodeRunDAPDebugDelegate . ARGUMENTS ,  this . argumentsText . getText () ) ;  configuration . setAttribute ( DebugPlugin . ATTR_WORKING_DIRECTORY ,  this . workingDirectoryText . getText () ) ;  configuration . setMappedResources ( ResourcesPlugin . getWorkspace () . getRoot () . findFilesForLocationURI ( new   File ( programPath ) . toURI () ) ) ;  }
public   InsightsResponse   insights ( InetAddress   ipAddress )   throws  IOException , GeoIp2Exception   {  return  this . responseFor ( """"insights"""" ,  ipAddress ,  InsightsResponse . class ) ;  }
@ Override  public   int   serWriteByte ( int   handle ,  byte   value )   {  logger . trace ( """"[SERIAL::WRITE] -> HANDLE={}; Byte [{}]"""" ,  handle ,  Byte . toUnsignedInt ( value ) ) ;  validateReady () ;  validateHandle ( handle ) ;  int   result   =  PIGPIO . serWriteByte ( handle ,  value ) ;  logger . trace ( """"[SERIAL::WRITE] <- HANDLE={}; SUCCESS={}"""" ,  handle ,  ( result >= 0 ) ) ;  validateResult ( result ,  false ) ;  return  0 ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"links"""" )  @ Valid  public   List < Link >   getLinks ()   {  return  links ;  }
public   boolean   isKey ( final   PsiElement   psiElement )   {  return  Optional . ofNullable ( psiElement . getParent () )  . filter ( JsonPsiUtil :: isPropertyKey )  . isPresent () ;  }
public   static   < T >   List < T >   repeat ( final   T   element ,  final   int   times )   {  if  ( times   <=   0 )   {  return  new   ArrayList <> () ;  }  List < T >   result   =  newArrayListWithExpectedSize ( times ) ;  for  ( int   i   =  0 ;   i   <   times ;   i ++ )   {  result . add ( element ) ;  }  return  result ;  }
private   static   FormValidation   isValidInteger ( String   value )   {  try  {  int   intValue   =  Integer . parseInt ( value ) ;  if  ( intValue   ==   - 1 )   {  return  FormValidation . warning ( Messages . Configuration_skipValidation () ) ;  }  if  ( intValue   >=   0 )   {  return  FormValidation . ok () ;  }   else  {  return  FormValidation . error ( Messages . Configuration_notValidNumber () ) ;  }  }   catch  ( NumberFormatException   e )   {  return  FormValidation . error ( Messages . Configuration_notValidInteger () ) ;  }  }
@ Test  public   void   lockFilesShouldBeRemovedOnRelease ()   {  if  ( ! Utilities . ISLINUX )   {  return;  }  final   AffinityLock   lock   =  AffinityLock . acquireLock () ;  assertTrue ( Files . exists ( Paths . get ( lockChecker . doToFile ( lock . cpuId () ) . getAbsolutePath () ) ) ) ;  lock . release () ;  assertFalse ( Files . exists ( Paths . get ( lockChecker . doToFile ( lock . cpuId () ) . getAbsolutePath () ) ) ) ;  }
@ RequestMapping ( """"/"""" )  public   String   home ()   {  return  """"Hello world """"   +   registration . getUri () ;  }
public   static   void   renderItemWithoutTransforms ( BakedModel   model ,  ItemStack   stack ,  ItemStack   parent ,  PoseStack   poseStack ,  MultiBufferSource   buffer ,  int   light ,  int   overlay )  {  RenderType   renderType   =  getRenderType ( stack ,  false ) ;  VertexConsumer   builder   =  ItemRenderer . getFoilBuffer ( buffer ,  renderType ,  true ,  stack . hasFoil ()   ||   parent . hasFoil () ) ;  renderModel ( model ,  stack ,  parent ,  null ,  poseStack ,  builder ,  light ,  overlay ) ;  }
public   static   Codec < BulletHoleData >   codec ( ParticleType < BulletHoleData >   type )  {  return  CODEC ;  }
private   String   getDescriptionFor ( String   xmlFile ,  String   localeLanguage ) {  String   description   =  null ;  try {  XmlPullParser   parser   =  XmlPullParserFactory . newInstance () . newPullParser () ;  parser . setInput   ( new   ByteArrayInputStream ( xmlFile . getBytes () ) , """"UTF-8"""" ) ;  int   eventType   =  parser . getEventType () ;  while ( eventType   !=   XmlPullParser . END_DOCUMENT  &&   description   ==   null  ) {  if ( eventType   ==   XmlPullParser . START_TAG  &&   parser . getName () . equals ( """"option"""" ) ) {  
@ Test  public   void   nullActual ()   {  JSONPointer   ptr   =  JSONPointer . builder () . append ( """"required"""" ) . append ( """"2"""" ) . build () ;  String   actual   =  buildMessage ( ptr . toURIFragment () ,  null ,  String . class ) ;  assertEquals ( """"#/required/2: expected type: String, found: null"""" ,  actual ) ;  }
public   static   Map < String ,  Object >   setValue ( final   Map < String ,  Object >   map ,  final   String   key ,  final   Object   newValue )   {  return  setValue ( map ,  key ,  ( key1 ,  value )  ->   newValue ) ;  }
@ Test  public   void   testExtends ()   {  CloseFrame   frame   =  new   CloseFrame () ;  assertInstanceOf ( ControlFrame . class ,  frame ,  """"Frame must extend dataframe"""" ) ;  }
public   XmlBuilder   a ( String   attributeName ,  String   value )   {  U . remove ( data ,  path   +   """".""""   +   SELF_CLOSING ) ;  U . set ( data ,  path   +   """".-""""   +   attributeName ,  value ) ;  return  this ;  }
@ Override  public   boolean   playerAddGroup ( String   world ,  String   player ,  String   group )   {  if  ( useOnlySubgroups )   {  return  API . addPlayerSubgroup ( player ,  group ) ;  }   else  {  if  ( """"default"""" . equalsIgnoreCase ( API . getPlayerGroup ( player ) ) )   {  return  API . setPlayerGroup ( player ,  group ) ;  }   else  {  return  API . addPlayerSubgroup ( player ,  group ) ;  }  }  }
public   void   testDeleteUser ()   throws  Exception   {  userMgtClient . deleteUserWithID ( this . userId ) ;  boolean   value   =  userMgtClient . isExistingUserWithID ( userId ) ;  Assert . assertFalse ( value ) ;  
public   ParcelableScanData   createFromParcel ( Parcel   in )   {  int   n   =  in . readInt () ;  ScanData   results []   =  new   ScanData [ n ] ;  for  ( int   i   =  0 ;   i   <   n ;   i ++ )   {  results [ i ]   =   ScanData . CREATOR . createFromParcel ( in ) ;  }  return  new   ParcelableScanData ( results ) ;  }
@ Override   public   int   get ( long   i ,  long   j ,  long   k )   {  return  array [ ( int ) index ( i ,  j ,  k ) ]   &   0xFF ;  }
@ ReactMethod  public   void   getUserMedia ( ReadableMap   constraints ,  Callback   successCallback ,  Callback   errorCallback )   {  ThreadUtils . runOnExecutor ( ()  ->   getUserMediaImpl . getUserMedia ( constraints ,  successCallback ,  errorCallback ) ) ;  }
@ Override  public   boolean   process ( String   option ,  List < String >   arguments )   {  nodeFontClassSize   =   Double . parseDouble ( arguments . get ( 0 ) ) ;  return  true ;  }
static   boolean   match ( Matcher   m ,  Pattern   pat )  {  try  {   m . region ( m . end () ,  m . regionEnd () ) ;   }   catch  ( Exception   _e )   { }  m . usePattern ( pat ) ;  return  m . lookingAt () ;  }
@ Override  public   boolean   has ( Player   player ,  String   permission )   {  return  playerHas ( player . getWorld () . getName () ,  player . getName () ,  permission ) ;  }
@ Test  public   void   testFilters ()  {  JsonInclude . Value   empty   =  JsonInclude . Value . empty () ;  assertNull ( empty . getValueFilter () ) ;  assertNull ( empty . getContentFilter () ) ;  
@ Override  public   boolean   getGroupInfoBoolean ( String   world ,  String   group ,  String   node ,  boolean   defaultValue )   {  Object   pre   =  getGroupInfo ( world ,  group ,  node ) ;  if  ( pre   instanceof   Boolean )   {  return  ( Boolean )   pre ;  }  return  defaultValue ;  }
XmlOrderedResult   isOriginalXmlElementsSorted ()   {  return  xmlProcessor . isXmlOrdered () ;  }
public   void   setAddedAuthorizationDetailsTypes ( List < String >   addedAuthorizationDetailsTypes )   {  this . addedAuthorizationDetailsTypes   =   addedAuthorizationDetailsTypes ;  }
public   boolean   isVisible ()  {  return  visible   &&   clipblock . isVisible ()   &&   clipblock . getClippedContentBounds () . intersects ( getAbsoluteBounds () ) ;  }
@ NonNull  @ Override  public   String   toString ()   {  return  ToStringHelper . name ( """"GoogleSignInAccount"""" )  . field ( """"id"""" ,  id )  . field ( """"tokenId"""" ,  tokenId )  . field ( """"email"""" ,  email )  . field ( """"displayName"""" ,  displayName )  . field ( """"givenName"""" ,  givenName )  . field ( """"familyName"""" ,  familyName )  . field ( """"photoUrl"""" ,  photoUrl )  . field ( """"serverAuthCode"""" ,  serverAuthCode )  . field ( """"expirationTime"""" ,  expirationTime )  . field ( """"obfuscatedIdentifier"""" ,  obfuscatedIdentifier )  . end () ;  }
public   synchronized   void   addDirectory (  final   String   path )   {  addDirectory (  path ,  - 1 ) ;  }
public   PitchbendData   getPitchbends ()   {  return  new   PitchbendData ( pbs ,  pbw ,  pby ,  pbm ,  vibrato ) ;  }
@ Test  public   void   toAndFromNoteNum ()   {  testBothNoteNumConversions ( """"C0"""" ,  12 ) ;  testBothNoteNumConversions ( """"C#0"""" ,  13 ) ;  testBothNoteNumConversions ( """"C1"""" ,  24 ) ;  testBothNoteNumConversions ( """"C#1"""" ,  25 ) ;  testBothNoteNumConversions ( """"F#4"""" ,  66 ) ;  testBothNoteNumConversions ( """"B7"""" ,  107 ) ;  }
@ Override  public   void   onData ( Status   status ,  RecaptchaResultData   data )   throws  RemoteException   {  if  ( status . isSuccess () )   {  completionSource . trySetResult ( data ) ;  }   else  {  completionSource . trySetException ( new   RuntimeException ( status . getStatusMessage () ) ) ;  }  }
@ Test  void   testSortDifferentClassPath ()   {  SortPomImplUtil . create ()  . customSortOrderFile ( """"difforder/differentOrder.xml"""" )  . testFiles ( """"/full_unsorted_input.xml"""" ,  """"/full_differentorder_expected.xml"""" ) ;  }
@ Test  public   void   heterogeneousValues_transformToStrings ()   {  assertThat ( ( String [] ) GraphUtil . getNewPropertyValue ( 1 ,  """"2"""" ) ,  is ( new   Object [] { """"1"""" ,  """"2"""" } ) ) ;  }
@ DataProvider ( name   =   """"federatedTokenSharingParams"""" )  public   static   Object [] []   federatedTokenSharingParams ()   {  return  new   Object [] [] { { """" when IDP config is enabled, application requested the federated token"""" ,  """"true"""" } , { """" when IDP config is enabled, application did not request the federated token"""" ,  """"false"""" } } ;  }
public   String   getHiveJdbcUrl ( String   datasource )   {  return  environment . getRequiredProperty ( """"hive.jdbc.url.""""   +   datasource ) ;  }
public   void   reset ()  {  next_order   =   0 ;  overflowPropagated   =   false ;  }
private   void   setUpTitle ()   {  getActivity () . setTitle ( R . string . preference_title_upload_settings ) ;  }
public   static   void   cancelJob ( Context   context )   {  JobScheduler   js   =  context . getSystemService ( JobScheduler . class ) ;  js . cancel ( JobIds . PHOTOS_CONTENT_JOB ) ;  }
public   void   writeParameters ( String   filename )   {  FileStorage   fs   =  new   FileStorage ( filename ,  FileStorage . WRITE ) ;  writeParameters ( fs ) ;  fs . release () ;  }
public   static   String   toJson ( Collection   collection ,  JsonStringBuilder . Step   identStep )   {  final   JsonStringBuilder   builder   =  new   JsonStringBuilder ( identStep ) ;  JsonArray . writeJson ( collection ,  builder ) ;  return  builder . toString () ;  }
@ Before  public   void   setUp ()   {  cacheApiMock   =   mock ( SyncCacheApi . class ) ;  store   =   new   PlayCacheSessionStore ( cacheApiMock ) ;  context   =   mock ( PlayWebContext . class ) ;  session   =   mock ( Http . Session . class ) ;  when ( context . getNativeSession () ) . thenReturn ( session ) ;  }
public   void   setSize ( float   w ,  float   h )  {  bounds . setSize ( w ,  h ) ;  }
public   static   < E >   E   singleOrNull ( final   Iterable < E >   iterable )   {  Iterator < E >   iterator   =  iterable . iterator () ;  if  ( ! iterator . hasNext () )   {  return  null ;  }  E   result   =  iterator . next () ;  if  ( iterator . hasNext () )   {  result   =   null ;  }  return  result ;  }
@ DataProvider ( name   =   """"userProviderWithChannel"""" )  private   Object [] []   userProviderWithChannel ()   {  
public   UserSharedOrganizationsResponse   addSharedOrganizationsItem ( UserSharedOrganizationsResponseSharedOrganizations   sharedOrganizationsItem )   {  if  ( this . sharedOrganizations   ==   null )   {  this . sharedOrganizations   =   new   ArrayList <> () ;  }  this . sharedOrganizations . add ( sharedOrganizationsItem ) ;  return  this ;  }
default   Spi   create ( SpiConfigBuilder   config )   {  return  create ( config . build () ) ;  }
@ SuppressWarnings ( """"MissingPermission"""" )  @ JavascriptInterface  public   final   String   getAccounts ()   {  Log . d ( TAG ,  """"JSBridge: getAccounts"""" ) ;  Account []   accountsByType   =  accountManager . getAccountsByType ( accountType ) ;  JSONArray   json   =  new   JSONArray () ;  for  ( Account   account   :  accountsByType )   {  json . put ( account . name ) ;  }  return  json . toString () ;  }
public   void   setTemplates ( List < EmailTemplateWithID >   templates )   {  this . templates   =   templates ;  }
default   < T   extends  Pwm >   T   create ( Integer   address ,  String   id ,  String   name ,  String   description )   {  var   config   =  Pwm . newConfigBuilder ( context () )  . address ( address )  . id ( id )  . name ( name )  . description ( description )  . build () ;  return  ( T ) create ( config ) ;  }
public   static   boolean   changeLanguage ( Context   context ,  String   langCode )  {  if ( ! langCode . equals ( Constants . PREFS_LANGUAGES_DEFAULT ) )  {  Resources   res   =  context . getResources () ;  Configuration   conf   =  res . getConfiguration () ;  String   lang   =  conf . locale . getLanguage () ;  String   country   =  conf . locale . getCountry () ;  
private   Header []   getHeadersWithBearerToken ( String   accessToken )   {  Header []   headerList   =  new   Header [ 2 ] ;  headerList [ 0 ]   =   new   BasicHeader ( AUTHORIZATION_ATTRIBUTE ,  BEARER_TOKEN_AUTHORIZATION_ATTRIBUTE   +   accessToken ) ;  headerList [ 1 ]   =   new   BasicHeader ( CONTENT_TYPE_ATTRIBUTE ,  String . valueOf ( ContentType . JSON ) ) ;  return  headerList ;  }
public   SAMLResponseSigning   signingAlgorithm ( String   signingAlgorithm )   {  this . signingAlgorithm   =   signingAlgorithm ;  return  this ;  }
protected   void   initializeZeroArr ( Integer []   arr )   {  for  (  int   i   =  0 ;   i   <   arr . length ;   i   ++  )   {  arr [ i ]   =   Integer . valueOf ( 0 ) ;  }  }
public   SchemaLoader   build ()   {  specVersionInSchema () . ifPresent ( this :: setSpecVersion ) ;  addBuiltInFormatValidators () ;  return  new   SchemaLoader ( this ) ;  }
public   static   com . google . android . gms . fitness . data . Field   createMapField ( String   name )   {  return  new   com . google . android . gms . fitness . data . Field ( name ,  FORMAT_MAP ) ;  }
public   JsonStringBuilder   incIndent ()   {  indent   +=   identStep . getIndent () ;  return  this ;  }
@ Override  public   final   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( ! ( o   instanceof   StreetViewPanoramaOrientation ) )   return  false ;  StreetViewPanoramaOrientation   that   =  ( StreetViewPanoramaOrientation )   o ;  return  tilt   ==   that . tilt   &&   bearing   ==   that . bearing ;  }
public   AssertableList   isOfSize ( final   int   size )   {  assertThat ( myActualList . size () ,  Is . is ( size ) ) ;  return  this ;  }
public   String []   getAllClaimUris ()   throws  Exception   {  return  stub . getAllLocalClaimUris () ;  }
public   static   Optional < Document >   findDocumentFromPsiFile ( PsiFile   psiFile )   {  Project   project   =  psiFile . getProject () ;  return  Optional . ofNullable ( PsiDocumentManager . getInstance ( project ) . getDocument ( psiFile ) ) ;  }
private   void   checkAuthorizationCode ( String   sessionDataKeyConsent )   throws  Exception   {  HttpResponse   response   =  sendApprovalPost ( client ,  sessionDataKeyConsent ) ;  Assert . assertNotNull ( response ,  """"Approval response is invalid."""" ) ;  Header   locationHeader   =  response . getFirstHeader ( OAuth2Constant . HTTP_RESPONSE_HEADER_LOCATION ) ;  String   locationHeaderValue   =  locationHeader . getValue () ;  Assert . assertNotNull ( locationHeader ,  """"Approval Location header is null."""" ) ;  String   authorizationCodeString   =  StringUtils . substringAfterLast ( locationHeaderValue ,  """"?code="""" ) ;  
@ Test  public   void   matchCompilationUnits_variablesWithDifferentTypes ()   {  ParseResult   actual   = MoreTrees . parseLines ( """"package test;"""" , """"public class HasExtras { """" , """"  private Object field;"""" , """"}"""" ) ;  ParseResult   pattern   = MoreTrees . parseLines ( """"package test;"""" , """""""" , """"public class HasExtras { """" , """"  private String field;"""" , """"}"""" ) ;  TreeDifference   diff   = TreeDiffer . matchCompilationUnits ( getOnlyElement ( pattern . compilationUnits () ) , pattern . trees () , getOnlyElement ( actual . compilationUnits () ) , actual . trees () ) ;  assertThat ( diff . getDifferingNodes () ) . isNotEmpty () ;  }
@ DataBoundSetter  public   void   setEither ( String   name )   {  this . name   =   name ;  setTypeIfUndefined ( AuthorizationType . EITHER ) ;  }
private   void   setupUIElements ()   {  setTitle ( getString ( R . string . app_title ) ) ;  setHeadersState ( HEADERS_ENABLED ) ;  setHeaderPresenter () ;  setHeadersTransitionOnBackEnabled ( true ) ;  setBrandColor ( Color . parseColor ( """"#0277bd"""" ) ) ;  setSearchAffordanceColor ( Color . GREEN ) ;  }
@ Override  public   Task < String >   getResults ( String   flow ,  Map < String ,  String >   data ,  DroidGuardResultsRequest   request )   {  DroidGuardResultsRequest   finalRequest   =  request   !=   null  ?   request   :  new   DroidGuardResultsRequest () ;  return  scheduleTask ( ( ReturningGoogleApiCall < String ,  DroidGuardApiClient > )   client  ->  {  DroidGuardHandle   handle   =  client . openHandle ( flow ,  finalRequest ) ;  String   results   =  handle . snapshot ( data ) ;  handle . close () ;  return  results ;  } ) ;  }
@ Test  public   void   testCaseStartedEvent ()   throws  Exception   {  new   TestCaseStartedEvent ( """"suite.uid"""" ,  """"name"""" ) . process ( testCase ) ;  verify ( testCase ) . setName ( """"name"""" ) ;  verify ( testCase ) . setTitle ( null ) ;  verify ( testCase ) . setDescription ( null ) ;  verify ( testCase ) . setLabels ( Collections . < Label > emptyList () ) ;  verify ( testCase ) . setStart ( anyLong () ) ;  verify ( testCase ) . setStatus ( Status . PASSED ) ;  verifyNoMoreInteractions ( testCase ) ;  }
public   boolean   destroyCamera ()  {  return  CLEyeDestroyCamera ( cameraInstance ) ;  }
public   FormValidation   doCheckBlue ( @ QueryParameter   String   value )   {  return  validateColorLiteral ( value ) ;  }
@ Test  public   void   doText_shouldReturnProjectIconWhenJobHasNotRun ()   throws  IOException   {  PublicBuildStatusAction   action   =  new   PublicBuildStatusAction () ;  String   result   =  action . doText ( null ,  null ,  job . getName () ,  null ) ;  assertThat ( result ,  is ( job . getIconColor () . getDescription () ) ) ;  assertThat ( result ,  is ( """"Not built"""" ) ) ;  }
@ Override  public   final   Object   clone ()   {  return  ObjectCloner . deepCopy ( this ) ;  }
public   synchronized   int   getNextTransceiverId ()   {  return  transceiverNextId ++ ;  }
private   String   getUploadShareName ()   {  return  PreferenceManager . getDefaultSharedPreferences ( context )  . getString ( context . getString ( R . string . preference_key_upload_share ) ,  null ) ;  }
static   TypeHelper   getListInnerTypeHelper ( DataMap . StoredType   type )   {  return  getTypeHelper ( type . getListType () ) ;  }
@ Test  void   worksWithoutWebflux ()   {  contextRunner . withClassLoader ( new   FilteredClassLoader ( """"org.springframework.web.reactive"""" ) ) . run ( context  ->  {  assertThat ( context ) . doesNotHaveBean ( ReactiveDiscoveryClient . class ) ;  assertThat ( context ) . doesNotHaveBean ( ReactiveDiscoveryClientHealthIndicator . class ) ;  } ) ;  }
@ Override  public   Optional < String >   extractSecurityNameFromSecurityItem ( final   PsiElement   psiElement )   {  return  Optional . of ( psiElement )  . map ( PsiElement :: getChildren )  . map ( children  ->   children . length   >   0  ?   children [ 0 ]   :  null )  . map ( PsiElement :: getChildren )  . map ( children  ->   children . length   >   0  ?   children [ 0 ]   :  null )  . filter ( el  ->   el   instanceof   YAMLKeyValue )  . map ( YAMLKeyValue . class :: cast )  . map ( YAMLKeyValue :: getName ) ;  }
@ Override  public   TaskStatus   status ( String   id )   {  ThinJarAppWrapper   wrapper   =  super . getWrapper ( id ) ;  if  ( wrapper   !=   null )   {  return  new   TaskStatus ( id ,  wrapper . getState () ,  Collections . < String ,  String > emptyMap () ) ;  }  return  null ;  }
public   void   addChanged ( ChangedSecurityScheme   changedSecurityScheme )   {  changed . add ( changedSecurityScheme ) ;  }
public   String   getPropNullSensitive ( final   String   aKey )   {  final   String   tmpValue   =  getProperty ( aKey ) ;  return  NS_NULL_VALUE . equals ( tmpValue )  ?   null   :  tmpValue ;  }
public   void   setFrameGrabbers ( FrameGrabber []   frameGrabbers )   {  this . frameGrabbers   =   frameGrabbers ;  grabbedFrames   =   new   Frame [ frameGrabbers . length ] ;  latencies   =   new   long [ frameGrabbers . length ] ;  bestLatencies   =   null ;  lastNewestTimestamp   =   0 ;  }
public   ApplicationModel   authenticationSequence ( AuthenticationSequence   authenticationSequence )   {  this . authenticationSequence   =   authenticationSequence ;  return  this ;  }
public   static   List < String >   flattenCatValGrp ( String   categoricalValGrp )   {  List < String >   catVals   =  new   ArrayList < String > () ;  if ( StringUtils . isNotBlank ( categoricalValGrp ) )   {  for ( String   cval :  Splitter . on ( Constants . CATEGORICAL_GROUP_VAL_DELIMITER ) . split ( categoricalValGrp ) )   {  catVals . add ( cval ) ;  }  }  return  catVals ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   static   < E >   E []   compact ( final   E ...   array )   {  return  ( E [] )   compact ( Arrays . asList ( array ) ) . toArray () ;  }
@ Test  public   void   thatSecurityFieldsInRootAreSuggested ()   {  getCaretCompletions ( """"security_in_root"""" ) . assertContains ( """"githubAccessCode"""" ) . isOfSize ( 1 ) ;  }
@ Override  boolean   doHandle ( Request   request ,  Response   response ,  Callback   callback )   throws  IOException   {  assertEquals ( """"POST"""" ,  request . getMethod () ) ;  String   requestBody   =  requestBody ( request ) ;  assertEquals ( """"TestRequestBody"""" ,  requestBody ) ;  return  okAllIsWell ( response ,  callback ) ;  }
public   void   testUnknownFileRef ()   {  doTest ( """"unknown_file_format.json"""" ) ;  }
@ ParameterizedTest  @ MethodSource ( """"parametersForTestBasicStructure"""" )  final   void   testBasicStructure ( final   List < FieldValueMapping >   schemaAsJson ,  final   String   expected )   {  final   SchemaProcessor   jsonSchemaProcessor   =  new   SchemaProcessor () ;  jsonSchemaProcessor . processSchema ( SchemaTypeEnum . JSON ,  null ,  null ,  schemaAsJson ) ;  final   ObjectNode   message   =  ( ObjectNode )   jsonSchemaProcessor . next () ;  JSONAssert . assertEquals ( message . toString () ,  expected ,  JSONCompareMode . STRICT ) ;  }
@ Override  public   RuntimeRegistry   initialize ()   throws  InitializeException   {  
@ Override  public   String   toString ()   {  return  new   StringBuilder ( """"EurekaInstanceRenewedEvent{"""" ) . append ( """"appName='"""" )  . append ( appName )  . append ( """"', """" )  . append ( """"serverId='"""" )  . append ( serverId )  . append ( """"', """" )  . append ( """"instanceInfo="""" )  . append ( instanceInfo )  . append ( """", """" )  . append ( """"replication="""" )  . append ( replication )  . append ( """"}"""" )  . toString () ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( orgId ,  orgName ,  sharedUserId ,  sharedType ,  rolesRef ) ;  }
public   TrustedAppConfiguration   isFIDOTrustedApp ( Boolean   isFIDOTrustedApp )   {  this . isFIDOTrustedApp   =   isFIDOTrustedApp ;  return  this ;  }
@ Test  public   void   thatParametersCollectionFormatValuesAreSuggested ()   {  getCaretCompletions ( """"parameters_collection_format"""" )  . assertContains ( """"csv"""" ,  """"ssv"""" ,  """"tsv"""" ,  """"pipes"""" ,  """"multi"""" )  . isOfSize ( 5 ) ;  }
@ Override   public   DoubleIndexer   put ( long []   indices ,  double []   d ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  putRaw ( index ( indices )   +   n ,  d [ offset   +   n ] ) ;  }  return  this ;  }
public   static   DisplayMode   getDisplayMode ( int   screenNumber )   {  GraphicsDevice []   screens   =  getScreenDevices () ;  if  ( screenNumber   >=   0   &&   screenNumber   <   screens . length )   {  return  screens [ screenNumber ] . getDisplayMode () ;  }   else  {  return  null ;  }  }
@ Override  public   void   evaluate ()   throws  Throwable   {  EvaluatingProcessor   evaluatingProcessor   =  new   EvaluatingProcessor ( base ) ;  Compilation   compilation   =  javac () . withProcessors ( evaluatingProcessor ) . compile ( DUMMY ) ;  checkState ( compilation . status () . equals ( SUCCESS ) ,  compilation ) ;  evaluatingProcessor . throwIfStatementThrew () ;  }
private   void   mockJenkins ( MockedStatic < Jenkins >   mockedJenkins )   {  Jenkins   jenkins   =  Mockito . mock ( Jenkins . class ) ;  mockedJenkins . when ( Jenkins :: get ) . thenReturn ( jenkins ) ;  Mockito . when ( jenkins . getSecurityRealm () ) . thenReturn ( securityRealm ) ;  Mockito . when ( securityRealm . getDescriptor () ) . thenReturn ( descriptor ) ;  Mockito . when ( descriptor . getDefaultGithubWebUri () ) . thenReturn ( """"https:
public   OAuthConsumerAppDTO   getBasicOAuthApp ( String   callBackURL )   {  OAuthConsumerAppDTO   appDTO   =  new   OAuthConsumerAppDTO () ;  appDTO . setApplicationName ( OAUTH_APPLICATION_NAME ) ;  appDTO . setCallbackUrl ( callBackURL ) ;  appDTO . setOAuthVersion ( OAuth2Constant . OAUTH_VERSION_2 ) ;  appDTO . setGrantTypes ( """"authorization_code implicit password client_credentials refresh_token"""" ) ;  return  appDTO ;  }
public   static   byte []   asBytes ( int ...   ints )   {  byte []   bytes   =  new   byte [ ints . length ] ;  for  ( int   i   =  0 ;   i   <   ints . length ;   i ++ )   {  int   value   =  ints [ i ] ;  bytes [ i ]   =   ( byte )   value ;  }  return  bytes ;  }
private   void   writeDiffAsTextToFile ( final   ChangedOpenApi   diff )   {  writeToFile ( new   ConsoleRender () ,  diff ,  consoleOutputFileName ) ;  }
public   String   getPrestoCoordinatorServerOrNull ( String   datasource )   {  return  environment . getProperty ( """"presto.coordinator.server.""""   +   datasource ) ;  }
@ Override  public   String   toValue ( Dynamic   value ) {  return  value . asString () ;  }
@ Override  public   int   compareTo ( @ NotNull   Object   that )   {  return  Objects . equal ( this , that ) ?   0  :  - 1 ;  }
public   DateTime   endedAt ( DateTime   now )   {  return  now . minusHours ( hoursAgo ) ;  }
@ Override  public   void   describeTo ( Description   description )   {  description . appendText ( """"contains file """" ) . appendValue ( fileName ) ;  }
public   < F   extends  Comparable < ?   super  F > >   Chain < T >   sortBy ( final   Function < T ,  F >   func )   {  return  new   Chain <> ( Underscore . sortBy ( list ,  func ) ) ;  }
private   static   java . math . BigInteger   sum ( java . math . BigInteger   first ,  java . math . BigInteger   second )   {  return  first . add ( second ) ;  }
@ Override  public   Set < String >   scan ( Tree   node ,  @ Nullable   Void   v )   {  return  firstNonNull ( super . scan ( node ,  v ) ,  ImmutableSet . < String > of () ) ;  }
@ Deprecated  public   static   int   targetSdkVersion ( Context   context ,  String   packageName )   {  return  new   ExtendedPackageInfo ( context ,  packageName ) . getTargetSdkVersion () ;  }
@ Override  public   void   onCreate ()   {  setUpTheme () ;  super . onCreate () ;  instance   =   this ;  setUpDetecting () ;  setUpActivityCallbacks () ;  setUpInjections () ;  if  ( Build . VERSION . SDK_INT   >=   Build . VERSION_CODES . O )   {  createNotificationChannel () ;  }  if  ( Build . VERSION . SDK_INT   >=   Build . VERSION_CODES . N )   {  setUpJobs () ;  }  }
@ Override  protected   void   dump ( FileDescriptor   fd ,  PrintWriter   writer ,  String []   args )   {  writer . println ( """"Started: """"   +   new   Date ( start ) ) ;  }
public   boolean   childOfHeadersCollectionFormat ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.*.*.*.responses.*.headers.*.collectionFormat"""" ) ;  }
public   void   setColorWhiteBalance ( int   value )   {  setOption ( RealSense . RS_OPTION_COLOR_WHITE_BALANCE ,  value ) ;  }
public   void   setMetadata ( String   key ,  String   value )   {  metadata . put ( key ,  value ) ;  }
public   void   setSnapshotDate ( DateTime   snapshotDate )   {  this . snapshotDate   =   snapshotDate ;  snapshotDateSetAt   =   DateTime . now () ;  updateZone () ;  }
public   double   getAverage ()   {  int   curIndex   =  ( int )   ( this . totalCount   -   1 )   %   this . capacity ;  return  this . queueArray [ curIndex ] ;  }
@ Override  public   void   renderReplacedContent ( ReplacedBox   box )   {  ReplacedContent   cont   =  box . getContentObj () ;  if  ( cont   !=   null )   {  if  ( cont   instanceof   ReplacedImage )   {  ContentImage   img   =  ( ( ReplacedImage )   cont ) . getImage () ;  if  ( img   !=   null )   {  if  ( img   instanceof   BitmapImage )   {  insertReplacedImage ( box ,  img ) ;  }  }  }   else if  ( cont   instanceof   ReplacedText )   { 
private   String   repeat ( String   s ,  int   times )   {  return  s . repeat ( Math . max ( 0 ,  times ) ) ;  }
public   JustInTimeProvisioning   associateLocalUser ( Boolean   associateLocalUser )   {  this . associateLocalUser   =   associateLocalUser ;  return  this ;  }
public   static   Path   getTestingFile ()   throws  IOException   {  Path   testingFile   =  new   Path ( getTmpDir () ,  NNConstants . TESTING_EGB ) ;  if ( HDFSUtils . getLocalFS () . exists ( testingFile ) )   {  if ( ! HDFSUtils . getLocalFS () . delete ( testingFile ,  true ) )   {  throw  new   RuntimeException ( """"error in deleting testing file"""" ) ;  }  }  return  testingFile ;  }
public   final   double   getThresholdLow ()   {  return  this . params [ ActivationReLU . PARAM_RELU_LOW_THRESHOLD ] ;  }
@ Test ( alwaysRun   =   true ,  groups   =   """"wso2.is"""" ,  description   =   """"Test after enabling self registration but for an """"   +  """"already taken username"""" )  public   void   testAfterEnablingSelfRegistrationInvalidUser ()   throws  Exception   {  updateResidentIDPProperty ( superTenantResidentIDP ,  ENABLE_SELF_REGISTRATION_PROP_KEY ,  """"true"""" ,  true ) ;  String   content   =  doCallSignUpDo ( ADMIN ) ;  Assert . assertTrue ( content . contains ( String . format ( ERROR_MESSAGE_USERNAME_TAKEN ,  ADMIN ) ) ) ;  }
@ Override  public   String   toString ()   {  return  pathToFile   +   """" """"   +   offset   +   """" """"   +   consonant   +   """" """"   +   cutoff   +   """" """"   +   preutterance   +   """" """"  +   overlap ;  }
public   void   setAltCommands ( Set < String >   altCommands )   {  this . altCommands   =   altCommands ;  }
@ Override  public   final   Schema   parse ( final   String   jsonSchema )   {  definitionsMap . clear () ;  final   Schema   schema ;  try  {  schema   =   parse ( mapper . readTree ( jsonSchema ) ) ;  }   catch  ( final   IOException   e )   {  throw  new   KLoadGenException ( ERROR_WRONG_JSON_SCHEMA ,  e ) ;  }  return  schema ;  }
@ Nls  @ NotNull  @ Override  public   String   getGroupDisplayName ()   {  return  """"SonarQube (new issues)"""" ;  }
@ Test  public   void   testMeasureText ()   throws  Exception   {  StatusImage   statusImage   =  new   StatusImage () ;  assertThat ( statusImage . measureText ( """"W"""" ) ,  is ( 9 ) ) ;   
private   SortedSet < RoleDefinition >   getRoleDefinitions ( @ CheckForNull   SortedMap < Role ,  Set < PermissionEntry > >   roleMap )   {  if  ( roleMap   ==   null )   {  return  Collections . emptySortedSet () ;  }  return  new   TreeSet <> ( roleMap . entrySet () . stream () . map ( getRoleDefinition () ) . collect ( Collectors . toSet () ) ) ;  }
@ Test  public   void   toString_uri_noPointer ()   {  SchemaLocation   underTest   =  new   SchemaLocation ( uri ( """"http:
private   static   double   parseDouble ( String   str ,  double   dVal )   {  try  {  return  Double . parseDouble ( str ) ;  }   catch  ( Exception   e )   {  return  dVal ;  }  }
public   File   createRenderedCache ()   {  File   renderedCache   =  new   File ( cachePath ,  UUID . randomUUID ()   +   """"_rendered.wav"""" ) ;  renderedCache . deleteOnExit () ;  return  renderedCache ;  }
@ SuppressWarnings ( """"deprecation"""" )  private   void   updateProgressLog ( final   MasterContext < NNParams ,  NNParams >   context )   {  int   currentIteration   =  context . getCurrentIteration () ;  if ( context . isFirstIteration () )   {  
@ Test  public   void   commandViewTest ()   {  collection . command_v ( """"b"""" ) ;  assertTrue ( outContent . toString () . contains ( """"Backpack"""" ) ) ;  collection . command_v ( """"s"""" ) ;  assertTrue ( outContent . toString () . contains ( """"Player name:"""" ) ) ;  collection . command_v ( """"e"""" ) ;  assertTrue ( outContent . toString () . contains ( """"Equipped Items:"""" ) ) ;  }
@ Test  public   void   ipv4NullFailure ()   {  assertFailure ( null ,  new   IPV4Validator () ,  """"[null] is not a valid ipv4 address"""" ) ;  }
@ Test  public   void   testAddSmsSenderWithUndefinedSmsProvider ()   throws  IOException   {  String   body   =  readResource ( """"add-sms-sender-invalid-provider.json"""" ) ;  Response   response   = getResponseOfPost ( NOTIFICATION_SENDER_API_BASE_PATH   +   PATH_SEPARATOR   +   SMS_SENDERS_PATH ,  body ) ;  validateErrorResponse ( response ,  HttpStatus . SC_BAD_REQUEST ,  """"NSM-60004"""" ) ;  }
@ Override  public   void   onCreate ( SQLiteDatabase   db )   {  db . execSQL ( """"CREATE TABLE main (name TEXT PRIMARY KEY, value TEXT)"""" ) ;  db . execSQL ( """"CREATE TABLE overrides (name TEXT PRIMARY KEY, value TEXT)"""" ) ;  db . execSQL ( """"CREATE TABLE saved_system (name TEXT PRIMARY KEY, value TEXT)"""" ) ;  db . execSQL ( """"CREATE TABLE saved_secure (name TEXT PRIMARY KEY, value TEXT)"""" ) ;  }
public   ApplicationPatchModel   description ( String   description )   {  this . description   =   description ;  return  this ;  }
@ Test ( dependsOnMethods   =   """"testPatchAddUserAttributes"""" ,  description   =   """"Tests delete user operation using /Users """"   +  """"api."""" )  public   void   testDeleteUser ()   throws  Exception   {  getResponseOfDelete ( userIdEndpointURL ,  SCIM_CONTENT_TYPE ) . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT ) ;  getResponseOfGet ( userIdEndpointURL ,  SCIM_CONTENT_TYPE ) . then () . assertThat () . statusCode ( HttpStatus . SC_NOT_FOUND ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( schemas ,  Operations ) ;  }
public   ServiceMetaDataWrapper   listServices ( String   serviceName )  throws  RemoteException   {  ServiceMetaDataWrapper   serviceMetaDataWrapper ;  serviceMetaDataWrapper   =   serviceAdminStub . listServices ( """"ALL"""" ,  serviceName ,  0 ) ;  serviceAdminStub . getFaultyServiceArchives ( 0 ) ;  return  serviceMetaDataWrapper ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   clearObjects ()   throws  Exception   {  deleteObjects () ;  clear () ;  }
@ Test  public   void   getNode_nothingReturnedForNonExisting ()   {  Optional < String >   empty   =  Optional . empty () ;  Optional < Node >   node   =  graphApi . getNode ( """"z"""" ,  empty ) ;  assertThat ( node . isPresent () ,  is ( false ) ) ;  }
@ Test  void   canParseActionSingleStart ()   {  final   MarkupText   markupText   =  new   MarkupText ( """"Log line"""" ) ;  markupText . addMarkup ( 0 ,  TAG_ACTION_BEGIN   +   """"\""""""""   +   ACTION_1 . getId ()   +   """"\""""""""   +   TAG_ACTION_END ) ;  assertEquals ( ACTION_1 ,  ColorizedAction . parseAction ( markupText ,  buildRunSingleStart ) ) ;  }
private   boolean   isRoleExist ( String   values [] ,  String   targetValue )   {  return  Arrays . asList ( values ) . contains ( targetValue ) ;  }
static   DigitalOutputBuilder   newBuilder ( Context   context ) {  return  DigitalOutputBuilder . newInstance ( context ) ;  }
@ Override  public   Fragment   getItem ( int   position )   {  return  Fragments . Builder . buildServerFileImageFragment ( share ,  files . get ( position ) ) ;  }
@ Override  public   synchronized   boolean   isConnecting ()   {  for  ( Api . Client   connection   :  apiConnections . values () )   {  if  ( connection . isConnecting () )   return  true ;  }  return  false ;  }
static   void   copy8Bytes ( byte []   src ,  int   sOff ,  byte []   dest ,  int   dOff )   {  for  ( int   i   =  0 ;   i   <   8 ;   ++ i )   {  dest [ dOff   +   i ]   =   src [ sOff   +   i ] ;  }  }
@ NonNull  @ Override  public   String   toString ()   {  return  ToStringHelper . name ( """"AppSetIdRequestParams"""" ) . field ( """"version"""" ,  version ) . field ( """"clientAppPackageName"""" ,  clientAppPackageName ) . end () ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"rule"""" )  @ Valid  public   ORRule   getRule ()   {  return  rule ;  }
public   static   String   pad ( String   data ,  int   length )   {  return  pad ( data ,  DEFAULT_PAD_CHAR ,  length ) ;  }
@ Override  public   void   load ( CompoundTag   tag )  {  super . load ( tag ) ;  ContainerHelper . loadAllItems ( tag ,  this . inventory ) ;  }
 <argument pos:start=""""""""98:68"""""""" pos:end=""""""""98:68""""""""><expr pos:start=""""""""98:68"""""""" pos:end=""""""""98:68""""""""><literal type=""""""""number"""""""" pos:start=""""""""98:68"""""""" pos:end=""""""""98:68"""""""">1</literal></expr></argument>
@ Nullable  @ Override  public   AuthenticationExtensions   getAuthenticationExtensions ()   {  return  authenticationExtensions ;  }
public   ChangedOpenApi   setChangedExtensions ( final   ChangedExtensions   changedExtensions )   {  this . changedExtensions   =   changedExtensions ;  return  this ;  }
@ Override  public   Iterator < Map < String ,  String > >   iterator ()   {  return  new   CvsFileIterator ( filePath ,  delimiter ,  removeNS ) ;  }
public   static   DataMap   readDataMap ( byte []   bytes ,  List < Asset >   assets )   {  try  {  return  readDataMap ( DataBundle . ADAPTER . decode ( bytes ) ,  assets ) ;  }   catch  ( IOException   e )   {  throw  new   RuntimeException ( e ) ;  }  }
@ Override  public   StreamCodec < RegistryFriendlyByteBuf ,  List < MobEffectInstance > >   streamCodec ()   {  return  STREAM_CODEC ;  }
private   void   setActiveBottomDot ( int   currentPage )   {  int   colorInactive   =  MaterialColors . getColor ( this ,  R . attr . colorPrimary ,  Color . BLUE ) ;  int   colorActive   =  MaterialColors . getColor ( this ,  R . attr . colorSecondary ,  Color . BLUE ) ;  for  ( TextView   mDot   :  mDots )   {  mDot . setTextColor ( colorInactive ) ;  }  mDots [ currentPage ] . setTextColor ( colorActive ) ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init ( samlConfigOne . getUserMode () ) ;  super . testInit () ;  userId   =   super . addUser ( samlConfigOne ) ;  appOneId   =   super . addApplication ( samlConfigOne ,  APPLICATION_ONE ) ;  appTwoId   =   super . addApplication ( samlConfigTwo ,  APPLICATION_TWO ) ;  logViewer   =   new   LogViewerClient ( backendURL ,  sessionCookie ) ;  changeISConfiguration () ;  }
@ Override  public   void   close ()   {  logger . trace ( """"invoked 'closed()'"""" ) ;  this . isOpen   =   false ;  }
public   void   setProviderURL ( String   providerURL )   {  this . providerURL   =   providerURL ;  }
@ Test  void   testOverlined ()   throws  IOException   {  assertThatAnnotateIs ( """"\033[53mhello world\033[55mnormal"""" ,  """"<span style=\""""text-decoration: overline;\"""">hello world</span>normal"""" ) ;  }
@ Test  void   lenientMode_expectedInteger_actualString ()   {  ValidatingVisitor   subject   =  createValidatingVisitor ( """"2"""" ,  LENIENT ) ;  subject . ifPassesTypeCheck ( Integer . class ,  true ,  Boolean . TRUE ,  onPassConsumer () ) ;  verify ( onPassConsumer () ) . accept ( 2 ) ;  }
private   void   updateCleanoutDays ( String   newValue )   {  mArguments . putString ( """"cleanoutDays"""" ,  newValue ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( name ,  smtpServerHost ,  smtpPort ,  fromAddress ,  userName ,  password ,  properties ) ;  }
@ Override  public   int   getPriority ( Class < ?   extends  DatabaseObject >   objectType ,  Database   database )   {  if  ( UniqueConstraint . class . isAssignableFrom ( objectType ) )   {  return  PRIORITY_ADDITIONAL ;  }  return  PRIORITY_NONE ;  }
public   void   replaceWith ( ServerShare   serverShare ,  List < ServerFile >   files )   {  this . files   =   files ;  this . filteredFiles   =   files ;  this . serverShare   =   serverShare ;  notifyDataSetChanged () ;  }
@ Override  HandleScheduledBackups   getHandleScheduledBackups ()   {  return  handleScheduledBackups ;  }
public   DirectionsApiRequest   transitMode ( TransitMode ...   transitModes )   {  return  param ( """"transit_mode"""" ,  join ( '|' ,  transitModes ) ) ;  }
@ Test  @ Timeout ( 5000 )  public   void   testHandshakeRejectionTestCase6 ()   throws  Exception   {  testProtocolRejection ( 6 ,  new   Draft_6455 ( Collections . < IExtension > emptyList () , Collections . < IProtocol > singletonList ( new   Protocol ( """"chat"""" ) ) ) ) ;  }
private   void   setUploadLocation ( String   location )   {  SharedPreferences   preferences   =  PreferenceManager . getDefaultSharedPreferences ( getActivity () ) ;  if  ( location . isEmpty () )   {  getPreference () . setSummary ( getString ( R . string . preference_summary_location ) ) ;  }   else  {  setUploadLocationSummary ( location ) ;  }  preferences . edit () . putString ( getString ( R . string . preference_key_upload_location ) ,  location ) . apply () ;  }
public   static   LongIndexer   create ( long []   array ,  Index   index )   {  return  new   LongArrayIndexer ( array ,  index ) ;  }
@ Override  public   int   getPriority ( Class < ?   extends  DatabaseObject >   objectType ,  Database   database )   {  if  ( ForeignKey . class . isAssignableFrom ( objectType ) )   {  return  PRIORITY_ADDITIONAL ;  }  return  PRIORITY_NONE ;  }
@ EventHandler ( priority   =   EventPriority . MONITOR )  public   void   onPluginDisable ( PluginDisableEvent   event )   {  if  ( this . chat . chat   !=   null )   {  if  ( event . getPlugin () . getDescription () . getName () . equals ( """"bPermissions"""" ) )   {  this . chat . chat   =   null ;  log . info ( String . format ( """"[%s][Chat] %s un-hooked."""" ,  plugin . getDescription () . getName () ,  """"bPermissions"""" ) ) ;  }  }  }
public   static   LOGOUTMETHODEnum   fromValue ( String   value )   {  for  ( LOGOUTMETHODEnum   b   :  LOGOUTMETHODEnum . values () )   {  if  ( b . value . equals ( value ) )   {  return  b ;  }  }  throw  new   IllegalArgumentException ( """"Unexpected value '""""   +   value   +   """"'"""" ) ;  }
@ SetEnvironment ( executionEnvironments   =   { ExecutionEnvironment . ALL } )  @ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Check get shared of current user"""" ,  dependsOnMethods   =   """"testChangePassword"""" )  public   void   testGetRolesOfCurrentUser ()   throws  Exception   {  super . testGetRolesOfCurrentUser () ;  }
private   void   onSingleClick ( PointF   curr )   {  last . set ( curr ) ;  start . set ( last ) ;  mode   =   State . DRAG ;  }
public   List < T >   invoke ( final   String   methodName ,  final   List < Object >   args )   {  return  invoke ( iterable ,  methodName ,  args ) ;  }
private   ServerFile   getCheckedFile ()   {  return  getListAdapter () . getItem ( getListAdapter () . getSelectedPosition () ) ;  }
public   static   boolean   isNullOrEmpty ( String   data ,  boolean   trim )   {  if  ( data   ==   null )  return  true ;  
public   static   long   decodeBase32 ( String   hash )   {  boolean   isNegative   =  hash . startsWith ( """"-"""" ) ;  int   startIndex   =  isNegative  ?   1   :  0 ;  long   base   =  1 ;  long   result   =  0 ;  for  ( int   i   =  hash . length ()   -   1 ;   i   >=   startIndex ;   i -- )   {  int   j   =  getCharIndex ( hash . charAt ( i ) ) ;  result   =   result   +   base   *   j ;  base   =   base   *   32 ;  }  if  ( isNegative )  result   *=   - 1 ;  return  result ;  }
private   void   loadSelectedInOtherInstances ()   {  if  ( Build . VERSION . SDK_INT   >=   Build . VERSION_CODES . O )   {  for  ( Fragment   fragment :  getActivity () . getSupportFragmentManager () . getFragments () )   {  if  ( fragment   instanceof   EventSourcesPreferencesFragment   &&   fragment   !=   this )   {  Log . i ( TAG ,  this . toString ()   +   """"\nFound loaded """"   +   fragment ) ;  ( ( EventSourcesPreferencesFragment )   fragment ) . loadActiveSources () ;  }  }  }  }
private   Theme   loadThemeIfNeeded ( String   themeId )   throws  IOException   {  Theme   theme ;  if  ( hasTheme ( themeId ) )   {  theme   =   findTheme ( themeId ) ;  }   else  {  theme   =   new   Theme ( themeId ) ;  themes . add ( theme ) ;  }  assert  theme   !=   null ;  if  ( theme . getColorMap () . isEmpty () )   {  if  ( isDefault ( theme ) )   {  
public   boolean   inheritanceIsPlayerSet ( String   player ,  String   flag )   {  Map < String ,  Boolean >   flags   =  this . getPlayerFlags ( player ,  false ) ;  if  ( flags   ==   null )   {  return  parent   ==   null  ?   false   :  parent . inheritanceIsPlayerSet ( player ,  flag ) ;  }  return  flags . containsKey ( flag )  ?   true   :  parent   ==   null  ?   false   :  parent . inheritanceIsPlayerSet ( player ,  flag ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   Chain < T >   push ( final   T ...   values )   {  return  new   Chain <> ( Underscore . push ( value () ,  values ) ) ;  }
private   void   markAsCliqueLeader ( Node   n )   {  if  ( ! n . hasLabel ( CLIQUE_LEADER_LABEL ) )   {  n . addLabel ( CLIQUE_LEADER_LABEL ) ;  }  }
private   Map < String ,  String >   extractClaims ( String   claimString )   {  String []   dataArray   =  StringUtils . substringsBetween ( claimString ,  """"<td>"""" ,  """"</td>"""" ) ;  Map < String ,  String >   attributeMap   =  new   HashMap <> () ;  String   key   =  null ;  String   value ;  for  ( int   i   =  0 ;   i   <   dataArray . length ;   i ++ )   {  if  ( ( i   %   2 )   ==   0 )   {  key   =   dataArray [ i ] ;  }   else  {  value   =   dataArray [ i ] . trim () ;  attributeMap . put ( key ,  value ) ;  }  }  return  attributeMap ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   initTest ()   throws  Exception   {  super . initTest () ;  createServiceClients ( PORT_OFFSET_0 ,  new   IdentityConstants . ServiceClientType [] { IdentityConstants . ServiceClientType . APPLICATION_MANAGEMENT , IdentityConstants . ServiceClientType . IDENTITY_PROVIDER_MGT } ) ;  createServiceClients ( PORT_OFFSET_1 ,  new   IdentityConstants . ServiceClientType [] { IdentityConstants . ServiceClientType . APPLICATION_MANAGEMENT } ) ;  createApplicationInSecondaryIS () ; 
@ Test  void   eachMap ()   {  final   List < String >   result   =  new   ArrayList <> () ;  Underscore . < Map . Entry < String ,  Integer > > each ( ( new   LinkedHashMap < String ,  Integer > ()   { {  put ( """"one"""" ,  1 ) ;  put ( """"two"""" ,  2 ) ;  put ( """"three"""" ,  3 ) ;  } } )  . entrySet () , item  ->   result . add ( item . getKey () ) ) ;  assertEquals ( """"[one, two, three]"""" ,  result . toString () ) ;  }
@ ReactMethod  public   void   peerConnectionDispose ( int   id )   {  ThreadUtils . runOnExecutor ( ()  ->  {  PeerConnectionObserver   pco   =  mPeerConnectionObservers . get ( id ) ;  if  ( pco   ==   null   ||   pco . getPeerConnection ()   ==   null )   {  Log . d ( TAG ,  """"peerConnectionDispose() peerConnection is null"""" ) ;  }  pco . dispose () ;  mPeerConnectionObservers . remove ( id ) ;  } ) ;  }
public   boolean   containsElement ( Element   element )   {  var   deepName   =  getDeepName ( element ) ;  return  elementNameSortOrderMap . containsKey ( deepName ) ;  }
public   byte []   getStringBytes ()   {  long   size   =  limit   -   position ;  if  ( size   <=   0 )   {  size   =   strlen ( this ) ;  }  byte []   array   =  new   byte [ ( int ) Math . min ( size ,  Integer . MAX_VALUE ) ] ;  get ( array ) ;  return  array ;  }
@ Override  public   final   void   onWebsocketClose ( WebSocket   conn ,  int   code ,  String   reason ,  boolean   remote )   {  stopConnectionLostTimer () ;  if  ( writeThread   !=   null )   {  writeThread . interrupt () ;  }  onClose ( code ,  reason ,  remote ) ;  connectLatch . countDown () ;  closeLatch . countDown () ;  }
@ Test  public   void   pathSuccess ()   {  assertSuccess ( """"/abc"""" ,  subject ) ;  }
public   boolean   addExtension ( String   name ,  DataHandler   content )  throws  RemoteException ,  ResourceAdminServiceExceptionException   {  try  {  return  resourceAdminServiceStub . addExtension ( name ,  content ) ;  }   catch  ( RemoteException   e )   {  log . error ( """"Add extension error """" ) ;  throw  new   RemoteException ( """"Rename resource error """" ,  e ) ;  }   catch  ( ResourceAdminServiceExceptionException   e )   {  log . error ( """"Add Extension error"""" ) ;  throw  new   ResourceAdminServiceExceptionException ( """"Rename resource error"""" ,  e ) ;  }  }
@ Test  public   void   equalsContract ()   {  EqualsVerifier . forClass ( Token . class ) . verify () ;  }
protected   void   setPetsInternal ( Set < Pet >   pets )   {  this . pets   =   pets ;  }
public   static   float   getAdditionalDamage ( ItemStack   weapon )  {  float   additionalDamage   =  0.0F ;  for ( int   i   =  0 ;   i   <   IAttachment . Type . values () . length ;   i ++ )  {  IGunModifier []   modifiers   =  getModifiers ( weapon ,  IAttachment . Type . values () [ i ] ) ;  for ( IGunModifier   modifier   :  modifiers )  {  additionalDamage   +=   modifier . additionalDamage () ;  }  }  return  additionalDamage ;  }
@ Override  public   boolean   onMenuItemActionCollapse ( MenuItem   item )  {  adapter . getFilter () . filter ( """""""" ) ;  sorter . filterShowAll () ;  return  true ;  }
private   static   TypeElement   findClass ( DocletEnvironment   root ,  String   name ,  boolean   qualified )   {  Set < ?   extends  Element >   classes   =  root . getIncludedElements () ;  for  ( Element   element   :  classes )   {  if  ( qualified   &&   element   instanceof   TypeElement   &&   ( ( TypeElement )   element ) . getQualifiedName () . toString () . equals ( name ) )   {  return  ( TypeElement )   element ;  }   else if  ( ! qualified   &&   element   instanceof   TypeElement   &&   element . getSimpleName () . toString () . equals ( name ) )   {  return  ( TypeElement )   element ;  }  }  return  null ;  }
@ Override  public   boolean   groupHas ( String   world ,  String   group ,  String   permission )   {  Group   g   =  privs . getGroupManager () . getGroup ( group ) ;  return  g   !=   null   &&   g . hasPermission ( permission ,  world ) ;  }
@ Test ( dependsOnMethods   =   { """"testResolveL2AppBrandingAfterL1AppBrandingUpdate"""" } )  public   void   testResolveL2AppBrandingRestrictedToPublishedAfterL1AppBrandingUpdate ()   throws  Exception   {  
public   void   inject ( Object   injectionsConsumer )   {  injector . inject ( injectionsConsumer ) ;  }
@ Override  public   PostCorrelationMetric   deserialize ( JsonParser   jp ,  DeserializationContext   ctxt )   throws  IOException , JsonProcessingException   {  ObjectCodec   oc   =  jp . getCodec () ;  JsonNode   node   =  oc . readTree ( jp ) ;  for ( PostCorrelationMetric   value :  PostCorrelationMetric . values () )   {  if ( value . name () . equalsIgnoreCase ( node . textValue () ) )   {  return  value ;  }  }  return  null ;  }
@ Override  public   void   onClose ( int   code ,  String   reason ,  boolean   remote )   {  try  {  this . reconnect () ;  fail ( """"Exception should be thrown"""" ) ;  }   catch  ( IllegalStateException   e )   {  
@ Override  public   PendingResult < Cast . ApplicationConnectionResult >   launchApplication ( GoogleApiClient   client ,  String   applicationId ,  LaunchOptions   launchOptions )   {  return  null ;  }
private   Object   readResolve ()   {  this . agentAttributes   =  this . migrateAttributeFilter ( this . parseSlaveAttributes ( this . slaveAttributesString ) ) ;  
@ Nullable  private   String   getUsername ( HttpServletRequest   request )   {  if  ( config . isUseAuditHttpHeaderName () )   {  return  request . getHeader ( config . getAuditHttpHeaderName () ) ;  }  String   user   =  request . getParameter ( """"user"""" ) ;  String   password   =  request . getParameter ( """"password"""" ) ;  if  ( user   !=   null   &&   password   !=   null )   {  return  user ;  }  return  null ;  }
@ Override  public   boolean   greater ( Long   val1 ,  Long   val2 )   {  return  val1 + offset   >   val2 ;  }
@ Test  void   worksWithNewLines ()   {  Assertions . assertDoesNotThrow ( ()  ->   new   Xembler ( new   Directives ( """"\n\nADD 'o';\nATTR 'base','int';\n\n"""" ) ) . xml () , """"Can't work with new lines"""" ) ;  }
@ NonNull  public   Builder   orientation ( @ NonNull   StreetViewPanoramaOrientation   orientation )   {  this . tilt   =   orientation . tilt ;  this . bearing   =   orientation . bearing ;  return  this ;  }
static   LineRequestFlag   fromByte ( byte   val )   {  for  ( LineRequestFlag   dir   :  LineRequestFlag . values () )   {  if  ( dir . val   ==   val )  return  dir ;  }  throw  new   IllegalStateException ( """"Unexpected LINE_REQUEST_FLAG value: """"   +   val ) ;  }
private   static   void   appendParam ( StringBuilder   content ,  String   key ,  String   value )   {  if  ( content . length ()   >   0 )  content . append ( """"&"""" ) ;  if  ( key . equals ( """"token_request_options"""" ) )   {  content . append ( Uri . encode ( key ) ) . append ( """"="""" ) . append ( value ) ;  }   else  {  content . append ( Uri . encode ( key ) ) . append ( """"="""" ) . append ( Uri . encode ( String . valueOf ( value ) ) ) ;  }  }
@ Test ( expected   =   IllegalStateException . class )  public   void   createInstanceTest ()   throws  Exception   {  new   AllureModelUtils () ;  }
@ Override  public   boolean   isSortable ()   {  throw  new   UnsupportedOperationException () ;  }
@ Override  public   void   mousePressed ( MouseEvent   e )   {  try  {  System . out . println ( """"Depth: """"   +   rs2 . getDistance ( e . getX () ,  e . getY () ) ) ;  }   catch  ( FrameGrabber . Exception   ex )   {  ex . printStackTrace () ;  }  }
@ Override  public   void   put ( URL   uri ,  ContentImage   image )  {  cache . put ( uri ,  image ) ;  }
@ Override   public   FloatIndexer   get ( long   i ,  float []   f ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  f [ offset   +   n ]   =   array [ ( int ) index ( i )   +   n ] ;  }  return  this ;  }
@ Override  public   String   getPlayerPrefix ( String   world ,  String   player )   {  return  getPlayerOrGroupInfoString ( world ,  player ,  CHAT_PREFIX_KEY ,  null ) ;  }
 <argument pos:start=""""""""205:91"""""""" pos:end=""""""""205:91""""""""><expr pos:start=""""""""205:91"""""""" pos:end=""""""""205:91""""""""><name pos:start=""""""""205:91"""""""" pos:end=""""""""205:91"""""""">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   static   String   getPathSeparatorRegx ()   {  if ( File . separator . equals ( Constants . SLASH ) )   {  return  File . separator ;  }   else  {  return  Constants . BACK_SLASH   +   File . separator ;  }  }
@ Override  public   ResultSet   fetch ( final   PreparedStatement   stmt )  throws  SQLException   {  stmt . execute () ;  return  stmt . getGeneratedKeys () ;  }
@ Test  void   isObject ()   {  assertTrue ( Underscore . isObject ( new   LinkedHashMap < String ,  String > () ) ) ;  assertFalse ( Underscore . isObject ( null ) ) ;  assertFalse ( Underscore . isObject ( """"string"""" ) ) ;  }
@ Override  public   void   onDisconnected ()   {  Connect   connect   =  getRemoteConnect () ;  if  ( connect   ==   null )  connect   =   new   Connect . Builder () . id ( oldConfigNodeId ) . name ( """"Wear device"""" ) . build () ;  wearable . onDisconnectReceived ( getConnection () ,  connect ) ;  super . onDisconnected () ;  }
public   static   < T >   Iterator < T >   emptyIterator ()   {  return  Collections . emptyIterator () ;  }
default   boolean   isCallbackRefValue ( PsiElement   psiElement )   {  return  false ;  }
private   void   closeConnectionDueToInternalServerError ( RuntimeException   exception )   {  write ( generateHttpResponseDueToError ( 500 ) ) ;  flushAndClose ( CloseFrame . NEVER_CONNECTED ,  exception . getMessage () ,  false ) ;  }
public   void   setExplicitlyDeleted ( boolean   explicitlyDeleted )   {  isExplicitlyDeleted   =   explicitlyDeleted ;  }
public   static   ZkClient   createZkClient ( String   connectString )   {  try {  Timing                    timing   =  new   Timing () ;  return  new   ZkClient ( createZkConnection ( connectString ) ,  timing . connection () ) ;  }  catch  (  Exception   e  )  {  throw  new   RuntimeException ( e ) ;  }  }
public   void   putConfiguration ( ConnectionConfiguration   config )   {  putConfiguration ( config ,  null ) ;  }
Uri   buildUri ( Map < String ,  String >   params )   {  Uri . Builder   uriBuilder   =  Uri . parse ( mUrl . toString () )  . buildUpon ()  . path ( mPath ) ;  for  ( Map . Entry < String ,  String >   entry   :  params . entrySet () )   {  uriBuilder . appendQueryParameter ( entry . getKey () ,  entry . getValue () ) ;  }  return  uriBuilder . build () ;  }
@ Override  public   void   onStartup ( Container   container )   {  ServiceLocator   serviceLocator   =  container . getApplicationHandler ()  . getInjectionManager ()  . getInstance ( ServiceLocator . class ) ;  SpringBridge . getSpringBridge () . initializeSpringBridge ( serviceLocator ) ;  serviceLocator . getService ( SpringIntoHK2Bridge . class ) . bridgeSpringBeanFactory ( beanFactory ) ;  }
@ Deprecated  @ Override  public   void   getDroidGuardService ( IGmsCallbacks   callback ,  int   versionCode ,  String   packageName , Bundle   params )   throws  RemoteException   {  callGetService ( GmsService . DROIDGUARD ,  callback ,  versionCode ,  packageName ,  params ) ;  }
private   static   Set < String >   _merge ( Set < String >   s1 ,  Set < String >   s2 )  {  if  ( s1 . isEmpty () )   {  return  s2 ;  }   else if  ( s2 . isEmpty () )   {  return  s1 ;  }  HashSet < String >   result   =  new   HashSet < String > ( s1 . size ()   +   s2 . size () ) ;  result . addAll ( s1 ) ;  result . addAll ( s2 ) ;  return  result ;  }
@ Override  protected   void   runFileRecursive ( Path   file )   {  try  ( BundleReader   reader   =  new   BundleReader ( file ) )   {  Bundle   bundle   =  reader . read () ;  runBundle ( file ,  bundle ) ;  }   catch  ( IOException   ex )   {  L . log ( Level . WARNING ,  """"Can't open asset bundle """"   +   file ,  ex ) ;  }  }
public   static   int   runEvalSet ( String   evalSetName ,  boolean   isDryRun )   throws  Exception   {  log . info ( """"Run evaluation set with {}"""" ,  evalSetName ) ;  EvalModelProcessor   p   =  new   EvalModelProcessor ( EvalStep . RUN ,  evalSetName ) ;  return  p . run () ;  }
private   static   void   createNewFile ( String   path )   {  int   lastSep   =  path . lastIndexOf ( File . separator ) ;  if  ( lastSep   >   0 )   {  String   dirPath   =  path . substring ( 0 ,  lastSep ) ;  makeDir ( dirPath ) ;  }  File   file   =  new   File ( path ) ;  try  {  if  ( ! file . exists () )   file . createNewFile () ;  }   catch  ( IOException   e )   {  e . printStackTrace () ;  }  }
default   int   read ( byte []   buffer ,  int   length )   {  return  read ( buffer ,  0 ,  length ) ;  }
@ Override  public   boolean   exists ( String   providerId )   {  return  providers . exists ( providerId ) ;  }
@ Override  public   void   setResultCallback ( ResultCallback < R >   callback )   {  synchronized  ( lock )   {  if  ( ! isCanceled () )   {  if  ( isReady () )   {  handler . sendResultCallback ( callback ,  getResult () ) ;  }   else  {  resultCallback   =   callback ;  }  }  }  }
@ Override  public   int   getModuleVersion2 ( IObjectWrapper   wrappedContext ,  String   moduleId ,  boolean   updateConfigIfRequired )   throws  RemoteException   {  
 <argument pos:start=""""""""1302:82"""""""" pos:end=""""""""1302:90""""""""><expr pos:start=""""""""1302:82"""""""" pos:end=""""""""1302:90""""""""><name pos:start=""""""""1302:82"""""""" pos:end=""""""""1302:90"""""""">plane_ptr</name></expr></argument>
@ Test  public   void   monsterTypeCompareTest ()   {  Troll   troll   =  new   Troll ( playerLevel ) ;  Troll   anotherTroll   =  new   Troll ( playerLevel ) ;  Goblin   notTroll   =  new   Goblin ( playerLevel ) ;  assertEquals ( troll ,  anotherTroll ) ;  assertNotEquals ( troll ,  notTroll ) ;  assertNotEquals ( null ,  troll ) ;  assertNotEquals ( troll ,  new   Object () ) ;  }
@ EventHandler ( priority   =   EventPriority . MONITOR )  public   void   onPluginEnable ( PluginEnableEvent   event )   {  if ( bridge . rscp   ==   null )   {  Plugin   plugin   =  event . getPlugin () ;  if  ( plugin . getDescription () . getName () . equals ( """"rscPermissions"""" ) )   {  bridge . rscp   =   ( MainPluginClass )   plugin ;  bridge . rscpAPI   =   bridge . rscp . API ;  log . info ( String . format ( """"[%s][Permission] %s hooked."""" ,  vault . getDescription () . getName () ,  """"rscPermissions"""" ) ) ;  }  }  }
@ Override  public   void   onCreateOptionsMenu ( Menu   menu ,  MenuInflater   inflater )   {  inflater . inflate ( R . menu . device_list ,  menu ) ;  }
public   void   startAudio ( ServerShare   audioShare ,  List < ServerFile >   audioFiles ,  ServerFile   audioFile )   {  this . audioShare   =   audioShare ;  this . audioFiles   =   audioFiles ;  this . audioFile   =   audioFile ;  pauseAudio () ;  setUpAudioPlayback () ;  setUpAudioMetadata () ;  }
public   static   String   convert ( double   coordinate ,  int   outputType )   {  return  null ;  }
TrackItemSet   withoutItem ( TrackItem   item )   {  if  ( items . containsKey ( item . getType () ) )   {  items . get ( item . getType () ) . remove ( item ) ;  }  return  new   TrackItemSet ( items ) ;  }
default   Future < ? >   blinkAsync ( int   delay ,  int   duration ,  TimeUnit   unit ) {  return  this . blinkAsync ( delay ,  duration ,  unit ,  DigitalState . HIGH ) ;  }
@ Test ( dependsOnMethods   =   { """"testActivateActionWithInvalidID"""" } )  public   void   testDeactivateActionWithInvalidID ()   {  getResponseOfPost ( ACTION_MANAGEMENT_API_BASE_PATH   +   PRE_UPDATE_PASSWORD_PATH   +  """"/""""   +   TEST_ACTION_INVALID_ID   +   ACTION_DEACTIVATE_PATH ,  """""""" )  . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_NOT_FOUND )  . body ( """"description"""" ,  equalTo ( """"No Action is configured on the given Action Type and Id."""" ) ) ;  deleteAction ( PRE_UPDATE_PASSWORD_PATH  ,  testActionId2 ) ;  }
@ JsonIgnore  public   boolean   isClassification ()   {  return  ( CollectionUtils . isNotEmpty ( dataSet . getPosTags () )   &&   CollectionUtils . isEmpty ( dataSet . getNegTags () ) )  ||   ( CollectionUtils . isEmpty ( dataSet . getPosTags () )   &&   CollectionUtils . isNotEmpty ( dataSet . getNegTags () ) ) ;  }
public   static   IElement   elementFromLiquid ( BlockState   blockState )   {  FluidState   fluidState   =  blockState . getFluidState () ;  return  new   FluidStackElement ( JadeFluidObject . of ( fluidState . getType () ) ) ; 
@ Override  public   void   onRemoveHarmfulAppData ( Status   status ,  RemoveHarmfulAppData   removeHarmfulAppData )   throws  RemoteException   {  }
public   static   void   savePMML ( PMML   pmml ,  String   path )   {  OutputStream   os   =  null ;  try  {  os   =   new   FileOutputStream ( path ) ;  StreamResult   result   =  new   StreamResult ( os ) ;  JAXBUtil . marshalPMML ( pmml ,  result ) ;  }   catch  ( Exception   e )   {  e . printStackTrace () ;  }   finally  {  IOUtils . closeQuietly ( os ) ;  }  }
protected   Response   getResponseOfGetWithQueryParams ( String   endpointUri ,  Map < String ,  Object >   queryParams )   {  return  given () . auth () . preemptive () . basic ( authenticatingUserName ,  authenticatingCredential )  . contentType ( ContentType . JSON )  . header ( HttpHeaders . ACCEPT ,  ContentType . JSON )  . queryParams ( queryParams )  . log () . ifValidationFails ()  . filter ( validationFilter )  . when ()  . get ( endpointUri ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   Chain < Comparable >   sort ()   {  return  new   Chain <> ( Underscore . sort ( ( List < Comparable > )   list ) ) ;  }
public   boolean   supportsLimitedOuterJoins ()   throws  SQLException   {  return  false ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( name ,  displayName ) ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"""" )  @ Valid  public   ScimSchemaExtensionEnterprise   getScimSchemaExtensionEnterprise ()   {  return  scimSchemaExtensionEnterprise ;  }
public   static   List < Integer >   range ( int   start ,  int   stop )   {  return  range ( start ,  stop ,  start   <   stop  ?   1   :  - 1 ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   cleanUp ()   throws  Exception   {  setClaimUniquenessScope ( LocalClaimReq . UniquenessScopeEnum . NONE ) ;  userStoreMgtRestClient . deleteUserStore ( userStoreId ) ;  scim2RestClient . closeHttpClient () ;  claimManagementRestClient . closeHttpClient () ;  userStoreMgtRestClient . closeHttpClient () ;  }
@ Override  public   boolean   visible ()   {  return  state . getMode ()   ==   Mode . date ;  }
@ Override  public   DiffResult   isCoreChanged ()   {  if  ( increased . isEmpty ()   &&   missing . isEmpty () )   {  return  DiffResult . NO_CHANGES ;  }  if  ( ! missing . isEmpty () )   {  if  ( REQUEST_PARAMS_DECREASED . enabled ( context ) )   {  return  DiffResult . INCOMPATIBLE ;  }  }  if  ( increased . stream () . anyMatch ( p  ->   p . getRequired ()   !=   null   &&   p . getRequired () ) )   { if  ( REQUEST_PARAMS_REQUIRED_INCREASED . enabled ( context ) )   {  return  DiffResult . INCOMPATIBLE ;  } }  return  DiffResult . COMPATIBLE ;  }
public   EnvelopeData   getData ()   {  double []   widths   =  new   double [ 5 ] ;  widths [ 0 ]   =   scaler . unscaleX ( xValues [ 0 ] . get ()   -   startX ) ;  widths [ 1 ]   =   scaler . unscaleX ( xValues [ 1 ] . get ()   -   xValues [ 0 ] . get () ) ;  widths [ 2 ]   =   scaler . unscaleX ( xValues [ 4 ] . get ()   -   xValues [ 3 ] . get () ) ;  widths [ 3 ]   =   scaler . unscaleX ( endX   -   xValues [ 4 ] . get () ) ;  widths [ 4 ]   =   scaler . unscaleX ( xValues [ 2 ] . get ()   -   xValues [ 1 ] . get () ) ;  double   multiplier   =  200   /   maxHeight ;   
@ Deprecated  protected   ValidationException   failure ( Class < ? >   expectedType ,  Object   actualValue )   {  return  new   ValidationException ( this ,  expectedType ,  actualValue ,  """"type"""" ,  schemaLocation . toString () ) ;  }
private   RequestConfig   buildRequestConfig ()   {  RequestConfig . Builder   requestConfigBuilder   =  RequestConfig . custom () ;  if  ( timeoutProperties   !=   null )   {  requestConfigBuilder . setConnectionRequestTimeout ( Timeout . of ( timeoutProperties . getConnectRequestTimeout () ,  TimeUnit . MILLISECONDS ) ) ;  }  requestConfigCustomizers . forEach ( customizer  ->   customizer . customize ( requestConfigBuilder ) ) ;  return  requestConfigBuilder . build () ;  }
@ Override  public   DateTime   endedAt ( DateTime   now )   {  return  now . withTimeAtStartOfDay () ;  }
@ Test  void   testCompositeComponentsDown ()   {  initialize ( CompositeComponentsDownHealthConfiguration . class ) ;  InstanceStatus   status   =  healthCheckHandler . getStatus ( InstanceStatus . UP ) ;  assertThat ( status ) . isEqualTo ( InstanceStatus . DOWN ) ;  }
public   static   void   main ( String []   args )   {  String   imagePath   =  args [ 0 ] . trim () ;  IplImage   image   =  null ;  try  {  Java2DFrameConverter   converter1   =  new   Java2DFrameConverter () ;  OpenCVFrameConverter . ToIplImage   converter2   =  new   OpenCVFrameConverter . ToIplImage () ;  BufferedImage   img   =  ImageIO . read ( new   File ( imagePath ) ) ;  image   =   converter2 . convert ( converter1 . convert ( img ) ) ;  }   catch  ( Exception   ex )    {  ex . printStackTrace () ;  }  if  ( image   !=   null )   {  IplImage   rlsaImage   =  runLengthSmoothingAlgorithm ( image ) ;  
@ Override  public   void   onSaveInstanceState ( Bundle   outState )  {  super . onSaveInstanceState ( outState ) ;  outState . putLong ( Constants . BUNDLE_THREADID ,  threadId ) ;  }
@ Override  public   IObjectWrapper   create ( IObjectWrapper   context ,  int   size ,  int   annotation ,  String   url ,  int   activityRequestCode )   throws  RemoteException   {  Context   ctx   =  ( Context )   ObjectWrapper . unwrap ( context ) ;  return  ObjectWrapper . wrap ( new   PlusOneButtonImpl ( ctx ,  size ,  annotation ,  url ,  AuthConstants . DEFAULT_ACCOUNT ) ) ;  }
public   DroidGuardResultsRequest   setOpenHandles ( int   openHandles )   {  bundle . putInt ( KEY_OPEN_HANDLES ,  openHandles ) ;  return  this ;  }
protected   void   populateBase ( HttpServletRequest   request ,  Map < String ,  Object >   model )   {  model . put ( """"time"""" ,  new   Date () ) ;  model . put ( """"basePath"""" ,  """"/"""" ) ;  model . put ( """"dashboardPath"""" ,  this . dashboardPath . equals ( """"/"""" )  ?   """"""""   :  this . dashboardPath ) ;  populateHeader ( model ) ;  populateNavbar ( request ,  model ) ;  }
@ ApiModelProperty ( example   =   """"https:
private   void   doTest ( final   String   fileName )   {  myFixture . enableInspections ( new   JsonReferenceInspection () ) ;  myFixture . testHighlighting ( true ,  false ,  false ,  """"validator/value/""""   +   fileName ) ;  }
private   HandshakeState   containsRequestedProtocol ( String   requestedProtocol )   {  for  ( IProtocol   knownProtocol   :  knownProtocols )   {  if  ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) )   {  protocol   =   knownProtocol ;  log . trace ( """"acceptHandshake - Matching protocol found: {}"""" ,  protocol ) ;  return  HandshakeState . MATCHED ;  }  }  return  HandshakeState . NOT_MATCHED ;  }
@ Override  @ NonNull  public   Collection < String >   getGroups ()   {  Set < String >   sids   =  new   HashSet <> () ;  sids . addAll ( filterRoleSids ( globalRoles ) ) ;  sids . addAll ( filterRoleSids ( itemRoles ) ) ;  sids . addAll ( filterRoleSids ( agentRoles ) ) ;  return  sids ;  }
@ Test ( groups   =   """"include"""" ,  enabled   =   false )  public   void   inactiveIncludedTest ()   {   }
@ Override  void   store ( DataMap   dataMap ,  String   key ,  Byte   value )   {  if  ( value   !=   null )   dataMap . putByte ( key ,  value ) ;  }
@ Override   void   visitPropertySchemas ( Map < String ,  Schema >   propertySchemas )   {  if  ( ! propertySchemas . isEmpty () )   {  writer . key ( """"properties"""" ) ;  printSchemaMap ( propertySchemas ) ;  }  }
@ Override  public   IBitmapDescriptorFactoryDelegate   newBitmapDescriptorFactoryDelegate ()   throws  RemoteException   {  return  new   BitmapDescriptorFactoryImpl () ;  }
static   List < OrderedEventSource >   addAll ( List < OrderedEventSource >   list ,  List < EventSource >   sources )   {  for ( EventSource   source :  sources )   {  add ( list ,  source ) ;  }  return  list ;  }
public   String   addV2Role ( RoleV2   role )   throws  IOException   {  String   jsonRequest   =  toJSONString ( role ) ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpPost ( getRolesV2Path () ,  jsonRequest , getHeaders () ) )   {  String []   locationElements   =  response . getHeaders ( LOCATION_HEADER ) [ 0 ] . toString () . split ( PATH_SEPARATOR ) ;  return  locationElements [ locationElements . length   -   1 ] ;  }  }
public   void   waitLatency ()   throws  InterruptedException   {  Thread . sleep ( getLatency () ) ;  }
public   static   Value   forContentNulls ( Nulls   nulls )   {  return  construct ( Nulls . DEFAULT ,  nulls ) ;  }
@ BeforeEach  public   void   setUp ()   throws  Throwable   {  PluginParameterExpressionEvaluator   pluginParameterExpressionEvaluator   = mock ( PluginParameterExpressionEvaluator . class ) ;  when ( pluginParameterExpressionEvaluator . evaluate ( anyString () ) ) . then ( returnsFirstArg () ) ;  this . propertiesReplacer   =  new   PropertiesReplacer ( mock ( LogInterface . class ) ,  pluginParameterExpressionEvaluator ) ;  }
@ Override   public   int   getImageWidth ()   {  return  return_image   ==   null  ?   super . getImageWidth ()   :  return_image . width () ;  }
default   int   read ( char []   buffer ,  int   length )   {  return  read ( StandardCharsets . US_ASCII ,  buffer ,  length ) ;  }
@ Test  void   parameterEndWithNewlineShouldEndUpInXmlProcessor ()   {  assertParameterMoveFromMojoToRestOfApplicationForBoolean ( """"endWithNewline"""" ,  xmlOutputGenerator ) ;  }
@ Override  public   boolean   shouldOverrideUrlLoading ( @ NonNull   WebView   view ,  @ NonNull   WebResourceRequest   request )   {  
@ Bean  public   ChatMemory   chatMemory ()   {  return  new   InMemoryChatMemory () ;  }
public   static   void   main ( String ...   ignored )   throws  InterruptedException   {  MicroJitterSampler   sampler   =  new   MicroJitterSampler () ;  Thread   t   =  new   Thread ( sampler :: run ) ;  t . start () ;  t . join () ;  }
public   float   roundDecimalFloat ( Float   input )   {  float   rounded   =  ( float )   Math . round ( input ) ;  rounded   =   rounded   /   100f ;  return  rounded ;  }
public   Chain < String >   trunc ( final   int   length )   {  return  new   Chain <> ( U . trunc ( ( String )   item () ,  length ) ) ;  }
default   int   i2cWriteDevice ( int   handle ,  byte []   data ) {  return  i2cWriteDevice ( handle ,  data ,  data . length ) ;  }
public   Builder   setSuffixOrder ( ImmutableList < SuffixType >   suffixOrder )   {  newConfig . suffixOrder   =   suffixOrder ;  return  this ;  }
@ Override  public   boolean   onCreate ()   {  Log . d ( TAG ,  """"onCreate"""" ) ;  if  ( ! isServiceRunning ( getContext () ,  getContext () . getPackageName () ,  SignatureService . class . getName () ) )   {  Intent   intent   =  new   Intent ( getContext () ,  SignatureService . class ) ;  try  {  getContext () . startService ( intent ) ;  }   catch  ( Exception   ignored )   {  }  }  return  false ;  }
@ Test  public   void   testIdWithSpacesNoException ()   {  Query   query   =  new   Vocabulary . Query . Builder ( """"with space"""" ) . build () ;  assertThat ( vocabulary . getConceptFromId ( query ) . isPresent () ,  is ( false ) ) ;  }
@ VisibleForTesting  JSONObject   parseSlaveAttributes ( String   slaveAttributes )   {  if  ( StringUtils . isNotBlank ( slaveAttributes ) )   {  try  {  return  ( JSONObject )   JSONSerializer . toJSON ( slaveAttributes ) ;  }   catch  ( JSONException   e )   {  logger . warn ( """"Ignoring Mesos agent attributes JSON due to parsing error : """"   +   slaveAttributes ) ;  }  }  return  null ;  }
static   void   lineSetDirectionOutput ( long   linePtr ,  int   value )   {  int   result   =  c_gpiod_line_set_direction_output ( linePtr ,  value ) ;  if  ( result   <   0 )  throw  new   GpioDException ( """"c_gpiod_line_set_direction_output failed: """"   +   result   +   """" (""""   +   c_gpiod_strerror ()   +   """")"""" ) ;  }
@ Test  void   custom1ShouldWorkAsPredefinedSortOrder ()   {  SortPomImplUtil . create ()  . predefinedSortOrder ( """"custom_1"""" )  . lineSeparator ( """"\n"""" )  . testFiles ( """"/full_unsorted_input.xml"""" ,  """"/sortOrderFiles/sorted_custom_1.xml"""" ) ;  }
@ Test  void   testIsResortable ()   {  Executable   testMethod   =  ThrowAwayNewlineWrapper . THROW_AWAY_NEWLINE_INSTANCE :: isSortable ;  var   thrown   =  assertThrows ( UnsupportedOperationException . class ,  testMethod ) ;  assertThat ( thrown . getMessage () ,  is ( nullValue () ) ) ;  }
@ Override   public   float   get ( long ...   indices )   {  return  array [ ( int ) index ( indices ) ] ;  }
public   void   refresh ()   {  this . format   =   new   SimpleDateFormat ( getFormatPattern () ,  state . getLocale () ) ;  if  ( ! this . visible () )   return;  init () ;  }
protected   String   itemHeader ( String   code ,  ChangedHeader   header )   {  return  this . itemHeader ( """"Changed header"""" , code , null   ==   header . getNewHeader ()  ?   """"""""   :  header . getNewHeader () . getDescription () ) ;  }
public   HttpResponse   sendSAMLMessage ( String   url ,  String   samlMsgKey ,  String   samlMsgValue )  throws  IOException   {  List < NameValuePair >   urlParameters   =  new   ArrayList <> () ;  HttpPost   post   =  new   HttpPost ( getTenantQualifiedURL ( url ,  tenantInfo . getDomain () ) ) ;  post . setHeader ( """"User-Agent"""" ,  USER_AGENT ) ;  urlParameters . add ( new   BasicNameValuePair ( samlMsgKey ,  samlMsgValue ) ) ;  post . setEntity ( new   UrlEncodedFormEntity ( urlParameters ) ) ;  return  client . execute ( post ) ;  }
@ Test ( dependsOnMethods   =   { """"testUpdateChallengeAnswerOfASet"""" } )  public   void   testAnswerSpecificChallenge ()   throws  IOException   {  String   endpointURI   =  String . format ( this . userChallengeAnswerEndpointURI ,  """"challengeQuestion2"""" ) ;  String   body   =  readResource ( """"challenge-answer-set2-q4-correct.json"""" ) ;  getResponseOfPost ( endpointURI ,  body )  . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_CREATED ) ;  }
@ NonNull  public   Builder   setDevice ( @ NonNull   Device   device )   {  this . device   =   device ;  return  this ;  }
@ Test  public   void   testFindByKey ()   throws  Exception   {  SignatureGenerator   generator   =  new   SignatureGenerator (  new   File (  getFileResource (  """"/pgp/secring.gpg""""  ) ) ,  """"5A186608"""" ,  """"redline""""  ) ;  assertTrue (  generator . isEnabled ()  ) ;  }
public   AnsiColorMap   getColorMap ( final   String   name )   {  for  ( AnsiColorMap   colorMap   :  getColorMaps () )   {  if  ( colorMap . getName () . equals ( name ) )   {  return  colorMap ;  }  }  return  AnsiColorMap . Default ;  }
@ DataBoundSetter  public   void   setSkipNoReportFiles ( boolean   skipNoReportFiles )   {  this . skipNoReportFiles   =   skipNoReportFiles ;  }
private   void   startOtherCarbonServers ()   throws  Exception   {  AuthenticatorClient   authenticatorClient   =  new   AuthenticatorClient ( servicesUrl ) ;  sessionCookie2   =   authenticatorClient . login ( """"admin"""" ,  """"admin"""" ,  """"localhost"""" ) ;  }
public   void   setWeights ( float [] []   weights )   {  this . weights   =   weights ;  }
@ Test  void   canTriggerFunctionalityTimestamperLast ( JenkinsRule   jenkinsRule )   throws  Exception   {  final   String   script   =  """"ansiColor('xterm') {""""   +  """"timestamps {""""   +  """"echo '\033[34mHello\033[0m \033[33mcolorful\033[0m \033[35mworld!\033[0m'""""   +  """"}""""   +  """"}"""" ;  canTriggerFunctionality ( jenkinsRule ,  script ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  private   static   Parcelable . Creator < Parcelable >   getCreator ( Field   field )   {  Class < ? >   clazz   =  field . getType () ;  if  ( clazz . isArray () )   {  clazz   =   clazz . getComponentType () ;  }  if  ( clazz   !=   null   &&   Parcelable . class . isAssignableFrom ( clazz ) )   {  return  getCreator ( ( Class < ?   extends  Parcelable > )   clazz ) ;  }  throw  new   RuntimeException ( clazz   +   """" is not an Parcelable"""" ) ;  }
@ Test  public   void   testAddConflictingEmailTemplate ()   throws  IOException   {  String   body   =  readResource ( """"add-email-template-conflict-request.json"""" ) ;  String   path   =  EMAIL_TEMPLATES_API_BASE_PATH   +   EMAIL_TEMPLATE_TYPES_PATH   +  PATH_SEPARATOR   +   SAMPLE_TEMPLATE_TYPE_ID ;  Response   response   =  getResponseOfPost ( path ,  body ) ;  validateErrorResponse ( response ,  HttpStatus . SC_CONFLICT ,  """"ETM-50004"""" ) ;  }
public   void   addLink (  final   String   path ,  final   String   target ,  int   permissions )   throws  NoSuchAlgorithmException ,  IOException   {  contents . addLink (  path ,  target ,  permissions ) ;  }
@ Override  public   final   void   teardownTest ( final   JavaSamplerContext   context )   {  if  ( Objects . nonNull ( consumer ) )   {  consumer . close () ;  }  }
@ ParameterizedTest  @ MethodSource ( """"parametersForShouldParseJSONSchemaDocument"""" )  void   shouldParseJSONSchemaDocument ( final   String   schemaAsJson ,  final   Schema   expected )   {  final   Schema   result   =  SCHEMA_PARSER . parse ( schemaAsJson ) ;  Assertions . assertThat ( result ) . isEqualTo ( expected ) ;  }
public   int   getNonSecurePort ()   {  return  this . instanceConfig . getNonSecurePort () ;  }
private   static   Compiler   compilerWithError ()   {  return  javac () . withProcessors ( new   ErrorProcessor () ) ;  }
@ Override  public   FileSystem   run ()   {  try  {  return  FileSystem . get ( conf ) ;  }   catch  ( IOException   e )   {  throw  new   RuntimeException ( e ) ;  }  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  deleteApplication ( oidcApplication ) ;  deleteUser ( userObject ) ;  notificationSenderRestClient . deleteSMSProvider () ;  notificationSenderRestClient . closeHttpClient () ;  restClient . closeHttpClient () ;  scim2RestClient . closeHttpClient () ;  mockSMSProvider . stop () ;  mockApplicationServer . stop () ;  }
public   String   getSubmitModule ()   {  if  ( isNonNull ( this . submitModule ) )   return  this . submitModule ;  return  this . defaultSubmitModule ;  }
@ Override  public   boolean   hasVibrato ( int   position )   {  if  ( noteMap . hasPitchbend ( position ) )   {  return  noteMap . getPitchbend ( position ) . hasVibrato () ;  }  return  false ;  }
@ Override  public   void   onOpen ( WebSocket   conn ,  ClientHandshake   handshake )   {  broadcast ( """"new connection: """"   +   handshake  . getResourceDescriptor () ) ;   
@ Nullable  public   Boolean   getZoomGesturesEnabled ()   {  return  zoomGesturesEnabled ;  }
private   int   saveComboTrain ( ComboModelTrain   comboModelTrain )   {  try  {  JSONUtils . writeValue ( new   File ( Constants . COMBO_CONFIG_JSON_FILE_NAME ) ,  comboModelTrain ) ;  }   catch  ( Exception   e )   {  LOG . error ( """"Fail to save ComboModelTrain object to ComboTrain.json"""" ) ;  return  1 ;  }  return  0 ;  }
public   static   Context   onAttach ( Context   context ,  String   defaultLanguage )   {  String   lang   =  getPersistedData ( context ,  defaultLanguage ) ;  return  setLocale ( context ,  lang ) ;  }
private   Map < String ,  Object >   readObject ()   {  read () ;  Map < String ,  Object >   object   =  new   LinkedHashMap <> () ;  skipWhiteSpace () ;  if  ( readChar ( '}' ) )   {  return  object ;  }  do  {  skipWhiteSpace () ;  String   name   =  readName () ;  skipWhiteSpace () ;  if  ( ! readChar ( ':' ) )   {  throw  expected ( """"':'"""" ) ;  }  skipWhiteSpace () ;  object . put ( name ,  readValue () ) ;  skipWhiteSpace () ;  }  while  ( readChar ( ',' ) ) ;  if  ( ! readChar ( '}' ) )   {  throw  expected ( """"',' or '}'"""" ) ;  }  return  object ;  }
@ Test  public   void   entailmentRegex ()   {  Collection < String >   resolvedTypes   =  util . resolveTypes ( """"http:
private   static   String   convertOptionIntoString ( List < ValueOption >   options )   {  StringBuilder   builder   =  new   StringBuilder () ;  for ( int   i   =  0 ;   i   <   options . size () ;   i ++ )   {  if ( i   >   0 )   {  builder . append ( """"/"""" ) ;  }  builder . append ( options . get ( i ) . getValue () . toString () ) ;  }  return  builder . toString () ;  }
public   Chain < T >   initial ()   {  return  new   Chain <> ( Underscore . initial ( list ) ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   static   < E >   E []   difference ( final   E [] ...   arrays )   {  final   Deque < List < E > >   stack   =  new   ArrayDeque <> () ;  stack . push ( Arrays . asList ( arrays [ 0 ] ) ) ;  for  ( int   index   =  1 ;   index   <   arrays . length ;   index   +=   1 )   {  stack . push ( difference ( stack . peek () ,  Arrays . asList ( arrays [ index ] ) ) ) ;  }  return  ( E [] )   stack . peek () . toArray () ;  }
public   HttpClient   getNewHttpClientWithCookieStore ()   {  Lookup < CookieSpecProvider >   cookieSpecRegistry   =  RegistryBuilder . < CookieSpecProvider > create ()  . register ( CookieSpecs . DEFAULT ,  new   RFC6265CookieSpecProvider () )  . build () ;  RequestConfig   requestConfig   =  RequestConfig . custom ()  . setCookieSpec ( CookieSpecs . DEFAULT )  . build () ;  return  HttpClientBuilder . create ()  . setDefaultCookieSpecRegistry ( cookieSpecRegistry )  . setDefaultRequestConfig ( requestConfig )  . setDefaultCookieStore ( new   BasicCookieStore () )  . build () ;  }
@ Override   public   UIntIndexer   put ( long   i ,  long   n )   {  return  putRaw ( index ( i ) ,  n ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  OrderedEventSource   that   =  ( OrderedEventSource )   o ;  return  source . equals ( that . source ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( totalResults ,  links ,  apiResources ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  @ Test  void   toXmlFromJson28 ()   {  final   String   json   = """"{\n""""  +   """"  \""""root\"""": [\n""""  +   """"  ],\n""""  +   """"  \""""#omit-xml-declaration\"""": \""""yes\""""\n""""  +   """"}"""" ;  final   String   xml   =  """"<root empty-array=\""""true\""""></root>"""" ;  assertEquals ( xml ,  U . toXml ( ( Map < String ,  Object > )   U . fromJson ( json ) ) ) ;  assertEquals ( json ,  U . toJson ( ( Map < String ,  Object > )   U . fromXml ( xml ) ) ) ;  }
@ Override  public   void   onAddLocalCapabilityResponse ( AddLocalCapabilityResponse   response )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: onAddLocalCapabilityResponse"""" ) ;  }
@ Override  public   String   getPlayerSuffix ( String   worldName ,  String   playerName )   {  AnjoPermissionsHandler   handler ;  if  ( worldName   ==   null )   {  handler   =   groupManager . getWorldsHolder () . getWorldPermissionsByPlayerName ( playerName ) ;  }   else  {  handler   =   groupManager . getWorldsHolder () . getWorldPermissions ( worldName ) ;  }  if  ( handler   ==   null )   {  return  """""""" ;  }  return  handler . getUserSuffix ( playerName ) ;  }
private   FormValidation   validateColorLiteral ( String   name )   {  final   int   nameLength   =  name . trim () . length () ;  return  ( nameLength   <   1   ||   nameLength   >   64 )  ?   FormValidation . error ( """"Color literal length must be between 1 and 64 chars."""" )   :  FormValidation . ok () ;  }
public   static   String   toText ( final   Method   method ,  final   Object []   args , final   boolean   trim ,  final   boolean   skip )   {  return  Mnemos . toText ( method ,  args ,  """""""" ,  trim ,  skip ) ;  }
private   void   startFileActivity ( ServerFile   file ,  List < ServerFile >   serverFiles )   {  Intent   intent   =  Intents . Builder . with ( this ) . buildServerFileIntent ( null ,  serverFiles ,  file ) ;  startActivity ( intent ) ;  }
@ Override   public   ShortIndexer   reindex ( Index   index )   {  return  new   ShortBufferIndexer ( buffer ,  index ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  AuthenticationStep   authenticationStep   =  ( AuthenticationStep )   o ;  return  Objects . equals ( this . id ,  authenticationStep . id )   &&  Objects . equals ( this . options ,  authenticationStep . options ) ;  }
java . util . concurrent . ScheduledFuture < T >   getTimeout ()   {  return  timeout ;  }
@ Override  public   void   onStart ( ITestContext   iTestContext )   {  getLifecycle () . fire ( new   TestSuiteStartedEvent ( getSuiteUid ( iTestContext ) ,  getCurrentSuiteTitle ( iTestContext ) ) . withTitle ( getCurrentSuiteTitle ( iTestContext ) ) . withLabels ( AllureModelUtils . createTestFrameworkLabel ( """"TestNG"""" ) ) ) ;  addPendingMethods ( iTestContext ) ;  }
@ Override   public   < V ,  T   extends  Throwable >   Callable < V ,  T >   userRequest ( Callable < V ,  T >   op ,  Callable < V ,  T >   stem )   {  if  ( op . getClass () . getName () . equals ( """"hudson.FilePath$FileCallableWrapper"""" )   &&   JenkinsJVM . isJenkinsJVM () )   {  throw  new   SecurityException ( """"blocked"""" ) ;  }  return  stem ;  }
@ DataProvider ( name   =   """"scim2UserConfigProvider"""" )  public   static   Object [] []   scim2UserConfigProvider ()   {  return  new   Object [] []   { {  TestUserMode . SUPER_TENANT_ADMIN  } ,  {  TestUserMode . TENANT_ADMIN  } } ;  }
@ Test ( dependsOnMethods   =   { """"testAddIdPTemplateConflict"""" } )  public   void   testFilterIdPTemplatesWithInvalidSearchKey ()   throws  Exception   {  String   url   =  IDP_API_BASE_PATH   +   PATH_SEPARATOR   +   IDP_TEMPLATE_PATH ;  Map < String ,  Object >   filterParam   =  new   HashMap <> () ;  filterParam . put ( """"filter"""" ,  """"test eq 'DEFAULT'"""" ) ;  Response   response   =  getResponseOfGetWithQueryParams ( url ,  filterParam ) ;  validateErrorResponse ( response ,  HttpStatus . SC_BAD_REQUEST ,  """"IDP-65055"""" ,  """"Invalid search filter"""" ) ;  }
@ Test  @ Ignore  public   void   test ()   throws  IOException   {  List < String >   differences   =  new   ArrayList < String > () ;  File   outFolder   =  new   File ( testDestFolder ) ;  if  ( ! outFolder . exists () )   {  outFolder . mkdirs () ;  }  TestUtils . cleanFolder ( outFolder ,  true ) ;  
public   static   PwmConfigBuilder   newInstance ( Context   context )   {  return  new   DefaultPwmConfigBuilder ( context ) ;  }
public   void   setAuthorizationDetailsTypes ( List < String >   authorizationDetailsTypes )   {  this . authorizationDetailsTypes   =   authorizationDetailsTypes ;  }
public   static   boolean   isRandomForestAlgorithm ( String   alg )   {  return  CommonConstants . RF_ALG_NAME . equalsIgnoreCase ( alg ) ;  }
public   < F >   List < F >   mapIndexed ( final   BiFunction < Integer ,  ?   super  T ,  F >   func )   {  return  mapIndexed ( newArrayList ( iterable ) ,  func ) ;  }
@ Override   public   boolean   equals ( Object   o )   {  if  ( this   ==   o )  return  true ;  if  ( o   ==   null )  return  false ;  if  ( ! canEqual ( o ) )  return  false ;  ValidationEvent < ? >   that   =  ( ValidationEvent < ? > )   o ;  if  ( ! that . canEqual ( this ) )   {  return  false ;  }  return  schema . equals ( that . schema )   &&  instance . equals ( that . instance ) ;  }
@ Override  public   void   run ()   {  isRunning   =   true ;  try  {  Runtime . getRuntime () . exec ( """"logcat -c"""" ) ;  Process   process   =  Runtime . getRuntime () . exec ( """"logcat"""" ) ;  try  ( BufferedReader   bufferedReader   =  new   BufferedReader ( new   InputStreamReader ( process . getInputStream () ) ) )   {  String   logTxt   =  bufferedReader . readLine () ;  do  {  broadcastLog ( logTxt ) ;  }  while  ( isRunning   &&   ( ( logTxt   =   bufferedReader . readLine () )   !=   null ) ) ;  
@ Override  public   String   toString ()   {  return  String . format ( """"ATTR %s, %s"""" ,  this . name ,  this . value ) ;  }
@ JsonProperty  public   void   setEpsilons ( double []   epsilons )   {  this . epsilons   =   epsilons ;  }
@ Test  public   void   violationCountWithoutCauses ()   {  ValidationException   subject   =  subjectWithCauses () ;  assertEquals ( 1 ,  subject . getViolationCount () ) ;  }
public   String   uncapitalize ()   {  return  uncapitalize ( getString () . get () ) ;  }
public   void   fill ()   {  OpenApiFields . link () . forEach ( this :: addUnique ) ;  }
public   boolean   getTotalThresholdAnalysisExploitable ()   {  return  totalThresholdAnalysisExploitable ;  }
@ Override  protected   void   checkKoKo ( final   ProcessingReport   report )  throws  ProcessingException  {  verify ( report ,  never () ) . error ( anyMessage () ) ;  }
@ Override  public   ObjectIdGenerator < UUID >   forScope ( Class < ? >   scope )   {  return  this ;  }
@ Test  public   void   testMissingSecurityDefinition ()   {  assertThrows ( IllegalArgumentException . class , ()  ->   OpenApiCompare . fromLocations ( OPENAPI_DOC5 ,  OPENAPI_DOC5 ) ) ;  }
@ Override  public   boolean   shouldRequestData ( T   accessor )   {  if  ( ! accessor . showDetails ()   &&   IWailaConfig . get () . plugin () . get ( JadeIds . UNIVERSAL_ENERGY_STORAGE_DETAILED ) )   {  return  false ;  }  return  WailaCommonRegistration . instance () . energyStorageProviders . hitsAny ( accessor ,  IServerExtensionProvider :: shouldRequestData ) ;  }
private   static   String   getIndentChars ( int   indent )   {  if  ( indent   <   0 )   {  return  """"\t"""" . repeat ( - indent ) ;  }  return  """" """" . repeat ( indent ) ;  }
public   void   load ()   throws  IOException  {  FileInputStream   fis   =  new   FileInputStream ( f ) ;  InputStreamReader   isr   =  new   InputStreamReader ( fis ,  """"UTF8"""" ) ;  root   =   ( Map < String ,  Object > )   yml . load ( isr ) ;  isr . close () ;  }
private   boolean   checkJobStatusPermission ( @ NonNull   Permission   permission )   {  return  permission . getId () . equals ( """"hudson.model.Item.ViewStatus"""" ) ;  }
@ JsonIgnore  public   Boolean   isNormalizeSampleNegOnly ()   {  return  normalize . getSampleNegOnly () ;  }
 <argument pos:start=""""""""2641:54"""""""" pos:end=""""""""2641:57""""""""><expr pos:start=""""""""2641:54"""""""" pos:end=""""""""2641:57""""""""><name pos:start=""""""""2641:54"""""""" pos:end=""""""""2641:57"""""""">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Override  public   void   dropTable ( String   table ,  Optional < String >   database )   {  try  {  try  ( Statement   stmt   =  conn . createStatement () ; )   {  String   dbTbl   =  dbTblFormat ( table ,  database ) ;  String   sql   =  String . format ( DROP_TABLE_STMT_FORMAT ,  dbTbl ) ;  _logger . info ( """"Executing SQL: """"   +   sql ) ;  stmt . execute ( sql ) ;  }  }   catch  ( SQLException   e )   {  throw  new   RuntimeException ( e ) ;  }  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  Property   property   =  ( Property )   o ;  return  Objects . equals ( this . key ,  property . key )   &&  Objects . equals ( this . value ,  property . value ) ;  }
public   CertData   getCertData ()   {  if  ( certData   ==   null   &&   certDataBinder   !=   null )   {  certData   =   CertData . unwrap ( certDataBinder ) ;  }  return  certData ;  }
public   List < String >   getOtherNames ()   {  if  ( otherNames   ==   null )   {  otherNames   =   new   ArrayList <> () ;  }  return  otherNames ;  }
@ Test  public   void   toStringTest ()   {  JSONObject   rawSchemaJson   =  ResourceLoader . DEFAULT . readObj ( """"tostring/ref.json"""" ) ;  String   actual   =  SchemaLoader . load ( rawSchemaJson ) . toString () ;  assertTrue ( ObjectComparator . deepEquals ( rawSchemaJson . query ( """"/properties"""" ) , new   JSONObject ( actual ) . query ( """"/properties"""" ) ) ) ;  }
 <argument pos:start=""""""""980:82"""""""" pos:end=""""""""980:83""""""""><expr pos:start=""""""""980:82"""""""" pos:end=""""""""980:83""""""""><name pos:start=""""""""980:82"""""""" pos:end=""""""""980:83"""""""">oc</name></expr></argument>
@ NonNull  private   static   File   jsonFile ( Context   context ,  String   key )   {  return  new   File ( getExistingPreferencesDirectory ( context ) ,  key   +   """".json"""" ) ;  }
public   void   setAccuracy ( Double   accuracy )   {  this . accuracy   =   accuracy ;  }
default   int   writeRegisterWord ( int   register ,  int   word )   {  byte []   buffer   =  new   byte []   {  ( byte ) ( word   >>   8 ) ,  ( byte ) word  } ;  return  this . writeRegister ( register ,  buffer ) ;  }
@ Override  public   < TContinuationResult >   Task < TContinuationResult >   continueWithTask ( Continuation < TResult ,  Task < TContinuationResult > >   continuation )   {  return  continueWithTask ( MAIN_THREAD ,  continuation ) ;  }
@ Test  void   failsOnNonFinalFields ()   {  Assertions . assertThrows ( IllegalStateException . class , ()  ->   new   ImmutabilityCheckerTest . NonFinal ( """"test"""" ) ) ;  }
public   ApplicationModel   inboundProtocolConfiguration ( InboundProtocols   inboundProtocolConfiguration )   {  this . inboundProtocolConfiguration   =   inboundProtocolConfiguration ;  return  this ;  }
 <argument pos:start=""""""""190:82"""""""" pos:end=""""""""190:92""""""""><expr pos:start=""""""""190:82"""""""" pos:end=""""""""190:92""""""""><name pos:start=""""""""190:82"""""""" pos:end=""""""""190:92"""""""">queryResult</name></expr></argument>
public   static   void   setShowPastEventsWithDefaultColor ( Context   context ,  boolean   value )   {  setBoolean ( context ,  PREF_SHOW_PAST_EVENTS_WITH_DEFAULT_COLOR ,  value ) ;  }
@ Override  public   void   onCreate ( SQLiteDatabase   db )   {  db . execSQL ( """"CREATE TABLE connectionConfigurations (_id INTEGER PRIMARY KEY AUTOINCREMENT,androidId TEXT,name TEXT NOT NULL,pairedBtAddress TEXT NOT NULL,connectionType INTEGER NOT NULL,role INTEGER NOT NULL,connectionEnabled INTEGER NOT NULL,nodeId TEXT, UNIQUE(name) ON CONFLICT REPLACE);"""" ) ;  }
@ Override  public   void   close ()   throws  IOException   {  closed   =   true ;  if  ( lzma   !=   null )   {  lzma . close () ;  }  in . close () ;  }
public   static   void   show ( Context   context , int   titleId , CharSequence []   items , DialogInterface . OnClickListener   onClickListener )   {  Dialog . newDialog ( context )  . setTitle ( titleId )  . setItems ( items ,  onClickListener )  . show () ;  }
 <argument pos:start=""""""""260:65"""""""" pos:end=""""""""260:69""""""""><expr pos:start=""""""""260:65"""""""" pos:end=""""""""260:69""""""""><name pos:start=""""""""260:65"""""""" pos:end=""""""""260:69"""""""">p75th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Override  public   void   moveCamera ( IObjectWrapper   cameraUpdate )   throws  RemoteException   {  CameraUpdate   camUpdate   =  ( CameraUpdate )   ObjectWrapper . unwrap ( cameraUpdate ) ;  backendMap . applyCameraUpdate ( camUpdate ) ;  }
public   static   ByteBuffer   fill (  ReadableByteChannel   in ,  ByteBuffer   buffer )   throws  IOException   {  while  (  buffer . hasRemaining () )   if  (  in . read (  buffer )   ==   - 1 )   throw  new   BufferUnderflowException () ;  buffer . flip () ;  return  buffer ;  }
public   void   setDistribution (  final   CharSequence   distribution )   {  if  (  distribution   !=   null )   format . getHeader () . createEntry (  DISTRIBUTION ,  distribution ) ;  }
@ DataBoundSetter  public   void   setShowAllRoles ( boolean   showAllRoles )   {  this . showAllRoles   =   showAllRoles ;  }
private   void   printMenuItems ( List < MenuItem >   m )   {  int   i   =  1 ;  for  ( MenuItem   menuItem :  m )   {  if  ( menuItem . getDescription ()   !=   null )   {  QueueProvider . offer ( """"[""""   +   i   +   """"] """"   +   menuItem . getCommand ()   +   """" - """"   +   menuItem . getDescription () ) ;  }   else  {  QueueProvider . offer ( """"[""""   +   i   +   """"] """"   +   menuItem . getCommand () ) ;  }  i ++ ;  }  }
@ Override  public   final   int   getPriority ( Class < ?   extends  DatabaseObject >   objectType ,  Database   database )   {  if  ( database   instanceof   HibernateDatabase )   {  if  ( defaultFor   !=   null   &&   defaultFor . isAssignableFrom ( objectType ) )   {  return  PRIORITY_HIBERNATE_DEFAULT ;  }  if  ( addsTo ()   !=   null )   {  for  ( Class < ?   extends  DatabaseObject >   type   :  addsTo () )   {  if  ( type . isAssignableFrom ( objectType ) )   {  return  PRIORITY_HIBERNATE_ADDITIONAL ;  }  }  }  }  return  PRIORITY_NONE ;  }
public   void   setPropertyOutputSuffix ( String   propertyOutputSuffix )   {  this . propertyOutputSuffix   =   propertyOutputSuffix ;  }
@ Test  void   incorrectCustomSortOrderShouldThrowException2 ()   {  Executable   testMethod   = ()  ->  SortPomImplUtil . create ()  . customSortOrderFile ( """"difforder/VERYdifferentOrder.xml"""" )  . testVerifyXmlIsOrdered ( """"/sortOrderFiles/sorted_differentOrder.xml"""" ) ;  var   thrown   =  assertThrows ( RuntimeException . class ,  testMethod ) . getCause () . getCause () ;  assertThat ( thrown ,  isA ( FailureException . class ) ) ;  assertThat ( thrown . getMessage () ,  endsWith ( """"VERYdifferentOrder.xml in classpath"""" ) ) ;  }
@ Override   public   FloatIndexer   put ( long   i ,  long   j ,  float []   f ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  array [ ( int ) index ( i ,  j )   +   n ]   =   f [ offset   +   n ] ;  }  return  this ;  }
private   void   clickButtonsToDownloadLayout ( String   layoutName )   {  onView ( withText ( layoutName ) ) . perform ( click () ) ;  
public   static   void   startActivity ( Context   context ,  Class < ?   extends  Activity >   activityClass )   {  startActivity ( context ,  new   Intent ( context ,  activityClass ) ,  true ) ;  }
public   double   getRetryableClientQuarantineRefreshPercentage ()   {  return  retryableClientQuarantineRefreshPercentage ;  }
@ Override  public   int   compareTo ( Pitch   other )   {  if  ( this . octave   <   other . octave )   {  return  - 1 ;  }  if  ( this . octave   >   other . octave )   {  return  1 ;  }  Integer   thisKeyPosition   =  PitchUtils . PITCHES . indexOf ( this . key ) ;  Integer   otherKeyPosition   =  PitchUtils . PITCHES . indexOf ( other . key ) ;  return  thisKeyPosition . compareTo ( otherKeyPosition ) ;  }
public   boolean   uploadWarFile ( String   filePath )   throws  RemoteException ,  MalformedURLException   {  File   file   =  new   File ( filePath ) ;  String   fileName   =  file . getName () ;  URL   url   =  new   URL ( """"file:
@ Override   public   ULongIndexer   put ( long   i ,  BigInteger   l )   {  array [ ( int ) index ( i ) ]   =   fromBigInteger ( l ) ;  return  this ;  }
public   boolean   isClient ()  {  return  this . getEntity () . getCommandSenderWorld () . isClientSide () ;  }
private   ClientResponse   deleteScope ( String   name )   {  Resource   userResource   =  getUserResource ( """"/name/""""   +   name ) ;  return  userResource . contentType ( MediaType . APPLICATION_JSON_TYPE ) . accept ( MediaType . APPLICATION_JSON )  . delete ( ClientResponse . class ) ;  }
@ SubscribeEvent ( receiveCanceled   =   true )  public   void   onPlayerTick ( TickEvent . PlayerTickEvent   event )  {  if ( ! Config . COMMON . gameplay . improvedHitboxes . get () )  return;  if ( event . side   ==   LogicalSide . SERVER   &&   event . phase   ==   TickEvent . Phase . END )  {  if ( event . player . isSpectator () )  {  playerBoxes . remove ( event . player ) ;  return;  }  LinkedList < AABB >   boxes   =  playerBoxes . computeIfAbsent ( event . player ,  player  ->   new   LinkedList <> () ) ;  boxes . addFirst ( event . player . getBoundingBox () ) ;  if ( boxes . size ()   >   20 )  {  boxes . removeLast () ;  }  }  }
private   boolean   isWebResourceStateValid ( Bundle   state )   {  return  state   !=   null ;  }
@ Override  public   int   hashCode ()   {  return  toJson () . toString () . hashCode () ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  Draft_6455   that   =  ( Draft_6455 )   o ;  if  ( maxFrameSize   !=   that . getMaxFrameSize () )   {  return  false ;  }  if  ( negotiatedExtension   !=   null  ?   ! negotiatedExtension . equals ( that . getExtension () )   :  that . getExtension ()   !=   null )   {  return  false ;  }  return  protocol   !=   null  ?   protocol . equals ( that . getProtocol () )   :  that . getProtocol ()   ==   null ;  }
public   void   setClickSteadyTime ( long   clickSteadyTime )   {  this . clickSteadyTime   =   clickSteadyTime ;  }
private   PsiElementPattern . Capture < YAMLQuotedText >   mappingSchemaNamePattern ()   {  return  psiElement ( YAMLQuotedText . class )  . withSuperParent ( 3 ,  psiElement ( YAMLKeyValue . class ) . withName ( """"mapping"""" ) )  . withoutText ( StandardPatterns . string () . contains ( SwaggerConstants . REFERENCE_PREFIX ) )  . withoutText ( FILE_NAME_PATTERN )  . withoutText ( URL_PATTERN )  . withLanguage ( YAMLLanguage . INSTANCE ) ;  }
public   ToStringHelper   value ( long   val )   {  return  value ( Long . toString ( val ) ) ;  }
public   List < Map < String ,  Object > >   getFlattenParams ()   {  return  this . flattenParams ;  }
public   void   removeClaimMapping ( String   dialectURI ,  String   claimURI )  throws  RemoteException ,  Exception   {  try  {  claimManagementServiceStub . removeClaimMapping ( dialectURI ,  claimURI ) ;  }   catch  ( RemoteException   e )   {  throw  new   RemoteException ( """"Unable to remove claim Mapping """" ,  e ) ;  }  }
@ Override  public   void   getChanges ( GetChangesRequest   request ,  IDriveServiceCallbacks   callbacks )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: getChanges"""" ) ;  }
@ Override   public   HalfIndexer   put ( long []   indices ,  float []   h ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  array [ ( int ) index ( indices )   +   n ]   =   ( short ) fromFloat ( h [ offset   +   n ] ) ;  }  return  this ;  }
private   DefaultProfileSelector   createProfileSelector ()   {  DefaultProfileSelector   selector   =  new   DefaultProfileSelector () ;  selector . addProfileActivator ( new   FileProfileActivator ()  . setPathTranslator ( new   DefaultPathTranslator () ) ) ;  selector . addProfileActivator ( new   JdkVersionProfileActivator () ) ;  selector . addProfileActivator ( new   PropertyProfileActivator () ) ;  selector . addProfileActivator ( new   OperatingSystemProfileActivator () ) ;  return  selector ;  }
@ Override  public   void   connect ()   {  Log . d ( TAG ,  """"connect()"""" ) ;  googleApiClient . connect () ;  }
@ Override  public   double   getMissingRate ()   {  long   total   =  getTotalInstCnt () ;  double   missingInstCnt   =  counter [ binBoundary . size () ] ;  return  ( ( total   !=   0 )  ?   missingInstCnt / total   :  0.0 ) ;  }
public   void   setElementType ( String   elementType )   {  this . elementType   =   elementType ;  }
public   void   onClick ( DialogInterface   dialog ,  int   which )  {  EditText   input   =  ( EditText ) ( ( AlertDialog ) dialog ) . findViewById ( R . id . text ) ;  final   String   k   =  input . getText () . toString () ;  if  ( ! k . equals ( """""""" ) )  callback . select ( k ) ;  }
@ Deprecated  public   void   setSocket ( Socket   socket )   {  if  ( this . socket   !=   null )   {  throw  new   IllegalStateException ( """"socket has already been set"""" ) ;  }  this . socket   =   socket ;  }
public   static   int   i2cBlockProcessCall ( int   handle ,  int   i2cReg ,  byte []   buf ,  int   count ) {  return  i2cBlockProcessCall ( handle ,  i2cReg ,  buf ,  0  ,  count ) ;  }
private   void   UpdatePlayPause ( boolean   isPlaying )   {  if  ( this . isPlaying   !=   isPlaying )   {  this . isPlaying   =   isPlaying ;  if  ( isPlaying )   {  playPauseButton . setImageResource ( R . drawable . lb_ic_pause ) ;  }   else  {  playPauseButton . setImageResource ( R . drawable . lb_ic_play ) ;  }  }  }
public   SOURCE_TYPE   clear () {  this . bindings . clear () ;  return  this . source ;  }
public   static   boolean   isNumber ( final   Object   object )   {  return  object   instanceof   Number ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Check add user store via DTO"""" )  private   void   testAddJDBCUserStore ()   {  
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  ChangedContent   that   =  ( ChangedContent )   o ;  return  Objects . equals ( oldContent ,  that . oldContent )  &&   Objects . equals ( newContent ,  that . newContent )  &&   Objects . equals ( context ,  that . context )  &&   Objects . equals ( increased ,  that . increased )  &&   Objects . equals ( missing ,  that . missing )  &&   Objects . equals ( changed ,  that . changed ) ;  }
void   change_item ( int   i ,  E   v )  {  _values . set ( i ,  v ) ;  set_values ( _values ,  true ) ;  }
@ Override   public   boolean   release ()   {  return  pointer   !=   null  ?   pointer . releaseReference ()   :  false ;  }
@ Override  public   void   onSignalingChange ( PeerConnection . SignalingState   signalingState )   {  ThreadUtils . runOnExecutor ( ()  ->  {  WritableMap   params   =  Arguments . createMap () ;  params . putInt ( """"pcId"""" ,  id ) ;  params . putString ( """"signalingState"""" ,  signalingStateString ( signalingState ) ) ;  webRTCModule . sendEvent ( """"peerConnectionSignalingStateChanged"""" ,  params ) ;  } ) ;  }
public   List < Country >   getByLanguage ( String   language )   {  List < Country >   result   =  new   ArrayList < Country > () ;  for  ( Country   country   :  countries )   {  for  ( String   lang   :  country . getLanguages () )   {  if  ( lang . toLowerCase () . equals ( language . toLowerCase () ) )   {  result . add ( country ) ;  }  }  }  return  result ;  }
public   void   setImageLoadTimeout ( int   imageLoadTimeout )  {  this . imageLoadTimeout   =   imageLoadTimeout ;  }
public   List < String >   readDataIntoList ( Scanner   scanner )   {  List < String >   rawDataList   =  new   LinkedList < String > () ;  int   cntTotal   =  0 ;  while ( scanner . hasNextLine () )   {  String   raw   =  scanner . nextLine () ;  rawDataList . add ( raw ) ;  cntTotal ++ ;  if ( cntTotal   %   100000   ==   0 )   {  log . info ( """"Read """"   +   cntTotal   +   """" records."""" ) ;  }  }  log . info ( """"Totally read """"   +   cntTotal   +   """" records."""" ) ;  return  rawDataList ;  }
private   int   getRealValue ( TermLength   value ,  int   size )   {  if  ( value . getUnit ()   ==   TermNumeric . Unit . px )   {  return  Utils . dipToPixels ( value . getValue () . intValue () ) ;  }   else if  ( value . isPercentage () )   {  return  size   *   value . getValue () . intValue ()   /   100 ;  }  return  value . getValue () . intValue () ;  }
public   void   setBinWeightedNeg ( List < Double >   binWeightedNeg )   {  this . binWeightedNeg   =   binWeightedNeg ;  }
@ Override  public   int   getHealthStatusMinNumberOfAvailablePeers ()   {  return  this . minAvailableInstancesForPeerReplication ;  }
@ Override  public   String   getPlayerPrefix ( String   world ,  String   playerName )   {  return  getPlayerInfoString ( world ,  playerName ,  """"prefix"""" ,  null ) ;  }
public   void   actionPerformed ( java . awt . event . ActionEvent   evt )   {  chkbL4TextDefaultActionPerformed ( evt ) ;  }
public   final   void   stopSelf ( int   startId )   {  this . callbacks . superStopSelf ( startId ) ;  }
private   void   deleteUser ()   {  log . info ( """"Deleting User """"   +   config . getUser () . getUsername () ) ;  try  {  remoteUSMServiceClient . deleteUser ( config . getUser () . getTenantAwareUsername () ) ;  }   catch  ( Exception   e )   {  Assert . fail ( """"Error while deleting the user"""" ,  e ) ;  }  }
@ Override  public   boolean   successful ()   {  return  """"OK"""" . equals ( status )   ||   """"ZERO_RESULTS"""" . equals ( status ) ;  }
public   void   subscribe ( String   registrationToken ,  String   topic ,  Bundle   extras )   throws  IOException   {  if  ( TextUtils . isEmpty ( registrationToken ) )  throw  new   IllegalArgumentException ( """"No registration token!"""" ) ;  if  ( TextUtils . isEmpty ( topic )   ||   ! topicPattern . matcher ( topic ) . matches () )  throw  new   IllegalArgumentException ( """"Invalid topic: """"   +   topic ) ;  if  ( extras   ==   null )   extras   =   new   Bundle () ;  extras . putString ( EXTRA_TOPIC ,  topic ) ;  instanceId . getToken ( registrationToken ,  topic ,  extras ) ;  }
public   Chain < String >   padEnd ( final   int   length ,  final   String   chars )   {  return  new   Chain <> ( U . padEnd ( ( String )   item () ,  length ,  chars ) ) ;  }
@ Override  public   void   mousePressed ( MouseEvent   e )   {  if  ( e . getButton ()   !=   btnCode )  return;  btnPressed   =   true ;  final   Point   point   =  e . getPoint () ;  final   Point   imgRelPoint   =  new   Point ( point . x   -   offsetX ,  point . y   -   offsetY ) ;  relRect . setStartPoint ( imgRelPoint ) ;  relRect . setEndPoint ( imgRelPoint ) ;  repaint () ;  }
@ Override  public   void   createFieldEditors ()   {  addField ( new   BooleanFieldEditor ( LESS_PREFERENCES_COMPLETION_TRIGGER_PROPERTY_VALUE_COMPLETION , Messages . LESSCompletionPreferencePage_completion_triggerPropertyValueCompletion , getFieldEditorParent () ) ) ;  addField ( new   BooleanFieldEditor ( LESS_PREFERENCES_COMPLETION_COMPLETE_PROPERTY_WITH_SEMICOLON , Messages . LESSCompletionPreferencePage_completion_completePropertyWithSemicolon ,  getFieldEditorParent () ) ) ;  }
@ Test  public   void   thatSecurityFieldsInOperationAreSuggested ()   {  getCaretCompletions ( """"security_in_operation"""" ) . assertContains ( """"petstoreImplicit"""" ) . isOfSize ( 1 ) ;  }
public   void   updateRoleName ( String   oldRoleName ,  String   newRoleName )  throws  RemoteUserStoreManagerServiceUserStoreExceptionException ,  RemoteException   {  remoteUserStoreManagerServiceStub . updateRoleName ( oldRoleName ,  newRoleName ) ;  }
@ Bean  @ ConditionalOnMissingBean ( EurekaHttpClient . class )  public   WebClientEurekaHttpClient   configDiscoveryWebClientEurekaHttpClient ( EurekaClientConfigBean   config , ObjectProvider < WebClient . Builder >   builder ,  Environment   env )   {  return  ( WebClientEurekaHttpClient )   new   WebClientTransportClientFactory ( builder :: getIfAvailable )  . newClient ( HostnameBasedUrlRandomizer . randomEndpoint ( config ,  env ) ) ;  }
public   void   togglePlayPause ( boolean   isPaused )   {  if  ( isPaused )   {  mediaPlayer . pause () ;  }   else  {  mediaPlayer . play () ;  }  playbackStateChanged () ;  }
@ Nullable  public   String   getResidentKeyRequirementAsString ()   {  if  ( residentKeyRequirement   ==   null )   return  null ;  return  residentKeyRequirement . toString () ;  }
public   static   void   closeQuietly ( Closeable   closeable )   {  if  ( closeable   !=   null )   {  try  {  closeable . close () ;  }   catch  ( IOException   unused )   {  }  }  }
default   int   i2cWriteI2CBlockData ( int   handle ,  int   register ,  Charset   charset ,  CharSequence   data ) {  return  i2cWriteI2CBlockData ( handle ,  register ,  charset ,  data ,  data . length () ) ;  }
@ Test  public   void   expansion ()   {  assertThat ( util . getExpansion ( """"A"""" ) ,  is ( """"http:
@ Override  public   boolean   apply ( Info < T ,  R >   info )   {  if  ( info   ==   null )   {  throw  new   IllegalArgumentException ( """"info cannot be null"""" ) ;  }   else  {  return  info . lat ()   >=   bottomRightLat   &&   info . lat ()   <   topLeftLat  &&   info . lon ()   >   topLeftLon   &&   info . lon ()   <=   bottomRightLon ;  }  }
@ Override  public   int   delete ( @ NonNull   Uri   uri ,  @ Nullable   String   s ,  @ Nullable   String []   strings )   {  throw  new   UnsupportedOperationException () ;  }
@ NonNull  @ Override  public   < T1 >   T1 []   toArray ( @ NonNull   T1 []   a )   {  return  ( T1 [] )   set . toArray ( a ) ;  }
@ Override  public   void   close ()   throws  IOException   {  super . close () ;  data   =   Optional . of ( ByteSource . wrap ( toByteArray () ) ) ;  lastModified   =   System . currentTimeMillis () ;  }
@ Test  public   void   emptyGini ()   throws  Exception   {  System . out . println ( """"- Empty Gini"""" ) ;  for  ( BaseCountry   c   :  countries )   {  if  ( c . getGini ()   ==   null )   {  System . out . println ( c . getName () ) ;  }  }  }
public   Chain < String >   trunc ()   {  return  new   Chain <> ( U . trunc ( ( String )   item () ) ) ;  }
public   Response   get ()   throws  IOException   {  Request . Builder   request   =  new   okhttp3 . Request . Builder () . url ( coordinator   +   """"/v1/query"""" ) ;  return  execute ( request ) ;  }
@ Override   public   ByteIndexer   put ( long   i ,  long   j ,  long   k ,  byte   b )   {  putRaw ( index ( i ,  j ,  k ) ,  b ) ;  return  this ;  }
public   boolean   hasNext ()  {  if  (  closed  )   return  false ;  next   =   (   next   ==   null   )  ?   nextLine ()   :  next ;  if  (  null   ==   next  )   closed   =   closeReader () ;  return  (   null   !=   next   ) ;  }
public   void   hadErrorCount ( int   expectedCount )   {  checkDiagnosticCount ( expectedCount ,  ERROR ) ;  }
public   static   RoleType   fromString ( String   roleName )   {  if  ( roleName . equals ( RoleBasedAuthorizationStrategy . GLOBAL ) )   {  return  Global ;  }  if  ( roleName . equals ( RoleBasedAuthorizationStrategy . PROJECT ) )   {  return  Project ;  }  if  ( roleName . equals ( RoleBasedAuthorizationStrategy . SLAVE ) )   {  return  Slave ;  }  throw  new   java . lang . IllegalArgumentException ( """"Unexpected roleName=""""   +   roleName ) ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"requestObjectSignatureAlgorithm"""" )  @ Valid  public   MetadataProperty   getRequestObjectSignatureAlgorithm ()   {  return  requestObjectSignatureAlgorithm ;  }
@ Override  public   Chain < T >   firstOrNull ( final   Predicate < T >   pred )   {  return  new   Chain <> ( Underscore . firstOrNull ( value () ,  pred ) ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( leftExamples ,  rightExamples ) ;  }
public   final   boolean   childOfResponses ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.*.*.responses"""" ) ;  }
public   Builder   setPathToVoicebank ( File   pathToVoicebank )   {  newVoicebank . pathToVoicebank   =   pathToVoicebank ;  return  this ;  }
 <argument pos:start=""""""""1102:93"""""""" pos:end=""""""""1102:103""""""""><expr pos:start=""""""""1102:93"""""""" pos:end=""""""""1102:103""""""""><name pos:start=""""""""1102:93"""""""" pos:end=""""""""1102:103"""""""">pixelFormat</name></expr></argument>
public   Settings   withCommandQueueBufferSize ( int   commandQueueBufferSize )   {  return  new   Settings ( this . agentTimeout , commandQueueBufferSize , this . failoverTimeout , this . connectionRetries , this . connectionMinBackoff , this . connectionMaxBackoff ) ;  }
void   addPortamento ( int   noteStartMs ,  Portamento   portamento )   {  if  ( this . portamento . containsKey ( noteStartMs ) )   {  
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder ( """"[PlusCode: """" ) ;  sb . append ( globalCode ) ;  if  ( compoundCode   !=   null )   {  sb . append ( """", compoundCode="""" ) . append ( compoundCode ) ;  }  sb . append ( """"]"""" ) ;  return  sb . toString () ;  }
private   static   MessageDigest   getSha256Digest ()   throws  NoSuchAlgorithmException   {  return  MessageDigest . getInstance ( """"SHA-256"""" ) ;  }
AnnotatedArrayList < T >   readList ( List < DataBundleTypedValue >   values ,  List < Asset >   assets )   {  AnnotatedArrayList < T >   list   =  new   AnnotatedArrayList < T > ( this ) ;  for  ( DataBundleTypedValue   value   :  values )   {  list . add ( read ( value ,  assets ) ) ;  }  return  list ;  }
 <argument pos:start=""""""""416:70"""""""" pos:end=""""""""416:80""""""""><expr pos:start=""""""""416:70"""""""" pos:end=""""""""416:80""""""""><name pos:start=""""""""416:70"""""""" pos:end=""""""""416:75"""""""">startX</name> <operator pos:start=""""""""416:77"""""""" pos:end=""""""""416:77"""""""">+</operator> <literal type=""""""""number"""""""" pos:start=""""""""416:79"""""""" pos:end=""""""""416:80"""""""">88</literal></expr></argument>
public   void   renderHeader ( ITooltip   tooltip )   {  if  ( title   !=   null )   {  tooltip . add ( new   HorizontalLineElement () ) ;  tooltip . append ( IElementHelper . get () . text ( title ) . scale ( 0.5F ) ) ;  tooltip . append ( new   HorizontalLineElement () ) ;  }  
@ Override  public   int   spiOpen ( int   channel ,  int   baud ,  int   flags )   {  logger . trace ( """"[SPI::OPEN] -> Open SPI Channel [{}] at Baud Rate [{}]; Flags=[{}]"""" ,  channel ,  baud ,  flags ) ;  validateReady () ;  int   handle   =  PIGPIO . spiOpen ( channel ,  baud ,  flags ) ;  boolean   success   =  handle   >= 0 ;  logger . trace ( """"[SPI::OPEN] <- HANDLE={}; SUCCESS={}"""" ,   handle ,  success ) ;  validateResult ( handle ,  false ) ;  
default   boolean   childOfRootSecurityKey ( PsiElement   psiElement )   {  return  false ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  RestTemplateTimeoutProperties   that   =  ( RestTemplateTimeoutProperties )   o ;  return  connectTimeout   ==   that . connectTimeout   &&   connectRequestTimeout   ==   that . connectRequestTimeout  &&   socketTimeout   ==   that . socketTimeout ;  }
public   void   writePending (  final   FileChannel   channel )   {  for  (  Entry <  ? >   entry   :  pending . keySet () )   {  try  {  ByteBuffer   data   =  ByteBuffer . allocate (  entry . size () ) ;  entry . write (  data ) ;  channel . position (  Lead . LEAD_SIZE   +   HEADER_HEADER_SIZE   +   count ()   *   ENTRY_SIZE   +   pending . get (  entry ) ) ;  Util . empty (  channel ,  (   ByteBuffer )   data . flip () ) ;  }  catch  (  Exception   e )   {  throw  new   RuntimeException (  """"Error writing pending entry '""""   +   entry . getTag ()   +   """"'."""" ,  e ) ;  }  }  }
@ Override  public   void   onReceive ( Context   context ,  Intent   intent )   {  handleIntent ( intent ) ;  stop () ;  }
@ Test  public   void   getIsoTest () {  ButtonsPresets   activity   =  new   ButtonsPresets () ;  int   VALUE   =  0 ,  EXPECTED   =  1 ;  String   cases [] []   =  { { """"test_es.xml"""" ,  """"es"""" } , { """"a_ge.xml"""" ,  """"ge"""" } , { """"en_fr.xml"""" ,  """"fr"""" } , { """"foo_en.xml"""" ,  """"en"""" } , { """"en.xml"""" ,  """"en"""" } ,} ;   
public   AudioMetadataRetrievingTask   setImageView ( ImageView   imageView )   {  this . imageViewWeakReference   =   new   WeakReference <> ( imageView ) ;  return  this ;  }
static   Configuration   onConfigurationChanged ( ContextWrapper   contextWrapper ,  Configuration   newConfig )   {  if  ( mLocale   ==   null   ||   mDefaultLocale   ==   null )   {  mDefaultLocale   =   newConfig . getLocales () . get ( 0 ) ;  }  return  mLocale   ==   null  ?   newConfig   :  getCustomizeConfiguration ( contextWrapper . getBaseContext () ,  mLocale ) ;  }
@ Override  public   BUILDER_TYPE   min ( Integer   value )   {  this . properties . put ( AnalogOutputConfig . RANGE_MIN_KEY ,  value . toString () ) ;  return  ( BUILDER_TYPE ) this ;  }
default   String   readString ( Charset   charset ,  int   numberOfBytes )   {  return  readString ( charset ,  0 ,  numberOfBytes ) ;  }
@ Bean  @ ConditionalOnMissingBean  public   EurekaServerContext   eurekaServerContext ( ServerCodecs   serverCodecs ,  PeerAwareInstanceRegistry   registry , PeerEurekaNodes   peerEurekaNodes )   {  return  new   DefaultEurekaServerContext ( this . eurekaServerConfig ,  serverCodecs ,  registry ,  peerEurekaNodes , this . applicationInfoManager ) ;  }
public   void   removeClaimDialect ( String   dialectURI )  throws  RemoteException ,  Exception   {  try  {  claimManagementServiceStub . removeClaimDialect ( dialectURI ) ;  }   catch  ( RemoteException   e )   {  throw  new   RemoteException ( """"Unable to remove claim dialect"""" ,  e ) ;  }  }
boolean   match ( Object   ...   tokens )   {  boolean   found   =  false ;  for  ( Object   t   :  tokens )   {  found   =   found   ||   equals ( t ) ;  }  return  found ;  }
@ Override  public   SuccessfulFileClause < T >   withStringContents ( Charset   charset ,  String   expectedString )   {  javaFileObjectSubject . contentsAsString ( charset ) . isEqualTo ( expectedString ) ;  return  this ;  }
@ Override  public   boolean   isSafeToRunUpdate ()   throws  DatabaseException   {  return  true ;  }
public   void   deleteSubOrgUserStore ( String   domain ,  String   switchedM2MToken )   throws  IOException   {  String   endpointUrl   =  userStoreSubOrgBasePath   +   PATH_SEPARATOR   +   domain ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpDelete ( endpointUrl , getHeadersWithBearerToken ( switchedM2MToken ) ) )   {  Assert . assertEquals ( response . getStatusLine () . getStatusCode () ,  HttpServletResponse . SC_NO_CONTENT , """"User store deletion failed"""" ) ;  }  }
public   void   setAlphaSubspace ( double   alphaSubspace )   {  this . alphaSubspace   =   alphaSubspace ;  }
public   static   DoubleIndexer   create ( double []   array ,  long ...   sizes )   {  return  new   DoubleArrayIndexer ( array ,  sizes ) ;  }
@ Test  public   void   testEvalScoreColumnFound ()   throws  IOException   {  Map < String ,  String >   customPaths   =  new   HashMap < String ,  String > () ;  customPaths . put ( Constants . KEY_SCORE_PATH ,  """"src/test/resources/example/cancer-judgement/DataStore/EvalSet1"""" ) ;  evalConfig . setCustomPaths ( customPaths ) ;  evalConfig . setPerformanceScoreSelector ( """"diagnosis"""" ) ;  new   ConfusionMatrix ( modelConfig ,  null ,  evalConfig ,  this ) ;  }
public   void   addListener ( Consumer < ResourceLocation >   listener )   {  if  ( listeners . isEmpty () )   {  listeners   =   Lists . newArrayList () ;  }  listeners . add ( listener ) ;  }
@ Override  public   void   onWebsocketClosing ( WebSocket   ws ,  int   code ,  String   reason ,  boolean   remote )   {  }
@ Override  public   LibraryBuilder   thaw ()  {  return  new   LibraryBuilder ( this ) ;  }
 <argument pos:start=""""""""491:95"""""""" pos:end=""""""""491:102""""""""><expr pos:start=""""""""491:95"""""""" pos:end=""""""""491:102""""""""><name pos:start=""""""""491:95"""""""" pos:end=""""""""491:102"""""""">normType</name></expr></argument>
public   String   getImagePath ()   {  return  new   File ( pathToVoicebank ,  imageName ) . getAbsolutePath () ;  }
@ Nullable  @ Override  protected   View   onCreateBackgroundView ( LayoutInflater   inflater ,  ViewGroup   container )   {  mBackgroundView   =   inflater . inflate ( R . layout . onboarding_image ,  container ,  false ) ;  return  mBackgroundView ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init () ;  userStoreConfigurationClient   =   new   UserStoreConfigAdminServiceClient ( backendURL ,  sessionCookie ) ;  }
@ DataBoundSetter  public   void   setConditionalCoverageTargets ( String   targets )   {  conditionalCoverageTargets   =   targets ;  }
public   void   on_change ()  {  String   error   =  callback . validate ( input . getText () . toString () ) ;  input . setError ( error ) ;  }
private   double []   locateMaxMinScoreFromFile ( SourceType   sourceType ,  String   maxMinScoreFolder )   throws  IOException   {  List < Scanner >   scanners   =  null ;  double   maxScore   =  Double . MIN_VALUE ;  double   minScore   =  Double . MAX_VALUE ;  try  {  
@ Override  protected   void   onResume ()   {  super . onResume () ;  forceConditionReevaluation () ;  }
protected   void   assertOutputOnRunningPipeline ( JenkinsRule   jenkinsRule , BooleanSupplier   assumption , String   expectedOutput , String   notExpectedOutput , String   pipelineScript , boolean   useShortLog , Map < String ,  String >   properties )   throws  Exception   {  assertOutputOnRunningPipeline ( jenkinsRule ,  assumption ,  Collections . singletonList ( expectedOutput ) ,  Collections . singletonList ( notExpectedOutput ) ,  pipelineScript ,  useShortLog ,  properties ) ;  }
static   void   warmNoReservedCPUs ()   {  if  ( RESERVED_AFFINITY . isEmpty ()   &&   PROCESSORS   >   1 )   {  LoggerFactory . getLogger ( AffinityLock . class ) . info ( """"No isolated CPUs found, so assuming CPUs 1 to {} available."""" ,  ( PROCESSORS   -   1 ) ) ;  }  }
public   static   int   getNumberOfSpacesInRowStartingFromEnd ( final   String   string )   {  int   count   =  0 ;  for  ( int   i   =  string . length ()   -   1 ;   i   >=   0 ;   i -- )   {  final   char   c   =  string . charAt ( i ) ;  if  ( c   !=   ' ' )   {  return  count ;  }  count ++ ;  }  return  count ;  }
private   static   float   compute_max_width ( List < Row >   rows )  {  float   w   =  0.f ;  for  ( Row   r   :  rows )  w   =   Math . max ( w ,  r . keysWidth ) ;  return  w ;  }
@ ApiModelProperty ( example   =   """"text/html"""" ,  required   =   true ,  value   =   """"Content type of the email template."""" )  @ JsonProperty ( """"contentType"""" )  @ Valid  @ NotNull ( message   =   """"Property contentType cannot be null."""" )  public   String   getContentType ()   {  return  contentType ;  }
@ ApiModelProperty ( required   =   true ,  value   =   """""""" )  @ JsonProperty ( """"userCriteria"""" )  @ Valid  @ NotNull ( message   =   """"Property userCriteria cannot be null."""" )  public   UserShareRequestBodyUserCriteria   getUserCriteria ()   {  return  userCriteria ;  }
public   ProjectiveColorTransformerCL   getSurfaceTransformerCL ()   {  return  ( ProjectiveColorTransformerCL ) surfaceTransformer ;  }
default   void   addItemModNameCallback ( JadeItemModNameCallback   callback )   {  addItemModNameCallback ( 0 ,  callback ) ;  }
public   static   List < Field >   parameter ()   {  return  ImmutableList . of ( new   RefField () , new   StringField ( """"name"""" ,  true ) , new   StringField ( """"in"""" ,  true ) , new   StringField ( """"description"""" ) , new   StringField ( """"required"""" ) , new   StringField ( """"deprecated"""" ) , new   StringField ( """"allowEmptyValue"""" ) , new   StringField ( """"style"""" ) , new   StringField ( """"explode"""" ) , new   StringField ( """"allowReserved"""" ) , new   ObjectField ( """"schema"""" ) , new   StringField ( """"example"""" ) , new   ObjectField ( """"examples"""" ) , new   ObjectField ( """"content"""" ) ) ;  }
 <argument pos:start=""""""""253:86"""""""" pos:end=""""""""253:86""""""""><expr pos:start=""""""""253:86"""""""" pos:end=""""""""253:86""""""""><literal type=""""""""number"""""""" pos:start=""""""""253:86"""""""" pos:end=""""""""253:86"""""""">0</literal></expr></argument>
public   void   setCertificate ( String   certificate )   {  this . certificate   =   certificate ;  }
public   static   void   arrayCopy ( final   float []   source ,  final   float []   target )   {  for ( int   i   =  0 ;   i   <   source . length ;   i ++ )   {  target [ i ]   =   source [ i ] ;  }  }
private   void   buildEnrichedSettingsFromScope ()   {  enrichedSettingsFromScope   =   new   HashSet <> () ;  if  ( isProjectScope () )   {  addProjectSettings () ;  }   else  {  addModulesSettings () ;  }  }
public   int   onStartCommand ( Intent   intent ,  int   flags ,  int   startId )   {  return  this . callbacks . superOnStartCommand ( intent ,  flags ,  startId ) ;  }
public   int   getCharacterLevel ( String   characterType )   {  int   characterLevel   =  this . characterLevels . get ( characterType ) ;  return  characterLevel ;  }
public   static   void   renderModel ( ItemStack   stack ,  ItemDisplayContext   display ,  PoseStack   poseStack ,  MultiBufferSource   buffer ,  int   light ,  int   overlay ,  @ Nullable   Level   world ,  @ Nullable   LivingEntity   entity )  {  BakedModel   model   =  Minecraft . getInstance () . getItemRenderer () . getModel ( stack ,  world ,  entity ,  0 ) ;  renderModel ( model ,  display ,  stack ,  poseStack ,  buffer ,  light ,  overlay ) ;  }
@ SuppressWarnings ( """"BooleanMethodIsAlwaysInverted"""" )  public   static   boolean   isWrapped ()   {  return  wrapped ;  }
record   OwnerRequest ( @ NotBlank   String   firstName , @ NotBlank   String   lastName , @ NotBlank   String   address , @ NotBlank   String   city , @ NotBlank   @ Digits ( fraction   =   0 ,  integer   =   12 )   String   telephone )   {  }
@ Override  public   boolean   isNeedWrite ()   {  return  outCrypt . hasRemaining ()  ||   ! isHandShakeComplete () ;   
private   void   writeSettings ( Song   song ,  PrintStream   ps )   {  ps . println ( """"[#SETTING]"""" ) ;  ps . println ( """"Tempo=""""   +   RoundUtils . roundDecimal ( song . getTempo () ,  """"#.##"""" ) ) ;  ps . println ( """"ProjectName=""""   +   song . getProjectName () ) ;  ps . println ( """"OutFile=""""   +   song . getOutputFile () ) ;  ps . println ( """"VoiceDir=""""   +   song . getVoiceDir () ) ;  ps . println ( """"Flags=""""   +   song . getFlags () ) ;  ps . println ( """"Mode2=""""   +   ( song . getMode2 ()  ?   """"True""""   :  """"False"""" ) ) ;  }
public   void   push ( int   n ,  Frame   frame )   throws  Exception   {  push ( n ,  frame ,  frame   !=   null   &&   frame . opaque   instanceof   AVFrame  ?   ( ( AVFrame ) frame . opaque ) . format ()   :  AV_PIX_FMT_NONE ) ;  }
@ Override  public   final   void   setupTest ( final   JavaSamplerContext   context )   {  final   var   props   =  properties ( context ) ;  final   var   topic   =  context . getParameter ( ProducerKeysHelper . KAFKA_TOPIC_CONFIG ) ;  consumer   =   new   KafkaConsumer <> ( props ) ;  consumer . subscribe ( Collections . singletonList ( topic ) ) ;  }
public   SimpleEmailTemplate   locale ( String   locale )   {  this . locale   =   locale ;  return  this ;  }
 <argument pos:start=""""""""212:116"""""""" pos:end=""""""""212:120""""""""><expr pos:start=""""""""212:116"""""""" pos:end=""""""""212:120""""""""><name pos:start=""""""""212:116"""""""" pos:end=""""""""212:120"""""""">flags</name></expr></argument>
@ Override  public   ITileOverlayDelegate   addTileOverlay ( TileOverlayOptions   options )   throws  RemoteException   {  Log . d ( TAG ,  """"not yet usable: addTileOverlay"""" ) ;  return  new   TileOverlayImpl () ;   
default   int   spiXferByte ( int   handle ,  byte   value ) {  byte []   temp   =  new   byte []   {  value  }  ;  int   result   =  spiXfer ( handle ,  temp ) ;  if ( result   <=   0 )   return  result ;  
public   void   onDestroyView ()   {  if  ( delegate   !=   null )   {  delegate . onDestroyView () ;  }   else  {  removePendingStateOperations ( State . VIEW_CREATED ) ;  }  }
public   boolean   forwardsConnection ( ServiceConnection   connection )   {  return  connectionForwards . contains ( connection ) ;  }
public   UserStoreConfigurationsRes   typeName ( String   typeName )   {  this . typeName   =   typeName ;  return  this ;  }
public   Builder   requestHandlerBuilder ( RequestHandler . Builder   builder )   {  this . builder   =   builder ;  this . exceptionsAllowedToRetry . add ( OverQueryLimitException . class ) ;  return  this ;  }
private   Set < String >   getItemsForView ( View   view )   {  Set < String >   items   =  new   TreeSet <> ( String . CASE_INSENSITIVE_ORDER ) ;  try  ( ACLContext   c   =  ACL . as2 ( ACL . SYSTEM2 ) )   {  items . addAll ( view . getItems () . stream () . map ( Item :: getFullName ) . collect ( Collectors . toSet () ) ) ;  }  return  items ;  }
public   void   setColumnConfigList ( List < ColumnConfig >   columnConfigList )   {  this . columnConfigList   =   columnConfigList ;  }
public   static   BINDINGSEnum   fromValue ( String   value )   {  for  ( BINDINGSEnum   b   :  BINDINGSEnum . values () )   {  if  ( b . value . equals ( value ) )   {  return  b ;  }  }  throw  new   IllegalArgumentException ( """"Unexpected value '""""   +   value   +   """"'"""" ) ;  }
@ Override   public   void   setTargetImage ( IplImage   target0 )   {  context . writeImage ( targetCL [ settings . pyramidLevelMin ] ,  target0 ,  false ) ;  setTargetImageCL ( targetCL [ settings . pyramidLevelMin ] ) ;  }
@ Override  public   FakeConfiguration   clockProvider ( final   ClockProvider   provider )   {  return  this ;  }
@ Override  public   String   toString ()   {  return  leftVarName   +   """",""""   +   rightVarName   +   """",""""   +   corrVal   +   """",""""   +   leftMetricVal   +   """",""""   +   rightMetricVal ;  }
public   Builder   minLength ( final   Integer   minLength )   {  this . minLength   =   minLength ;  return  this ;  }
public   Float   getUnhealthy ()   {  if ( unhealthy   ==   null )  {  return  0f ;  }  else {  return  ( float ) ( Math . round ( unhealthy * 100f ) / 100f ) ;  }  }
@ Override  public   ServerHandshakeBuilder   onWebsocketHandshakeReceivedAsServer ( WebSocket   conn ,  Draft   draft , ClientHandshake   request )   throws  InvalidDataException   {  ServerHandshakeBuilder   builder   =  super  . onWebsocketHandshakeReceivedAsServer ( conn ,  draft ,  request ) ;  builder . put ( """"Access-Control-Allow-Origin"""" ,  """"*"""" ) ;  return  builder ;  }
public   static   String   getLocaleStringResource ( Locale   requestedLocale ,  int   resourceId ,  Context   context )   {  try  {  String   result ;  if  ( Build . VERSION . SDK_INT   >=   Build . VERSION_CODES . JELLY_BEAN_MR1 )   {   
@ Test  public   void   testJavaExpressionNotNull ()   {  JexlEngine   jexl   =  new   JexlEngine () ;  String   jexlExp   =  """"bad_num != \""""NULL\"""""""" ;  Expression   e   =  jexl . createExpression ( jexlExp ) ;  JexlContext   jc   =  new   MapContext () ;  jc . set ( """"bad_num"""" ,  """"2"""" ) ;  
public   void   setUserClaimValuesWithID ( String   userID ,  ClaimValue []   claims ,  String   profileName )  throws  UserStoreException ,  RemoteException ,  UUIDUserStoreManagerServiceUserStoreExceptionException   {  uuidUserStoreManagerServiceStub . setUserClaimValuesWithID ( userID ,  claims ,  profileName ) ;  }
public   void   deleteInstanceID ()   throws  IOException   {  deleteToken ( """"*"""" ,  """"*"""" ) ;  creationTime   =   0 ;  storeInstance . delete ( subtype   +   """"|"""" ) ;  keyPair   =   null ;  }
private   < T >   void   mapNullable ( List < T >   l ,  Consumer < T >   c )   {  if  ( l   !=   null )   {  for  ( T   m   :  l )   {  c . accept ( m ) ;  }  }  }
public   static   char []   encode   ( byte []   in )   {  return  encode ( in , in . length ) ;   }
public   static   File   getDefaultResultsDirectory ()   {  return  DEFAULT_RESULTS_DIRECTORY ;  }
public   static   boolean   isMacro ( Role   role )   {  return  isMacro ( role . getName () ) ;  }
public   static   < E >   E   head ( final   Iterable < E >   iterable )   {  return  first ( iterable ) ;  }
public   void   setLearningRate ( double   learningRate )   {  this . learningRate   =   learningRate ;  }
@ Override  public   int   update ( Uri   uri ,  ContentValues   values ,  String   selection ,  String []   selectionArgs )   {  return  sqLiteHelper . getWritableDatabase () . update ( """"tiles"""" ,  values ,  selection ,  selectionArgs ) ;  }
public   void   testAddSP ()   throws  Exception   {  boolean   isAddSuccess   =  ssoConfigServiceClient . addServiceProvider ( createSsoServiceProviderDTO () ) ;  Assert . assertTrue ( isAddSuccess ,  """"Adding a service provider has failed for """"   +   config ) ;  SAMLSSOServiceProviderDTO []   samlssoServiceProviderDTOs   =  ssoConfigServiceClient  . getServiceProviders () . getServiceProviders () ;  Assert . assertEquals ( samlssoServiceProviderDTOs [ 0 ] . getIssuer () ,  config . getApp () . getArtifact () , """"Adding a service provider has failed for """"   +   config ) ;  }
private   int   getTestRecordCnt ()   {  return  getIntParam ( this . params ,  TEST_RECORD_CNT ,  100 ) ;  }
public   List < NodeLabeledPair >   getNodeLabeledPairs ()   {  if  ( nodeLabeledPairs   ==   null )   {  nodeLabeledPairs   =   new   ArrayList <> () ;  }  return  nodeLabeledPairs ;  }
private   SubTrainConf   createSubTrainConf ( ModelTrainConf . ALGORITHM   alg )   {  SubTrainConf   subTrainConf   =  new   SubTrainConf () ;  subTrainConf . setModelStatsConf ( createModelStatsConf ( alg ) ) ;  subTrainConf . setModelNormalizeConf ( createModelNormalizeConf ( alg ) ) ;  subTrainConf . setModelVarSelectConf ( createModelVarSelectConf ( alg ) ) ;  subTrainConf . setModelTrainConf ( createModelTrainConf ( alg ) ) ;  return  subTrainConf ;  }
@ Override  protected   void   beforeHookedMethod ( MethodHookParam   param )   throws  Throwable   {  var   results   =  ReflectionUtils . findArrayOfType ( param . args ,  Integer . class ) ;  if  ( results . size ()   <   2 )   {  log ( """"sendAudioTypeMethod size < 2"""" ) ;  return;  }  var   mediaType   =  results . get ( 0 ) ;  if  ( ( int )   mediaType . second   !=   2 )   return;  var   audioType   =  results . get ( 1 ) ;  param . args [ audioType . first ]   =   audio_type   -   1 ;   
@ Deprecated  public   static   String   getErrorString ( int   errorCode )   {  return  null ;   
@ Override  public   boolean   subtract ( String   playerName ,  double   amount )   {  if  ( Economy . playerExists ( playerName ) )   {  try  {  Economy . subtract ( playerName ,  amount ) ;  return  true ;  }   catch  ( UserDoesNotExistException   ex )   {  return  false ;  }   catch  ( NoLoanPermittedException   ex )   {  return  false ;  }  }   else  {  return  false ;  }  }
@ Test  public   void   testAcceptProvidedExtensionAsClient ()   throws  Exception   {  DefaultExtension   defaultExtension   =  new   DefaultExtension () ;  assertTrue ( defaultExtension . acceptProvidedExtensionAsClient ( """"Test"""" ) ) ;  assertTrue ( defaultExtension . acceptProvidedExtensionAsClient ( """""""" ) ) ;  assertTrue ( defaultExtension . acceptProvidedExtensionAsClient ( """"Test, ASDC, as, ad"""" ) ) ;  assertTrue ( defaultExtension . acceptProvidedExtensionAsClient ( """"ASDC, as,ad"""" ) ) ;  assertTrue ( defaultExtension . acceptProvidedExtensionAsClient ( """"permessage-deflate"""" ) ) ;  }
@ Override  public   void   setGroupPrefix ( String   world ,  String   group ,  String   prefix )   {  ApiLayer . setValue ( world ,  CalculableType . GROUP ,  group ,  """"prefix"""" ,  prefix ) ;  }
@ Parameters ( name   =   """"test that {0} (autoinstaller {1}) return exit code {2} will result in {3}"""" )  public   static   Collection < Object [] >   data ()   {  return  Arrays . asList ( new   Object [] []   {  
private   static   String   extractFieldName ( final   String   fieldName )   {  String   fieldNameClean   =  fieldName ;  if  ( fieldName . endsWith ( """"[][]"""" )   ||   fieldName . endsWith ( """"[:][]"""" ) )   {  fieldNameClean   =   fieldName . substring ( 0 ,  fieldName . length ()   -   2 ) ;  }   else if  ( fieldName . endsWith ( """"[][:]"""" )   ||   fieldName . endsWith ( """"[:][:]"""" ) )   {  fieldNameClean   =   fieldName . substring ( 0 ,  fieldName . length ()   -   3 ) ;  }  return  fieldNameClean ;  }
static   Node   getLabeledOtherNode ( Node   node ,  RelationshipType   type ,  Label   label )   {  Iterable < Relationship >   relationships   =  node . getRelationships ( type ) ;  for  ( Relationship   relationship :  relationships )   {  if  ( relationship . getOtherNode ( node ) . hasLabel ( label ) )   {  return  relationship . getOtherNode ( node ) ;  }  }  return  null ;  }
private   void   removeFolder ( String   folderId )   {  for  ( HashMap < String ,  CompletionInfo >   folderMap   :  deviceFolderMap . values () )   {  if  ( folderMap . containsKey ( folderId ) )   {  folderMap . remove ( folderId ) ;  break;  }  }  }
public   String   getPrestoCoordinatorServer ( String   datasource )   {  return  environment . getRequiredProperty ( """"presto.coordinator.server.""""   +   datasource ) ;  }
@ RequestMapping ( """"/"""" )  public   String   welcome ()   {  return  """"welcome"""" ;  }
@ Override  protected   void   onResume ()   {  super . onResume () ;  SharedPreferences   prefs   =  getPreferenceScreen () . getSharedPreferences () ;  prefs . registerOnSharedPreferenceChangeListener ( this ) ;  setSummaries () ;  }
@ Test  public   void   thatExampleDefinitionKeysAreSuggested ()   {  getCaretCompletions ( """"component_example"""" )  . assertContains ( """"$ref"""" ,  """"summary"""" ,  """"description"""" ,  """"value"""" ,  """"externalValue"""" )  . isOfSize ( 5 ) ;  }
@ Override  public   long   getLastModifiedTimestamp ()   {  return  this . lastModifiedTimestamp ;  }
@ Override  protected   void   writeProcessingInstruction ( ProcessingInstruction   pi )   throws  IOException   {  
@ Override  public   Void   visit ( OWLObjectProperty   property )   {  String   iri   =  getIri ( property ) ;  getOrCreateNode ( iri ,  OwlLabels . OWL_OBJECT_PROPERTY ) ;  return  null ;  }
@ Override  public   int   size ()   {  int   sum   =  0 ;  for  ( Collection < T >   ts   :  multiCol )   {  sum   +=   ts . size () ;  }  return  sum ;  }
@ NonNull  public   List < DataSet >   getDataSet ( @ NonNull   Session   session )   {  if  ( ! sessions . contains ( session ) )   throw  new   IllegalArgumentException ( """"Attempting to read data for session which was not returned"""" ) ;  List < DataSet >   dataSets   =  new   ArrayList <> () ;  for  ( SessionDataSet   sessionDataSet   :  sessionDataSets )   {  if  ( session . equals ( sessionDataSet . session ) )   {  dataSets . add ( sessionDataSet . dataSet ) ;  }  }  return  dataSets ;  }
private   List < String >   getExtensionJarPaths ()   {  List < String >   extensionJarPaths   =  extensionJarRegistry . getXMLExtensionJars () ;  extensionJarPaths . addAll ( extensionJarRegistry . getXMLLSClassPathExtensions () ) ;  return  extensionJarPaths ;  }
public   static   void   startLogging ()   {  if  ( ! isRunning )   {  loggerThread . start () ;  }   else  {  throw  new   IllegalStateException ( """"Logger already running"""" ) ;  }  }
public   DirectionsApiRequest   optimizeWaypoints ( boolean   optimize )   {  optimizeWaypoints   =   optimize ;  if  ( waypoints   !=   null )   {  return  waypoints ( waypoints ) ;  }   else  {  return  this ;  }  }
@ Provides  @ Singleton  Cache < CacheableMethodInvocation ,  Object >   getCache ()   {  return  cache ;  }
@ Test  void   shouldCustomiseHttpClientRequestConfig ()   {  eurekaHttpClient   =   buildEurekaHttpClient ( Set . of ( builder  ->   builder . setProtocolUpgradeEnabled ( false ) ) ) ;  assertThatExceptionOfType ( RuntimeException . class ) . isThrownBy ( ()  ->   eurekaHttpClient . getApplication ( """"upgrade"""" ) ) ;  }
@ Override  public   IMapViewDelegate   newMapViewDelegate ( IObjectWrapper   context ,  GoogleMapOptions   options )   {  return  new   MapViewImpl ( ObjectWrapper . unwrapTyped ( context ,  Context . class ) ,  options ) ;  }
protected   void   parseTemplateString ()   throws  MalformedUriTemplateException  {  final   String   templateString   =  getTemplate () ;  final   UriTemplateParser   scanner   =  new   UriTemplateParser () ;  this . components   =   scanner . scan ( templateString ) ;  initExpressions () ;  }
public   Iterator < T >   iterator ( )   {  try  {  CsvFileReader   reader   =  new   CsvFileReader ( file ) ;  ColumnStreamIterator < T >   iter   =   new   ColumnStreamIterator <> ( this , reader , index ) ;  iter . advance ( startIndex ) ;  return  iter ;  }   catch ( Exception   e )   {  System . err . println ( """"Error opening csv reader"""" ) ;  }  return  null ;  }
public   ImmutableList < JavaFileObject >   sourceFiles ()   {  return  sourceFiles ;  }
public   final   boolean   childOfOperationSecurityKey ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.*.*.security"""" ) ;  }
default   int   writeRegister ( int   register ,  InputStream   ...   stream )   throws  IOException {  ByteArrayOutputStream   os   =  new   ByteArrayOutputStream () ;  for  ( InputStream   is   :  stream )   {  os . write ( is . readAllBytes () ) ;  }  return  writeRegister ( register ,  os . toByteArray () ) ;  }
@ ApiModelProperty ( example   =   """"Sri Lanka"""" )  @ JsonProperty ( """"country"""" )  @ Valid  public   String   getCountry ()   {  return  country ;  }
@ Test  public   void   excluded ()   throws  Exception   {  Resource   resource   =  new   ClassPathResource ( """"apps/excluded/pom.xml"""" ) ;  List < Dependency >   dependencies   =  resolver . dependencies ( resource , PropertiesLoaderUtils . loadProperties ( new   ClassPathResource ( """"apps/excluded/META-INF/thin.properties"""" ) ) ) ;  assertThat ( dependencies ) . filteredOn ( """"artifact.artifactId"""" ,  """"tomcat-embed-core"""" )  . isEmpty () ;  }
public   void   grantPermissions ( View   view )   {  checkPermissionsAndRequestThem () ;  updateScreen () ;  }
@ Test  public   void   nestedId ()   {  JSONObject   schema   =  RAW_OBJECTS . getJSONObject ( """"nestedId"""" ) ;  URI   actual   =  withLs ( JsonValue . of ( schema ) ) . requireObject ()  . require ( """"properties"""" )  . requireObject ()  . require ( """"prop"""" ) . ls . id ;  assertEquals ( """"http:
public   void   testUnusedParameterWhereParametersAreNotInRoot ()   {  final   VirtualFile   virtualFile   = myFixture . copyFileToProject ( """"validator/field/unused_parameter/json/unused_parameter_not_in_root.json"""" , """"parameters.json"""" ) ;  final   VirtualFile   swaggerFile   = myFixture . copyFileToProject ( """"validator/field/unused_parameter/json/unused_parameter_not_in_root_swagger.json"""" , """"swagger.json"""" ) ;  myFixture . configureFromExistingVirtualFile ( swaggerFile ) ;  myFixture . testHighlighting ( true ,  false ,  true ,  virtualFile ) ;  }
@ Override   public   ByteIndexer   reindex ( Index   index )   {  return  new   ByteBufferIndexer ( buffer ,  index ) ;  }
private   void   stopShimmer ( ServerFileViewHolder   fileHolder )   {  fileHolder . shimmerFrameLayout . stopShimmer () ;  fileHolder . shimmerFrameLayout . setShimmer ( null ) ;  fileHolder . fileIconView . setBackground ( null ) ;  fileHolder . fileTextView . setBackground ( null ) ;  fileHolder . fileLastModified . setBackground ( null ) ;  fileHolder . fileSize . setBackground ( null ) ;  }
public   SortPomImplUtil   keepTimestamp ( boolean   keepTimestamp )   {  this . keepTimestamp   =   keepTimestamp ;  return  this ;  }
@ Override  public   boolean   equals ( java . lang . Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  EmailTemplate   emailTemplate   =  ( EmailTemplate )   o ;  return  Objects . equals ( this . contentType ,  emailTemplate . contentType )   &&  Objects . equals ( this . subject ,  emailTemplate . subject )   &&  Objects . equals ( this . body ,  emailTemplate . body )   &&  Objects . equals ( this . footer ,  emailTemplate . footer ) ;  }
private   void   addPackageInstalledAndSignedResult ( Context   context ,  ResultCollector   collector ,  String   nicePackageName ,  String   androidPackageName ,  String   signatureHash )   {  if  ( addPackageInstalledResult ( context ,  collector ,  nicePackageName ,  androidPackageName ) )   {  addPackageSignedResult ( context ,  collector ,  nicePackageName ,  androidPackageName ,  signatureHash ) ;  }  }
public   List < Finding >   getAggregatedFindings ()   {  return  aggregatedFindings ;  }
private   boolean   acceptsPropagatedDecorations ( Box   box )  {  return  ! ( box   instanceof   BlockBox  &&   ( ( ( BlockBox )   box ) . isFloating ()   ||   ( ( BlockBox )   box ) . isPositioned ()   ||   box   instanceof   Inline ) ) ;  }
@ Override  public   String   toString ()   {  return  """"class InboundProtocolsListResponse {\n""""   +  """"    InboundProtocolListItem: """"   +   toIndentedString ( inboundProtocols )   +   """"\n""""   +  """"}"""" ;  }
@ Override  public   void   onAddGeofenceResult ( int   statusCode ,  String []   requestIds )   throws  RemoteException   {  resultProvider . onResultAvailable ( new   Status ( statusCode ) ) ;  }
public   void   clear ()   {  if ( super . map   !=   null )   {  map . clear () ;  }  }
@ ApiModelProperty ( example   =   """"http:
private   void   readExponent ()   {  if  ( ! readChar ( 'e' )   &&   ! readChar ( 'E' ) )   {  return;  }  if  ( ! readChar ( '+' ) )   {  readChar ( '-' ) ;  }  if  ( ! readDigit () )   {  throw  expected ( DIGIT ) ;  }  while  ( readDigit () )   {  
private   static   String   getEnumValues ( Enum < ? > []   aEnumVals )   {  final   StringBuilder   tmpResult   =  new   StringBuilder () ;  boolean   tmpFirst   =  true ;  for  ( Enum < ? >   tmpEnu   :  aEnumVals )   {  if  ( tmpFirst )   {  tmpFirst   =   false ;  }   else  {  tmpResult . append ( """", """" ) ;  }  tmpResult . append ( tmpEnu . name () ) ;  }  return  tmpResult . toString () ;  }
 <argument pos:start=""""""""4746:60"""""""" pos:end=""""""""4746:66""""""""><expr pos:start=""""""""4746:60"""""""" pos:end=""""""""4746:66""""""""><name pos:start=""""""""4746:60"""""""" pos:end=""""""""4746:66"""""""">include</name></expr></argument>
public   void   setProxyPort ( String   proxyPort )   {  this . proxyPort   =   proxyPort ;  }
public   static   String   createTestAPIResource ( OAuth2RestClient   restClient , List < AuthorizationDetailsType >   authorizationDetailsTypes )  throws  IOException   {  final   UUID   uuid   =  UUID . randomUUID () ;  final   APIResourceResponse   apiResource   =  new   APIResourceResponse ()  . name ( """"rar api resource """"   +   uuid )  . identifier ( """"rar_api_resource_""""   +   uuid )  . requiresAuthorization ( true )  . authorizationDetailsTypes ( authorizationDetailsTypes ) ;  return  restClient . createAPIResource ( apiResource ) ;  }
public   void   testOrganizationMembershipAPI   ()   throws  IOException   {  GitHub   gh   =  GitHub . connect ( LOGIN ,  API_TOKEN ) ;  Map < String ,  GHOrganization >   orgs   =  gh . getMyOrganizations () ;  for  ( String   orgName   :  orgs . keySet () )   {  GHOrganization   org   =  orgs . get ( orgName ) ;  System . out . println ( """"org = """"   +   orgName ) ;  }  assertTrue ( true ) ;  }
@ Override   public   ByteIndexer   get ( long []   indices ,  byte []   b ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  b [ offset   +   n ]   =   array [ ( int ) index ( indices )   +   n ] ;  }  return  this ;  }
public   Optional < ReasonerConfiguration >   getReasonerConfiguration ()   {  return  reasonerConfiguration ;  }
@ Override  public   String   getGroupName ( Context   context )   {  return  context . getString ( R . string . self_check_cat_gms_packages ) ;  }
@ Override  public   void   setDebug ( boolean   debug )   {  this . debug   =   debug ;  }
public   IntIndexer   putRaw ( long   i ,  int   n )   {  RAW . putInt ( base   +   checkIndex ( i ,  size )   *   VALUE_BYTES ,  n ) ;  return  this ;  }
public   void   setCallbackURLs ( List < String >   callbackURLs )   {  this . callbackURLs   =   callbackURLs ;  }
public   ArrayList   getUsers ()  {  if ( Build . VERSION . SDK_INT   >   17 )  {  if ( users   !=   null   &&   users . size ()   >   0 )  {  return  users ;  }  else {  
@ Override  public   int   getDefaultPriority ()   {  return  ItemStorageProvider . getBlock () . getDefaultPriority ()   +   1 ;  }
@ Override  public   void   fire ( ClearStepStorageEvent   event )   {  for  ( LifecycleListener   listener   :  listeners )   {  try  {  listener . fire ( event ) ;  }   catch  ( Exception   e )   {  logError ( listener ,  e ) ;  }  }  }
@ ApiModelProperty ( example   =   """"kim"""" ,  value   =   """"First name of the owner."""" )  @ JsonProperty ( """"firstname"""" )  @ Valid  public   String   getFirstname ()   {  return  firstname ;  }
@ Override  protected   Boolean   call ()   throws  Exception   {  return  engine . renderWav ( song . get () ,  file ) ;  }
@ AfterClass  public   void   shutDown ()   throws  IOException   {  FileUtils . deleteDirectory ( new   File ( """"./models/"""" ) ) ;  FileUtils . deleteDirectory ( new   File ( """"./modelsTmp/"""" ) ) ;  Encog . getInstance () . shutdown () ;  }
@ Override  public   Bundle   confirmCredentials ( AccountAuthenticatorResponse   response ,  Account   account ,  Bundle   options )   throws  NetworkErrorException   {  Log . d ( TAG ,  """"confirmCredentials: """"   +   account   +   """", """"   +   options ) ;  return  null ;  }
@ Test  public   void   requestMaxDecreased ()   {  assertIncompatibleRequest ( """"bc_request_numericrange_max_decreased.yaml"""" ) ;  }
public   ChangedHeader   setExample ( ChangedExample   example )   {  this . example   =   example ;  return  this ;  }
static   CompilationUnitTree   parseLinesToTree ( Iterable < String >   source )   {  Iterable < ?   extends  CompilationUnitTree >   parseResults   = Parser . parse ( ImmutableList . of ( JavaFileObjects . forSourceLines ( """""""" ,  source ) ) ,  """"source"""" )  . compilationUnits () ;  return  Iterables . getOnlyElement ( parseResults ) ;  }
public   Builder   tilt ( float   tilt )   {  this . tilt   =   tilt ;  return  this ;  }
public   static   Value   construct ( Set < String >   ignored ,  boolean   ignoreUnknown , boolean   allowGetters ,  boolean   allowSetters , boolean   merge )   {  if  ( _empty ( ignored ,  ignoreUnknown ,  allowGetters ,  allowSetters ,  merge ) )   {  return  EMPTY ;  }  return  new   Value ( ignored ,  ignoreUnknown ,  allowGetters ,  allowSetters ,  merge ) ;  }
private   void   buildCache ( FilePath   expected ,  FilePath   cache )   throws  IOException ,  InterruptedException   {  
public   final   void   add ( final   FloatMLDataPair   pair )   {  if ( ! this . loading )   {  throw  new   RuntimeException ( BufferedFloatMLDataSet . ERROR_ADD ) ;  }  this . egb . write ( pair . getInputArray () ) ;  this . egb . write ( pair . getIdealArray () ) ;  this . egb . write ( pair . getSignificance () ) ;  }
@ Override  public   void   updateNote ( Note   note )   {  int   positionMs   =  note . getAbsPositionMs () ;  if  ( note . isValid () )   {  
@ AfterAll  public   void   afterTest ()   {  try  {  pi4j . shutdown () ;  }   catch  ( Pi4JException   e )   {      }  }
public   OIDCMetaData   defaultIdTokenExpiryTime ( String   defaultIdTokenExpiryTime )   {  this . defaultIdTokenExpiryTime   =   defaultIdTokenExpiryTime ;  return  this ;  }
@ Override  public   void   tick ()  {  super . tick () ;  this . prevRotation   =   this . rotation ;  double   speed   =  this . getDeltaMovement () . length () ;  if  ( speed   >   0.1 )  {  this . rotation   +=   speed   *   50 ;  }  if  ( this . level . isClientSide )  {  this . level . addParticle ( ParticleTypes . SMOKE ,  true ,  this . getX () ,  this . getY ()   +   0.25 ,  this . getZ () ,  0 ,  0 ,  0 ) ;  }  }
@ Test  public   void   testBaseDirAlreadyExists ()   throws  Exception   {  assertTrue ( BASE_DIR . mkdirs () ) ;  Main . resolveTomcatBaseDir ( PORT ,  null ) ;  assertTrue ( BASE_DIR . isDirectory () ) ;  }
private   String   sendAuthorizeRequest ()   throws  IOException   {  HttpClient   client   =  HttpClientBuilder . create () . build () ;  HttpResponse   response   =  sendGetRequest ( client ,  getAuthzRequestUrl ( oidcAppClientId ,  OAuth2Constant . CALLBACK_URL ) ) ;  String   content   =  DataExtractUtil . getContentData ( response ) ;  Assert . assertNotNull ( content ) ;  return  content ;  }
public   static   File   getConfigFile ( Context   context )   {  return  new   File ( context . getFilesDir () ,  CONFIG_FILE ) ;  }
@ Hide  public   String   getBannerImageLandscapeUrl ()   {  return  bannerImageLandscapeUrl ;  }
@ Override  public   void   init ( IWorkbench   workbench )   {  setPreferenceStore ( Activator . getDefault () . getPreferenceStore () ) ;  }
@ Override  public   DiffResult   isChanged ()   {  if  ( Objects . equals ( oldValue ,  newValue ) )   {  return  DiffResult . NO_CHANGES ;  }  if  ( context . isRequest () )   {  return  DiffResult . COMPATIBLE ;  }  if  ( context . isResponse () )   {  if  ( Boolean . TRUE . equals ( newValue ) )   {  if  ( RESPONSE_WRITEONLY_INCREASED . enabled ( context ) )   {  return  DiffResult . INCOMPATIBLE ;  }  }   else if  ( context . isRequired () )   {  if  ( RESPONSE_WRITEONLY_REQUIRED_DECREASED . enabled ( context ) )   {  return  DiffResult . INCOMPATIBLE ;  }  }  return  DiffResult . COMPATIBLE ;  }  return  DiffResult . UNKNOWN ;  }
@ Test ( dependsOnMethods   =   """"testGetPassiveSTSInboundDetails"""" )  public   void   testDeletePassiveSTSInbound ()   throws  Exception   {  String   path   =  APPLICATION_MANAGEMENT_API_BASE_PATH   +   """"/""""   +   createdAppId   +   INBOUND_PROTOCOLS_PASSIVE_STS_CONTEXT ;  Response   responseOfDelete   =  getResponseOfDelete ( path ) ;  responseOfDelete . then ()  . log ()  . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT ) ;  
public   void   setCenter ( @ NonNull   LatLng   center )   {  try  {  this . delegate . setCenter ( center ) ;  }   catch  ( RemoteException   e )   {  throw  new   RuntimeRemoteException ( e ) ;  }  }
public   void   forEachIndexed ( final   BiConsumer < Integer ,  ?   super  T >   func )   {  eachIndexed ( iterable ,  func ) ;  }
public   boolean   removeExtension ( String   name )  throws  RemoteException ,  ResourceAdminServiceExceptionException   {  try  {  return  resourceAdminServiceStub . removeExtension ( name ) ;  }   catch  ( RemoteException   e )   {  log . error ( """"Remove extension error """" ) ;  throw  new   RemoteException ( """"Remove resource error """" ,  e ) ;  }   catch  ( ResourceAdminServiceExceptionException   e )   {  log . error ( """"Remove Extension error"""" ) ;  throw  new   ResourceAdminServiceExceptionException ( """"Remove resource error"""" ,  e ) ;  }  }
@ ApiModelProperty ()  @ JsonProperty ( """"manager"""" )  @ Valid  public   Manager   getManager ()   {  return  manager ;  }
private   boolean   isStreamProfile ( rs2_stream_profile   profile ,  int   type )   throws  Exception   {  boolean   isOfType   =  toBoolean ( rs2_stream_profile_is ( profile ,  type ,  error ) ) ;  checkError ( error ) ;  return  isOfType ;  }
public   void   setAutoExposureBottomEdge ( int   value )   {  setOption ( RealSense . RS_OPTION_R200_AUTO_EXPOSURE_BOTTOM_EDGE ,  value ) ;  }
@ Test  void   wrongSortedWithStrictVerifyShouldNotPass ()   {  SortPomImplUtil . create ()  . verifyFailOn ( """"strict"""" )  . predefinedSortOrder ( """"custom_1"""" )  . testVerifyXmlIsNotOrdered ( """"/Real2_input.xml"""" , """"The line 2 is not considered sorted, should be '<project xmlns=\""""http:
public   void   setExpectedClientRenewalIntervalSeconds ( int   expectedClientRenewalIntervalSeconds )   {  this . expectedClientRenewalIntervalSeconds   =   expectedClientRenewalIntervalSeconds ;  }
public   String   getNameOnly ()   {  return  name . replace ( """".""""   +   getExtension () ,  """""""" ) ;  }
private   void   initValues ()   throws  VarExploderException  {  Class < ? >   c   =  source . getClass () ;  if  ( c . isAnnotation ()   ||   c . isArray ()   ||   c . isEnum ()   ||   c . isPrimitive () )  {  throw  new   IllegalArgumentException ( """"The value must an object"""" ) ;  }  if ( source   instanceof   Map  )  {  this . pairs   =   ( Map < String , Object > )   source ;  return;  }  Method []   methods   =  c . getMethods () ;  for  ( Method   method   :  methods )  {  inspectGetters ( method ) ;  }  scanFields ( c ) ;  }
@ Override   public   char   getChar ( long   i )   {  return  RAW . getChar ( base   +   checkIndex ( i ,  size   -   1 ) ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( type ,  name ,  self ) ;  }
@ Nullable  public   static   < T >   T   get ( Bundle   bundle ,  @ NonNull   PackKey < T >   key ,  String   packName )   {  return  key . get ( bundle ,  packKey ( packName ,  key . baseKey () ) ) ;  }
@ Nullable  @ Override  public   View   onCreateView ( LayoutInflater   inflater ,  ViewGroup   container ,  Bundle   savedInstanceState )   {  getDialog () . setOnShowListener ( dialogInterface  ->  {  BottomSheetDialog   d   =  ( BottomSheetDialog )   dialogInterface ;  View   bottomSheetInternal   =  d . findViewById ( com . google . android . material . R . id . design_bottom_sheet ) ;  assert  bottomSheetInternal   !=   null ;  BottomSheetBehavior . from ( bottomSheetInternal ) . setPeekHeight ( bottomSheetInternal . getHeight () ) ;  } ) ;  return  inflater . inflate ( R . layout . bottom_sheet_options ,  container ,  false ) ;  }
public   void   activateTenant ( String   tenantDomain )   throws  RemoteException ,  TenantMgtAdminServiceExceptionException   {  tenantMgtAdminServiceStub . activateTenant ( tenantDomain ) ;  }
@ Override  protected   DatabaseObject   snapshotObject ( DatabaseObject   example ,  DatabaseSnapshot   snapshot )   throws  DatabaseException ,  InvalidExampleException   {  throw  new   DatabaseException ( """"No views in Hibernate mapping"""" ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( userCriteria ) ;  }
@ Test  public   void   testHashCode ()   throws  Exception   {  DefaultExtension   defaultExtension0   =  new   DefaultExtension () ;  DefaultExtension   defaultExtension1   =  new   DefaultExtension () ;  assertEquals ( defaultExtension0 . hashCode () ,  defaultExtension1 . hashCode () ) ;  }
public   void   resampleSilence ( File   resamplerPath ,  File   outputFile ,  double   duration )   {  String   desiredLength   =  Double . toString ( duration   +   1 ) ;  runner . runProcess ( resamplerPath . getAbsolutePath () , assetManager . getSilenceFile () . getAbsolutePath () , outputFile . getAbsolutePath () , """"C4"""" , """"100"""" , """"?"""" , """"0"""" , desiredLength , """"0"""" , """"0"""" , """"100"""" , """"0"""" ) ;  }
@ Test  void   thrownExceptionShouldBeConvertedToMojoException ()   {  doThrow ( new   FailureException ( """"Gurka"""" ) ) . when ( sortPom ) . sortPom () ;  Executable   testMethod   =  ()  ->   sortMojo . execute () ;  var   thrown   =  assertThrows ( MojoFailureException . class ,  testMethod ) ;  assertThat ( """"Unexpected message"""" ,  thrown . getMessage () ,  is ( equalTo ( """"Gurka"""" ) ) ) ;  }
@ Override  public   Map < String ,  String >   getHeaders ()   throws  AuthFailureError   {  return  ImmutableMap . of ( HEADER_API_KEY ,  mApiKey ) ;  }
@ Test  public   void   validateThrowsExc_IfNoReferredSchemaIsSet ()   {  assertThrows ( IllegalStateException . class ,  ()  ->  {  ReferenceSchema   subject   =  ReferenceSchema . builder () . build () ;  subject . validate ( null ) ;  } ) ;  }
private   void   addEmailDomainsToOrganization ( String   organizationId ,  String ...   domains )   {  String   addDomainsPayload   =  String . format ( """"{""""   +  """"\""""attributes\"""": [{""""   +  """"\""""type\"""": \""""emailDomain\"""",""""   +  """"\""""values\"""": [\""""%s\""""]""""   +  """"}],""""   +  """"\""""organizationId\"""": \""""%s\""""""""   +  """"}"""" , String . join ( """"\"""",\"""""""" ,  domains ) , organizationId ) ;  Response   response   = getResponseOfPostWithOAuth2 ( ORGANIZATION_MANAGEMENT_API_BASE_PATH   +  ORGANIZATION_DISCOVERY_API_PATH ,  addDomainsPayload ,  m2mToken ) ;  validateHttpStatusCode ( response ,  HttpStatus . SC_CREATED ) ;  }
public   static   < T >   Map . Entry < ResourceLocation ,  List < ViewGroup < T > > >   getServerExtensionData ( Accessor < ? >   accessor , WrappedHierarchyLookup < IServerExtensionProvider < T > >   lookup )   {  for  ( var   provider   :  lookup . wrappedGet ( accessor ) )   {  List < ViewGroup < T > >   groups ;  try  {  groups   =   provider . getGroups ( accessor ) ;  }   catch  ( Exception   e )   {  WailaExceptionHandler . handleErr ( e ,  provider ,  null ) ;  continue;  }  if  ( groups   !=   null )   {  return  Map . entry ( provider . getUid () ,  groups ) ;  }  }  return  null ;  }
private   float   getCriticalDamage ( ItemStack   weapon ,  RandomSource   rand ,  float   damage )  {  float   chance   =  GunModifierHelper . getCriticalChance ( weapon ) ;  if ( rand . nextFloat ()   <   chance )  {  return  ( float )   ( damage   *   Config . COMMON . gameplay . criticalDamageMultiplier . get () ) ;  }  return  damage ;  }
public   FormValidation   doCheckFailedScenariosPercentage ( @ QueryParameter   String   value )   {  return  isValidPercentage ( value ) ;  }
public   int   read (  final   ByteBuffer   buffer )   throws  IOException   {  final   int   read   =  channel . read (  buffer ) ;  for  (  Consumer <  ? >   consumer   :  consumers . values () )   consumer . consume ( (   ByteBuffer )   buffer . duplicate () . flip () ) ;  return  read ;  }
public   void   setClientNoContextTakeover ( boolean   clientNoContextTakeover )   {  this . clientNoContextTakeover   =   clientNoContextTakeover ;  }
@ CanIgnoreReturnValue  @ Override  public   FileClause < T >   withNoteContaining ( String   messageFragment )   {  return  new   FileBuilder ( check ( """"compilation()"""" )  . about ( compilations () )  . that ( compilation )  . hadNoteContaining ( messageFragment ) ) ;  }
@ Override  public   Direction   getSide ()   {  return  getHitResult () . getDirection () ;  }
 <argument pos:start=""""""""2153:69"""""""" pos:end=""""""""2153:91""""""""><expr pos:start=""""""""2153:69"""""""" pos:end=""""""""2153:91""""""""><name pos:start=""""""""2153:69"""""""" pos:end=""""""""2153:91""""""""><name pos:start=""""""""2153:69"""""""" pos:end=""""""""2153:78"""""""">methodInfo</name><operator pos:start=""""""""2153:79"""""""" pos:end=""""""""2153:79"""""""">.</operator><name pos:start=""""""""2153:80"""""""" pos:end=""""""""2153:91"""""""">allocatorMax</name></name></expr></argument>
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Test RP-initiated logout with id_token_hint parameter"""" , dependsOnMethods   =   {  """"testOIDCLogoutWithClientId""""  } )  public   void   testOIDCLogoutWithIdTokenHint ()   throws  Exception   {  testInitiateOIDCRequest ( playgroundAppOne ,  client ) ;  testOIDCLogin ( playgroundAppOne ,  false ) ;  testGetIdToken ( playgroundAppOne ) ;  testOIDCLogout ( true ,  playgroundAppOne ,  new   BasicNameValuePair ( """"id_token_hint"""" ,  idToken ) ) ;  }
private   void   moveRelationship ( Node   from ,  Node   to ,  Relationship   rel ,  String   property )   {  Relationship   newRel   =  null ;  logger . fine ( """"create new rel between """"   +   rel . getOtherNode ( from ) . getId ()   +   """" and """"   +   to . getId () ) ;  if  ( property   ==   ORIGINAL_REFERENCE_KEY_TARGET )   {  newRel   =   rel . getOtherNode ( from ) . createRelationshipTo ( to ,  rel . getType () ) ;  }   else  {  newRel   =   to . createRelationshipTo ( rel . getOtherNode ( from ) ,  rel . getType () ) ;  }  copyProperties ( rel ,  newRel ) ;  rel . setProperty ( REL_TO_REMOVE ,  true ) ;   
public   void   setColorEnableAutoWhiteBalance ( int   value )   {  setOption ( RealSense . RS_OPTION_COLOR_ENABLE_AUTO_WHITE_BALANCE ,  value ) ;  }
private   boolean   isMetadataAvailable ( ServerFile   serverFile )   {  if  ( parentShare   ==   null )  return  ServerShare . Tag . MOVIES . equals ( serverFile . getParentShare () . getTag () ) ;  else  return  ServerShare . Tag . MOVIES . equals ( parentShare . getTag () ) ;  }
private   GpsTraceDetails . Visibility   getVisibilityForOsmapi ( Track . OSMVisibility   visibility )   {  switch  ( visibility )   {  case  Private :   return  GpsTraceDetails . Visibility . PRIVATE ;  case  Public :   return  GpsTraceDetails . Visibility . PUBLIC ;  case  Trackable :   return  GpsTraceDetails . Visibility . TRACKABLE ;  case  Identifiable :   return  GpsTraceDetails . Visibility . IDENTIFIABLE ;  }  return  null ;  }
public   Long   getNetworkCollapse ()   {  return  getSimulationStart ()   +   TEN_YEARS ;  }
public   void   create ()   {  traversal . addReferenceDefinition ( path ,  anchorPsiElement ) ;  }
private   void   saveTmpModelToHDFS ( int   iteration ,  double []   weights )   {  Path   out   =  new   Path ( DTrainUtils . getTmpModelName ( this . tmpModelsFolder ,  this . trainerId ,  iteration ,  modelConfig  . getTrain () . getAlgorithm () . toLowerCase () ) ) ;  writeModelWeightsToFileSystem ( weights ,  out ) ;  }
@ Override  protected   void   beforeHookedMethod ( MethodHookParam   param )   throws  Throwable   {  if  ( colorData . get ()   !=   null )   {  var   textData   =  param . args [ 0 ] ;  XposedHelpers . setObjectField ( textData ,  """"textColor"""" ,  colorData . get () . color ) ;  colorData . set ( null ) ;  }  }
public   Model   readModel ( final   Resource   resource ,  final   Properties   properties )   {  initialize ( properties ) ;  try  {  ProjectBuildingRequest   request   =  getProjectBuildingRequest ( properties ) ;  request . setResolveDependencies ( false ) ;  ProjectBuildingResult   result   =  projectBuilder  . build ( new   PropertiesModelSource ( properties ,  resource ) ,  request ) ;  return  result . getProject () . getModel () ;  }  catch  ( Exception   e )   {  throw  new   IllegalStateException ( """"Failed to build model from effective pom"""" , e ) ;  }  }
@ Override   public   DoubleIndexer   put ( long   i ,  long   j ,  long   k ,  double   d )   {  buffer . put ( ( int ) index ( i ,  j ,  k ) ,  d ) ;  return  this ;  }
@ Test  public   void   testGlobalConsumes ()   {  getCaretCompletions ( """"media_type_consumes"""" )  . assertContains ( """"application/xml"""" ,  """"image/*"""" ,  """"text/plain"""" )  . assertNotContains ( """"consumes"""" ,  """"produces"""" ,  """"paths"""" ) ;  }
private   HttpResponse   initiateCommonAuthGet ( Map < String ,  String >   loginPageQueryParams )   throws  Exception   {  Map < String ,  String >   queryParams   =  new   HashMap <> () ;  queryParams . put ( IDP ,  SSO ) ;  queryParams . put ( SESSION_DATA_KEY ,  loginPageQueryParams . get ( SESSION_DATA_KEY ) ) ;  queryParams . put ( AUTHENTICATOR ,  ORGANIZATION_AUTHENTICATOR ) ;  queryParams . put ( """"isSelfRegistration"""" ,  """"true"""" ) ;  return  sendGetRequest ( client ,  getTenantQualifiedURL ( COMMON_AUTH_URL ,  tenantInfo . getDomain () )   +  """"?""""   +   buildQueryString ( queryParams ) ) ;  }
@ ApiModelProperty ( example   =   """"REPLACE"""" ,  required   =   true ,  value   =   """"The operation to be performed"""" )  @ JsonProperty ( """"operation"""" )  @ Valid  public   OperationEnum   getOperation ()   {  return  operation ;  }
@ Test ( dependsOnMethods   =   """"testAddInvalidDiscoveryConfig"""" )  public   void   testAddDiscoveryConfigUnauthorized ()   throws  IOException   {  String   endpointURL   =  ORGANIZATION_CONFIGS_API_BASE_PATH   +   ORGANIZATION_DISCOVERY_API_PATH ;  String   requestBody   =  readResource ( """"add-discovery-config-request-body.json"""" ) ;  Response   response   =  getResponseOfPostWithOAuth2 ( endpointURL ,  requestBody ,  invalidM2MToken ) ;  validateHttpStatusCode ( response ,  HttpStatus . SC_UNAUTHORIZED ) ;  }
public   static   boolean   isLRModel ( String   alg )   {  return  """"lr"""" . equalsIgnoreCase ( alg ) ;  }
@ Test  public   void   requiredIncreased ()   {  BackwardIncompatibleProp   prop   =  REQUEST_PARAMS_REQUIRED_INCREASED ;  assertSpecIncompatible ( BASE ,  """"bc_request_params_required_increased.yaml"""" ,  prop ) ;  }
@ Override  public   void   reset ()   {  if  ( myProjectSettings   !=   null   &&   myProjectSettings . getState ()   !=   null )   {  Settings   persistedSettings   =  myProjectSettings . getState () ;  this . setValuesFromSettings ( persistedSettings ) ;  }  if  ( mySonarConsoleSettings   !=   null   &&   mySonarConsoleSettings . getState ()   !=   null )   {  final   SonarConsoleSettings   persistedSettings   =  mySonarConsoleSettings . getState () ;  this . setValuesFromSonarConsoleSettings ( persistedSettings ) ;  }  }
public   void   setMinLength ( Integer   minLength )   {  this . minLength   =   minLength ;  }
public   static   AnalogInputConfigBuilder   newInstance ( Context   context )   {  return  new   DefaultAnalogInputConfigBuilder ( context ) ;  }
@ Test  public   void   testConvert ()   {  ShifuCLI . runShifuConvert ( 1 ,  """"src/test/resources/example/readablespec/model0.gbt"""" ,  """"/tmp/model0_1.zip"""" ) ;  }
public   Value   withoutMerge ()   {  return  ! _merge  ?   this   : construct ( _ignored ,  _ignoreUnknown ,  _allowGetters ,  _allowSetters ,  false ) ;  }
@ Test  public   void   nodesAreTagged ()   {  assertThat ( n1 . hasLabel ( Label . label ( label ) ) ,  is ( true ) ) ;  assertThat ( n2 . hasLabel ( Label . label ( label ) ) ,  is ( true ) ) ;  }
private   String   getUploadLocation ()   {  SharedPreferences   preferences   =  PreferenceManager . getDefaultSharedPreferences ( getActivity () ) ;  return  preferences . getString ( getString ( R . string . preference_key_upload_location ) ,  null ) ;  }
public   CalendarEvent   setTitle ( String   title )   {  this . title   =   notNull ( title ) ;  return  this ;  }
@ Override  public   void   validate ( final   Processor < FullData ,  FullData >   processor , final   ProcessingReport   report ,  final   MessageBundle   bundle , final   FullData   data )  throws  ProcessingException  {  attr . validate ( report ,  bundle ,  data ) ;  }
public   static   CoverageResult   parse ( File   inFile ,  CoverageResult   cumulative ,  Set < String >   sourcePaths )   throws  IOException   {  FileInputStream   fileInputStream   =  null ;  BufferedInputStream   bufferedInputStream   =  null ;  try  {  fileInputStream   =   new   FileInputStream ( inFile ) ;  bufferedInputStream   =   new   BufferedInputStream ( fileInputStream ) ;  return  parse ( bufferedInputStream ,  cumulative ,  sourcePaths ) ;  }   finally  {  IOUtils . closeQuietly ( bufferedInputStream ) ;  IOUtils . closeQuietly ( fileInputStream ) ;  }  }
@ Test  public   void   testGetByCurie ()   {  Query   query   =  new   Vocabulary . Query . Builder ( """"HP:0008"""" ) . build () ;  assertThat ( vocabulary . getConceptFromId ( query ) . get () ,  is ( hippocampus ) ) ;  }
@ Test ( expected   =   VariableExpansionException . class )  public   void   testMultiDimensionalArray ()   throws  Exception  {  String [] []   values   =  { { """"one"""" ,  """"two"""" } ,  { """"three"""" ,  """"four"""" } } ;  UriTemplate . fromTemplate ( TEMPLATE_1 ) . set ( """"count"""" ,  values ) . expand () ;  }
public   boolean   containsLoc ( Location   loc )   {  if  ( loc   ==   null )   {  return  false ;  }  if  ( ! loc . getWorld () . equals ( highPoints . getWorld () ) )   {  return  false ;  }  if  ( lowPoints . getBlockX ()   <=   loc . getBlockX ()   &&   highPoints . getBlockX ()   >=   loc . getBlockX () )   {  if  ( lowPoints . getBlockZ ()   <=   loc . getBlockZ ()   &&   highPoints . getBlockZ ()   >=   loc . getBlockZ () )   {  if  ( lowPoints . getBlockY ()   <=   loc . getBlockY ()   &&   highPoints . getBlockY ()   >=   loc . getBlockY () )   {  return  true ;  }  }  }  return  false ;  }
public   static   boolean   isNetworkAvailable ( Context   context )   {  ConnectivityManager   connectivityManager   =  ( ConnectivityManager )   context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ;  NetworkInfo   activeNetworkInfo   =  connectivityManager . getActiveNetworkInfo () ;  return  activeNetworkInfo   !=   null   &&   activeNetworkInfo . isConnected () ;  }
public   static   Collection < Class >   getAllInterfaces ( Object   target ) {  return  getAllInterfaces ( target . getClass () ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( actionType ,  event ,  allowedOperations ) ;  }
public   void   verifyLogoutRedirectionForApp ( String   appName )   {  wireMockServer . verify ( getRequestedFor ( urlEqualTo ( getCallbackUrlPath ( appName ) ) ) ) ;  }
public   static   AndroidacyRepoData   getInstance ()   {  return  RepoManager . getINSTANCE () . getAndroidacyRepoData () ;  }
@ Override  public   Pwm   create ( PwmConfig   config )   {  synchronized  ( this . piGpio )   {  
public   ApplicationListItem   issuer ( String   issuer )   {  this . issuer   =   issuer ;  return  this ;  }
 <argument pos:start=""""""""125:69"""""""" pos:end=""""""""125:69""""""""><expr pos:start=""""""""125:69"""""""" pos:end=""""""""125:69""""""""><name pos:start=""""""""125:69"""""""" pos:end=""""""""125:69"""""""">k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Override  public   final   boolean   childOfExample ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$"""" ) ;  }
@ Test  public   void   testDescriptorImplGetDefaultGithubWebUri ()   {  DescriptorImpl   descriptor   =  new   DescriptorImpl () ;  assertEquals ( """"https:
public   static   boolean   isTypeNotSupported ( final   String   fieldType )   {  return  ! SUPPORTED_SEQUENCE_TYPES . containsKey ( fieldType ) ;  }
@ Override   public   int   sizeof ()   {  return  getClass ()   ==   CharPointer . class  ?   Character . SIZE   /   Byte . SIZE   :  super . sizeof () ;  }
public   void   setIdTokenEncryptionMethod ( MetadataProperty   idTokenEncryptionMethod )   {  this . idTokenEncryptionMethod   =   idTokenEncryptionMethod ;  }
@ Override  public   NamedContributor < HealthContributor >   next ()   {  Map . Entry < String ,  HealthContributor >   entry   =  iterator . next () ;  return  NamedContributor . of ( entry . getKey () ,  entry . getValue () ) ;  }
@ Override  public   boolean   subtract ( String   playerName ,  double   amount )   {  if  ( ! canAfford ( playerName ,  amount ) )   {  return  false ;  }  plugin . setBalance ( playerName ,  plugin . getBalance ( playerName )   -   amount ) ;  return  true ;  }
@ Bean  @ ConditionalOnRefreshScope  public   String   foo ()   {  return  """"foo"""" ;  }
private   MLDataSet []   splitDataSet ( MLDataSet   data )   {  MLDataSet []   subsets   =  new   MLDataSet [ numSplit ] ;  for ( int   i   =  0 ;   i   <   subsets . length ;   i ++ )   {  subsets [ i ]   =   new   BasicMLDataSet () ;  }  for ( int   i   =  0 ;   i   <   data . getRecordCount () ;   i ++ )   {  MLDataPair   pair   =  BasicMLDataPair . createPair ( INPUT_COUNT ,  OUTPUT_COUNT ) ;  data . getRecord ( i ,  pair ) ;  subsets [ i   %   numSplit ] . add ( pair ) ;  }  return  subsets ;  }
private   ArrayList < ServerFile >   getFiles ()   {  return  getIntent () . getParcelableArrayListExtra ( Intents . Extras . SERVER_FILES ) ;  }
private   String   addModelNameAsNS ( String   modelName ,  String   scoreName )   {  return  ( StringUtils . isBlank ( modelName )  ?   scoreName   :  modelName   +   """"::""""   +   scoreName ) ;  }
@ Override  public   void   endOfProcess ()   {  builder . append ( baseIndent ) . append ( '}' ) . append ( """"\n"""" ) ;  }
public   void   setModelVarSelectConf ( ModelVarSelectConf   modelVarSelectConf )   {  this . modelVarSelectConf   =   modelVarSelectConf ;  }
@ Deprecated  public   void   setBasicDigestAuthentications ( List < BasicDigestAuthentication >   basicDigestAuthentications )   {  this . basicDigestAuthentications   =   basicDigestAuthentications ;  }
public   static   long   readLongLE ( byte []   buf ,  int   i )   {  return  ( buf [ i ]   &   0xFFL )   |   ( ( buf [ i + 1 ]   &   0xFFL )   <<   8 )   |   ( ( buf [ i + 2 ]   &   0xFFL )   <<   16 )   |   ( ( buf [ i + 3 ]   &   0xFFL )   <<   24 )  |   ( ( buf [ i + 4 ]   &   0xFFL )   <<   32 )   |   ( ( buf [ i + 5 ]   &   0xFFL )   <<   40 )   |   ( ( buf [ i + 6 ]   &   0xFFL )   <<   48 )   |   ( ( buf [ i + 7 ]   &   0xFFL )   <<   56 ) ;  }
public   void   setDepthControlTextureCountThreshold ( int   value )   {  setOption ( RealSense . RS_OPTION_R200_DEPTH_CONTROL_TEXTURE_COUNT_THRESHOLD ,  value ) ;  }
@ NonNull  @ Override  public   String   toString ()   {  return  ToStringHelper . name ( """"InitParams"""" )  . field ( """"siteKey"""" ,  siteKey )  . field ( """"version"""" ,  version )  . end () ;  }
private   static   byte []   parseDERFromPEM ( byte []   pem ,  String   beginDelimiter ,  String   endDelimiter )   {  String   data   =  new   String ( pem ) ;  String []   tokens   =  data . split ( beginDelimiter ) ;  tokens   =   tokens [ 1 ] . split ( endDelimiter ) ;  
 <argument pos:start=""""""""2142:69"""""""" pos:end=""""""""2142:91""""""""><expr pos:start=""""""""2142:69"""""""" pos:end=""""""""2142:91""""""""><name pos:start=""""""""2142:69"""""""" pos:end=""""""""2142:91""""""""><name pos:start=""""""""2142:69"""""""" pos:end=""""""""2142:78"""""""">methodInfo</name><operator pos:start=""""""""2142:79"""""""" pos:end=""""""""2142:79"""""""">.</operator><name pos:start=""""""""2142:80"""""""" pos:end=""""""""2142:91"""""""">allocatorMax</name></name></expr></argument>
public   static   void   setProperty ( String   propertyName ,  String   propertyValue )   {  properties . put ( propertyName ,  propertyValue ) ;  }
@ Override  public   String   getBackupRegistryImpl ()   {  return  backupRegistryImpl ;  }
public   UserStoreReq   properties ( List < Property >   properties )   {  this . properties   =   properties ;  return  this ;  }
public   Chain < Boolean >   containsWith ( final   T   elem )   {  return  new   Chain <> ( Underscore . containsWith ( list ,  elem ) ) ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Check Oauth2 application registration."""" )  public   void   testRegisterApplication ()   throws  Exception   {  OAuthConsumerAppDTO   oAuthConsumerAppDTO   =  getBasicOAuthApp ( CALLBACK_URL ) ;  ServiceProvider   serviceProvider   =  registerServiceProviderWithOAuthInboundConfigs ( oAuthConsumerAppDTO ) ;  Assert . assertNotNull ( serviceProvider ,  """"OAuth App creation failed."""" ) ;  Assert . assertNotNull ( consumerKey ,  """"Consumer Key is null."""" ) ;  Assert . assertNotNull ( consumerSecret ,  """"Consumer Secret is null."""" ) ;  }
private   boolean   isBeforePluginSortedWrapper ( PluginSortedWrapper   wrapper )   {  
public   long   getStartTime ( @ NonNull   TimeUnit   timeUnit )   {  return  timeUnit . convert ( startTimeMillis ,  TimeUnit . MILLISECONDS ) ;  }
private   boolean   isAppsStateValid ( Bundle   state )   {  return  ( state   !=   null )   &&   state . containsKey ( State . APPS ) ;  }
private   String []   getDisplayValues ( ArrayList < String >   values ) {  ArrayList < String >   displayValues   =  new   ArrayList <> () ;  for  ( String   value :  values )   {  displayValues . add ( this . toDisplayValue ( value ) ) ;  }  return  displayValues . toArray ( new   String [ 0 ] ) ;  }
public   static   KeyValue   apply ( int   prev ,  char   c )  {  char []   states   =  ComposeKeyData . states ;  char []   edges   =  ComposeKeyData . edges ;  int   prev_length   =  edges [ prev ] ;  int   next   =  Arrays . binarySearch ( states ,  prev   +   1 ,  prev   +   prev_length ,  c ) ;  if  ( next   <   0 )  return  null ;  next   =   edges [ next ] ;  int   next_header   =  states [ next ] ;  if  ( next_header   ==   0 )   
HttpNotifierSelector   getHttpNotifierSelector ()   {  if  ( httpNotifierSelector   ==   null )   {  Jenkins   jenkins   =  Jenkins . get () ;  Injector   injector   =  jenkins . getInjector () ;  if  ( injector   !=   null )   {  injector . injectMembers ( this ) ;  }  }  return  httpNotifierSelector ;  }
public   final   boolean   childOfDefinitions ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.definitions.*"""" ) ;  }
@ Override  public   ResourceLocation   getUid ()   {  return  JadeIds . ACCESS_HELD_ITEM ;  }
@ Override  public   String   toShortString ()   {  return  this . joinpoint . toShortString () ;  }
public   void   addExternalClaim ( ExternalClaimDTO   externalClaim )   throws  RemoteException , ClaimMetadataManagementServiceClaimMetadataException   {  try  {  claimMetadataManagementServiceStub . addExternalClaim ( externalClaim ) ;  }   catch  ( RemoteException   e )   {  throw  e ;  }   catch  ( ClaimMetadataManagementServiceClaimMetadataException   e )   {  throw  e ;  }  }
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( """"class PassiveStsConfiguration {\n"""" ) ;  sb . append ( """"    realm: """" ) . append ( toIndentedString ( realm ) ) . append ( """"\n"""" ) ;  sb . append ( """"    replyTo: """" ) . append ( toIndentedString ( replyTo ) ) . append ( """"\n"""" ) ;  sb . append ( """"}"""" ) ;  return  sb . toString () ;  }
@ Override  public   boolean   hasFieldValue ( String   name )   {  return  map . containsKey ( name ) ;  }
static   boolean   isAccess ( ResourceLocation   id )   {  return  id . getNamespace () . equals ( """"jade_access"""" ) ;  }
@ Deprecated  @ RequirePOST  @ Restricted ( NoExternalUse . class )  public   void   doAssignRole ( @ QueryParameter ( required   =   true )   String   type , @ QueryParameter ( required   =   true )   String   roleName , @ QueryParameter ( required   =   true )   String   sid )   throws  IOException   {  checkAdminPerm () ;  final   RoleType   roleType   =  RoleType . fromString ( type ) ;  Role   role   =  getRoleMap ( roleType ) . getRole ( roleName ) ;  if  ( role   !=   null )   {  assignRole ( roleType ,  role ,  new   PermissionEntry ( AuthorizationType . EITHER ,  sid ) ) ;  }  persistChanges () ;  }
@ Test  void   fromJsonStackoverflowObject ()   throws  IOException   {  String   stringJson   = new   String ( Files . readAllBytes ( Paths . get ( """"src/test/resources/wellFormedObject.json"""" ) ) ) ;  try  {  U . fromJsonMap ( stringJson ) ;  }   catch  ( Throwable   throwable )   {  assertTrue ( throwable   instanceof   StackOverflowError ) ;  }  }
@ Test  void   debounce ()   {  final   Integer []   counter   =  new   Integer []   { 0 } ;  Supplier < Void >   incr   = ()  ->  {  counter [ 0 ] ++ ;  return  null ;  } ;  Supplier < Void >   debouncedIncr   =  Underscore . debounce ( incr ,  50 ) ;  debouncedIncr . get () ;  debouncedIncr . get () ;  Underscore . delay ( debouncedIncr ,  16 ) ;  Underscore . delay ( ( Supplier < Void > )  ()  ->  {  assertEquals ( 1 ,  counter [ 0 ] . intValue () ,  """"incr was debounced"""" ) ;  return  null ;  } , 60 ) ;  await () . atMost ( 120 ,  TimeUnit . MILLISECONDS ) . until ( ()  ->   true ) ;  }
protected   String   getAPIRequestForValidFlow ( String   flow )   {  validateFlow ( flow ) ;  return  getAPIEndpoint ()   +   """"?flow=""""   +   flow ;  }
public   static   URL []   findResources ( Class   cls ,  String   name )   throws  IOException   {  return  findResources ( cls ,  name ,  - 1 ) ;  }
public   void   writeSong ( Song   song ,  PrintStream   ps )   {  ps . println ( """"[#VERSION]"""" ) ;  ps . println ( """"UST Version1.2"""" ) ;  writeSettings ( song ,  ps ) ;  NoteIterator   notes   =  song . getNoteIterator () ;  for  ( int   index   =  0 ;   notes . hasNext () ;   index ++ )   {  Note   note   =  notes . next () ;  int   prevDuration   = notes . peekPrev () . isPresent ()  ?   notes . peekPrev () . get () . getDuration ()   :  0 ;  
public   HttpResponse   sendGetRequest ( String   locationURL )   throws  IOException   {  HttpGet   getRequest   =  new   HttpGet ( locationURL ) ;  getRequest . setHeader ( USER_AGENT ,  OAuth2Constant . USER_AGENT ) ;  return  client . execute ( getRequest ) ;  }
@ Test  public   void   acronymsAreCompleted ()   {  Query   query   =  new   Vocabulary . Query . Builder ( """"al"""" ) . includeAcronyms ( true ) . build () ;  assertThat ( vocabulary . getConceptsFromPrefix ( query ) ,  contains ( als ) ) ;  }
private   void   setDuration ()   {  FFmpegMediaMetadataRetriever   mFFmpegMediaMetadataRetriever   =  new   FFmpegMediaMetadataRetriever () ;  mFFmpegMediaMetadataRetriever . setDataSource ( getFileUri () . toString () ) ;  String   mVideoDuration   =  mFFmpegMediaMetadataRetriever . extractMetadata ( FFmpegMediaMetadataRetriever . METADATA_KEY_DURATION ) ;  mDuration   =   Integer . parseInt ( mVideoDuration ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  stopTomcat () ;  scim2RestClient . deleteUser ( primaryUserStoreUserId ) ;  scim2RestClient . deleteUser ( secondaryUserStoreUserId ) ;  scim2RestClient . deleteGroup ( primaryUserStoreGroupId ) ;  scim2RestClient . deleteGroup ( secondaryUserStoreGroupId ) ;  scim2RestClient . deleteRole ( primaryUserStoreRoleId ) ;  scim2RestClient . deleteRole ( secondaryUserStoreRoleId ) ;  userStoreMgtRestClient . deleteUserStore ( userStoreId ) ;  deleteApplication ( playgroundApp ) ;  clear () ;  }
@ Override  public   IObjectWrapper   fromBitmap ( Bitmap   bitmap )   throws  RemoteException   {  return  ObjectWrapper . wrap ( new   BitmapBitmapDescriptor ( bitmap ) ) ;  }
public   void   readFieldsWithoutFeatures ( DataInput   in ,  int   version )   throws  IOException   {  this . treeId   =   in . readInt () ;  this . nodeNum   =   in . readInt () ;  this . node   =   new   Node () ;  this . node . readFields ( in ,  version ) ;  this . learningRate   =   in . readDouble () ;  if ( this . node . getId ()   ==   Node . ROOT_INDEX )   {  this . rootWgtCnt   =   in . readDouble () ;  }  }
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( """"class RoleWithAudienceAudience {\n"""" ) ;  sb . append ( """"    display: """" ) . append ( toIndentedString ( display ) ) . append ( """"\n"""" ) ;  sb . append ( """"    type: """" ) . append ( toIndentedString ( type ) ) . append ( """"\n"""" ) ;  sb . append ( """"}"""" ) ;  return  sb . toString () ;  }
@ Override  protected   void   afterHookedMethod ( MethodHookParam   param )   throws  Throwable   {  unhooked . unhook () ;  }
@ Test  void   testSortXmlFullShouldAffectVerify ()   {  SortPomImplUtil . create ()  . testVerifyXmlIsNotOrdered ( """"/full_unsorted_input.xml"""" , """"The xml element <modelVersion> should be placed before <parent>"""" ) ;  }
@ Override  public   int   getItemCount ()   {  return  cursorAdapter . getCount () ;  }
public   Failure   expectedKeyword ( final   String   keyword )   {  this . expectedKeyword   =   keyword ;  return  this ;  }
@ Override  public   void   handleMessage ( Message   msg )   {  switch  ( msg . what )   {  case  CALLBACK_ON_COMPLETE :  OnCompleteObject < R >   o   =  ( OnCompleteObject < R > )   msg . obj ;  Log . d ( TAG ,  """"handleMessage() : onResult(""""   +   o . result   +   """")"""" ) ;  o . callback . onResult ( o . result ) ;  break;  case  CALLBACK_ON_TIMEOUT :  
private   void   addOtherRows ()   {  ArrayObjectAdapter   adapter   =  new   ArrayObjectAdapter ( new   MainTVPresenter ( getActivity () ,  serverClient ,  getVideoShare () ) ) ;  for  ( ServerFile   serverFile   :  mVideoList )   adapter . add ( serverFile ) ;  mRowsAdapter . add ( new   ListRow ( getHeader () ,  adapter ) ) ;  }
public   UntypedActor   create ()   {  return  new   DataLoadWorker ( modelConfig ,  columnConfigList ,  parentActorRef ,  modelRunRef ) ;  }
@ Override  public   DateTime   endedAt ( DateTime   now )   {  return  now . withTimeAtStartOfDay () . minusDays ( 1 ) ;  }
public   static   void   logResolved ()   {  int   deferred   =  deferredCounter . get () ;  int   resolved   =  resolvedCounter . get () ;  log . debug ( """"Outstanding: {}  Deferred: {}  Resolved {}"""" ,  deferred   -   resolved ,  deferred ,  resolved ) ;  }
@ Test  public   void   getNpc ()   {  NPC   guide   =  npcRepository . getNpc ( """"guide"""" ) ;  assertNotNull ( guide ) ;  assertEquals ( """"Guide"""" ,  guide . getName () ) ;  }
@ Override  public   String   getPrimaryGroup ( String   world ,  String   playerName )   {  PermissionUser   user   =  PermissionsEx . getPermissionManager () . getUser ( playerName ) ;  if  ( user   ==   null )   {  return  null ;  }   else if  ( user . getParentIdentifiers ( world ) . size ()   >   0 )   {  return  user . getParentIdentifiers ( world ) . get ( 0 ) ;  }   else  {  return  null ;  }  }
public   Portamento   makePortamento ( double   x1 ,  double   y1 ,  double   x2 ,  double   y2 ,  String   shape )   {  
@ Override  public   boolean   acceptProvidedProtocol ( String   inputProtocolHeader )   {  if  ( """""""" . equals ( providedProtocol ) )   {  return  true ;  }  String   protocolHeader   =  patternSpace . matcher ( inputProtocolHeader ) . replaceAll ( """""""" ) ;  String []   headers   =  patternComma . split ( protocolHeader ) ;  for  ( String   header   :  headers )   {  if  ( providedProtocol . equals ( header ) )   {  return  true ;  }  }  return  false ;  }
@ Override  public   void   onGetFdForAssetResponse ( GetFdForAssetResponse   response )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: onGetFdForAssetResponse"""" ) ;  }
public   static   void   setShowAlphaDigits ( final   EditText   hexEdit ,  boolean   showAlphaDigits )   {  hexEdit . setFilters ( showAlphaDigits  ?   withAlphaDigits   :  withoutAlphaDigits ) ;  hexEdit . setText ( hexEdit . getText () ) ;   
public   static   < T >   RecaptchaOptionalObject < T >   ofNullable ( T   object )   {  return  new   RecaptchaOptionalObject <> ( object ) ;  }
@ Test  void   wrongCertCannotWork ()   {  try  ( EurekaClientRunner   client   =  createEurekaClient () )   {  enableTlsClient ( client ) ;  client . setKeyStore ( wrongClientCert ) ;  client . start () ;  assertThat ( client . foundServiceViaEureka () ) . isFalse () ;  }  }
@ Override  public   long   getMemoryUsed ()   {  return  Pointer . totalBytes () ;  }
public   static   Properties   mapToProperties ( Map < String ,  Object >   map )   {  Properties   properties   =  new   Properties () ;  if  ( map   !=   null )   {  for  ( final   Map . Entry < String ,  Object >   entry   :  map . entrySet () )   {  if  ( ! isNull ( entry . getValue () ) )   {  properties . put ( entry . getKey () ,  String . valueOf ( entry . getValue () ) ) ;  }  }  }  return  properties ;  }
@ Override  public   void   setResourceAccessor ( ResourceAccessor   accessor )   {  this . resourceAccessor   =   accessor ;  }
public   static   JSONArray   getSingleTestAuthorizationDetail ()   throws  JSONException   {  final   JSONArray   authorizationDetails   =  new   JSONArray () ;  authorizationDetails . put ( getTestAuthorizationDetail ( TEST_TYPE_1 ) ) ;  return  authorizationDetails ;  }
@ Test ( expected   =   NullPointerException . class )  public   void   oneResult ()   throws  Exception  {  ctl   =   EasyMock . createControl () ;  CoverageResult   result   =  new   CoverageResultBuilder (  ctl  ) . data () . create () ;  new   CoverageChart (  result ,  true ,  0  ) ;  }
@ ReactMethod  public   void   mediaStreamTrackSetEnabled ( int   pcId ,  String   id ,  boolean   enabled )   {  ThreadUtils . runOnExecutor ( ()  ->  {  MediaStreamTrack   track   =  getTrack ( pcId ,  id ) ;  if  ( track   ==   null )   {  Log . d ( TAG ,  """"mediaStreamTrackSetEnabled() could not find track """"   +   id ) ;  return;  }  if  ( track . enabled ()   ==   enabled )   {  return;  }  track . setEnabled ( enabled ) ;  getUserMediaImpl . mediaStreamTrackSetEnabled ( id ,  enabled ) ;  } ) ;  }
public   void   setZoomGesturesEnabled ( boolean   enabled )   {  mapView . map () . getEventLayer () . enableZoom ( enabled ) ;  }
public   static   U2fApiClient   getU2fApiClient ( Context   context )   {  return  new   U2fApiClient ( context ) ;  }
public   void   addRestNote ( Note   note )   {  noteListBuilder . appendRestNote ( note ) ;  }
@ Override  public   String   get ( String   key )   {  return  this . properties . get ( key ) ;  }
@ Override  public   void   onBindViewHolder ( @ NonNull   ViewHolder   holder ,  int   position )   {  final   ModuleHolder   moduleHolder   =  this . moduleHolders . get ( position ) ;  if  ( holder . update ( moduleHolder ) )   {  UiThreadHandler . handler . post ( ()  ->  {  if  ( this . moduleHolders . get ( position )   ==   moduleHolder )   {  this . moduleHolders . remove ( position ) ;  this . notifyItemRemoved ( position ) ;  }  } ) ;  }  }
@ Override  @ SuppressLint ( """"InlinedApi"""" )  public   void   refreshRosettaX ()   {  ProcessHelper . restartApplicationProcess ( this ) ;  }
public   String   getOrganizationNames ()   {  return  StringUtils . join ( rootACL . getOrganizationNameList () . iterator () ,  """", """" ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  Protocol   protocol   =  ( Protocol )   o ;  return  providedProtocol . equals ( protocol . providedProtocol ) ;  }
@ Override  public   int   read ( ByteBuffer   dst )   throws  IOException   {  throw  new   IOException () ;  }
public   static   void   copyToLocal ( SourceFile   sourceFile ,  String   localOutputPath )   throws  IOException   {  copyToLocal ( sourceFile ,  Constants . HADOOP_PART_PREFIX ,  localOutputPath ) ;  }
public   int   deleteDomainAPI ( String   domainAPIId )   {  try  {  return  restClient . deleteDomainAPIResource ( domainAPIId ) ;  }   catch  ( IOException   e )   {  throw  new   RuntimeException ( """"Error while deleting domain API of Id """"   +   domainAPIId ) ;  }  }
@ BeforeAll  public   static   void   startJetty ()   throws  Exception   {  ( server   =   new   JettyWrapper ( """"/org/everit/json/schema/remotes"""" ) ) . start () ;  }
@ Override  protected   void   onPause ()   {  super . onPause () ;  if  ( mFoldersSpinner . getSelectedItem ()   !=   null )   {  Folder   selectedFolder   =  ( Folder )   mFoldersSpinner . getSelectedItem () ;  mPreferences . edit ()  . putString ( PREF_PREVIOUSLY_SELECTED_SYNCTHING_FOLDER ,  selectedFolder . id )  . apply () ;  }  }
@ ApiModelProperty ( value   =   """"List of user IDs."""" )  @ JsonProperty ( """"userIds"""" )  @ Valid  public   List < String >   getUserIds ()   {  return  userIds ;  }
public   boolean   hasUpdate ()   {  return  this . moduleInfo   !=   null   &&   this . repoModule   !=   null   &&   this . moduleInfo . versionCode   <   this . repoModule . moduleInfo . versionCode ;  }
public   double   getDouble ( Random   random )   {  return  powerDist . inverseF ( random . nextDouble () ) ;  }
public   LimbPose   setRotationAngleZ ( float   rotationAngleZ )  {  this . rotationAngleZ   =   rotationAngleZ ;  return  this ;  }
public   Map < Integer ,  Map < String ,  Double > >   getBinPosRateMap ()   {  return  binPosRateMap ;  }
private   String   generateVulnerabilityField ( Vulnerability   vulnerability )   {  String   source   =  vulnerability . getSource () . name () ;  String   id   =  escape ( vulnerability . getName () ) ;  return  """"<span class=\""""vuln-source vuln-source-""""   +   source . toLowerCase ()   +   """"\"""">""""   +   source   +   """"</span>""""   +   escape ( id ) ;  }
public   TenantResponseModel   addOwnersItem ( OwnerResponse   ownersItem )   {  if  ( this . owners   ==   null )   {  this . owners   =   new   ArrayList <> () ;  }  this . owners . add ( ownersItem ) ;  return  this ;  }
public   Info   getFirst ( String   cppName ,  boolean   partial )   {  List < Info >   infoList   =  get ( cppName ,  partial ) ;  return  infoList . size ()   >   0  ?   infoList . get ( 0 )   :  null ;  }
default   SerialConfigBuilder   stopBits ( Integer   bits ) {  return  stopBits ( StopBits . getInstance ( bits ) ) ;  }
static   public   < T >   Optional < T >   getProperty ( Element   container ,  String   property ,  Class < T >   type )   {  Optional < T >   value   =  Optional . < T > empty () ;  if  ( container . getPropertyKeys () . contains ( property ) )   {  value   =   Optional . < T > of ( type . cast ( container . getProperty ( property ) ) ) ;  }  return  value ;  }
public   Task < TResult >   addOnCanceledListener ( OnCanceledListener   listener )   {  throw  new   UnsupportedOperationException ( """"addOnCanceledListener is not implemented"""" ) ;  }
@ BeforeEach  void   setup ()   {  eurekaHttpClient   =   buildEurekaHttpClient () ;  EurekaInstanceConfigBean   config   =  new   EurekaInstanceConfigBean ( inetUtils ) ;  String   appname   =  """"customapp"""" ;  config . setIpAddress ( """"127.0.0.1"""" ) ;  config . setHostname ( """"localhost"""" ) ;  config . setAppname ( appname ) ;  config . setVirtualHostName ( appname ) ;  config . setSecureVirtualHostName ( appname ) ;  config . setNonSecurePort ( 4444 ) ;  config . setSecurePort ( 8443 ) ;  config . setInstanceId ( """"127.0.0.1:customapp:4444"""" ) ;  info   =   new   EurekaConfigBasedInstanceInfoProvider ( config ) . get () ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   init ()   throws  Exception   {  super . testInit ( swaggerDefinition ,  tenant ) ;  SCIMUtils . createSecondaryUserStore ( """"org.wso2.carbon.user.core.jdbc.UniqueIDJDBCUserStoreManager"""" , USER_STORE_DOMAIN ,  populateSecondaryUserStoreProperties () ,  backendURL ,  sessionCookie ) ;  Thread . sleep ( 5000 ) ;  }
@ Override  public   boolean   matches ( File   value )   {  return  value . length ()   <   1024   *   1024 ;  }
private   void   startFileDownloading ( ServerShare   share ,  ServerFile   file )   {  showFileDownloadingFragment ( share ,  file ) ;  }
private   static   SimpleDateFormat   getIsoUTCFormat () {  SimpleDateFormat   format   =  new   SimpleDateFormat ( """"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"""" ,  Locale . US ) ;  format . setTimeZone ( TimeZone . getTimeZone ( """"UTC"""" ) ) ;  return  format ;  }
 <argument pos:start=""""""""474:55"""""""" pos:end=""""""""474:65""""""""><expr pos:start=""""""""474:55"""""""" pos:end=""""""""474:65""""""""><name pos:start=""""""""474:55"""""""" pos:end=""""""""474:65""""""""><name pos:start=""""""""474:55"""""""" pos:end=""""""""474:58"""""""">info</name><operator pos:start=""""""""474:59"""""""" pos:end=""""""""474:59"""""""">.</operator><name pos:start=""""""""474:60"""""""" pos:end=""""""""474:65"""""""">sumAll</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   String   getSchema ( String   datasource )   {  return  environment . getRequiredProperty ( """"schema.""""   +   datasource ) ;  }
public   InputStream   getStream ( String   relPath )   {  String   absPath   =  rootPath   +   relPath ;  InputStream   rval   =  getClass () . getResourceAsStream ( absPath ) ;  if  ( rval   ==   null )   {  throw  new   IllegalArgumentException ( format ( """"failed to load resource by relPath [%s].\n""""  +   """"InputStream by path [%s] is null"""" ,  relPath ,  absPath ) ) ;  }  return  rval ;  }
@ Override   public   long   index ( long   i ,  long   j ,  long   k )   {  throw  new   UnsupportedOperationException () ;  }
@ Override  public   boolean   set ( ResourceLocation   key ,  Object   value )   {  throw  new   UnsupportedOperationException () ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Delete a user store config file"""" ,  dependsOnMethods   =   """"testChangeUserStoreState"""" )  public   void   testDeletingFile ()   throws  Exception   {  destFile   =   new   File ( userStoreConfigFilePath   +   srcFile . getName () ) ;  FileUtils . forceDelete ( destFile ) ;  Assert . assertTrue ( """"After 30s user store is still not deleted."""" ,  userStoreConfigUtils  . waitForUserStoreUnDeployment ( userStoreConfigurationClient ,  """"wso2.com"""" ) ) ;  }
@ Override  public   boolean   isPlaying ()   {  return  getMediaPlayer () . isPlaying () ;  }
public   Location   getPlayerLoc2 ( String   player )  {  return  playerLoc2 . get ( player ) ;  }
private   void   createLayout ( Dimension   dim )  {  VisualContext   ctx   =  getOwner () . getVisualContext () . create () ;  ctx . setParentContext ( ctx ) ;   
public   static   Gun   getGun ( GunItem   item )  {  return  GUNS . computeIfAbsent ( item ,  item1  ->   item . getGun () . copy () ) ;  }
public   Optional < PsiFile >   fromDocument ( final   Document   document )   {  final   Project []   openProjects   = ApplicationManager . getApplication () . getService ( ProjectManager . class ) . getOpenProjects () ;  if  ( openProjects . length   >   0 )   {  final   Project   openProject   =  openProjects [ 0 ] ;  return  Optional . ofNullable ( ApplicationManager . getApplication ()  . getService ( PsiDocumentManager . class )  . getPsiFile ( openProject ,  document ) ) ;  }  return  Optional . empty () ;  }
private   int []   readIntArray ( DataInput   in )   throws  IOException   {  int   size   =  in . readInt () ;  int []   array   =  new   int [ size ] ;  for ( int   i   =  0 ;   i   <   size ;   i ++ )   {  array [ i ]   =   in . readInt () ;  }  return  array ;  }
public   Builder   setFileOutput ( final   boolean   createBackupFile , final   String   backupFileExtension , String   violationFilename , boolean   keepTimestamp )   {  this . createBackupFile   =   createBackupFile ;  this . backupFileExtension   =   backupFileExtension ;  this . violationFilename   =   violationFilename ;  this . keepTimestamp   =   keepTimestamp ;  return  this ;  }
@ Test  public   void   test ()   throws  Exception  {  UriTemplate   original   =  UriTemplate . fromTemplate ( template ) ;  UriTemplateBuilder   originalBuilder   =  UriTemplate . buildFromTemplate ( original ) ;  UriTemplateComponent []   components   =  originalBuilder . getComponents () ;  UriTemplateBuilder   builder   =  UriTemplate . createBuilder () ;  for ( UriTemplateComponent   c   :  components )  {  builder . addComponent ( c ) ;  }  UriTemplate   rebuiltTemplate   =  builder . build () ;  Assert . assertEquals ( original . getTemplate () ,  rebuiltTemplate . getTemplate () ) ;  }
@ Override  public   void   snapshot ( ISnapshotReadyCallback   callback ,  IObjectWrapper   bitmap )  throws  RemoteException   {  Bitmap   b   =  ( Bitmap )   ObjectWrapper . unwrap ( bitmap ) ;  Log . d ( TAG ,  """"snapshot!: """"   +   b ) ;  backendMap . snapshot ( b ,  callback ) ;  }
public   void   setUserData ( String   key ,  String   value )   {  getAccountManager () . setUserData ( getAccount () ,  key ,  value ) ;  }
public   static   Builder   anyOf ( Collection < Schema >   schemas )   {  return  builder ( schemas ) . criterion ( ANY_CRITERION ) ;  }
public   void   setPaths ( List < String >   paths )   {  this . paths   =   paths ;  }
public   void   setFixK3 ( boolean   fixK3 )   {  if  ( fixK3 )   {  flags   |=   CV_CALIB_FIX_K3 ;  }   else  {  flags   &=   ~ CV_CALIB_FIX_K3 ;  }  }
public   static   void   assertOpenApiBackwardIncompatible ( String   oldSpec ,  String   newSpec )   {  ChangedOpenApi   changedOpenApi   =  OpenApiCompare . fromLocations ( oldSpec ,  newSpec ) ;  LOG . info ( """"Result: {}"""" ,  changedOpenApi . isChanged () . getValue () ) ;  assertThat ( changedOpenApi . isIncompatible () ) . isTrue () ;  }
public   AuthenticationStep   id ( Integer   id )   {  this . id   =   id ;  return  this ;  }
private   void   tearDownAppsState ( Bundle   state )   {  if  ( areAppsLoaded () )   {  state . putParcelableArrayList ( State . APPS ,  new   ArrayList < Parcelable > ( getAppsAdapter () . getItems () ) ) ;  }  }
public   void   reset ()   {  this . setTrainSize ( 0 ) ;  if ( this . gradients   !=   null )   {  Arrays . fill ( this . gradients ,  0.0 ) ;  }  }
private   static   Set < String >   _asSet ( String []   v )  {  if  ( v   ==   null   ||   v . length   ==   0 )   {  return  Collections . emptySet () ;  }  Set < String >   s   =  new   HashSet < String > ( v . length ) ;  for  ( String   str   :  v )   {  s . add ( str ) ;  }  return  s ;  }
public   DatabaseReader   build ()   throws  IOException   {  return  new   DatabaseReader ( this ) ;  }
@ Override  public   void   onWebsocketPong ( WebSocket   conn ,  Framedata   f )   {  pongBuffer   =   f . getPayloadData () . array () ;  pongLatch . countDown () ;  }
public   void   printList ( Player   player ,  String   listname )  {  FlagPermissions   list   =  this . getList ( player . getName () ,  listname ) ;  if ( list == null )  {  player . sendMessage ( ChatColor . RED + Residence . getLanguage () . getPhrase ( """"InvalidList"""" ) ) ;  return;  }  player . sendMessage ( ChatColor . LIGHT_PURPLE + """"------Permission Template------"""" ) ;  player . sendMessage ( Residence . getLanguage () . getPhrase ( """"Name"""" ) + """": """" + ChatColor . GREEN   +   listname ) ;  list . printFlags ( player ) ;  }
@ BeforeMethod  public   void   initiateSkimClient ()   {  scimClient   =   new   SCIMClient () ;  }
public   static   synchronized   void   registerReceiver ( Context   context ,  BroadcastReceiver   receiver ,  IntentFilter   intentFilter )   {  mReceivers . add ( receiver ) ;  context . registerReceiver ( receiver ,  intentFilter ) ;  Log . v ( TAG ,  """"Registered receiver: """"   +   receiver   +   """" with filter: """"   +   intentFilter ) ;  }
@ Override  public   String   getPrimaryGroup ( String   world ,  String   player )   {  OfflinePlayer   p   =  Bukkit . getOfflinePlayer ( player ) ;  Group   g   =  privs . getGroupManager () . getGroup ( p ) ;  return  g   !=   null  ?   g . getName ()   :  null ;  }
private   String   getBytesAsString ()   {  if  ( bytes   ==   null )   return  """"null"""" ;  try  {  CharsetDecoder   d   =  Charset . forName ( """"US-ASCII"""" ) . newDecoder () ;  CharBuffer   r   =  d . decode ( ByteBuffer . wrap ( bytes ) ) ;  return  r . toString () ;  }   catch  ( Exception   e )   {  return  Base64 . encodeToString ( bytes ,  Base64 . NO_WRAP ) ;  }  }
@ Override  public   void   onDestroy ()   {  super . onDestroy () ;  tearDownAuthenticationListener () ;  }
private   void   configureRepositories ( Node   repositoriesNode ,  List < MavenArtifactRepository >   repos )   {  for  ( MavenArtifactRepository   repo   :  repos )   {  Node   node   =  repositoriesNode . appendNode ( NODE_NAME_REPOSITORY ) ;  node . appendNode ( NODE_NAME_ID ,  repo . getName () ) ;  node . appendNode ( NODE_NAME_URL ,  repo . getUrl () . toString () ) ;  }  }
@ Override  public   boolean   isZoomGesturesEnabled ()   throws  RemoteException   {  return  zoomGesturesEnabled ;  }
private   String   getCallingPackageName ()   {  if  ( SDK_INT   >=   19 )   {  return  getCallingPackage () ;  }   else  {  return  """"unknown"""" ;  }  }
public   static   int   getRemoteVersion ( @ NonNull   Context   context ,  @ NonNull   String   moduleId )   {  return  getRemoteVersion ( context ,  moduleId ,  false ) ;  }
@ Test  public   void   validateAll ()   {  TestSupport . failureOf ( CombinedSchema . allOf ( SUBSCHEMAS ) )  . input ( 20 )  . expectedKeyword ( """"allOf"""" )  . expect () ;  }
public   ApplicationResponseModel   imageUrl ( String   imageUrl )   {  this . imageUrl   =   imageUrl ;  return  this ;  }
@ Test  void   Should_NotThrow_When_SpecHasNoChanges ()   {  final   String   oldSpec   =  oldSpecFile . getAbsolutePath () ;  final   OpenApiDiffMojo   mojo   =  new   OpenApiDiffMojo () ;  mojo . oldSpec   =   oldSpec ;  mojo . newSpec   =   oldSpec ;  mojo . failOnIncompatible   =   true ;  assertDoesNotThrow ( mojo :: execute ) ;  }
@ Test  public   void   thatRootKeyIsCompleted ()   {  getCaretCompletions ( """"root"""" )  . assertContains ( """"basePath"""" , """"produces"""" , """"consumes"""" , """"schemes"""" , """"paths"""" , """"tags"""" , """"parameters"""" , """"responses"""" )  . assertNotContains ( """"head"""" ,  """"get"""" ,  """"post"""" ,  """"operationId"""" ) ;  }
@ Test  public   void   extensionAndClassifier ()   throws  Exception   {  String   coords   =  ThinJarLauncher  . coordinates ( new   DefaultArtifact ( """"com.example:foo:zip:duplicate:1.0"""" ) ) ;  assertThat ( coords ) . isEqualTo ( """"com.example:foo:zip:duplicate:1.0"""" ) ;  }
@ Override  public   boolean   groupHas ( String   worldName ,  String   groupName ,  String   permission )   {  if  ( worldName   ==   null )   {  worldName   =   """"*"""" ;  }  try  {  return  perms . safeGetGroup ( worldName ,  groupName ) . hasPermission ( permission ) ;  }   catch  ( Exception   e )   {  e . printStackTrace () ;  return  false ;  }  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  InstanceSettings   settings   =  ( InstanceSettings )   o ;  return  toJson () . toString () . equals ( settings . toJson () . toString () ) ;  }
@ NonNull  @ Override  public   TrackItemVH   onCreateViewHolder ( @ NonNull   ViewGroup   parent ,  int   viewType )   {  return  new   TrackItemVH ( LayoutInflater . from ( parent . getContext () )  . inflate ( R . layout . tracklist_item , parent ,  false ) ) ;  }
@ Override  protected   Fragment   getFragment ()   {  return  new   SettingsFragment () ;  }
private   boolean   missingParameters ()   {  return  ! mArguments . containsKey ( """"cleanoutDays"""" ) ;  }
private   static   String   buildFieldName ( final   String   fieldName ,  final   String   lastFieldName ,  final   String   splitter )   {  return  StringUtils . isNotEmpty ( lastFieldName )  ?   fieldName   +   splitter   +   lastFieldName   :  fieldName ;  }
public   static   Set < SonarIssue >   getIssuesForFile ( PsiFile   psiFile )   {  String   fullPath   =  psiFile . getVirtualFile () . getPath () ;  Project   project   =  psiFile . getProject () ;  final   Map < String , Set < SonarIssue > >   index   =  getIndex ( project ) ;  Set < SonarIssue >   issues   =  index . get ( fullPath ) ;  if  ( issues   ==   null )   {  issues   =   Sets . newLinkedHashSet () ;  }  return  issues ;  }
private   static   Stream < Object >   parametersForConfigureKeyGeneratorTest ()   {  return  Stream . of ( """"avro"""" ,  """"json"""" ,  """"protobuf"""" ) ;  }
@ Test ( dependsOnMethods   =   """"testDeleteWSTrustInbound"""" )  public   void   testWSTrustInboundPut ()   throws  Exception   {  String   audience   =  """"https:
public   static   < T >   List < T >   takeSkipping ( final   T []   array ,  final   int   stepSize )   {  return  takeSkipping ( Arrays . asList ( array ) ,  stepSize ) ;  }
public   void   setNumNameMapping ( Map < Integer ,  String >   numNameMapping )   {  this . numNameMapping   =   numNameMapping ;  }
@ Override  public   final   void   setAsText ( final   String   value )   throws  IllegalArgumentException   {  propertyDescriptor . setValue ( """"schemaAsString"""" ,  value ) ;  schemaAsString   =   value ;  }
 <argument pos:start=""""""""254:59"""""""" pos:end=""""""""254:62""""""""><expr pos:start=""""""""254:59"""""""" pos:end=""""""""254:62""""""""><name pos:start=""""""""254:59"""""""" pos:end=""""""""254:62"""""""">page</name></expr></argument>)</argument_list></call></expr>;</return>
private   List   filterChat ( Object   thiz ,  List   chatsList )   {  var   tabChat   =  tabInstances . get ( CHATS ) ;  var   tabGroup   =  tabInstances . get ( GROUPS ) ;  if  ( ! Objects . equals ( tabChat ,  thiz )   &&   ! Objects . equals ( tabGroup ,  thiz ) )   {  return  chatsList ;  }  var   editableChatList   =  new   ArrayListFilter ( Objects . equals ( tabGroup ,  thiz ) ) ;  editableChatList . addAll ( chatsList ) ;  return  editableChatList ;  }
@ Test  public   void   responseDecreased ()   {  BackwardIncompatibleProp   prop   =  RESPONSE_HEADERS_DECREASED ;  assertSpecIncompatible ( BASE ,  """"bc_response_headers_decreased.yaml"""" ,  prop ) ;  }
public   void   addHeaderEntry (  final   Tag   tag ,  final   long   value )   {  format . getHeader () . createEntry ( tag ,   new   long []   { value } ) ;  }
@ Override  protected   CharSequence   getPageTitle ( int   pageIndex )   {  return  mTitles . get ( pageIndex ) ;  }
public   String   getProperty ( String   key )   {  return  properties . getProperty ( key ) ;  }
public   Builder   setExistingPaymentMethodRequired ( boolean   existingPaymentMethodRequired )   {  IsReadyToPayRequest . this . existingPaymentMethodRequired   =   existingPaymentMethodRequired ;  return  this ;  }
public   static   void   setServerName ( Context   context ,  String   serverName )   {  context . getSharedPreferences ( Constants . preference ,  MODE_PRIVATE ) . edit () . putString ( context . getString ( R . string . pref_server_select_key ) ,  serverName ) . apply () ;  }
@ Override  public   void   onChange ( PiGpioStateChangeEvent   event )   {  logger . info ( """"RECEIVED ALERT EVENT! {}"""" ,  event ) ;  throw  new   PiGpioException ( """"TEST"""" ) ;  }
default   void   append ( Component   component )   {  append ( component ,  null ) ;  }
@ Override  public   Optional < String >   getSessionId ( final   WebContext   context ,  final   boolean   createSession )   {  
private   void   addLayoutChangeListener ()   {  getSurfaceFrame () . addOnLayoutChangeListener ( this ) ;  }
@ NotNull  @ Override  public   String   getDescriptiveName ( @ NotNull   PsiElement   element )   {  final   String   name   = element   instanceof   PsiNamedElement  ?   ( ( PsiNamedElement )   element ) . getName ()   :  null ;  return  name   !=   null  ?   name   :  """"<unnamed>"""" ;  }
 <argument pos:start=""""""""4764:64"""""""" pos:end=""""""""4764:70""""""""><expr pos:start=""""""""4764:64"""""""" pos:end=""""""""4764:70""""""""><name pos:start=""""""""4764:64"""""""" pos:end=""""""""4764:70"""""""">include</name></expr></argument>
private   boolean   isWeightBinningMethod ()   {  return  modelConfig . getBinningMethod () . equals ( BinningMethod . WeightEqualTotal )  ||   modelConfig . getBinningMethod () . equals ( BinningMethod . WeightEqualInterval )  ||   modelConfig . getBinningMethod () . equals ( BinningMethod . WeightEqualPositive )  ||   modelConfig . getBinningMethod () . equals ( BinningMethod . WeightEqualNegative ) ;  }
JSONWriter   key ( String   string )   throws  JSONException   {  if  ( string   ==   null )   {  throw  new   JSONException ( """"Null key."""" ) ;  }  if  ( this . mode   ==   'k' )   {  try  {  JSONObject   topObject   =  this . stack [ this . top   -   1 ] ;  
@ NotNull  protected   File   toFile ( int   id )   {  assert  id   >=   0 ;  return  new   File ( tmpDir () ,  """"cpu-""""   +   id   +   """".lock"""" ) ;  }
private   static   void   onTooltip ( ItemStack   stack ,  Item . TooltipContext   tooltipContext ,  TooltipFlag   tooltipType ,  List < Component >   lines )   {  JadeClient . appendModName ( lines ,  stack ,  tooltipContext ,  tooltipType ) ;  }
@ Test  void   testDecodeThrottledStateCurrentlyThrottled ()   {  int   throttledStateInt   =  0x4 ;   
public   void   testUnusedParameterWhereParametersAreNotInRoot ()   {  final   VirtualFile   virtualFile   = myFixture . copyFileToProject ( """"validator/field/unused_parameter/yaml/unused_parameter_not_in_root.yaml"""" , """"parameters.yaml"""" ) ;  final   VirtualFile   swaggerFile   = myFixture . copyFileToProject ( """"validator/field/unused_parameter/yaml/unused_parameter_not_in_root_swagger.yaml"""" , """"swagger.yaml"""" ) ;  myFixture . configureFromExistingVirtualFile ( swaggerFile ) ;  myFixture . testHighlighting ( true ,  false ,  true ,  virtualFile ) ;  }
@ After  public   void   tearDown ()   {  getImpl () . setAffinity ( CORES_MASK ) ;  }
 <argument pos:start=""""""""391:41"""""""" pos:end=""""""""391:41""""""""><expr pos:start=""""""""391:41"""""""" pos:end=""""""""391:41""""""""><literal type=""""""""number"""""""" pos:start=""""""""391:41"""""""" pos:end=""""""""391:41"""""""">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Override  public   boolean   isApplicationVisible ()   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: isApplicationVisible"""" ) ;  return  true ;  }
@ SuppressWarnings ( """"unchecked"""" )  @ Test  void   toJsonFromXml13 ()   {  final   String   xml   = """"<?xml version=\""""1.0\"""" encoding=\""""UTF-8\""""?><a><b null=\""""true\""""></b>""""  +   """"<c null=\""""a\""""></c><d null=\""""true\"""">1</d></a>"""" ;  assertEquals ( """"{\n""""  +   """"  \""""a\"""": {\n""""  +   """"    \""""b\"""": null,\n""""  +   """"    \""""c\"""": {\n""""  +   """"      \""""-null\"""": \""""a\""""\n""""  +   """"    },\n""""  +   """"    \""""d\"""": \""""1\""""\n""""  +   """"  }\n""""  +   """"}"""" , U . toJson ( ( Map < String ,  Object > )   U . fromXml ( xml ) ) ) ;  }
public   static   boolean   isFileReference ( final   String   text )   {  return  text . endsWith ( """".json"""" )  ||   text . contains ( """".json#/"""" )  ||   text . endsWith ( """".yaml"""" )  ||   text . contains ( """".yaml#/"""" )  ||   text . endsWith ( """".yml"""" )  ||   text . contains ( """".yml#/"""" ) ;  }
private   void   ensureBuffer ( int   level )   {  while ( buffer . size ()   <   level   +   1 )   {  buffer . add ( null ) ;  }  if ( buffer . get ( level )   ==   null )   {  buffer . set ( level ,  new   ArrayList < T > () ) ;  }  }
@ Override  public   List < ViewManager >   createViewManagers ( ReactApplicationContext   reactApplicationContext )   {  return  Collections . emptyList () ;  }
private   void   setUpAuthenticationTextListener ()   {  getUsernameEdit () . addTextChangedListener ( this ) ;  getPasswordEdit () . addTextChangedListener ( this ) ;  getPasswordEdit () . setOnEditorActionListener ( ( v ,  actionId ,  event )  ->  {  boolean   handled   =  false ;  if  ( actionId   ==   EditorInfo . IME_ACTION_GO )   {  onClick ( getAuthenticationButton () ) ;  handled   =   true ;  }  return  handled ;  } ) ;  }
public   ItemStack   getDisplayStack ()  {  return  this . ingredient   !=   null  ?   this . displayStacks . get ( this . displayIndex )   :  ItemStack . EMPTY ;  }
@ Override  public   int   getMinCost ( int   level )  {  return  10   +   ( level   -   1 )   *   10 ;  }
@ Override  public   boolean   getGroupInfoBoolean ( String   worldName ,  String   groupName ,  String   node ,  boolean   defaultValue )   {  AnjoPermissionsHandler   handler ;  if  ( worldName   ==   null )   {  handler   =   groupManager . getWorldsHolder () . getDefaultWorld () . getPermissionsHandler () ;  }   else  {  handler   =   groupManager . getWorldsHolder () . getWorldPermissions ( worldName ) ;  }  if  ( handler   ==   null )   {  return  defaultValue ;  }  Boolean   val   =  handler . getGroupPermissionBoolean ( groupName ,  node ) ;  return  val   !=   null  ?   val   :  defaultValue ;  }
public   boolean   isExistingRole ( String   roleName )  throws  RemoteUserStoreManagerServiceUserStoreExceptionException ,  RemoteException   {  return  remoteUserStoreManagerServiceStub . isExistingRole ( roleName ) ;  }
static   void   lineSetFlags ( long   linePtr ,  int   flags )   {  int   result   =  c_gpiod_line_set_flags ( linePtr ,  flags ) ;  if  ( result   <   0 )  throw  new   GpioDException ( """"c_gpiod_line_set_flags failed: """"   +   result   +   """" (""""   +   c_gpiod_strerror ()   +   """")"""" ) ;  }
private   String   getFragmentParam ( String   url ,  String   key )   {  String   param   =  DataExtractUtil . extractParamFromURIFragment ( url ,  key ) ;  Assert . assertNotNull ( param ,  """"Param not found for the key : """"   +   key ) ;  return  param ;  }
public   void   resetParams ( BasicML   classifier )   {  if  ( modelConfig . isFixInitialInput () )   {  }   else  {  if  ( modelConfig . getAlgorithm ()   ==   """"NN""""   ||   modelConfig . getAlgorithm ()   ==   """"LR"""" )   {  ( ( BasicNetwork )   classifier ) . reset () ;  }  }  }
private   void   showAppsContent ()   {  ViewDirector . of ( this ,  R . id . animator ) . show ( R . id . content ) ;  }
public   void   replaceFragment ( Fragment   fragment )   {  getSupportFragmentManager () . beginTransaction ()  . addToBackStack ( """"root"""" )  . setTransition ( FragmentTransaction . TRANSIT_FRAGMENT_OPEN )  . replace ( R . id . content_wrapper ,  fragment )  . commit () ;  }
public   String   getTitle ()   {  Title   title   =  getAnnotation ( Title . class ) ;  return  title   ==   null  ?   null   :  title . value () ;  }
public   void   setFailMessage ( String   failMessage )   {  this . failMessage   =   failMessage ;  }
@ Test  public   void   nonStringSchemaVersionIsIgnored ()   {  Schema   subject   =  EmptySchema . builder ()  . unprocessedProperties ( ImmutableMap . of ( """"$schema"""" ,  42 ) )  . id ( """"my-id"""" )  . build () ;  String   actual   =  subject . toString () ;  JSONObject   rawSchemaJson   =  LOADER . readObj ( """"nonstring-schema-keyword.json"""" ) ;  assertThat ( new   JSONObject ( actual ) ,  sameJsonAs ( rawSchemaJson ) ) ;  }
public   void   setDefaultAddressResolutionOrder ( String []   defaultAddressResolutionOrder )   {  this . defaultAddressResolutionOrder   =   defaultAddressResolutionOrder ;  }
public   int   getPercentage ()   {  float   floatPercentage   =  getPercentageFloat () ;  int   intPercentage   =  Math . round ( floatPercentage ) ;  if  ( intPercentage   ==   100   &&   ( int )   floatPercentage   <   100 )   {  return  ( int )   floatPercentage ;  }   else  {  return  intPercentage ;  }  }
public   int   getAbsPositionMs ()   {  return  RoundUtils . round ( scaler . unscalePos ( getStartX () ) ) ;  }
public   void   deleteSubOrganization ( String   orgId ,  String   parentOrgId )   throws  Exception   {  String   m2mToken   =  switchM2MToken ( parentOrgId ) ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpDelete ( subOrganizationManagementApiBasePath   +  PATH_SEPARATOR   +   orgId ,  getHeadersWithBearerToken ( m2mToken ) ) )   {  assertEquals ( response . getStatusLine () . getStatusCode () ,  HttpStatus . SC_NO_CONTENT , """"Sub-organization deletion failed for organization with ID: """"   +   orgId ) ;  }  }
@ Test  public   void   testCoverBoundingBoxWithMaxHashesThrowsException ()   {  Coverage   coverage   =  coverBoundingBoxMaxHashes ( SCHENECTADY_LAT , SCHENECTADY_LON ,  HARTFORD_LAT ,  HARTFORD_LON ,  0 ) ;  assertNull ( coverage ) ;  }
@ Override   public   DoubleIndexer   put ( long   i ,  double   d )   {  array [ ( int ) index ( i ) ]   =   d ;  return  this ;  }
@ Override  public   void   draw ( DrawStage   turn )  {  if  ( displayed   &&   isVisible () )  {  if  ( turn   ==   DrawStage . DRAW_INLINE )  {  getViewport () . getRenderer () . renderTextContent ( this ) ;  }  }  }
public   static   ConditionEnum   fromValue ( String   value )   {  for  ( ConditionEnum   b   :  ConditionEnum . values () )   {  if  ( b . value . equals ( value ) )   {  return  b ;  }  }  throw  new   IllegalArgumentException ( """"Unexpected value '""""   +   value   +   """"'"""" ) ;  }
@ Override  public   ServerHandshakeBuilder   onWebsocketHandshakeReceivedAsServer ( WebSocket   conn ,  Draft   draft , ClientHandshake   request )   throws  InvalidDataException   {  return  new   HandshakeImpl1Server () ;  }
public   Optional < int [] >   getVibrato ()   {  return  vibrato . getVibrato () ;  }
private   void   undoDeleteNotes ( List < Note >   notes )   {  LinkedList < NoteData >   toAdd   =  new   LinkedList <> () ;  for  ( Note   note   :  notes )   {  noteMap . addNoteElement ( note ) ;  note . setValid ( true ) ;  try  {  noteMap . putNote ( note . getAbsPositionMs () ,  note ) ;  }   catch  ( NoteAlreadyExistsException   e )   {  note . setValid ( false ) ;  continue;  }  toAdd . add ( note . getNoteData () ) ;  }  if  ( toAdd . isEmpty () )   {  return;  }  model . addNotes ( toAdd ) ;  refreshNotes ( toAdd . getFirst () . getPosition () ,  toAdd . getLast () . getPosition () ) ;  }
public   void   run ()   {  scrollView . scrollTo ( 0 ,  display . getHeight () ) ;  }
@ Override  public   float   computeError ( float   predict ,  float   label )   {  float   error   =  predict   -   label ;  return  error   *   error ;  }
public   TestCaseResult   fireCustomTestCaseEvent ()   {  Allure . LIFECYCLE . fire ( new   ChangeTestCaseTitleEvent ( """"new.case.title"""" ) ) ;  TestCaseResult   testCase   =  Allure . LIFECYCLE . getTestCaseStorage () . get () ;  assertNotNull ( testCase ) ;  assertThat ( testCase . getTitle () ,  is ( """"new.case.title"""" ) ) ;  return  testCase ;  }
@ Override  public   float []   backward ( float []   outputs )   {  float []   results   =  new   float [ outputs . length ] ;  for ( int   i   =  0 ;   i   <   outputs . length ;   i ++ )   {  results [ i ]   =   this . lastInput [ i ]   >   0  ?   outputs [ i ]   *   1f   :  0f ;  }  return  results ;  }
private   String   readMetaInfoFromLockFileChannel ( File   lockFile ,  FileChannel   lockFileChannel )   throws  IOException   {  ByteBuffer   buffer   =  ByteBuffer . allocate ( 64 ) ;  int   len   =  lockFileChannel . read ( buffer ,  0 ) ;  String   content   =  len   <   1  ?   """"""""   :  new   String ( buffer . array () ,  0 ,  len ) ;  if  ( content . isEmpty () )   {  LOGGER . warn ( """"Empty lock file {}"""" ,  lockFile . getAbsolutePath () ) ;  return  null ;  }  return  content . substring ( 0 ,  content . indexOf ( """"\n"""" ) ) ;  }
@ Override  public   void   afterEach ( ExtensionContext   context )   throws  Exception   {  JenkinsRule   rule   =  context . getStore ( ns ) . remove ( key ,  JenkinsRule . class ) ;  if  ( rule   !=   null )   rule . after () ;  }
public   Class < ?   extends  Credential >   getCredentialType ()   {  return  null ;  }
public   Builder   exclusiveMinimum ( final   boolean   exclusiveMinimum )   {  this . exclusiveMinimum   =   exclusiveMinimum ;  return  this ;  }
private   void   chkbTsaEnabledActionPerformed ( java . awt . event . ActionEvent   evt )   { 
@ Test  public   void   testDefaultValues ()   {  FramedataImpl1   binary   =  FramedataImpl1 . get ( Opcode . BINARY ) ;  assertEquals ( Opcode . BINARY ,  binary . getOpcode () ,  """"Opcode must be equal"""" ) ;  assertTrue ( binary . isFin () ,  """"Fin must be set"""" ) ;  assertFalse ( binary . getTransfereMasked () ,  """"TransferedMask must not be set"""" ) ;  assertEquals (  0 ,  binary . getPayloadData () . capacity () ,  """"Payload must be empty"""" ) ;  assertFalse ( binary . isRSV1 () ,  """"RSV1 must be false"""" ) ;  assertFalse ( binary . isRSV2 () ,  """"RSV2 must be false"""" ) ;  assertFalse ( binary . isRSV3 () ,  """"RSV3 must be false"""" ) ;  }
private   boolean   validateLoginHomePageContent ( String   homepageContent )   {  return  homepageContent . contains ( """"You are logged in as """" ) ;  }
public   long   getCurrentSeqId ( String   nodeId )   {  return  nodeDatabase . getCurrentSeqId ( nodeId ) ;  }
@ DataProvider ( name   =   """"flowProvider"""" )  public   static   Object [] []   getFlows ()   {  return  new   Object [] [] { { """"preIssueAccessToken"""" } ,} ;  }
protected   void   initSymbols ()   {  bugSymbol   =   Symbol . get ( new   Builder ()   
@ Override  public   void   onIceCandidatesRemoved ( final   IceCandidate []   candidates )   { }
@ Override  public   void   recordNoteMovement ( Note   note ,  int   positionDelta ,  int   rowDelta )   {  
static   List < Job >   getJobs ( Injector   injector )   {  List < Job >   jobs   =  new   ArrayList <> () ;  Map < Key < ? > ,  Binding < ? > >   bindings   =  injector . getBindings () ;  for  ( Key < ? >   key   :  bindings . keySet () )   {  TypeLiteral < ? >   typeLiteral   =  key . getTypeLiteral () ;  Class < ? >   clazz   =  typeLiteral . getRawType () ;  if  ( Job . class . isAssignableFrom ( clazz ) )   {  jobs . add ( ( Job )   injector . getInstance ( clazz ) ) ;  }  }  return  jobs ;  }
public   static   List < Field >   root ()   {  return  ImmutableList . of ( new   StringField ( """"openapi"""" ,  true ) , new   InfoField () , new   ArrayField ( """"servers"""" ) , new   ObjectField ( """"paths"""" ,  true ) , new   ObjectField ( """"components"""" ) , new   ArrayField ( """"security"""" ) , new   ArrayField ( """"tags"""" ) , new   ExternalDocsField () ) ;  }
@ EventHandler ( priority   =   EventPriority . MONITOR )  public   void   onPluginEnable ( PluginEnableEvent   event )   {  if  ( chat . groupManager   ==   null )   {  Plugin   perms   =  event . getPlugin () ;  if  ( perms . getDescription () . getName () . equals ( """"GroupManager"""" ) )   {  chat . groupManager   =   ( GroupManager )   perms ;  log . info ( String . format ( """"[%s][Chat] %s hooked."""" ,  plugin . getDescription () . getName () ,  chat . name ) ) ;  }  }  }
public   String   dump ()   {  if  ( update   instanceof   StringBufferStreamUpdate )   {  return  ( ( StringBufferStreamUpdate )   update ) . dump () ;  }  return  null ;  }
protected   void   testInit ( String   apiVersion ,  String   apiDefinition ,  String   tenantDomain , String   apiUserBasePathInSwagger ,  String   apiUserBasePathWithTenantContext )  throws  XPathExpressionException ,  RemoteException   {  String   basePathInSwagger   =  String . format ( apiUserBasePathInSwagger ,  apiVersion ) ;  String   basePath   =  ISIntegrationTest . getTenantedRelativePath ( String . format ( apiUserBasePathWithTenantContext , apiVersion ) ,  tenantDomain ) ;  super . init ( apiDefinition ,  basePathInSwagger ,  basePath ) ;  }
public   static   void   fixJavaZipHax ( byte []   bytes )   {  if  ( bytes . length   >   8   &&   bytes [ 0x6 ]   ==   0x0   &&   bytes [ 0x7 ]   ==   0x0   &&   bytes [ 0x8 ]   ==   0x8 )  bytes [ 0x7 ]   =   0x8 ;   
public   List < Vulnerability >   getVulnerabilities ()   {  return  vulnerabilities ;  }
@ Override  public   boolean   process ( String   option ,  List < String >   arguments )   {  setAll () ;  return  true ;  }
public   void   trigger ()   throws  Exception   {  for  ( FrameGrabber   f   :  frameGrabbers )   {  if  ( f . isTriggerMode () )   {  f . trigger () ;  }  }  }
public   List < String >   getDatasources ( String   engine )   {  String   datasourceProperties   =  environment . getProperty ( engine   +   """".datasources"""" ) ;  if  ( datasourceProperties   ==   null )   {  return  Collections . emptyList () ;  }  return  SPLITTER . splitToList ( datasourceProperties ) ;  }
@ Test  public   void   testIssue19 ()   {  System . out . println ( """"AffinityLock.PROCESSORS=""""   +   PROCESSORS ) ;  AffinityLock   al   =  AffinityLock . acquireLock () ;  List < AffinityLock >   locks   =  new   ArrayList <> () ;  locks . add ( al ) ;  for  ( int   i   =  0 ;   i   <   256 ;   i ++ )  locks . add ( al   =   al . acquireLock ( AffinityStrategies . DIFFERENT_SOCKET , AffinityStrategies . DIFFERENT_CORE , AffinityStrategies . SAME_SOCKET , AffinityStrategies . ANY ) ) ;  for  ( AffinityLock   lock   :  locks )   {  lock . release () ;  }  }
@ Override  public   Owner   map ( final   Owner   owner ,  final   OwnerRequest   request )   {  owner . setAddress ( request . address () ) ;  owner . setCity ( request . city () ) ;  owner . setTelephone ( request . telephone () ) ;  owner . setFirstName ( request . firstName () ) ;  owner . setLastName ( request . lastName () ) ;  return  owner ;  }
private   void   initHide ( ComponentName   componentName )   {  View   hideButton   =  findViewById ( R . id . hide_app ) ;  if  ( PieLauncherApp . appMenu . isDrawerPackageName ( componentName . getPackageName () ) )   {  hideButton . setVisibility ( View . INVISIBLE ) ;  }   else  {  hideButton . setOnClickListener ( ( v )  ->   askToHide ( this ,  componentName ,  this :: finish ) ) ;  }  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( ! ( o   instanceof   ActivityTransitionEvent ) )   return  false ;  ActivityTransitionEvent   that   =  ( ActivityTransitionEvent )   o ;  if  ( activityType   !=   that . activityType )   return  false ;  if  ( transitionType   !=   that . transitionType )   return  false ;  return  elapsedRealtimeNanos   ==   that . elapsedRealtimeNanos ;  }
public   void   selectRegion ( RegionBounds   region )   {  playbackManager . highlightRegion ( region ,  noteMap . getAllValidNotes () ) ;  }
@ Override  public   String   toString ()   {  return  MoreObjects . toStringHelper ( this . getClass () ) . add ( """"name"""" ,  name )  . add ( """"properties"""" ,  properties ) . toString () ;  }
@ Override   public   LongIndexer   put ( long []   indices ,  long []   l ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  putRaw ( index ( indices )   +   n ,  l [ offset   +   n ] ) ;  }  return  this ;  }
private   void   showDiscardDialog () {  mDiscardDialog   =   createDiscardDialog () ;  mDiscardDialog . show () ;  }
private   void   validatePaginationScenarioWithOffsetAndLimitAndDefaultLimit ()   {  String   queryUrl   =  buildQueryUrlWithOffsetAndLimitAndDefaultLimit () ;  Response   response   =  getResponseOfGetWithOAuth2 ( queryUrl ,  m2mToken ) ;  validateCommonAssertions ( response ,  NUM_OF_ORGANIZATIONS_FOR_PAGINATION_TESTS ,  1 , Math . min ( DEFAULT_ORG_LIMIT ,  NUM_OF_ORGANIZATIONS_FOR_PAGINATION_TESTS ) ) ;  validateNextLinkBasedOnOrganizationCount ( response ) ;  }
@ Test  void   emptyBackupFileExtensionShouldNotWork ()   {  Executable   testMethod   = ()  ->  SortPomImplUtil . create ()  . backupFileExtension ( """""""" )  . customSortOrderFile ( """"difforder/differentOrder.xml"""" )  . lineSeparator ( """"\n"""" )  . testFiles ( """"/full_unsorted_input.xml"""" ,  """"/sortOrderFiles/sorted_differentOrder.xml"""" ) ;  var   thrown   =  assertThrows ( FailureException . class ,  testMethod ) ;  assertThat ( thrown . getMessage () ,  is ( equalTo ( """"Could not create backup file, extension name was empty"""" ) ) ) ;  }
public   IdentityProviderPOSTRequest   roles ( Roles   roles )   {  this . roles   =   roles ;  return  this ;  }
@ Override  public   boolean   onCreateOptionsMenu ( Menu   menu )   {  super . onCreateOptionsMenu ( menu ) ;  getMenuInflater () . inflate ( R . menu . action_bar_expanded_controller ,  menu ) ;  CastButtonFactory . setUpMediaRouteButton ( this ,  menu ,  R . id . media_route_menu_item ) ;  return  true ;  }
@ Test ( expectedExceptions   =   RuntimeException . class )  public   void   binningObjectComparatorException ()   {  BinningObject   o1   =  new   BinningObject ( DataType . Numerical ) ;  BinningObject   o2   =  new   BinningObject ( DataType . Categorical ) ;  VariableObjectComparator   comp   =  new   VariableObjectComparator () ;  comp . compare ( o1 ,  o2 ) ;  }
public   boolean   isMainSwaggerJsonFile ( final   PsiFile   psiFile )   {  return  hasJsonRootKey ( psiFile ,  String . format ( """"$.%s"""" ,  SWAGGER_KEY ) ,  SWAGGER_VERSION ) ;  }
private   Response   getResponseOfDelete ( String   endpointURI )   {  return  given () . auth () . preemptive () . basic ( userInfo . getUserName () ,  userInfo . getPassword () )  . contentType ( ContentType . JSON )  . header ( HttpHeaders . ACCEPT ,  ContentType . JSON )  . log () . ifValidationFails () . log () . ifValidationFails ()  . when () . log () . ifValidationFails ()  . delete ( endpointURI ) ;  }
private   CloseableHttpClient   getClosableHTTPClient ()   {  Lookup < CookieSpecProvider >   cookieSpecRegistry   =  RegistryBuilder . < CookieSpecProvider > create ()  . register ( CookieSpecs . DEFAULT ,  new   RFC6265CookieSpecProvider () )  . build () ;  RequestConfig   requestConfig   =  RequestConfig . custom ()  . setCookieSpec ( CookieSpecs . DEFAULT )  . build () ;  return  HttpClientBuilder . create ()  . setDefaultCookieSpecRegistry ( cookieSpecRegistry )  . setDefaultRequestConfig ( requestConfig )  . build () ;  }
public   static   String   getHideBasedOnKeywords ( Context   context )   {  return  getString ( context ,  PREF_HIDE_BASED_ON_KEYWORDS ,  """""""" ) ;  }
@ Override   public   CharIndexer   put ( long   i ,  long   j ,  char   c )   {  array [ ( int ) index ( i ,  j ) ]   =   c ;  return  this ;  }
public   void   removeFile ( int   selectedPosition )   {  recentFiles . remove ( selectedPosition ) ;  notifyDataSetChanged () ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"authorizedScopes"""" )  @ Valid  public   List < AuthorizedScope >   getAuthorizedScopes ()   {  return  authorizedScopes ;  }
@ Override  public   int   readRegister ( int   register )   {  return  piGpio . i2cReadByteData ( this . handle ,  register ) ;  }
@ Override  public   I2CConfig   build ()   {  I2CConfig   config   =  new   DefaultI2CConfig ( getResolvedProperties () ) ;  return  config ;  }
public   void   clearVcLengthOverrides ()   {  newConfig . vcLengthOverrides . clear () ;  }
JSONWriter   value ( long   l )   throws  JSONException   {  return  this . append ( Long . toString ( l ) ) ;  }
@ Override  public   String   getAuthTokenLabel ( String   authTokenType )   {  return  null ;  }
public   VoicebankData   withPresampConfig ( PresampConfig . Reader   newPresampConfig )   {  return  new   VoicebankData ( lyricConfigs ,  pitchMap ,  newPresampConfig ) ;  }
public   static   void   writeValue ( Writer   w ,  Object   value )   throws  JsonGenerationException ,  JsonMappingException , IOException   {  getObjectMapperInstance () . writerWithDefaultPrettyPrinter () . writeValue ( w ,  value ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  ScimSchemaExtensionSystem   scimSchemaExtensionSystem   =  ( ScimSchemaExtensionSystem )   o ;  return  Objects . equals ( this . accountLocked ,  scimSchemaExtensionSystem . accountLocked )   &&  Objects . equals ( this . country ,  scimSchemaExtensionSystem . country )   &&  Objects . equals ( this . stateorprovince ,  scimSchemaExtensionSystem . stateorprovince ) ;  }
Token []   tokenize ()   {  ArrayList < Token >   tokens   =  new   ArrayList < Token > () ;  try  {  Token   token ;  while  ( ! ( token   =   nextToken () ) . isEmpty () )   {  tokens . add ( token ) ;  }  }   catch  ( IOException   ex )   {  throw  new   RuntimeException ( ex ) ;  }  return  tokens . toArray ( new   Token [ tokens . size () ] ) ;  }
@ Test  void   testSortDifferentClassPathShouldAffectVerify ()   {  SortPomImplUtil . create ()  . customSortOrderFile ( """"difforder/differentOrder.xml"""" )  . testVerifyXmlIsNotOrdered ( """"/full_unsorted_input.xml"""" , """"The xml element <modelVersion> should be placed before <parent>"""" ) ;  }
@ DataBoundSetter  public   void   setMergeFeaturesById ( boolean   mergeFeaturesById )   {  this . mergeFeaturesById   =   mergeFeaturesById ;  }
public   FlaggedName []   getRolesOfCurrentUser ()  throws  RemoteException ,  UserAdminUserAdminException   {  return  userAdminStub . getRolesOfCurrentUser () ;  }
@ Override  public   PendingResult < Cast . ApplicationConnectionResult >   launchApplication ( GoogleApiClient   client ,  String   applicationId ,  boolean   relaunchIfRunning )   {  return  null ;  }
public   LocationType   getLocationType ()   {  return  getLocation () . getLocationType () ;  }
@ Override   public   HalfIndexer   get ( long   i ,  float []   h ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  h [ offset   +   n ]   =   toFloat ( buffer . get ( ( int ) index ( i )   +   n ) ) ;  }  return  this ;  }
public   static   int   kilohertz ( Number   frequency ) {  return  Math . round ( frequency . floatValue ()   *   KILOHERTZ ) ;  }
@ Override  public   int   hashCode ()   {  int   hash   =  7 ;  hash   =   31   *   hash   +   ( int ) id ;  hash   =   31   *   hash   +   ( enabled  ?   1   :  0 ) ;  hash   =   31   *   hash   +   hour ;  hash   =   31   *   hash   +   interval ;  hash   =   31   *   hash   +   ( int ) placed ;  hash   =   31   *   hash   +   mode . hashCode () ;  hash   =   31   *   hash   +   submode . hashCode () ;  hash   =   31   *   hash   +   ( excludeSystem  ?   1   :  0 ) ;  return  hash ;  }
public   void   testUnusedDefinitionWhereDefinitionsAreInRoot ()   {  final   VirtualFile   virtualFile   = myFixture . copyFileToProject ( """"validator/field/unused_definition/json/unused_definition_in_root.json"""" , """"definitions.json"""" ) ;  final   VirtualFile   swaggerFile   = myFixture . copyFileToProject ( """"validator/field/unused_definition/json/unused_definition_in_root_swagger.json"""" , """"swagger.json"""" ) ;  myFixture . configureFromExistingVirtualFile ( swaggerFile ) ;  myFixture . testHighlighting ( true ,  false ,  true ,  virtualFile ) ;  }
public   double   getStdDev ()   {  if ( validElementCnt   <=   1   ||   Double . isInfinite ( sum )   ||   Double . isInfinite ( squaredSum ) )   {  return  Double . NaN ;  }  stdDev   =   Math . sqrt ( ( squaredSum   -   ( sum   *   sum )   /   validElementCnt   +   EPS )   /   ( validElementCnt   -   1 ) ) ;  return  stdDev ;  }
@ NonNull  @ Override  public   Task < Location >   getCurrentLocation ( @ NonNull   CurrentLocationRequest   request ,  CancellationToken   cancellationToken )   {  return  null ;  }
public   device   loadDevice ()   throws  FrameGrabber . Exception   {  if  ( context   ==   null )   {  context   =   new   context () ;  }  if  ( context   ==   null   ||   context . get_device_count ()   <=   deviceNumber )   {  throw  new   Exception ( """"FATAL error: Realsense camera: """"   +   deviceNumber   +   """" not connected/found"""" ) ;  }  device   =   context . get_device ( deviceNumber ) ;  return  device ;  }
public   void   setSubtitle ( String   subtitle )   {  this . subtitle   =   subtitle ;  }
public   void   setEurekaServerDNSName ( String   eurekaServerDNSName )   {  this . eurekaServerDNSName   =   eurekaServerDNSName ;  }
public   static   LocationRequest   createFromDeprecatedCriteria ( Criteria   criteria ,  long   minTime , float   minDistance ,  boolean   singleShot )   {  return  null ;  }
@ Override  public   < T >   Future < T >   submit ( Callable < T >   tCallable )   {  return  delegate . submit ( tCallable ) ;  }
@ Override  public   EntityFormatConfiguration   get ()   {  return  new   EntityFormatConfiguration ( this ) ;  }
@ Test  public   void   testClosedReaderThrowsException ()   throws  IOException   {  Reader   reader   =  new   Reader ( getFile ( """"MaxMind-DB-test-decoder.mmdb"""" ) ) ;  reader . close () ;  ClosedDatabaseException   ex   =  assertThrows ( ClosedDatabaseException . class , ()  ->   reader . get ( InetAddress . getByName ( """"1.1.1.16"""" ) ,  Map . class ) ) ;  assertEquals ( """"The MaxMind DB has been closed."""" ,  ex . getMessage () ) ;  }
@ Test  void   isEmpty ()   {  XmlBuilder   xmlBuilder   =  new   XmlBuilder ( """"xml"""" ) . e ( """"123"""" ) ;  assertFalse ( xmlBuilder . isEmpty () ) ;  xmlBuilder . clear () ;  assertTrue ( xmlBuilder . isEmpty () ) ;  }
public   ClaimDialectDTO   getClaimMappingByDialect ( String   dialect )  throws  RemoteException ,  Exception   {  try  {  return  claimManagementServiceStub . getClaimMappingByDialect ( dialect ) ;  }   catch  ( RemoteException   e )   {  throw  new   RemoteException ( """"Unable while getting claim Mapping by dialect"""" ,  e ) ;  }  }
@ Override  public   boolean   visible ()   {  return  state . getMode ()   !=   Mode . date ;  }
@ Test  void   whenKeepTimestampNotSetTimestampsShouldDiffer ()   {  SortPomImplUtil . create ()  . customSortOrderFile ( """"difforder/differentOrder.xml"""" )  . lineSeparator ( """"\n"""" )  . keepTimestamp ( false )  . testFilesWithTimestamp ( """"/full_unsorted_input.xml"""" ,  """"/sortOrderFiles/sorted_differentOrder.xml"""" ) ;  }
public   static   void   launchPackage ( Context   context ,  String   packageName )   {  Intent   intent   =  getLaunchIntent ( context ,  packageName ) ;  if  ( intent   !=   null )   {  context . startActivity ( intent ) ;  }  }
@ Override  public   boolean   onKeyDown ( int   keyCode ,  KeyEvent   event )   {  if  ( keyCode   ==   KeyEvent . KEYCODE_BACK )   {  if  ( recording )   {  stopRecording () ;  }  finish () ;  return  true ;  }  return  super . onKeyDown ( keyCode ,  event ) ;  }
private   String   pathOf ( File   file )   {  return  String . format ( """"file:%s"""" ,  file . getAbsolutePath () ) ;  }
@ Override  public   IResource   getLaunchableResource ( IContainer   container )   {  try  {  if  ( container . members () . length   ==   1   &&   container . members () [ 0 ] . getName () . matches ( """".*\\.html$"""" ) )   {  return  container . members () [ 0 ] ;  }  for  ( IResource   projItem   :  container . members () )   {  if  ( projItem . getName () . equals ( """"index.html"""" ) )   {   
@ Provides  @ Singleton  private   DocumentBuilderFactory   provideDocumentBuilderFactory ()   {  return  DocumentBuilderFactory . newDefaultInstance () ;  }
static   String   parseSingleQuotedString ( Matcher   m )   throws  ParseError  {  if  ( ! match ( m ,  QUOTED_PAT ) )  parseError ( """"Expected quoted string"""" ,  m ) ;  return  m . group ( 1 ) . replace ( """"\\'"""" ,  """"'"""" ) ;  }
@ Override  public   boolean   isUnwrappableAs ( Class   unwrapType )   {  return  false ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"apiResources"""" )  @ Valid  public   List < APIResourceListItem >   getApiResources ()   {  return  apiResources ;  }
public   Settings   withAgentTimeout ( Duration   agentTimeout )   {  return  new   Settings ( agentTimeout , this . commandQueueBufferSize , this . failoverTimeout , connectionRetries , this . connectionMinBackoff , this . connectionMaxBackoff ) ;  }
@ TearDown ( Level . Iteration )  public   void   tearDown ()   {  webClient . close () ;  }
public   ChangedParameter   setDeprecated ( final   boolean   deprecated )   {  this . deprecated   =   deprecated ;  return  this ;  }
@ Test  void   shouldNotSetManagementAndJmxPortsInMetadataMap ()   {  TestPropertyValues . of ( """"server.port=8989"""" ,  """"management.server.port=0"""" ) . applyTo ( this . context ) ;  setupContext ( RefreshAutoConfiguration . class ) ;  EurekaInstanceConfigBean   instance   =  this . context . getBean ( EurekaInstanceConfigBean . class ) ;  assertThat ( instance . getMetadataMap () . get ( """"management.port"""" ) ) . isEqualTo ( null ) ;  assertThat ( instance . getMetadataMap () . get ( """"jmx.port"""" ) ) . isEqualTo ( null ) ;  }
public   void   testRenameLocalMappingSchemaNameReference ()   {  testRename ( """"NewPet"""" , """"rename_mapping_local_schema_name.json"""" , """"rename_mapping_local_schema_name_after.json"""" ) ;  }
@ Test  void   templateCheck ()   {  Underscore . Template < Map < String ,  Object > >   compiled   = Underscore . template ( """"hello: <%= name %>"""" ) ;  assertTrue ( compiled . check ( new   LinkedHashMap < String ,  Object > ()   { {  put ( """"name"""" ,  """"moe"""" ) ;  } } )  . isEmpty () ) ;  assertEquals ( """"name2"""" , compiled . check ( new   LinkedHashMap < String ,  Object > ()   { {  put ( """"name2"""" ,  """"moe"""" ) ;  } } )  . get ( 0 ) ) ;  }
public   boolean   isExported ()   throws  IOException   {  return  Files . exists ( Paths . get ( pwmPath ) ) ;  }
public   static   int   i2cReadI2CBlockData ( int   handle ,  int   i2cReg ,  byte []   buf ,  int   count ) {  return  i2cReadI2CBlockData ( handle ,  i2cReg ,  buf ,  0 ,  count ) ;  }
@ Override  public   KeywordValidator   getKeywordValidator ( JsonNode   node )  throws  ProcessingException  {  try  {  return  constructor . newInstance ( node ) ;  }   catch  ( InstantiationException   e )   {  throw  new   ProcessingException ( ERRMSG ,  e ) ;  }   catch  ( IllegalAccessException   e )   {  throw  new   ProcessingException ( ERRMSG ,  e ) ;  }   catch  ( InvocationTargetException   e )   {  throw  new   ProcessingException ( ERRMSG ,  e ) ;  }  }
@ NotNull  private   static   String   getFieldType ( final   String   breadCrumb ,  final   Field   value )   {  return  value . getType ()  +   """"-map""""  +   ( ( StringUtils . isNotEmpty ( breadCrumb )  &&   breadCrumb . endsWith ( """"[:]"""" ) )  ?   """"-map""""  :  ( StringUtils . isNotEmpty ( breadCrumb )  &&   breadCrumb . endsWith ( """"[]"""" ) )  ?   SchemaExtractorUtil . ARRAY_TYPE_POSTFIX  :  breadCrumb ) ;  }
@ Test  public   void   dateTimeExceedingLimits ()   {  assertFailure ( """"1996-60-999T16:39:57-08:00"""" ,  new   DateTimeFormatValidator () , """"[1996-60-999T16:39:57-08:00] is not a valid date-time. """"   +  """"Expected [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,9}Z, yyyy-MM-dd'T'HH:mm:ss[+-]HH:mm, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,9}[+-]HH:mm]"""" ) ;  }
@ Override  protected   Class < ? >   loadClass ( String   name ,  boolean   resolve )  throws  ClassNotFoundException   {  synchronized  ( getClassLoadingLock ( name ) )   {  
@ Test  public   void   testGetSanitizedTrackNameByStartDateWithNullTrackName ()   {  
@ Override  public   void   getChannelOutputStream ( IWearableCallbacks   callbacks ,  IChannelStreamCallbacks   channelCallbacks ,  String   s )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: getChannelOutputStream: """"   +   s ) ;  }
private   Role   createAdminRole ()   {  Set < Permission >   permissions   =  new   HashSet <> () ;  permissions . add ( Jenkins . ADMINISTER ) ;  return  new   Role ( """"admin"""" ,  permissions ) ;  }
@ Test  public   void   testCaseCanceledEventWithNullFailure ()   throws  Exception   {  new   TestCaseCanceledEvent () . withThrowable ( null ) . process ( testCase ) ;  verify ( testCase ) . setFailure ( any ( Failure . class ) ) ;  verify ( testCase ) . setStatus ( Status . CANCELED ) ;  verifyNoMoreInteractions ( testCase ) ;  }
@ Override  public   ResourceLocation   getUid ()   {  return  JadeIds . ACCESS_SIGN ;  }
@ Test  public   void   success ()   {  possibleValues . add ( new   JSONArray () ) ;  possibleValues . add ( new   JSONObject ( """"{\""""a\"""" : 0}"""" ) ) ;  EnumSchema   subject   =  subject () . build () ;  subject . validate ( true ) ;  subject . validate ( """"foo"""" ) ;  subject . validate ( new   JSONArray () ) ;  subject . validate ( new   JSONObject ( """"{\""""a\"""" : 0}"""" ) ) ;  }
public   boolean   waitForMessage ( ServerLogReader   inputStreamHandler , String   message )   {  long   time   =  System . currentTimeMillis ()   +   60   *   1000 ;  while  ( System . currentTimeMillis ()   <   time )   {  if  ( inputStreamHandler . getOutput () . contains ( message ) )   {  return  true ;  }  }  return  false ;  }
public   boolean   isCritical ()  {  return  this . type   ==   HitType . CRITICAL ;  }
public   OpenIDConnectConfiguration   pkce ( OAuth2PKCEConfiguration   pkce )   {  this . pkce   =   pkce ;  return  this ;  }
public   int   getMaxBinaryLiteralLength ()   throws  SQLException   {  return  0 ;  }
private   JSONObject   responseObjectNew ( List < NameValuePair >   postParameters ,  String   uri )   throws  Exception   {  HttpPost   httpPost   =  new   HttpPost ( uri ) ;  
void   forEach ( JsonObjectIterator   iterator )   {  storage . entrySet () . forEach ( entry  ->   iterateOnEntry ( entry ,  iterator ) ) ;  }
@ Override  public   void   onCreate ( Bundle   savedInstanceState )   throws  RemoteException   {  Log . d ( TAG ,  """"onCreate"""" ) ;  
public   static   boolean   isDefault ( PackageManager   packageManager , String   packageName )   {  Intent   intent   =  new   Intent ( Intent . ACTION_MAIN ) ;  intent . addCategory ( Intent . CATEGORY_HOME ) ;  ResolveInfo   res   =  packageManager . resolveActivity ( intent , PackageManager . MATCH_DEFAULT_ONLY ) ;  return  res   !=   null   &&   res . activityInfo   !=   null   &&  packageName . equals ( res . activityInfo . packageName ) ;  }
@ Test  public   void   beansNotCreatedWhenDiscoveryNotEnabled_EurekaEnabled ()   {  new   ApplicationContextRunner ()  . withConfiguration ( AutoConfigurations . of ( EurekaConfigServerBootstrapConfiguration . class ) )  . withPropertyValues ( """"spring.cloud.config.discovery.enabled=false"""" ,  """"eureka.client.enabled=true"""" )  . run ( this :: assertEurekaBeansNotPresent ) ;  }
public   static   QueryRow   fromJson ( JSONObject   json )   throws  JSONException   {  QueryRow   row   =  new   QueryRow () ;  if  ( json   !=   null )   {  Iterator < String >   it   =  json . keys () ;  while  ( it . hasNext () )   {  String   columnName   =  it . next () ;  row . mRow . put ( columnName ,  TypedValue . fromJson ( json . getJSONObject ( columnName ) ) ) ;  }  }  return  row ;  }
public   static   boolean   shouldRegisterRecipeViewerKeys ()   {  return  hasJEI   ||   hasREI ;  }
private   String   getCurrentSuitePrefix ( ITestResult   iTestResult )   {  return  """"{""""   +   getCurrentSuiteTitle ( iTestResult . getTestContext () )   +   """"}"""" ;  }
private   void   setUpFilesContentRefreshing ()   {  SwipeRefreshLayout   refreshLayout   =  getRefreshLayout () ;  refreshLayout . setProgressBackgroundColorSchemeResource ( R . color . accent ) ;  refreshLayout . setColorSchemeResources ( android . R . color . white ) ;  refreshLayout . setOnRefreshListener ( this ) ;  }
 <argument pos:start=""""""""200:48"""""""" pos:end=""""""""200:51""""""""><expr pos:start=""""""""200:48"""""""" pos:end=""""""""200:51""""""""><literal type=""""""""number"""""""" pos:start=""""""""200:48"""""""" pos:end=""""""""200:51"""""""">2.64</literal></expr></argument>)</argument_list></call>
public   VersionsBean   getVersionsBean ( String   path )  throws  RemoteException ,  ResourceAdminServiceExceptionException   {  try  {  return  resourceAdminServiceStub . getVersionsBean ( path ) ;  }   catch  ( RemoteException   e )   {  log . error ( """"Get version bean fails: """"   +   e . getMessage () ) ;  throw  new   RemoteException ( """"Get version bean fails:  """" ,  e ) ;  }   catch  ( ResourceAdminServiceExceptionException   e )   {  log . error ( """"Get version bean fails:  """"   +   e . getMessage () ) ;  throw  new   ResourceAdminServiceExceptionException ( """"Get version bean fails:  : """" ,  e ) ;  }  }
@ Test  void   shouldSelectLastUnstableBuild ()   {  when ( mockProject . getLastUnstableBuild () ) . thenReturn ( mockRun ) ;  Run   actualRun   =  extension . select ( mockProject ,  """"lastUnstable"""" ,  null ) ;  assertThat ( actualRun ,  is ( mockRun ) ) ;  }
public   PropertyRes   value ( String   value )   {  this . value   =   value ;  return  this ;  }
private   void   initCacheStrings ()   {  getOfuscateIDString ( """"mystatus"""" ) ;  getOfuscateIDString ( """"online"""" ) ;  getOfuscateIDString ( """"groups"""" ) ;  getOfuscateIDString ( """"messagedeleted"""" ) ;  getOfuscateIDString ( """"selectcalltype"""" ) ;  getOfuscateIDString ( """"lastseensun%s"""" ) ;  getOfuscateIDString ( """"updates"""" ) ;  }
@ Override  public   LatLng   fromScreenLocation ( IObjectWrapper   obj )   throws  RemoteException   {  Point   point   =  GmsMapsTypeHelper  . fromPoint ( ( android . graphics . Point )   ObjectWrapper . unwrap ( obj ) ) ;  return  GmsMapsTypeHelper  . toLatLng ( viewport . fromScreenPoint ( ( float )   point . x ,  ( float )   point . y ) ) ;  }
@ Override  void   visitIfSchema ( Schema   ifSchema )   {  if  ( conditionalSchema . getIfSchema () . isPresent () )   {  ifSchemaException   =   owner . getFailureOfSchema ( ifSchema ,  subject ) ;  if  ( ifSchemaException   ==   null )   {  owner . validationListener . ifSchemaMatch ( createMatchEvent ( IF ) ) ;  }   else  {  owner . validationListener . ifSchemaMismatch ( createMismatchEvent ( IF ,  ifSchemaException ) ) ;  }  }  }
@ Override  public   void   initializeFrom ( ILaunchConfiguration   configuration )   {  try  {  String   defaultSelectedFile   =  pathOrEmpty ( getSelectedFile ( shortcut :: canLaunch ) ) ;  this . programPathText . setText ( configuration . getAttribute ( LaunchConstants . PROGRAM ,  defaultSelectedFile ) ) ;   
@ Override  public   void   doHook ()   throws  Throwable   {  taskerEnabled   =   prefs . getBoolean ( """"tasker"""" ,  false ) ;  if  ( ! taskerEnabled )   return;  hookReceiveMessage () ;  registerSenderMessage () ;  }
@ Deprecated  default   void   onBlockDamaged ( Level   world ,  BlockState   state ,  BlockPos   pos ,  int   damage )  {  }
private   String   getActionEndpointOfType ( String   actionType )   {  switch  ( actionType )   {  case  PRE_ISSUE_ACCESS_TOKEN_TYPE :  return  actionsBasePath   +   PRE_ISSUE_ACCESS_TOKEN_PATH ;  case  PRE_UPDATE_PASSWORD_TYPE :  return  actionsBasePath   +   PRE_UPDATE_PASSWORD_PATH ;  default:  return  StringUtils . EMPTY ;  }  }
@ Override  protected   void   onAttachedToActivity ()  {  super . onAttachedToActivity () ;  if  ( _attached )  return;  _attached   =   true ;  reattach () ;  }
@ Override  public   double   getGroupInfoDouble ( String   world ,  String   group ,  String   node , double   defaultValue )   {  throw  new   UnsupportedOperationException ( """"mChat does not support group info nodes"""" ) ;  }
@ Override  public   boolean   isModified ()   {  final   ModuleSettings   component   =  ModuleSettings . getInstance ( myModule ) ;  if  ( null   ==   component )   return  false ;  Settings   state   =  component . getState () ;  return  null   ==   state   ||   ! state . equals ( this . toSettings () ) ;  }
static   boolean   hasRelationship ( Node   node1 ,  Node   node2 ,  RelationshipType   type )   {  Iterable < Relationship >   relationships   =  GraphUtil . getRelationships ( node1 ,  node2 ,  type ) ;  return  size ( relationships )   ==   1 ;  }
public   String   getOutSuffix ()   {  if  ( outSuffix   ==   null )  outSuffix   =   """""""" ;  return  outSuffix ;  }
@ Override  public   String   toString ()   {  return  new   ToStringCreator ( this )  . append ( """"id"""" ,  this . getId () )  . append ( """"name"""" ,  this . getName () )  . append ( """"birthDate"""" ,  this . getBirthDate () )  . append ( """"type"""" ,  this . getType () . getName () )  . append ( """"ownerFirstname"""" ,  this . getOwner () . getFirstName () )  . append ( """"ownerLastname"""" ,  this . getOwner () . getLastName () )  . toString () ;  }
@ SuppressWarnings ( """"unchecked"""" )  @ Test  void   toJsonFromXml4 ()   {  final   String   xml   =  """"<__FU__a></__FU__a>"""" ;  assertEquals ( """"{\n  \""""-a\"""": {\n  },\n  \""""#omit-xml-declaration\"""": \""""yes\""""\n}"""" , U . toJson ( ( Map < String ,  Object > )   U . fromXml ( xml ) ) ) ;  final   String   xml2   =  """"<__FUa></__FUa>"""" ;  assertEquals ( """"{\n""""  +   """"  \""""__FUa\"""": {\n""""  +   """"  },\n""""  +   """"  \""""#omit-xml-declaration\"""": \""""yes\""""\n""""  +   """"}"""" , U . toJson ( ( Map < String ,  Object > )   U . fromXml ( xml2 ) ) ) ;  }
@ ApiModelProperty ( example   =   """"en_US"""" ,  required   =   true ,  value   =   """"Unique ID of the email template. This id represents the locale of the email template."""" )  @ JsonProperty ( """"locale"""" )  @ Valid  @ NotNull ( message   =   """"Property id cannot be null."""" )  public   String   getLocale ()   {  return  locale ;  }
public   void   onBindViewHolder ( PreferenceViewHolder   viewHolder )   {  thumbnail   =   addThumbnail ( viewHolder . itemView ) ;  showColor ( getPersistedIntDefaultOrNull () ) ;  
public   Severity   getNormalizedSeverity ()   {  return  Severity . normalize ( vulnerability . getSeverity () ) ;  }
@ Override  public   void   onDetachedFromWindow ()  {  super . onDetachedFromWindow () ;  }
@ Test ( alwaysRun   =   true ,  description   =   """"Remove claim dialect"""" ,  dependsOnMethods   =   """"testRemoveCliamMapping"""" )  public   void   testRemoveCliamDialect ()   {  try  {  adminClient . removeClaimDialect ( DIALECT ) ;  ClaimDialectDTO   dialectDTO   =  adminClient . getClaimMappingByDialect ( DIALECT ) ;  Assert . assertNull ( dialectDTO ,  """"Error occured while removing claim dialect."""" ) ;  }   catch  ( Exception   e )   {  Assert . fail ( """"Error while trying to remove claim dialect"""" ,  e ) ;  }  }
@ Override  public   MLData   call ()   {  return  lr . compute ( pair . getInput () ) ;  }
public   static   String   readString ( Parcel   parcel ,  int   header )   {  int   size   =  readSize ( parcel ,  header ) ;  if  ( size   ==   0 )  return  null ;  int   start   =  parcel . dataPosition () ;  String   string   =  parcel . readString () ;  parcel . setDataPosition ( start   +   size ) ;  return  string ;  }
@ Test  public   void   shouldFindSingleOwnerWithPet ()   {  Owner   owner   =  this . owners . findById ( 1 ) ;  assertThat ( owner . getLastName () ) . startsWith ( """"Franklin"""" ) ;  assertThat ( owner . getPets () . size () ) . isEqualTo ( 1 ) ;  assertThat ( owner . getPets () . get ( 0 ) . getType () ) . isNotNull () ;  assertThat ( owner . getPets () . get ( 0 ) . getType () . getName () ) . isEqualTo ( """"cat"""" ) ;  }
public   ObservableList < EnvelopeData >   getEnvelopeConfig ()   {  ObservableList < EnvelopeData >   envelopeConfig   =  loadEnvelopeData () ;  envelopeConfig . addListener ( ( ListChangeListener < ?   super  EnvelopeData > )   change  ->  {  while  ( change . next () )   {  if  ( change . wasAdded ()   ||   change . wasRemoved () )   {  writeEnvelopeData ( envelopeConfig ) ;  }  }  } ) ;  return  envelopeConfig ;  }
@ Test ( alwaysRun   =   true ,  description   =   """"Testing create Identity Provider"""" )  public   void   createIdpTest ()   {  try  {  createIdp ( TEST_IDENTITY_PROVIDER_NAME_1 ) ;  Assert . assertEquals ( identityProviderMgtServiceClient . getIdPByName ( TEST_IDENTITY_PROVIDER_NAME_1 )  . getIdentityProviderName () , TEST_IDENTITY_PROVIDER_NAME_1 ,  """"Failed to create an Identity Provider"""" ) ;  }   catch  ( Exception   e )   {  Assert . fail ( """"Error while trying to create an identity Provider"""" ,  e ) ;  }  }
protected   void   configureMetadataBuilder ( MetadataBuilder   metadataBuilder )   throws  DatabaseException   {  configureImplicitNamingStrategy ( getProperty ( AvailableSettings . IMPLICIT_NAMING_STRATEGY ) ,  metadataBuilder ) ;  configurePhysicalNamingStrategy ( getProperty ( AvailableSettings . PHYSICAL_NAMING_STRATEGY ) ,  metadataBuilder ) ;  metadataBuilder . enableGlobalNationalizedCharacterDataSupport ( Boolean . parseBoolean ( getProperty ( AvailableSettings . USE_NATIONALIZED_CHARACTER_DATA ) ) ) ;  }
public   boolean   startCamera ()  {  return  CLEyeCameraStart ( cameraInstance ) ;  }
private   ModelNormalizeConf   createModelNormalizeConf ( ModelTrainConf . ALGORITHM   alg )   {  ModelNormalizeConf   normalizeConf   =  new   ModelNormalizeConf () ;  normalizeConf . setNormType ( ModelNormalizeConf . NormType . WOE ) ;  normalizeConf . setSampleNegOnly ( false ) ;  normalizeConf . setSampleRate ( 1.0 ) ;  return  normalizeConf ;  }
public   Chain < T >   first ()   {  return  new   Chain <> ( Underscore . first ( list ) ) ;  }
@ NotNull  public   static   List < Editor >   findEditorsFrom ( @ NotNull   Document   document )   {  return  Lists . newArrayList ( EditorFactory . getInstance () . getEditors ( document ) ) ;  }
@ Override  public   void   onResult ( Status   status ,  ExposureSummary   result )   {  if  ( status . isSuccess () )   {  completionSource . setResult ( result ) ;  }   else  {  completionSource . setException ( new   ApiException ( status ) ) ;  }  }
@ Override  public   boolean   equals ( java . lang . Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  FapiMetadata   fapiMetadata   =  ( FapiMetadata )   o ;  return  Objects . equals ( this . allowedSignatureAlgorithms ,  fapiMetadata . allowedSignatureAlgorithms )   &&  Objects . equals ( this . allowedEncryptionAlgorithms ,  fapiMetadata . allowedEncryptionAlgorithms )   &&  Objects . equals ( this . tokenEndpointAuthMethod ,  fapiMetadata . tokenEndpointAuthMethod ) ;  }
@ Override  public   void   setPlayerInfoString ( String   world ,  String   player ,  String   node ,  String   value )   {  worldCheck ( world ) ;  privs . getUserNode ( player ) . set ( node ,  value ) ;  }
public   Builder   addAllowedCardNetworks ( Collection < Integer >   allowedCardNetworks )   {  if  ( IsReadyToPayRequest . this . allowedCardNetworks   ==   null )  IsReadyToPayRequest . this . allowedCardNetworks   =   new   ArrayList <> () ;  IsReadyToPayRequest . this . allowedCardNetworks . addAll ( allowedCardNetworks ) ;  return  this ;  }
public   static   byte   readByte ( byte []   buf ,  int   i )   {  return  buf [ i ] ;  }
private   void   testLoginToFirstSession ()   throws  Exception   {  initiateAuthorizationRequest ( httpClientForFirstSession ,  OAuth2Constant . OAUTH2_SCOPE_OPENID   +   """" """"   +   """"device_01"""" ) ;  authenticateUser ( httpClientForFirstSession ) ;  String   authorizationCode   =  performConsentApproval ( httpClientForFirstSession ) ;  accessTokenInFirstSession   =   generateAuthzCodeAccessToken ( authorizationCode ,  httpClientForFirstSession ) ;  introspectActiveAccessToken ( accessTokenInFirstSession ,  httpClientForFirstSession ) ;  }
@ Test  public   void   emptyNumericCode ()   throws  Exception   {  System . out . println ( """"- Empty Numeric Code"""" ) ;  for  ( BaseCountry   c   :  countries )   {  if  ( c . getNumericCode ()   ==   null )   {  System . out . println ( c . getName () ) ;  }  }  }
@ Override  public   GeolocationResult   getResult ()   {  GeolocationResult   result   =  new   GeolocationResult () ;  result . accuracy   =   accuracy ;  result . location   =   location ;  return  result ;  }
@ SuppressWarnings (  """"unchecked"""" )  public   void   testCharSingle ()   throws  Exception   {  ByteBuffer   buffer   =  ByteBuffer . allocate (  1 ) ;  buffer . put ( (   byte )   1 ) ;  buffer . flip () ;  TestHeader   header   =  new   TestHeader () ;  Entry <  byte [] >   entry   =  (   Entry <  byte [] > )   header . createEntry (  Tag . CHAR_ENTRY ) ;  entry . setCount (  1 ) ;  entry . read (  buffer ) ;  assertEquals (  1 ,  entry . getValues () [  0 ] ) ;  ByteBuffer   data   =  ByteBuffer . allocate (  1 ) ;  entry . write (  data ) ;  data . flip () ;  buffer . flip () ;  assertTrue (  buffer . equals (  data ) ) ;  }
public   ILocation   getInitialLocation ()   {  String   profileName   =  fileName . split ( """"/"""" ) [ 2 ] ;  instance   =   null ;  LocationRepository . createRepo ( profileName ) ;  load () ;  Coordinate   coordinate   =  new   Coordinate ( 0 ,  0 ,  - 1 ) ;  return  getLocation ( coordinate ) ;  }
public   Builder   audienceList ( List < String >   audienceList )   {  this . audienceList   =   audienceList ;  return  this ;  }
private   void   parseUpwardsStepCount ()   throws  ParseException   {  if  ( ! isDigit ( curr () ) )   {  fail () ;  }   else if  ( curr ()   ==   '0' )   {  next () ;  if  ( curr ()   ==   '/'   ||   curr ()   ==   '#'   ||   curr ()   ==   EOF )   {  pos -- ;  }   else  {  fail () ;  }  }  for  ( char   current   =  next () ;   isDigit ( current )   &&   pos   <   input . length () ;   current   =   next () )  ;  }
public   boolean   completeSecuritySchemeKey ()   {  return  pathResolver . childOfSecurityScheme ( psiElement ) ;  }
@ Override  public   float   getHeight ()   throws  RemoteException   {  return  height ;  }
@ Override  public   void   onSharedPreferenceChanged ( SharedPreferences   sharedPreferences ,  String   key )   {  if  ( key . equals ( getString ( R . string . preference_key_server_connection ) ) )   {  setUpSettingsSummary () ;  setUpServerConnection () ;  }   else if  ( key . equals ( getString ( R . string . preference_key_language ) ) )   {  setUpSettingsSummary () ;  setUpLanguage () ;  }   else if  ( key . equals ( getString ( R . string . pref_key_theme_list ) ) )   {  setUpSettingsSummary () ;  setUpTheme () ;  }  }
public   APIResourceListResponse   totalResults ( Integer   totalResults )   {  this . totalResults   =   totalResults ;  return  this ;  }
@ ParameterizedTest  @ MethodSource ( """"useNativeGit"""" )  public   void   shouldGenerateCommitIdOldFashioned ( boolean   useNativeGit )   throws  Exception   {  
 <argument pos:start=""""""""536:107"""""""" pos:end=""""""""536:120""""""""><expr pos:start=""""""""536:107"""""""" pos:end=""""""""536:120""""""""><name pos:start=""""""""536:107"""""""" pos:end=""""""""536:120"""""""">pointCountsMat</name></expr></argument>)</argument_list></call></expr></argument>
public   Builder   userStore ( UserStore   userStore )   {  this . userStore   =   userStore ;  return  this ;  }
@ JavascriptInterface  public   final   String   fetchVerifiedPhoneNumber ()   {  Log . d ( TAG ,  """"JSBridge: fetchVerifiedPhoneNumber"""" ) ;  return  null ;  }
public   Builder   user ( PasswordUpdatingUser   user )   {  this . user   =   user ;  return  this ;  }
 <expr pos:start=""""""""443:121"""""""" pos:end=""""""""443:142""""""""><name pos:start=""""""""443:121"""""""" pos:end=""""""""443:142"""""""">keymasterSecurityLevel</name></expr>
private   String   getNavigationTitle ( Bundle   state )   {  if  ( isNavigationStateValid ( state ) )   {  return  state . getString ( State . NAVIGATION_TITLE ) ;  }   else  {  return  getString ( R . string . application_name ) ;  }  }
@ Override   public   HalfIndexer   put ( long   i ,  long   j ,  float   h )   {  buffer . put ( ( int ) index ( i ,  j ) ,  ( short ) fromFloat ( h ) ) ;  return  this ;  }
private   void   send ( int   type ,  Message   message )   {  rootHandler . sendMessage ( rootHandler . obtainMessage ( MSG_OUTPUT ,  type ,  0 ,  message ) ) ;  }
@ Test ( dependsOnMethods   =   { """"testDeleteAuthorizedAppById"""" } )  public   void   testDeleteAuthorizedApps ()   throws  Exception   {  getResponseOfDelete ( this . userAuthorizedAppsEndpointUri )  . then ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT )  . log () . ifValidationFails () ;  }
@ Deprecated  @ Override  public   void   getLightweightAppDataSearchService ( IGmsCallbacks   callback ,  int   versionCode , String   packageName )   throws  RemoteException   {  callGetService ( GmsService . LIGHTWEIGHT_INDEX ,  callback ,  versionCode ,  packageName ) ;  }
private   JComponent   createJComponent ()   {  JPanel   panelForTable   =  ToolbarDecorator . createDecorator ( mySonarResourcesTable ,  null ) .  setAddAction ( addAction () ) .  setRemoveAction ( anActionButton  ->   TableUtil . removeSelectedItems ( mySonarResourcesTable ) )  . disableUpDownActions ()  . createPanel () ;  panelForTable . setPreferredSize ( new   Dimension ( - 1 ,  100 ) ) ;  return  panelForTable ;  }
private   void   insertProjectSettingsIfConfigured ( Settings   projectSettings ,  Settings   moduleSettings ) {  updateServerNameSettings ( projectSettings ,  moduleSettings ) ;  updateLocalAnalysisScriptsSettings ( projectSettings ,  moduleSettings ) ;  }
@ Test  public   void   anyCriterionSuccess ()   {  CombinedSchema . ANY_CRITERION . validate ( 10 ,  1 ) ;  }
@ Override  public   PendingResult < Status >   sendFile ( GoogleApiClient   client ,  Uri   uri )   {  Log . d ( TAG ,  """"unimplemented Method: sendFile"""" ) ;  return  null ;  }
@ Test  public   void   emptySchema ()   {  assertTrue ( SchemaLoader . load ( get ( """"emptySchema"""" ) )   instanceof   EmptySchema ) ;  }
private   String   md5 ( String   s )   {  try  {  MessageDigest   digest   =  MessageDigest . getInstance ( """"MD5"""" ) ;  digest . update ( s . getBytes () ) ;  byte []   messageDigest   =  digest . digest () ;  StringBuilder   hexString   =  new   StringBuilder () ;  for  ( byte   b   :  messageDigest )   {  StringBuilder   h   =  new   StringBuilder ( Integer . toHexString ( 0xFF   &   b ) ) ;  while  ( h . length ()   <   2 )   h . insert ( 0 ,  """"0"""" ) ;  hexString . append ( h ) ;  }  return  hexString . toString () ;  }   catch  ( NoSuchAlgorithmException   e )   {  Log . e ( TAG ,  """"md5: """" ,  e ) ;  }  return  """""""" ;  }
public   boolean   othersUpdatesAreVisible ( int   type )   throws  SQLException   {  return  false ;  }
@ Override  public   void   setGroupSuffix ( String   world ,  String   group ,  String   suffix )   {  ApiLayer . setValue ( world ,  CalculableType . GROUP ,  group ,  """"suffix"""" ,  suffix ) ;  }
public   static   < T ,  E >   E   reduceRight ( final   T []   array ,  final   BiFunction < E ,  T ,  E >   func ,  final   E   zeroElem )   {  return  reduce ( reverse ( array ) ,  func ,  zeroElem ) ;  }
private   static   boolean   isPosixJNAAffinityUsable ()   {  if  ( isJNAAvailable () )   {  try  {  return  PosixJNAAffinity . LOADED ;  }   catch  ( Throwable   t )   {  logThrowable ( t ,  """"Posix JNA-based affinity not usable because it failed to load!"""" ) ;  return  false ;  }  }   else  {  LOGGER . warn ( """"Posix JNA-based affinity not usable due to JNA not being available!"""" ) ;  return  false ;  }  }
public   boolean   isWaitForAccurateLocation ()   {  return  waitForAccurateLocation ;  }
public   static   < E >   E   firstOrNull ( final   Iterable < E >   iterable ,  final   Predicate < E >   pred )   {  final   Iterator < E >   iterator   =  filter ( newArrayList ( iterable ) ,  pred ) . iterator () ;  return  iterator . hasNext ()  ?   iterator . next ()   :  null ;  }
public   void   addURL (  final   String   path ,  final   URL   source ,  final   int   mode ,  final   int   dirmode )   throws  NoSuchAlgorithmException ,  IOException   {  contents . addURL (  path ,  source ,  mode ,  null ,  null ,  null ,  dirmode ) ;  }
public   Long   put ( long   start ,  long   end ,  RelationshipType   type ,  Long   value )   {  return  delegate . put ( new   BatchEdge ( start ,  end ,  type . name () ) ,  value ) ;  }
@ Test  public   void   testLeadingAndTrailingPunctuation ()   {  Query   query   =  new   Vocabulary . Query . Builder ( """"hippocampus,"""" ) . build () ;  System . out . println ( vocabulary . getConceptsFromTerm ( query ) ) ;  assertThat ( vocabulary . getConceptsFromTerm ( query ) ,  contains ( hippocampus ) ) ;  query   =   new   Vocabulary . Query . Builder ( """",hippocampal formations,"""" ) . build () ;  assertThat ( vocabulary . getConceptsFromTerm ( query ) ,  contains ( hippocampalFormation ) ) ;  }
@ Override  public   final   void   onWebsocketMessage ( WebSocket   conn ,  ByteBuffer   blob )   {  onMessage ( conn ,  blob ) ;  }
@ Override  protected   boolean   canEqual ( Object   other )   {  return  other   instanceof   CombinedSchema ;  }
public   Optional < Schema >   getElseSchema ()   {  return  Optional . ofNullable ( elseSchema ) ;  }
@ Test  public   void   thatExternalDocsKeysAreSuggested ()   {  getCaretCompletions ( """"external_docs"""" ) . assertContains ( """"description"""" ,  """"url"""" ) . isOfSize ( 2 ) ;  }
public   Array   createArrayOf ( String   typeName ,  Object []   elements )   throws  SQLException   {  return  null ;  }
public   void   setExpectedNumberOfClientsSendingRenews ( int   expectedNumberOfClientsSendingRenews )   {  this . expectedNumberOfClientsSendingRenews   =   expectedNumberOfClientsSendingRenews ;  }
private   static   String   getHostname ()   {  if  ( Hostname   ==   null )   {  try  {  Hostname   =   InetAddress . getLocalHost () . getHostName () ;  }   catch  ( Exception   e )   {  Hostname   =   """"default"""" ;  LOGGER . warn ( """"Can not get current hostname"""" ,  e ) ;  }  }  return  Hostname ;  }
@ ApiModelProperty ( example   =   """"authorization_code"""" ,  value   =   """""""" )  @ JsonProperty ( """"name"""" )  @ Valid  public   String   getName ()   {  return  name ;  }
private   Dialog   buildDialog ()   {  AlertDialog . Builder   dialogBuilder   =  new   AlertDialog . Builder ( getActivity () ) ;  dialogBuilder . setMessage ( getString ( R . string . message_error_search_application ) ) ;  dialogBuilder . setPositiveButton ( getString ( R . string . button_search_application ) ,  this ) ;  return  dialogBuilder . create () ;  }
@ Nullable  public   String   dataChannelStateString ( DataChannel . State   dataChannelState )   {  switch  ( dataChannelState )   {  case  CONNECTING :  return  """"connecting"""" ;  case  OPEN :  return  """"open"""" ;  case  CLOSING :  return  """"closing"""" ;  case  CLOSED :  return  """"closed"""" ;  }  return  null ;  }
@ Test  public   void   getNpcWithZeroGold ()   {  NPC   npcWithZeroGold   =  npcRepository . getNpc ( """"recruit"""" ) ;  assertNotNull ( npcWithZeroGold ) ;  assertEquals (  0 ,  npcWithZeroGold . getGold () ) ;  }
@ Override  public   void   setFrequency ( int   frequency )   throws  IOException   {  this . frequency   =   frequency ;  }
public   VetResponse   getVets ( VetRequest   request )   throws  JsonProcessingException   {  ObjectMapper   objectMapper   =  new   ObjectMapper () ;  String   vetAsJson   =  objectMapper . writeValueAsString ( request . vet () ) ;  SearchRequest   sr   =  SearchRequest . from ( SearchRequest . defaults () ) . withQuery ( vetAsJson ) . withTopK ( 20 ) ;  if  ( request . vet ()   ==   null )   {  
@ Override  public   void   onItemClick ( AdapterView < ? >   parent ,  View   v ,  int   position ,  long   id )   {  mDirectionsDialogListener . onDirectionSelected ( position ) ;  }
@ Whitelisted  public   void   setColor ( String   color )   {  this . color   =   color ;  }
public   String   getLocalNodeId ()   {  return  clockworkNodePreferences . getLocalNodeId () ;  }
@ Deprecated  @ Override  public   void   getLocationService ( IGmsCallbacks   callback ,  int   versionCode ,  String   packageName , Bundle   params )   throws  RemoteException   {  callGetService ( GmsService . LOCATION ,  callback ,  versionCode ,  packageName ,  params ) ;  }
public   void   delete ( OfflineFile   offlineFile )   {  mOfflineFileDao . delete ( offlineFile ) ;  }
@ Parameters ( name   =   """"{1}"""" )  public   static   Collection < Object [] >   testData ()   throws  Exception  {  File   file   =  new   File ( """"./uritemplate-test/extended-tests.json"""" ) ;  return  loadTestData ( file ) ;  }
public   List < Pet >   getPets ()   {  final   List < Pet >   sortedPets   =  new   ArrayList <> ( getPetsInternal () ) ;  PropertyComparator . sort ( sortedPets ,  new   MutableSortDefinition ( """"name"""" ,  true ,  true ) ) ;  return  Collections . unmodifiableList ( sortedPets ) ;  }
public   synchronized   static   Method   loadGetTabMethod ( ClassLoader   classLoader )   throws  Exception   {  return  UnobfuscatorCache . getInstance () . getMethod ( classLoader ,  ()  ->  {  Method   result   =  findFirstMethodUsingStringsFilter ( classLoader ,  """"X."""" ,  StringMatchType . Contains ,  """"No HomeFragment mapping for community tab id:"""" ) ;  if  ( result   ==   null )   throw  new   Exception ( """"GetTab method not found"""" ) ;  return  result ;  } ) ;  }
public   record   Data ( float   progress )   {  public   static   final   StreamCodec < ByteBuf ,  Data >   STREAM_CODEC   =  StreamCodec . composite ( ByteBufCodecs . FLOAT , Data :: progress , Data :: new ) ;  }
private   void   endExpression ( int   position )   throws  MalformedUriTemplateException  {  
public   void   setScoreScale ( int   scale )   {  this . scorer . setScale ( scale ) ;  }
default   ByteBuffer   readByteBuffer ( int   length )   {  return  readByteBuffer ( 0 ,  length ) ;  }
@ Override  public   boolean   isEnabled ()   {  return  rscpAPI   !=   null   &&   rscpAPI . isEnabled () ;  }
private   void   testSuccess ( Object   permitted ,  Object   subjectOfValidation )   {  ConstSchema   subject   =  ConstSchema . builder () . permittedValue ( permitted ) . build () ;  subject . validate ( subjectOfValidation ) ;  }
@ Override  public   URL   getUrl ()   throws  MalformedURLException   {  return  this . url ;  }
private   static   boolean   sameOrder ( List < AppMenu . Icon >   a , List < AppMenu . Icon >   b )   {  int   size   =  a . size () ;  if  ( size   !=   b . size () )   {  return  false ;  }  if  ( size   ==   0 )   {  return  true ;  }  AppMenu . Icon   icon   =  a . get ( 0 ) ;  int   i ;  for  ( i   =   0 ;   i   <   size ;   ++ i )   {  if  ( b . get ( i )   ==   icon )   {  break;  }  }  if  ( i   >=   size )   {  return  false ;  }  for  ( int   j   =  1 ;   j   <   size ;   ++ j )   {  if  ( a . get ( j )   !=   b . get ( ++ i   %   size ) )   {  return  false ;  }  }  return  true ;  }
public   void   testThatAutoCompletionWorksForFileWithSingleDefinition ()   {  myFixture . copyFileToProject ( PARTIAL_FILES_PATH   +   """"/pet.json"""" ,  """"pet.json"""" ) ;  final   VirtualFile   swaggerFile   = myFixture . copyFileToProject ( PARTIAL_FILES_PATH   +   """"/swagger.json"""" ,  """"swagger.json"""" ) ;  myFixture . configureFromExistingVirtualFile ( swaggerFile ) ;  final   AssertableList   completions   = new   AssertableList ( myFixture . getCompletionVariants ( """"pet.json"""" ) ) ;  assertSchemaCompletions ( completions ) ;  }
static   Dependency   dependency ( DefaultArtifact   artifact )   {  Dependency   dependency   =  new   Dependency () ;  dependency . setGroupId ( artifact . getGroupId () ) ;  dependency . setArtifactId ( artifact . getArtifactId () ) ;  dependency . setVersion ( StringUtils . hasLength ( artifact . getVersion () )  ?   artifact . getVersion ()   :  null ) ;  dependency . setClassifier ( StringUtils . hasLength ( artifact . getClassifier () )  ?   artifact . getClassifier ()   :  null ) ;  dependency . setType ( artifact . getExtension () ) ;  return  dependency ;  }
@ Override  public   void   onStreetViewPanoramaChange ( StreetViewPanoramaLocation   location )   throws  RemoteException   {  listener . onStreetViewPanoramaChange ( location ) ;  }
public   String   getSource ( String   datasource )   {  String   source   =  environment . getProperty ( """"source.""""   +   datasource ) ;  return  firstNonNull ( source ,  """"yanagishima"""" ) ;  }
 <argument pos:start=""""""""1272:100"""""""" pos:end=""""""""1272:120""""""""><expr pos:start=""""""""1272:100"""""""" pos:end=""""""""1272:120""""""""><call pos:start=""""""""1272:100"""""""" pos:end=""""""""1272:120""""""""><name pos:start=""""""""1272:100"""""""" pos:end=""""""""1272:118""""""""><name pos:start=""""""""1272:100"""""""" pos:end=""""""""1272:106"""""""">audio_c</name><operator pos:start=""""""""1272:107"""""""" pos:end=""""""""1272:107"""""""">.</operator><name pos:start=""""""""1272:108"""""""" pos:end=""""""""1272:118"""""""">sample_rate</name></name><argument_list pos:start=""""""""1272:119"""""""" pos:end=""""""""1272:120"""""""">()</argument_list></call></expr></argument>
public   static   < T   extends  SafeParcelable >   T   deserializeFromBytes ( byte []   bytes ,  Parcelable . Creator < T >   tCreator )   {  if  ( bytes   ==   null )   return  null ;  Parcel   parcel   =  Parcel . obtain () ;  parcel . unmarshall ( bytes ,  0 ,  bytes . length ) ;  parcel . setDataPosition ( 0 ) ;  T   parcelable   =  tCreator . createFromParcel ( parcel ) ;  parcel . recycle () ;  return  parcelable ;  }
@ EventHandler ( priority   =   EventPriority . LOWEST ,  ignoreCancelled   =   true )  public   void   onEntityCombust ( EntityCombustEvent   event )   {  FlagPermissions   perms   =  Residence . getPermsByLoc ( event . getEntity () . getLocation () ) ;  if  ( ! perms . has ( """"burn"""" ,  true ) )   {  event . setCancelled ( true ) ;  }  }
public   boolean   contains ( File   file )   {  for  ( int   i   =  0 ;   i   <   getCount () ;   i ++ )   {  if  ( getItem ( i ) . equals ( file ) )  return  true ;  }  return  false ;  }
default   int   transfer ( ByteBuffer   write ,  ByteBuffer   read ,  int   numberOfBytes )   {  
@ BeforeTest ( alwaysRun   =   true )  public   void   enableAnalytics ()   throws  Exception   {  super . init () ;  changeConfiguration () ;  startThriftServer () ;  }
public   void   setRelativeSourcePath ( String   relativeSourcePath )   {  this . relativeSourcePath   =   relativeSourcePath ;  }
@ Override  public   void   joinApplication ( String   applicationId ,  String   sessionId ,  JoinOptions   joinOptions )   {  Log . d ( TAG ,  """"unimplemented Method: joinApplication"""" ) ;  this . launchApplication ( applicationId ,  new   LaunchOptions () ) ;  }
@ Override  protected   void   finalize ()   throws  Throwable   {  super . finalize () ;  release () ;  }
private   String   typeParameters ( Options   opt ,  DeclaredType   t )   {  if  ( t   ==   null   ||   t . getTypeArguments ()   ==   null   ||   t . getTypeArguments () . isEmpty () )   {  return  """""""" ;  }  StringBuffer   tp   =  new   StringBuffer ( 1000 ) . append ( """"&lt;"""" ) ;  List < ?   extends  TypeMirror >   args   =  t . getTypeArguments () ;  for  ( int   i   =  0 ;   i   <   args . size () ;   i ++ )   {  tp . append ( type ( opt ,  args . get ( i ) ,  true ) ) ;  if  ( i   !=   args . size ()   -   1 )   {  tp . append ( """", """" ) ;  }  }  return  tp . append ( """"&gt;"""" ) . toString () ;  }
@ Override  public   @ Nullable   Void   visitIdentifier ( IdentifierTree   identifierTree ,  ImmutableList . Builder < Name >   names )   {  names . add ( identifierTree . getName () ) ;  return  null ;  }
private   Map < String ,  Object >   convertTupleToRawInput ( Tuple   tuple )   throws  ExecException   {  Map < String ,  Object >   rawInput   =  new   HashMap < String ,  Object > () ;  for ( int   i   =  0 ;   i   <   this . columnConfigList . size () ;   i ++ )   {  rawInput . put ( this . columnConfigList . get ( i ) . getColumnName () ,  tuple . get ( i ) ) ;  }  return  rawInput ;  }
public   static   void   setViewHeight ( InstanceSettings   settings ,  RemoteViews   rv ,  int   viewId ,  int   dimenId )   {  rv . setInt ( viewId ,  METHOD_SET_HEIGHT ,  getScaledValueInPixels ( settings ,  dimenId ) ) ;  }
public   static   void   cleanFolder ( File   folder ,  boolean   recurse )   {  for  ( File   f   :  folder . listFiles () )   {  if  ( f . isDirectory ()   &&   ! f . getName () . equals ( """"CVS"""" ) )   {  if  ( recurse )   {  cleanFolder ( f ,  true ) ;  if  ( f . list () . length   ==   0 )  f . delete () ;  }  }   else if  ( ! f . getName () . equals ( """".cvsignore"""" ) )   {  f . delete () ;  }  }  }
@ SuppressWarnings ( """"unchecked"""" )  @ Test  public   void   xor ()   {  assertEquals ( """"[1, 4]"""" ,  Xor . xor ( asList ( 1 ,  2 ) ,  asList ( 4 ,  2 ) ) . toString () ) ;  }
@ Test  public   void   compute ( CapturedOutput   output )   throws  Exception   {  String []   args   =  new   String []   {  """"--thin.classpath=properties"""" , """"--thin.archive=src/test/resources/apps/basic""""  } ;  ThinJarLauncher . main ( args ) ;  assertThat ( output . toString () ) . contains ( """"dependencies.spring-web=org.springframework:spring-web:5.2.7.RELEASE\n"""" ) ;  }
@ Override  public   void   readSpawnData ( FriendlyByteBuf   buffer )  {  this . projectile   =   new   Gun . Projectile () ;  this . projectile . deserializeNBT ( buffer . readNbt () ) ;  this . general   =   new   Gun . General () ;  this . general . deserializeNBT ( buffer . readNbt () ) ;  this . shooterId   =   buffer . readInt () ;  this . item   =   BufferUtil . readItemStackFromBufIgnoreTag ( buffer ) ;  this . modifiedGravity   =   buffer . readDouble () ;  this . life   =   buffer . readVarInt () ;  this . entitySize   =   new   EntityDimensions ( this . projectile . getSize () ,  this . projectile . getSize () ,  false ) ;  }
private   Map < String ,  String >   extractClaims ( String   claimString )   {  String []   dataArray   =  StringUtils . substringsBetween ( claimString ,  """"<td>"""" ,  """"</td>"""" ) ;  Map < String ,  String >   attributeMap   =  new   HashMap < String ,  String > () ;  String   key   =  null ;  String   value ;  for  ( int   i   =  0 ;   i   <   dataArray . length ;   i ++ )   {  if  ( ( i   %   2 )   ==   0 )   {  key   =   dataArray [ i ] ;  }   else  {  value   =   dataArray [ i ] . trim () ;  attributeMap . put ( key ,  value ) ;  }  }  return  attributeMap ;  }
public   ClaimDialectDTO []   getClaimDialects ()   throws  RemoteException , ClaimMetadataManagementServiceClaimMetadataException   {  try  {  return  claimMetadataManagementServiceStub . getClaimDialects () ;  }   catch  ( RemoteException   e )   {  throw  e ;  }   catch  ( ClaimMetadataManagementServiceClaimMetadataException   e )   {  throw  e ;  }  }
public   Builder   add ( final   Object   value )   {  data . put ( String . valueOf ( data . size () ) ,  value ) ;  return  this ;  }
public   boolean   addServiceProvider ( SAMLSSOServiceProviderDTO   ssoServiceProviderDTO )  throws  RemoteException ,  IdentitySAMLSSOConfigServiceIdentityException   {  try  {  return  identitySAMLSSOConfigServiceStub . addRPServiceProvider ( ssoServiceProviderDTO ) ;  }   catch  ( RemoteException   e )   {  throw  new   RemoteException ( """"Error while adding service provider """" + ssoServiceProviderDTO . getIssuer () ,  e ) ;  }   catch  ( IdentitySAMLSSOConfigServiceIdentityException   e )   {  throw  new   IdentitySAMLSSOConfigServiceIdentityException ( """"Error while adding service provider """" ,  e ) ;  }  }
public   void   setDefaultEncoding ( String   encoding )  {  this . encoding   =   encoding ;  }
@ Override   public   UIntIndexer   put ( long   i ,  long   n )   {  buffer . put ( ( int ) index ( i ) ,  ( int ) n ) ;  return  this ;  }
public   Map < String ,  Object >   getProperties ()   {  return  this . properties ;  }
public   Frame   getDelayedFrame ()   throws  InterruptedException ,  ExecutionException   {  if  ( future   ==   null )   {  return  null ;  }  future . get () ;  return  delayedFrame ;  }
boolean   hasEnvelope ( int   position )   {  return  envelopeMap . containsKey ( position ) ;  }
@ Test  void   sortedDependenciesWithSameNameShouldAffectVerify ()   {  SortPomImplUtil . create ()  . sortDependencies ( """"groupId,artifactId"""" )  . testVerifyXmlIsNotOrdered ( """"/SortDepSimple3_input.xml"""" , """"The xml element <dependency> with 2 child elements should be placed before element <dependency> with 4 child elements"""" ) ;  }
@ Test  public   void   requestRequiredIncreased ()   {  BackwardIncompatibleProp   prop   =  REQUEST_REQUIRED_INCREASED ;  assertSpecIncompatible ( BASE ,  """"bc_request_required_increased.yaml"""" ,  prop ) ;  }
public   String   prefixPlaceId ( String   placeId )   {  return  """"place_id:""""   +   placeId ;  }
@ Test  public   void   newProperties_useSetSemantics_fromMultipleValues ()   {  assertThat ( ( String [] ) GraphUtil . getNewPropertyValue ( new   String [] { """"1"""" ,  """"2"""" } ,  """"2"""" ) ,  is ( new   String [] { """"1"""" ,  """"2"""" } ) ) ;  }
public   AdvancedApplicationConfiguration   useExternalConsentPage ( Boolean   useExternalConsentPage )   {  this . useExternalConsentPage   =   useExternalConsentPage ;  return  this ;  }
public   static   void   write ( Parcel   parcel ,  int   fieldId ,  Map   val ,  boolean   mayNull )   {  if  ( val   ==   null )   {  if  ( mayNull )   {  writeHeader ( parcel ,  fieldId ,  0 ) ;  }  }   else  {  int   start   =  writeObjectHeader ( parcel ,  fieldId ) ;  parcel . writeMap ( val ) ;  finishObjectHeader ( parcel ,  start ) ;  }  }
@ BeforeClass ( alwaysRun   =   true )  public   void   init ()   throws  XPathExpressionException ,  RemoteException   {  super . testInit ( API_VERSION ,  swaggerDefinition ,  tenant ) ;  }
public   static   BooleanIndexer   create ( BooleanPointer   pointer ,  Index   index )   {  return  new   BooleanRawIndexer ( pointer ,  index ) ;  }
@ Test   public   void   testIntString ()   {  System . out . println ( """"IntString"""" ) ;  String   textStr   =  """"This is a normal ASCII string."""" ;  IntPointer   textPtr1   =  new   IntPointer ( textStr ) ;  IntPointer   textPtr2   =  testIntString ( textPtr1 ) ;  assertEquals ( textStr ,  textPtr1 . getString () ) ;  assertEquals ( textStr ,  textPtr2 . getString () ) ;  System . gc () ;  }
@ Nullable  GHTeam   loadTeam ( @ NonNull   String   organization ,  @ NonNull   String   team )   {  try  {  GHOrganization   org   =  loadOrganization ( organization ) ;  if  ( org   !=   null )   {  
@ Override  public   MasterIteSAParams   doCompute ( MasterContext < MasterIteSAParams ,  WorkerIteSAParams >   context )   {  return  null ;  }
@ Override  public   Chain < T >   initial ( int   n )   {  return  new   Chain <> ( Underscore . initial ( value () ,  n ) ) ;  }
public   double   getDouble ( String   key ,  double   defaultValue )   {  return  types . get ( key )   ==   StoredType . Double  ?   ( Double )   data . get ( key )   :  defaultValue ;  }
@ Override  protected   boolean   shouldNarrateNavigation ()   {  return  ! adjustingPosition ;  }
public   void   setDepthControlLRThreshold ( int   value )   {  setOption ( RealSense . RS_OPTION_R200_DEPTH_CONTROL_LR_THRESHOLD ,  value ) ;  }
public   void   setFilerOutRatio ( Float   filterOutRatio )   {  this . filterOutRatio   =   filterOutRatio ;  }
public   RegionBounds   getSelectedTrack ()   {  return  playbackManager . getSelectedRegion () ;  }
@ Override   public   IntIndexer   put ( long   i ,  int []   m ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  putRaw ( index ( i )   +   n ,  m [ offset   +   n ] ) ;  }  return  this ;  }
private   XmlOrderedResult   isVerifyOk ()  throws  NoSuchMethodException ,  InvocationTargetException ,  IllegalAccessException   {  var   getVerificationResult   =  SortPomImpl . class . getDeclaredMethod ( """"getVerificationResult"""" ) ;  getVerificationResult . setAccessible ( true ) ;  return  ( XmlOrderedResult )   getVerificationResult . invoke ( sortPomImpl ) ;  }
@ Override   public   boolean   equals ( Object   o )   {  if  ( this   ==   o )  return  true ;  if  ( ! ( o   instanceof   RE2JRegexp ) )  return  false ;  RE2JRegexp   that   =  ( RE2JRegexp )   o ;  return  Objects . equals ( pattern ,  that . pattern ) ;  }
public   ByteBuffer   call ( ByteBuffer   buffer )   {  assertEquals ( 12 ,  buffer . get ( 0 ) ) ;  return  value ;  }
public   void   setVideoFilterArgs ( String []   videoFilterArgs )   {  this . videoFilterArgs   =   videoFilterArgs ;  }
public   void   initNetwork ( FlatLayer []   layers )   {  super . init ( layers ) ;  }
@ Test  public   void   testProcessCreationFormSuccess ()   throws  Exception   {  mockMvc . perform ( post ( """"/owners/{ownerId}/pets/new"""" ,  TEST_OWNER_ID )  . param ( """"name"""" ,  """"Betty"""" )  . param ( """"type"""" ,  """"hamster"""" )  . param ( """"birthDate"""" ,  """"2015/02/12"""" ) )  . andExpect ( status () . is3xxRedirection () )  . andExpect ( view () . name ( """"redirect:/owners/{ownerId}"""" ) ) ;  }
@ Override   public   int   get ( long   i ,  long   j ,  long   k )   {  return  getRaw ( index ( i ,  j ,  k ) )   &   0xFF ;  }
public   void   setAudioDisposition ( int   audioDisposition )   {  this . audioDisposition   =   audioDisposition ;  }
public   UserDTO   getUserWithID ( String   userID ,  String []   requestedClaims ,  String   profileName )  throws  UserStoreException ,  RemoteException ,  UUIDUserStoreManagerServiceUserStoreExceptionException   {  return  uuidUserStoreManagerServiceStub . getUserWithID ( userID ,  requestedClaims ,  profileName ) ;  }
protected   final   ProcessingMessage   newMsg ( final   FullData   data , final   MessageBundle   bundle ,  final   String   key )  {  return  data . newMessage () . put ( """"domain"""" ,  """"validation"""" )  . put ( """"keyword"""" ,  keyword ) . setMessage ( bundle . getMessage ( key ) )  . setExceptionProvider ( EXCEPTION_PROVIDER ) ;  }
private   Tenant   getTenantInfo ()   throws  XPathExpressionException   {  User   registryMountTenantAdmin   =  new   User () ;  registryMountTenantAdmin . setUserName ( testDataHolder . getAutomationContext () . getContextTenant () . getContextUser ()  . getUserName () ) ;  registryMountTenantAdmin . setPassword ( testDataHolder . getAutomationContext () . getContextTenant () . getContextUser ()  . getPassword () ) ;  Tenant   registryMountTenant   =   new   Tenant () ;  registryMountTenant . setContextUser ( registryMountTenantAdmin ) ;  return  registryMountTenant ;  }
@ Override  public   boolean   matches ( Archive   value )   {  try  {  return  value . getUrl () . toString () . contains ( string ) ;  }  catch  ( MalformedURLException   e )   {  throw  new   IllegalStateException ( e ) ;  }  }
public   boolean   hasNext ()   {  while  (  iterator . hasNext () )   {  if  (  namespaceURI . equals (  iterator . next () . getValue () ) )   return  true ;  }  return  false ;  }
public   GroupRequestObject   addMember ( MemberItem   member )   {  this . members . add ( member ) ;  return  this ;  }
private   Path   getModelSetHdfsPath ()   {  String   modelSetPath   =  this . getPreferPath ( modelConfig . getBasic () . getCustomPaths () , Constants . KEY_HDFS_MODEL_SET_PATH ) ;  return  ( StringUtils . isBlank ( modelSetPath )  ?   new   Path ( Constants . MODEL_SETS ,  modelConfig . getBasic () . getName () )  :  new   Path ( modelSetPath ,  modelConfig . getBasic () . getName () ) ) ;  }
@ Test ( dependsOnMethods   =   """"testAddRemoveRolesOfUser"""" )  public   void   testUpdateUsersOfRole ()   throws  Exception   {  super . testUpdateUsersOfRole () ;  }
@ Test  public   void   decreased ()   {  BackwardIncompatibleProp   prop   =  REQUEST_PARAMS_DECREASED ;  assertSpecIncompatible ( BASE ,  """"bc_request_params_decreased.yaml"""" ,  prop ) ;  }
@ Override  public   void   onSharedPreferenceChanged ( SharedPreferences   sharedPreferences ,  String   key )   {  showShadings () ;  }
@ Override   public   double   getGamma ()   {  return  Float . isNaN ( gammaOut [ 0 ] )   ||   Float . isInfinite ( gammaOut [ 0 ] )   ||   gammaOut [ 0 ]   ==   0.0f  ?   2.2   :  gammaOut [ 0 ] ;  }
public   void   testThatAutoCompletionWorksForFileWithSingleDefinitionForYml ()   {  myFixture . copyFileToProject ( PARTIAL_FILES_PATH   +   """"/pet.yaml"""" ,  """"pet.yml"""" ) ;  final   VirtualFile   swaggerFile   = myFixture . copyFileToProject ( PARTIAL_FILES_PATH   +   """"/swagger.yml"""" ,  """"swagger.yml"""" ) ;  myFixture . configureFromExistingVirtualFile ( swaggerFile ) ;  final   AssertableList   completions   = new   AssertableList ( myFixture . getCompletionVariants ( """"pet.yml"""" ) ) ;  assertSchemaCompletions ( completions ) ;  }
@ Override  public   DigitalOutputProvider   shutdown ( Context   context )   throws  ShutdownException   {  GpioDContext . getInstance () . close () ;  return  super . shutdown ( context ) ;  }
public   int   getDaysSinceExposureThreshold ()   {  return  daysSinceExposureThreshold ;  }
public   void   setSumSquare ( double   sumSquare )   {  this . sumSquare   =   sumSquare ;  }
public   void   setRegistrySyncRetries ( int   registrySyncRetries )   {  this . registrySyncRetries   =   registrySyncRetries ;  }
@ Given ( """"^starting a new game as '(.*?)'$"""" )  public   void   starting_a_new_game_as_SewerRat ( final   String   character )   throws  Throwable   {  System . out . println ( """"Start the new game as [""""   +   character   +   """"]"""" ) ;  
private   void   showContent ()   {  getRefreshLayout () . setRefreshing ( false ) ;  ViewDirector . of ( this ,  R . id . animator_content ) . show ( R . id . layout_content ) ;  }
public   IBinder   onBind ( Intent   intent )   {  if  ( intent   !=   null   &&   ACTION_INSTANCE_ID . equals ( intent . getAction () ) )   {  return  messengerCompat . getBinder () ;  }  return  null ;  }
@ Override  public   void   setPlayerInfoInteger ( String   world ,  String   player ,  String   node ,  int   value )   {  API . setPlayerInfo ( player ,  node ,  String . valueOf ( value ) ) ;  }
@ AfterClass  public   void   delete ()   throws  IOException   {  File   json   =  new   File ( """"."""" ) ;  File []   files   =  json . listFiles ( filter ) ;  if  ( files   !=   null )   {  for  ( File   tmp   :  files )   {  FileUtils . deleteQuietly ( tmp ) ;  }  }   else  {  throw  new   IOException ( String . format ( """"Failed to list files in %s"""" ,  json . getAbsolutePath () ) ) ;  }  FileUtils . deleteDirectory ( new   File ( """"tmp"""" ) ) ;  }
private   void   btnInfoCloseActionPerformed ( java . awt . event . ActionEvent   evt )   { 
private   void   runOncePossible ( Runnable   runnable )   {  synchronized  ( this )   {  if  ( remote   ==   null )   {  waiting . add ( runnable ) ;  }   else  {  runnable . run () ;  }  }  }
public   UserStoreReq   typeId ( String   typeId )   {  this . typeId   =   typeId ;  return  this ;  }
public   void   importCertToStore ( String   filename ,  byte []   content ,  String   keyStoreName )  throws  Exception   {  try  {  String   data   =  Base64 . encode ( content ) ;  ImportCertToStore   request   =  new   ImportCertToStore () ;  request . setFileName ( filename ) ;  request . setFileData ( data ) ;  request . setKeyStoreName ( keyStoreName ) ;  stub . importCertToStore ( request ) ;  }   catch  ( Exception   e )   {  log . error ( """"Error in importing cert to store."""" ,  e ) ;  throw  new   Exception ( """"Error in importing cert to store."""" ) ;  }  }
public   File []   parse ( String   outputDirectory ,  String []   classPath ,  Class   cls )   throws  IOException ,  ParserException   {  return  parse ( new   File ( outputDirectory ) ,  classPath ,  cls ) ;  }
@ Override  public   boolean   equals ( Object   obj )   {  return  delegate . equals ( obj ) ;  }
@ Override  public   Chain < Boolean >   some ( final   Predicate < T >   pred )   {  return  new   Chain <> ( Underscore . some ( value () ,  pred ) ) ;  }
public   static   int   gpioSetISRFunc ( int   gpio ,  int   edge ,  PiGpioIsrCallback   f ) {  return  gpioSetISRFunc ( gpio ,  edge ,  0 ,  f ) ;  }
public   GeocodingApiRequest   region ( String   region )   {  return  param ( """"region"""" ,  region ) ;  }
private   static   X509Certificate   generateCertificateFromDER ( byte []   certBytes )  throws  CertificateException   {  CertificateFactory   factory   =  CertificateFactory . getInstance ( """"X.509"""" ) ;  return  ( X509Certificate )   factory . generateCertificate ( new   ByteArrayInputStream ( certBytes ) ) ;  }
@ Nullable  @ Override  public   IBinder   onBind ( Intent   intent )   {  return  new   Messenger ( new   Handler () ) . getBinder () ;  }
public   void   setAccountLocked ( Boolean   accountLocked )   {  this . accountLocked   =   accountLocked ;  }
private   void   setSettings ( InstanceSettings   settings )   {  this . settings   =   settings ;  AllSettings . addNew ( TAG ,  context ,  settings ) ;  }
@ Override  public   String   toString ()   {  return  width   +   """"x""""   +   height ;  }
public   void   updateRolesOfUser ( String   userName ,  String []   newUserList )  throws  RemoteException ,  UserAdminUserAdminException   {  userAdminStub . updateRolesOfUser ( userName ,  newUserList ) ;  }
@ Override  public   boolean   prebuild ( AbstractBuild < ? ,  ? >   build ,  BuildListener   listener )   {  return  disableInprogressNotification   ||   processJenkinsEvent ( build ,  null ,  listener ,  StashBuildState . INPROGRESS ) ;  }
public   SMSSenderAdd   properties ( List < Properties >   properties )   {  this . properties   =   properties ;  return  this ;  }
public   static   FetchResponse   fetch ( final   String   url )   {  return  fetch ( url ,  null ,  null ,  DEFAULT_HEADER_FIELDS ,  null ,  null ) ;  }
@ NonNull  public   Builder   setChallenge ( @ NonNull   byte []   challenge )   {  this . challenge   =   challenge ;  return  this ;  }
public   UserDTO []   getUserListWithID ( String   claim ,  String   claimValue ,  String   profileName )   throws  UserStoreException , RemoteException ,  UUIDUserStoreManagerServiceUserStoreExceptionException   {  return  uuidUserStoreManagerServiceStub . getUserListWithID ( claim ,  claimValue ,  profileName ) ;  }
private   void   flickerIcon ( AnchorPane   icon )   {  iconManager . selectIcon ( icon ) ;  PauseTransition   briefPause   =  new   PauseTransition ( Duration . millis ( 120 ) ) ;  briefPause . setOnFinished ( event  ->  {  iconManager . deselectIcon ( icon ) ;  } ) ;  briefPause . play () ;  }
@ Override  public   boolean   playerRemove ( String   world ,  String   player ,  String   permission )   {  if  ( world   ==   null )   {  return  false ;  }  PermissionSet   set   =  perms . getPermissionSet ( world ) ;  if  ( set   ==   null )   {  return  false ;  }  set . removePlayerNode ( permission ,  player ) ;  return  true ;  }
public   void   setSettings ( Settings   settings )   {  this . settings   =   settings ;  this . subPixelSize   =   cvSize ( settings . subPixelWindow / 2 ,  settings . subPixelWindow / 2 ) ;  this . subPixelZeroZone   =   cvSize ( - 1 , - 1 ) ;  this . subPixelTermCriteria   =   cvTermCriteria ( CV_TERMCRIT_EPS ,  100 ,  0.001 ) ;  }
@ Test  public   void   testGetIdPWithInvalidId ()   {  Response   response   =  getResponseOfGet ( IDP_API_BASE_PATH   +   PATH_SEPARATOR   +   """"random-id"""" ) ;  validateErrorResponse ( response ,  HttpStatus . SC_NOT_FOUND ,  """"IDP-60002"""" ,  """"random-id"""" ) ;  }
@ AfterTest  public   void   configAfterTest ( XmlTest   test )   {  if  ( test . getName () . equals ( """"AfterTest"""" ) )   {  throw  new   RuntimeException () ;  }  }
@ Override  public   void   localize ( ResourceBundle   bundle )   {  if  ( key . isEmpty ()   ||   ! bundle . containsKey ( key ) )   {  return;  }  if  ( param . isEmpty () )   {  statusText . set ( bundle . getString ( key ) ) ;  }   else  {  statusText . set ( MessageFormat . format ( localizer . getMessage ( key ) ,  param ) ) ;  }  }
@ Override  protected   void   onCreate ( @ Nullable   Bundle   savedInstanceState )   {  super . onCreate ( savedInstanceState ) ;  setContentView ( R . layout . activity_tv_audio_playback ) ;  setUpInjections () ;  fragment   =   buildAudioFragment ( getFile () ,  getShare () ,  getFiles () ) ;  replaceFragment () ;  }
@ Override  public   String   getFunctionName ()   {  return  """"currentUserGlobalRoles"""" ;  }
public   static   ChangedOpenApi   fromContents ( String   oldContent ,  String   newContent )   {  return  fromContents ( oldContent ,  newContent ,  null ) ;  }
@ AfterTest ( groups   =   { """"wso2.is"""" } )  public   void   tearDown ()   {  if  ( this . authenticationAdminStub   !=   null )   {  try  {  this . authenticationAdminStub . logout () ;  }   catch  ( RemoteException   e )   {  logger . error ( """"Error when logout"""" ,  e ) ;  }   catch  ( LogoutAuthenticationExceptionException   e )   {  logger . error ( """"Error when logout"""" ,  e ) ;  }  }  }
public   double   getPositiveRate ()   {  assert  getTotalInstCnt ()   !=   0 ;  return  ( ( double )   positiveCnt )   /   getTotalInstCnt () ;  }
@ JsonIgnore  public   String   getTargetColumnName ( EvalConfig   evalConfig )   {  if ( StringUtils . isNotBlank ( evalConfig . getDataSet () . getTargetColumnName () ) )   {  return  evalConfig . getDataSet () . getTargetColumnName () ;  }   else  {  return  dataSet . getTargetColumnName () ;  }  }
private   void   showSuggestedPlaceNames ( List < SuggestResult >   suggestions ) {  if  ( suggestions   ==   null   ||   suggestions . isEmpty () ) {  return;  }  initSuggestionCursor () ;  int   key   =  0 ;  for  ( SuggestResult   result   :  suggestions )   {  
private   boolean   isDirectoryAvailable ()   {  return  getDirectory ()   !=   null ;  }
@ Override  public   int   getInitialCapacityOfResponseCache ()   {  return  this . initialCapacityOfResponseCache ;  }
public   static   KeyValue   modify ( KeyValue   k ,  Pointers . Modifiers   mods )  {  if  ( k   ==   null )  return  null ;  int   n_mods   =  mods . size () ;  KeyValue   r   =  k ;  for  ( int   i   =  0 ;   i   <   n_mods ;   i ++ )  r   =   modify ( r ,  mods . get ( i ) ) ;    if  ( r . getString () . length ()   ==   0 )  return  null ;  return  r ;  }
public   static   int   getNumberOfThreads ( JobContext   job )   {  return  job . getConfiguration () . getInt ( NUM_THREADS ,  10 ) ;  }
@ Test  public   void   testValidateModelTrainBConf ()   throws  Exception   {  ModelTrainConf   trainConf   =  new   ModelTrainConf () ;  trainConf . setAlgorithm ( """"test"""" ) ;  trainConf . setBaggingNum ( 10 ) ;  trainConf . setTrainOnDisk ( null ) ;  ValidateResult   result   =  MetaFactory . validate ( trainConf ) ;  Assert . assertFalse ( result . getStatus () ) ;  }
private   void   bounce ( Direction   direction )  {  switch ( direction . getAxis () )  {  case  X :  this . setDeltaMovement ( this . getDeltaMovement () . multiply ( - 0.5 ,  0.75 ,  0.75 ) ) ;  break;  case  Y :  this . setDeltaMovement ( this . getDeltaMovement () . multiply ( 0.75 ,  - 0.25 ,  0.75 ) ) ;  if ( this . getDeltaMovement () . y ()   <   this . getGravity () )  {  this . setDeltaMovement ( this . getDeltaMovement () . multiply ( 1 ,  0 ,  1 ) ) ;  }  break;  case  Z :  this . setDeltaMovement ( this . getDeltaMovement () . multiply ( 0.75 ,  0.75 ,  - 0.5 ) ) ;  break;  }  }
@ Override  protected   String   getNewInputObject ()   {  InputDialog   dialog   =  new   InputDialog ( getShell () ,  Messages . ValidPropertiesFieldEditor_inputDialog_title ,  Messages . ValidPropertiesFieldEditor_inputDialog_description ,  """""""" ,  null ) ;  if  ( IDialogConstants . OK_ID   ==   dialog . open () )   {  String   dir   =  dialog . getValue () ;  dir   =   dir . trim () ;  if  ( dir . isEmpty () )   {  return  null ;  }  return  dir ;  }  return  null ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   conclude ()   {  super . conclude () ;  }
public   String   getEvalSetPath ( EvalConfig   evalConfig ,  SourceType   sourceType )   {  return  getEvalSetPath ( evalConfig . getName () ,  sourceType ) ;  }
@ Override  public   DomainFilter   getFilter ()   {  return  HomeRegionFilter$ . MODULE$ ;  }
private   IBinder   getConnectionToken ()  {  return  getWindow () . getWindow () . getAttributes () . token ;  }
public   ChangedResponse   setDescription ( final   ChangedMetadata   description )   {  this . description   =   description ;  return  this ;  }
public   String   getValueAtIndex ( int   index )   {  return  values . get ( index ) ;  }
@ Override  public   void   updatePermission ( UpdatePermissionRequest   request ,  IDriveServiceCallbacks   callbacks )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: updatePermission"""" ) ;  }
@ Test  public   void   stackTraceShouldBeEmpty ()   {  try  {  throw  new   InternalValidationException ( BooleanSchema . INSTANCE ,  """"message"""" ,  """"keyword"""" ,  """"#"""" ) ;  }   catch  ( ValidationException   e )   {  assertEquals ( 0 ,  e . getStackTrace () . length ) ;  }  }
static   TreePath   findSubtreePath ( CompilationUnitTree   root ,  Tree . Kind   treeKind )   {  return  findSubtreePath ( root ,  treeKind ,  null ) ;  }
public   Set < String >   findIgnoredForDeserialization ()   {  if  ( _allowSetters )   {  return  Collections . emptySet () ;  }  return  _ignored ;  }
@ Test  public   void   requiredChanged ()   {  BackwardIncompatibleProp   prop   =  OPENAPI_ENDPOINTS_DECREASED ;  assertSpecIncompatible ( BASE ,  """"bc_request_body_required_changed.yaml"""" ,  prop ) ;  }
private   ImmutableSet < String >   sourceFilesWithDiagnostics ()   {  return  mapDiagnostics ( diagnostic  ->  diagnostic . getSource ()   ==   null ?   """"(no associated file)""""  :  diagnostic . getSource () . getName () )  . collect ( toImmutableSet () ) ;  }
public   void   setRenewalThresholdUpdateIntervalMs ( int   renewalThresholdUpdateIntervalMs )   {  this . renewalThresholdUpdateIntervalMs   =   renewalThresholdUpdateIntervalMs ;  }
private   void   waitForWebappToDeploy ( String   authenticatorWebappPathString )   {  long   startTime   =  System . currentTimeMillis () ;  while  ( System . currentTimeMillis ()   -   startTime   <   120000L )   {  if  ( Files . exists ( Paths . get ( authenticatorWebappPathString ) ) )   {  log . info ( authenticatorWebappPathString   +   """" deployed successfully."""" ) ;  break;  }  try  {  Thread . sleep ( 1000L ) ;  }   catch  ( InterruptedException   e )   {  
 <argument pos:start=""""""""580:107"""""""" pos:end=""""""""580:124""""""""><expr pos:start=""""""""580:107"""""""" pos:end=""""""""580:124""""""""><name pos:start=""""""""580:107"""""""" pos:end=""""""""580:124""""""""><name pos:start=""""""""580:107"""""""" pos:end=""""""""580:121"""""""">headerFilenames</name><index pos:start=""""""""580:122"""""""" pos:end=""""""""580:124"""""""">[<expr pos:start=""""""""580:123"""""""" pos:end=""""""""580:123""""""""><name pos:start=""""""""580:123"""""""" pos:end=""""""""580:123"""""""">i</name></expr>]</index></name></expr></argument>
@ AfterThrowing ( pointcut   =   """"anyMethod() && withStepAnnotation()"""" ,  throwing   =   """"e"""" )  public   void   stepFailed ( JoinPoint   joinPoint ,  Throwable   e )   {  ALLURE . fire ( new   StepFailureEvent () . withThrowable ( e ) ) ;  ALLURE . fire ( new   StepFinishedEvent () ) ;  }
protected   SonarServerConfigurable   showSonarServerConfigurableDialog ( SonarServerConfig   oldSonarServerConfigBean )   {  final   SonarServerConfigurable   dlg   =  new   SonarServerConfigurable ( myProject ) ;  if  ( null   !=   oldSonarServerConfigBean )  dlg . setValuesFrom ( oldSonarServerConfigBean ) ;  dlg . show () ;  return  dlg ;  }
@ FXML  void   saveFileAs ( ActionEvent   event )   {  if  ( ! tabs . getTabs () . isEmpty () )   {  Tab   curTab   =  tabs . getSelectionModel () . getSelectedItem () ;  EditorController   editor   =  editors . get ( curTab . getId () ) ;  editor . saveAs () . ifPresent ( curTab :: setText ) ;  addRecentFile ( editor . getOpenFile () ) ;  }  }
@ Override  public   String []   getPlayerGroups ( String   world ,  String   playerName )   {  return  this . perms . getGroups ( world ,  playerName ) ;  }
public   void   setDisplacementMax ( double   displacementMax )   {  this . displacementMax   =   displacementMax ;  }
@ Test  void   throwsOnBrokenXmlContent ()   {  MatcherAssert . assertThat ( """"Can't detect broken XML content"""" , Assertions . assertThrows ( SyntaxException . class , ()  ->   new   Directives ( """"ADD 't';\nADD '\u001b';"""" ) ) . getMessage () , Matchers . containsString ( """"Character #1B is in the restricted XML"""" ) ) ;  }
public   < T   extends  Enum < T > >   OptionValue < T >   choices ( String   optionName ,  Supplier < T >   getter ,  Consumer < T >   setter )   {  return  choices ( optionName ,  getter ,  setter ,  null ) ;  }
public   static   String   getTestUrl ( String   name ) {  return  String . format ( AllureConfig . newInstance () . getTmsPattern () ,  name ) ;  }
@ Test  void   deprecatedSortPluginsFalseMessageShouldWork ()   {  Executable   testMethod   = ()  ->  SortPomImplUtil . create ()  . customSortOrderFile ( """"custom_1.xml"""" )  . sortDependencyExclusions ( """"false"""" )  . lineSeparator ( """"\n"""" )  . nrOfIndentSpace ( 4 )  . testFiles ( """"/PluginDefaultName_input.xml"""" ,  """"/PluginDefaultName_expect.xml"""" ) ;  var   thrown   =  assertThrows ( FailureException . class ,  testMethod ) ;  assertThat ( thrown . getMessage () , is ( """"The 'false' value in 'sortDependencyExclusions' is no longer supported. Please use empty value '' or omit sortDependencyExclusions instead."""" ) ) ;  }
private   void   saveConfiguration ()   {  Intent   intent   =  new   Intent () ;  intent . putExtra ( EXTRA_RESULT_FOLDER_TYPE ,  selectedType ) ;  setResult ( Activity . RESULT_OK ,  intent ) ;  }
@ Override  public   void   setRelationshipProperty ( long   relationshipId ,  String   property ,  Object   value )   {  if  ( GraphUtil . ignoreProperty ( value ) )   {  return;  }  try  ( Transaction   tx   =  graphDb . beginTx () )   {  Relationship   relationship   =  graphDb . getRelationshipById ( relationshipId ) ;  relationship . setProperty ( property ,  value ) ;  tx . success () ;  }  }
@ ApiModelProperty ( example   =   """"false"""" ,  required   =   true ,  value   =   """"Property value."""" )  @ JsonProperty ( """"value"""" )  @ Valid  @ NotNull ( message   =   """"Property value cannot be null."""" )  public   String   getValue ()   {  return  value ;  }
@ Override  public   int   getMaxElementsInPeerReplicationPool ()   {  return  maxElementsInPeerReplicationPool ;  }
public   void   startSmsCodeAutofill ( IStatusCallback   callback )   {  try  {  getServiceInterface () . startSmsCodeAutofill ( callback ) ;  }   catch  ( RemoteException   e )   {  try  {  callback . onResult ( Status . INTERNAL_ERROR ) ;  }   catch  ( RemoteException   ignored )   {  }  }  }
@ Override  public   Task < AssetPackStates >   getPackStates ( List < String >   packNames )   {  throw  new   UnsupportedOperationException () ;  }
default   ContextBuilder   addProperties ( Map < String ,  String >   properties ,  String   prefixFilter ) {  return  properties ( properties ,  prefixFilter ) ;  }
@ Test  public   void   conditionalSchemaIf ()   {  ConditionalSchema   actual   =  ( ConditionalSchema )   loadAsV7 ( get ( """"conditionalSchemaIf"""" ) ) ;  assertTrue ( actual . getIfSchema () . isPresent () ) ;  assertFalse ( actual . getThenSchema () . isPresent () ) ;  assertFalse ( actual . getElseSchema () . isPresent () ) ;  }
@ Override   public   void   failure ( ValidationException   exc )   {  throw  exc ;  }
default   boolean   isRequestBodyRefValue ( PsiElement   psiElement )   {  return  false ;  }
public   void   readBuffer ( CLBuffer < ? >   buffer ,  boolean   blocking )   {  commandQueue . putReadBuffer ( buffer ,  blocking ) ;  }
protected   MenuItem   selectMenu ( List < MenuItem >   m )   {  this . printMenuItems ( m ) ;  String   command   =  QueueProvider . take () ;  if  ( commandMap . containsKey ( command . toLowerCase () ) )   {  return  commandMap . get ( command . toLowerCase () ) ;  }   else  {  QueueProvider . offer ( """"I don't know what '""""   +   command   +   """"' means."""" ) ;  return  this . displayMenu ( m ) ;  }  }
@ Override  public   void   onDragReleased ( double   absoluteX ,  double   absoluteY )   {  track . removeItem ( track . getNoteTrack () ,  selectionBox ) ;  if  ( ! playbackManager . getHighlightedNotes () . isEmpty () )   {  playbackManager . realign () ;  }   else  {  
@ DataProvider ( name   =   """"organizationDiscoveryOffsetValidationDataProvider"""" )  public   Object [] []   organizationDiscoveryOffsetValidationDataProvider ()   {  return  new   Object [] []   { { 0 ,  1 } ,  { 0 ,  5 } ,  { 0 ,  10 } , { 5 ,  1 } ,  { 5 ,  5 } ,  { 5 ,  10 } , { 10 ,  1 } ,  { 10 ,  5 } ,  { 10 ,  10 } } ;  }
@ Override  public   boolean   equals ( java . lang . Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  PasswordSharing   passwordSharing   =  ( PasswordSharing )   o ;  return  Objects . equals ( this . format ,  passwordSharing . format )   &&  Objects . equals ( this . certificate ,  passwordSharing . certificate ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  notificationTemplatesRestClient . deleteEmailOrgTemplate ( TEST_EMAIL_TEMPLATE_ID ,  TEST_LOCALE ) ;  notificationTemplatesRestClient . closeHttpClient () ;  orgMgtRestClient . deleteSubOrganization ( level2Org1Id ,  level1Org1Id ) ;  orgMgtRestClient . deleteOrganization ( level1Org1Id ) ;  orgMgtRestClient . closeHttpClient () ;  identityProviderMgtServiceClient . deleteIdP ( """"SSO"""" ) ;  }
public   static   Archive   getArchive ( Class < ? >   cls )   {  URL   location   =  cls . getProtectionDomain () . getCodeSource () . getLocation () ;  return  getArchive ( location . toString () ) ;  }
@ Override  public   int   hashCode ()   {  return  Arrays . hashCode ( new   Object [] { fidoAppIdExtension ,  cableAuthenticationExtension ,  userVerificationMethodExtension } ) ;  }
public   void   setValue ( Dynamic   value ) {  this . value   =   toValue ( value ) ;  }
public   ApplicationResponseModel   realm ( String   realm )   {  this . realm   =   realm ;  return  this ;  }
public   ChangedList < T >   setContext ( final   DiffContext   context )   {  this . context   =   context ;  return  this ;  }
private   void   setFailingStatuses ( Configuration   configuration )   {  Set < Status >   notFailingStatuses   =  new   HashSet <> () ;  if  ( failedAsNotFailingStatus )   {  notFailingStatuses . add ( Status . FAILED ) ;  }  if  ( skippedAsNotFailingStatus )   {  notFailingStatuses . add ( Status . SKIPPED ) ;  }  if  ( pendingAsNotFailingStatus )   {  notFailingStatuses . add ( Status . PENDING ) ;  }  if  ( undefinedAsNotFailingStatus )   {  notFailingStatuses . add ( Status . UNDEFINED ) ;  }  configuration . setNotFailingStatuses ( notFailingStatuses ) ;  }
@ Override  void   visitNumberSchema ( NumberSchema   numberSchema )   {  numberSchema . accept ( new   NumberSchemaValidatingVisitor ( subject ,  this ) ) ;  }
protected   void   renderImageBg ( ElementBox   elem ,  Rectangle   bb ,  BackgroundBitmap   bitmap )   {  }
< T ,  R   extends  ApiResponse < T > >   PendingResult < T >   get ( ApiConfig   config ,  Class < ?   extends  R >   clazz ,  String ...   params )   {  return  get ( config ,  clazz ,  Collections . emptyMap () ,  params ) ;  }
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( """"class PaginationLink {\n"""" ) ;  sb . append ( """"    rel: """" ) . append ( toIndentedString ( rel ) ) . append ( """"\n"""" ) ;  sb . append ( """"    href: """" ) . append ( toIndentedString ( href ) ) . append ( """"\n"""" ) ;  sb . append ( """"}"""" ) ;  return  sb . toString () ;  }
@ Nullable  @ Override  public   View   onCreateView ( @ NonNull   LayoutInflater   inflater ,  @ Nullable   ViewGroup   container ,  @ Nullable   Bundle   savedInstanceState )   {  binding   =   BaseFragmentBinding . inflate ( inflater ,  container ,  false ) ;  return  binding . getRoot () ;  }
public   void   deleteUserClaimValueWithID ( String   userID ,  String   claimURI ,  String   profileName )  throws  UserStoreException   {  }
@ Test  void   testEurekaIgnored ()   {  initialize ( EurekaDownHealthConfiguration . class ) ;  InstanceStatus   status   =  healthCheckHandler . getStatus ( InstanceStatus . UP ) ;  assertThat ( status ) . isEqualTo ( InstanceStatus . UP ) ;  }
public   void   setVersion (  String   version )   {  this . version   =   version ;  }
public   void   setItemChecked ( TextView   textView )   {  Drawable   dw   =  getResources () . getDrawable ( R . drawable . ic_check ) ;  textView . setCompoundDrawablesWithIntrinsicBounds ( null ,  null ,  dw ,  null ) ;  textView . setTextColor ( getResources () . getColor ( R . color . accent ) ) ;  }
@ Test  public   void   requestExclusiveMinCreated ()   {  assertIncompatibleRequest ( """"bc_request_numericrange_exclusive_min_created.yaml"""" ) ;  }
private   void   addServiceProvider ()   throws  Exception   {  ServiceProvider   serviceProvider   =  new   ServiceProvider () ;  serviceProvider . setApplicationName ( SERVICE_PROVIDER_NAME ) ;  serviceProvider . setDescription ( SERVICE_PROVIDER_DESCRIPTION ) ;  applicationManagementServiceClient . createApplication ( serviceProvider ) ;  }
@ ApiModelProperty ( example   =   """"PassiveSTSSampleApp"""" ,  value   =   """""""" )  @ JsonProperty ( """"realm"""" )  @ Valid  public   String   getRealm ()   {  return  realm ;  }
 <argument pos:start=""""""""136:68"""""""" pos:end=""""""""136:73""""""""><expr pos:start=""""""""136:68"""""""" pos:end=""""""""136:73""""""""><name pos:start=""""""""136:68"""""""" pos:end=""""""""136:73"""""""">dim5dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
protected   boolean   isAffected ( PropertyChangeEvent   event )   {  String   property   =  event . getProperty () ;  for  ( String   supportedSection   :  supportedSections )   {  if  ( isMatchSection ( property ,  supportedSection ) )   {  return  true ;  }  }  return  false ;  }
@ NonNull  public   < T >   MyStringBuilder   withCommaNonEmpty ( CharSequence   label ,  T   obj )   {  return  withComma ( label ,  obj ,  MyStringBuilder :: nonEmptyObj ) ;  }
@ Override  public   void   handleExclusiveMaximum ( JsonValue   exclMaximum ,  NumberSchema . Builder   schemaBuilder )   {  schemaBuilder . exclusiveMaximum ( exclMaximum . requireBoolean () ) ;  }
public   void   setSwitchToNextTree ( boolean   isSwitchToNextTree )   {  this . isSwitchToNextTree   =   isSwitchToNextTree ;  }
@ Test  public   void   toJSONNullPointerToViolation ()   {  ValidationException   subject   = new   ValidationException ( BooleanSchema . INSTANCE ,  null , """"exception message"""" ,  emptyList () ,  """"type"""" ,  null ) ;  JSONObject   actual   =  subject . toJSON () ;  assertEquals ( JSONObject . NULL ,  actual . get ( """"pointerToViolation"""" ) ) ;  }
@ Test  public   void   ifPresentPrints ()   {  JSONPrinter   subject   =  subject () ;  subject . object () ;  subject . ifPresent ( """"mykey"""" ,  """"myvalue"""" ) ;  subject . endObject () ;  assertEquals ( """"myvalue"""" ,  actualObj () . get ( """"mykey"""" ) ) ;  }
public   static   AnsiAttributeElement   underlineDouble ()   {  return  new   AnsiAttributeElement ( AnsiAttrType . UNDERLINE ,  """"span"""" ,  """"style=\""""border-bottom: 3px double;\"""""""" ) ;  }
@ Deprecated  public   static   < T   extends  AutoSafeParcelable >   T   createObject ( Class < T >   tClass ,  Parcel   in )   {  ClassDescriptor < T >   descriptor   =  new   ClassDescriptor <> ( tClass ) ;  return  createObject ( in ,  descriptor ) ;  }
@ ParameterizedTest  @ MethodSource ( """"useNativeGit"""" )  public   void   shouldGenerateClosestTagInformationWhenCommitHasTwoTags ( boolean   useNativeGit )  throws  Exception   {  
public   static   boolean   isMacro ( String   macroString )   {  return  macroString . startsWith ( MACRO_PREFIX ) ;  }
public   PresampConfig   loadPresampConfig ( PresampConfig . Builder   builder ,  String   fileContents )   {  String []   lines   =  fileContents . split ( """"\n"""" ) ;  int   curLine   =  0 ;  while  ( curLine   >=   0   &&   curLine   <   lines . length )   {  curLine   =   parseSection ( lines ,  curLine ,  builder ) ;  }  return  builder . build () ;  }
public   String   trimEndWith ( final   String   chars )   {  return  trimEnd ( getString () . get () ,  chars ) ;  }
@ Override  public   boolean   hasPermission ( PermissionEntry   sid ,  Permission   p ,  RoleType   type ,  AccessControlled   item ,  Macro   macro )   {  if  ( Job . class . isAssignableFrom ( item . getClass () ) )   {  Job < ? ,  ? >   job   =  ( Job < ? ,  ? > )   item ;  return  job . isBuildable () ;  }   else  {  return  false ;  }  }
public   void   reset ( long   seed )   {  random_ . setSeed ( seed ) ;  zipf_ . reseedRandomGenerator ( seed ) ;  }
@ Test  public   void   hadWarningContainingMatch_pattern_noSuchWarning ()   {  expectFailure  . whenTesting ()  . about ( compilations () )  . that ( compilerWithWarning () . compile ( sourceFile ) )  . hadWarningContainingMatch ( Pattern . compile ( """"(what|where) is it?"""" ) ) ;  AssertionError   expected   =  expectFailure . getFailure () ;  assertThat ( expected . getMessage () )  . startsWith ( """"Expected a warning containing match for /(what|where) is it?/, but only found:\n"""" ) ;  
@ SuppressWarnings ( """"unchecked"""" )  @ Test  void   main ()   {  U . main ( new   String []   {} ) ;  assertNull ( new   U ( """""""" ) . value () ) ;  new   U ( Collections . emptyList () ) . chain () ;  U . chain ( new   HashSet < String > () ) ;  U . chain ( new   String []   {} ) ;  }
protected   String   listHeader ( String   title ,  Map < String ,  Header >   headers )   {  StringBuilder   sb   =  new   StringBuilder () ;  headers . entrySet () . stream ()  . map ( e  ->   this . itemHeader ( title ,  e . getKey () ,  e . getValue () ) )  . forEach ( sb :: append ) ;  return  sb . toString () ;  }
public   void   setCategoricalColumnNameFile ( String   categoricalColumnNameFile )   {  this . categoricalColumnNameFile   =   categoricalColumnNameFile ;  }
@ Test  public   void   testSetServerNoContextTakeover ()   {  PerMessageDeflateExtension   deflateExtension   =  new   PerMessageDeflateExtension () ;  deflateExtension . setServerNoContextTakeover ( false ) ;  assertFalse ( deflateExtension . isServerNoContextTakeover () ) ;  }
@ Override  public   ApiException   getError ()   {  return  ApiException . from ( error . status ,  error . message ) ;  }
@ Override  protected   void   setUserRole ()   {  newUserRole   =   """"ReadWriteLDAPUserRole"""" ;  }
@ Override  public   String   getPackageName ()   {  return  gmsContext . getPackageName () ;  }
private   static   int   getTwistSegment ( double   rad )   {  rad   =   ( rad   +   AppMenu . TAU )   %   AppMenu . TAU ;  if  ( rad   >   5.497   ||   rad   <   .785 )   {  return  0 ;  }   else if  ( rad   <   2.356 )   {  return  1 ;  }   else if  ( rad   <   3.926 )   {  return  2 ;  }  return  3 ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   static   < E >   E []   initial ( final   E ...   array )   {  return  initial ( array ,  1 ) ;  }
private   static   void   writeEmbedFieldLayer ( EmbedFieldLayer   embedFieldLayer ,  DataOutputStream   dos )   throws  IOException   {  dos . writeInt ( embedFieldLayer . getColumnId () ) ;  dos . writeInt ( embedFieldLayer . getIn () ) ;  dos . writeInt ( embedFieldLayer . getOut () ) ;  
@ Test  public   void   testFilterApplicationsWithInvalidFilterAttribute ()   {  Map < String ,  Object >   params   =  new   HashMap < String ,  Object > ()   { {  put ( """"filter"""" ,  """"imageURL co APP_1 """" ) ;  } } ;  Response   response   =  getResponseOfGet ( USER_APPLICATION_ENDPOINT_URI ,  params ) ;  validateErrorResponse ( response ,  HttpStatus . SC_BAD_REQUEST ,  """"APP-10003"""" ,  """"imageURL"""" ) ;  }
public   static   Integer   getYamlIntValue ( Node   yamlNode ,  Integer   fallback )   {  if  ( ! ( yamlNode   instanceof   ScalarNode ) )   {  return  fallback ;  }  return  RoundUtils . round ( Double . parseDouble ( ( ( ScalarNode )   yamlNode ) . getValue () ) ) ;  }
public   void   executeKernel ( CLKernel   kernel , long   globalWorkOffsetX ,  long   globalWorkOffsetY ,  long   globalWorkOffsetZ , long   globalWorkSizeX ,  long   globalWorkSizeY ,  long   globalWorkSizeZ , long   localWorkSizeX ,  long   localWorkSizeY ,  long   localWorkSizeZ )   {  commandQueue . put3DRangeKernel ( kernel , globalWorkOffsetX ,  globalWorkOffsetY ,  globalWorkOffsetZ , globalWorkSizeX ,  globalWorkSizeY ,  globalWorkSizeZ , localWorkSizeX ,  localWorkSizeY ,  localWorkSizeZ ) ;  }
@ Test  public   void   thatMissingYamlElementReferenceIsHandled ()   {  when ( fakeVirtualFile . findFileByRelativePath ( anyString () ) ) . thenReturn ( fakeVirtualFile2 ) ;  when ( fakeVirtualFile2 . getPath () ) . thenReturn ( getUrl ( """"partial/Error.yaml"""" ) . getPath () ) ;  final   JsonNode   jsonNode   =  getJsonNode ( """"petstore_with_file_ref_4.yaml"""" ) ;  JsonNode   result   =  jsonBuilderService . buildFromSpec ( jsonNode ,  fakeVirtualFile ) ;  JsonNode   expected   =  getJsonNode ( """"petstore_with_file_ref_4_yaml_after.json"""" ) ;  assertEquals ( expected ,  result ) ;  }
private   boolean   isDescriptorOfMap ( final   Descriptor   descriptor )   {  return  descriptor . getName () . startsWith ( """"typemap"""" ) ;  }
@ Test  public   void   testEncodeHashWithLatTooBig ()   {  assertThrows ( IllegalArgumentException . class ,  ()  ->   encodeHash ( 1000 ,  100 ,  4 ) ) ;  }
public   void   setPeriod ( Number   period )   throws  IOException   {  var   path   =  Paths . get ( pwmPath , """"period"""" ) ;  Files . writeString ( path ,  period . toString () ) ;  }
public   void   updateFolder ( Folder   newFolder )   {  synchronized  ( mConfigLock )   {  removeFolderInternal ( newFolder . id ) ;  mConfig . folders . add ( newFolder ) ;  sendConfig () ;  }  }
@ NonNull  public   AuthenticatorSelectionCriteria   build ()   {  return  new   AuthenticatorSelectionCriteria ( attachment ,  requireResidentKey ,  null ,  residentKeyRequirement ) ;  }
@ Override  public   void   run ()   {  if  ( dialog   !=   null   &&   ! cordova . getActivity () . isFinishing () )   {  dialog . hide () ;  }  }
private   static   org . w3c . dom . Document   createDocument ()   {  try  {  final   javax . xml . parsers . DocumentBuilderFactory   factory   = javax . xml . parsers . DocumentBuilderFactory . newInstance () ;  factory . setNamespaceAware ( true ) ;  setupFactory ( factory ) ;  final   javax . xml . parsers . DocumentBuilder   builder   =  factory . newDocumentBuilder () ;  return  builder . newDocument () ;  }   catch  ( javax . xml . parsers . ParserConfigurationException   ex )   {  throw  new   IllegalArgumentException ( ex ) ;  }  }
@ Override  public   boolean   setFlag ( String   flag ,  FlagState   state )   {  ResidenceFlagChangeEvent   fc   =  new   ResidenceFlagChangeEvent ( residence ,  null , flag , ResidenceFlagChangeEvent . FlagType . RESIDENCE , state , null ) ;  Residence . getServ () . getPluginManager () . callEvent ( fc ) ;  if ( fc . isCancelled () )  return  false ;  return  super . setFlag ( flag ,  state ) ;  }
@ Override  public   void   setDisplayBosses ( boolean   displayBosses )   {  this . displayBosses   =   displayBosses ;  }
@ Override  public   Change []   fixChanged ( DatabaseObject   changedObject ,  ObjectDifferences   differences ,  DiffOutputControl   control ,  Database   referenceDatabase ,  Database   comparisonDatabase ,  ChangeGeneratorChain   chain )   {  if  ( referenceDatabase   instanceof   HibernateDatabase   ||   comparisonDatabase   instanceof   HibernateDatabase )   {  differences . removeDifference ( """"unique"""" ) ;  if  ( ! differences . hasDifferences () )   {  return  null ;  }  }  return  super . fixChanged ( changedObject ,  differences ,  control ,  referenceDatabase ,  comparisonDatabase ,  chain ) ;  }
@ Override  public   void   process ( TestCaseResult   testCase )   {  testCase . setStatus ( getStatus () ) ;  testCase . setFailure ( throwable   ==   null  ?   getDefaultFailure ()   :  getFailure () ) ;  }
public   void   addMapping ( String   iconPackageName , ComponentName   componentName ,  String   drawableName )   {  mappings . put ( componentName , new   PackAndDrawable ( iconPackageName ,  drawableName ) ) ;  }
public   void   setEmbedLayers ( List < EmbedFieldLayer >   embedLayers )   {  this . embedLayers   =   embedLayers ;  }
private   boolean   doSetupSelectorAndServerThread ()   {  selectorthread . setName ( """"WebSocketSelector-""""   +   selectorthread . getId () ) ;  try  {  if  ( server   ==   null )   {  server   =   ServerSocketChannel . open () ;  
@ Override  public   ResourceLocation   getUid ()   {  return  JadeIds . MC_MOB_SPAWNER_COOLDOWN ;  }
private   void   checkIsNewIssuesInspectionToolEnabled ()   {  Predicate < EnrichedSettings >   filter   =  s  ->   ! LocalAnalysisScripts . NO_LOCAL_ANALYSIS . equals ( s . settings . getLocalAnalysisScripName () ) ;  newIssuesGlobalInspectionToolEnabled   =   settingsFromScopeAnyMatch ( filter ) ;  }
@ Override  public   void   read ( DataReader   in )   throws  IOException   {  byteStart   =   in . readUnsignedInt () ;  byteSize   =   in . readUnsignedInt () ;  typeID   =   in . readInt () ;  classID   =   in . readShort () ;  scriptTypeIndex   =   in . readShort () ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( name ,  description ,  image ,  isPrimary ,  isFederationHub ,  homeRealmIdentifier ,  certificate , idpIssuerName ,  alias ,  claims ,  roles ,  federatedAuthenticators ,  provisioning ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( left ,  right ) ;  }
public   void   onKeepAlive ( boolean   keepAlive )   {  completionSource . trySetException ( new   Exception ( """"Unexpected callback: onKeepAlive"""" ) ) ;  }
@ Override  protected   void   setUserName ()   {  newUserName   =   """"ReadWriteLDAPUserName""""  ;  }
@ Override  public   View   newView ( Context   context ,  Cursor   cursor ,  ViewGroup   vg )   {  TableLayout   tl   =  ( TableLayout )   LayoutInflater . from ( vg . getContext () ) . inflate ( R . layout . waypointlist_item , vg ,  false ) ;  return  bind ( cursor ,  tl ,  context ) ;  }
public   void   setSecureVirtualHostName ( String   secureVirtualHostName )   {  this . secureVirtualHostName   =   secureVirtualHostName ;  }
private   String   toChangeLog ( DiffResult   diffResult )   throws  Exception   {  ByteArrayOutputStream   out   =  new   ByteArrayOutputStream () ;  PrintStream   printStream   =  new   PrintStream ( out ,  true ,  """"UTF-8"""" ) ;  DiffOutputControl   diffOutputControl   =  new   DiffOutputControl () ;  diffOutputControl . setIncludeCatalog ( false ) ;  diffOutputControl . setIncludeSchema ( false ) ;  DiffToChangeLog   diffToChangeLog   =  new   DiffToChangeLog ( diffResult , diffOutputControl ) ;  diffToChangeLog . print ( printStream ) ;  printStream . close () ;  return  out . toString ( """"UTF-8"""" ) ;  }
@ ApiModelProperty ( example   =   """"some property name"""" ,  required   =   true ,  value   =   """""""" )  @ JsonProperty ( """"name"""" )  @ Valid  @ NotNull ( message   =   """"Property name cannot be null."""" )  public   String   getName ()   {  return  name ;  }
@ Override   void   visitPropertyNameSchema ( Schema   propertyNameSchema )   {  if  ( propertyNameSchema   !=   null )   {  String []   names   =  getNames ( objSubject ) ;  if  ( names   ==   null   ||   names . length   ==   0 )   {  return;  }  for  ( String   name   :  names )   {  ValidationException   failure   =  owner . getFailureOfSchema ( propertyNameSchema ,  name ) ;  if  ( failure   !=   null )   {  owner . failure ( failure . prepend ( name ) ) ;  }  }  }  }
private   String   getAuthzHeader ()   {  return  """"Basic """"   +   Base64 . encodeBase64String ( ( username   +   """":""""   +   password ) . getBytes () ) . trim () ;  }
public   static   final   CameraPosition   fromLatLngZoom ( LatLng   target ,  float   zoom )   {  return  builder () . target ( target ) . zoom ( zoom ) . build () ;  }
public   float   getMinimalColumnWidth ( int   col )  {  float   ret   =  0 ;  int   r   =  0 ;  while  ( r   <   getRowCount () )  {  TableCellBox   cell   =  cells [ col ] [ r ] ;  if  ( cell   !=   null )  {  float   min   =  cell . getMinimalWidth ()   /   cell . getColspan () ;  if  ( min   >   ret )   ret   =   min ;  r   +=   cell . getRowspan () ;  }  else  r ++ ;  }  return  ret ;  }
private   String   getVirtualIncrementButtonText ()   {  int   value   =  mValue   +   1 ;  if  ( mWrapSelectorWheel )   {  value   =   getWrappedSelectorIndex ( value ) ;  }  if  ( value   <=   mMaxValue )   {  return  ( mDisplayedValues   ==   null )  ?   formatNumber ( value )  :  mDisplayedValues [ value   -   mMinValue ] ;  }  return  null ;  }
public   static   JavaSourceSubjectFactory   javaSource ()   {  return  new   JavaSourceSubjectFactory () ;  }
@ Override  public   void   read ( DataReader   in )   throws  IOException   {  super . read ( in ) ;  in . align ( 4 ) ;  }
public   Chain < T >   firstOrNull ()   {  return  new   Chain <> ( Underscore . firstOrNull ( list ) ) ;  }
public   Failure   expectedMessageFragment ( String   expectedFragment )   {  this . expectedMessageFragment   =   expectedFragment ;  return  this ;  }
public   static   String   makeKey ( String   key )   {  return  Util . makeDescriptionId ( """"config"""" ,  ResourceLocation . fromNamespaceAndPath ( Jade . ID ,  key ) ) ;  }
public   static   double   distanceToLine ( double   x1 ,  double   y1 ,  double   x2 ,  double   y2 ,  double   x3 ,  double   y3 )   {  double   dx   =  x2   -   x1 ;  double   dy   =  y2   -   y1 ;  double   d2   =  dx * dx   +   dy * dy ;  double   u   =  ( ( x3   -   x1 ) * dx   +   ( y3   -   y1 ) * dy )   /   d2 ;  double   x   =  x1   +   u * dx ;  double   y   =  y1   +   u * dy ;  dx   =   x   -   x3 ;  dy   =   y   -   y3 ;  return  dx * dx   +   dy * dy ;  }
@ Test  void   cssAvailable ()   {  ResponseEntity < String >   entity   =  new   TestRestTemplate ()  . getForEntity ( """"http:
@ Override  public   void   onExitAmbient ()   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: onExitAmbient"""" ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  private   static   Object   makeReplaceFirstLevel ( Object   value ,  int   level )   {  final   Object   result ;  if  ( value   instanceof   List )   {  List < Object >   values   =  new   ArrayList <> () ;  for  ( Object   item   :  ( List )   value )   {  values . add ( item   instanceof   Map  ?   replaceFirstLevel ( ( Map )   item ,  level   +   1 )   :  item ) ;  }  result   =   values ;  }   else if  ( value   instanceof   Map )   {  result   =   replaceFirstLevel ( ( Map )   value ,  level   +   1 ) ;  }   else  {  result   =   value ;  }  return  result ;  }
private   void   stopShimmer ( @ NonNull   RecentFilesViewHolder   holder )   {  holder . shimmerFrameLayout . stopShimmer () ;  holder . shimmerFrameLayout . setShimmer ( null ) ;  holder . fileIconView . setBackground ( null ) ;  holder . fileTextView . setBackground ( null ) ;  holder . fileSize . setBackground ( null ) ;  holder . fileLastVisited . setBackground ( null ) ;  }
public   GivenStage   maxConcurrentPerNode ( int   maxConcurrentPerNode )   {  currentCategory . maxConcurrentPerNode ( maxConcurrentPerNode ) ;  return  self () ;  }
public   void   setVarGroupName ( String   varGroupName )   {  this . varGroupName   =   varGroupName ;  }
protected   String   getAppClientSecret ( String   applicationId )   throws  Exception   {  OpenIDConnectConfiguration   oidcConfig   =  oAuth2RestClient . getOIDCInboundDetails ( applicationId ) ;  return  oidcConfig . getClientSecret () ;  }
static   String   format_key_combination ( String []   keys )  {  StringBuilder   out   =  new   StringBuilder () ;  for  ( int   i   =  0 ;   i   <   keys . length ;   i ++ )  {  if  ( i   >   0 )   out . append ( """" + """" ) ;  out . append ( KeyValue . getKeyByName ( keys [ i ] ) . getString () ) ;  }  return  out . toString () ;  }
public   void   addValue ( final   Value   value )   {  if  ( completionHelper . isUniqueArrayStringValue ( value . getValue () ) )   {  completionResultSet . addElement ( create ( value ,  completionHelper . createInsertValueHandler ( value ) ) ) ;  }  }
public   static   void   save ( ModelConfig   modelConfig ,  List < ColumnConfig >   columnConfigList , List < List < TreeNode > >   baggingTrees ,  String   loss ,  int   inputCount ,  FileSystem   fs ,  Path   output )  throws  IOException   {  LOG . info ( """"Writing trees to {}."""" ,  output ) ;  save ( modelConfig ,  columnConfigList ,  baggingTrees ,  loss ,  inputCount ,  fs . create ( output ) ) ;  }
private   static   File   saveKeyStore ( String   prefix ,  KeyStoreSupplier   func )   throws  Exception   {  File   result   =  File . createTempFile ( prefix ,  """".p12"""" ) ;  result . deleteOnExit () ;  try  ( OutputStream   output   =  new   FileOutputStream ( result ) )   {  KeyStore   store   =  func . createKeyStore () ;  store . store ( output ,  KEY_STORE_PASSWORD . toCharArray () ) ;  }  return  result ;  }
@ Override   public   short   get ( long   i ,  long   j )   {  return  getRaw ( index ( i ,  j ) ) ;  }
@ CanIgnoreReturnValue  @ Override  public   T   generatesFiles ( JavaFileObject   first ,  JavaFileObject ...   rest )   {  for  ( JavaFileObject   expected   :  Lists . asList ( first ,  rest ) )   {  if  ( ! wasGenerated ( expected ) )   {  failWithoutActual ( simpleFact ( """"Did not find a generated file corresponding to """"   +   expected . getName () ) ) ;  }  }  return  thisObject () ;  }
@ Override  public   String   toString ()   {  return  """"DeviceOrientationRequestInternal{""""   +  """"request=""""   +   request   +  """", clients=""""   +   clients   +  """", tag='""""   +   tag   +   '\''   +  '}' ;  }
public   static   String   repeat ( char   c ,  int   length )    {  return  create ( c ,  length ) ;  }
protected   void   onThrown ( Level   world ,  ThrowableGrenadeEntity   entity )  {  }
@ Override  public   int   write ( byte   b )   {  return  this . i2c . writeRegister ( this . address ,  b ) ;  }
public   double   getNormalProgress ( float   partialTicks )  {  return  Mth . clamp ( ( this . previousAim   +   ( this . currentAim   -   this . previousAim )   *   partialTicks )   /   MAX_AIM_PROGRESS ,  0.0 ,  1.0 ) ;  }
private   static   void   copyModelAngles ( ModelPart   source ,  ModelPart   target )  {  target . xRot   =   source . xRot ;  target . yRot   =   source . yRot ;  target . zRot   =   source . zRot ;  }
@ Test  void   wontParseActionCurrentWhileBuildRunningButNoCurrentAction ()   {  when ( buildRunSingleStart . isBuilding () ) . thenReturn ( true ) ;  final   MarkupText   markupText   =  new   MarkupText ( """"Log line"""" ) ;  assertEquals ( CONTINUE ,  ColorizedAction . parseAction ( markupText ,  buildRunSingleStart ) ) ;  }
@ Override  public   Optional < ConnectionTypeResponse >   tryConnectionType ( InetAddress   ipAddress )  throws  IOException ,  GeoIp2Exception   {  return  getConnectionType ( ipAddress ) ;  }
@ Test  void   catalogLoads ()   {  @ SuppressWarnings ( """"rawtypes"""" )  ResponseEntity < Map >   entity   =  new   TestRestTemplate ()  . getForEntity ( """"http:
@ Override   void   visitAdditionalItems ( boolean   additionalItems )   {  List < Schema >   itemSchemas   =  arraySchema . getItemSchemas () ;  int   itemSchemaCount   =  itemSchemas   ==   null  ?   0   :  itemSchemas . size () ;  if  ( itemSchemas   !=   null   &&   ! additionalItems   &&   subjectLength   >   itemSchemaCount )   {  owner . failure ( format ( """"expected: [%d] array items, found: [%d]"""" ,  itemSchemaCount ,  subjectLength ) ,  """"items"""" ) ;  }  }
private   void   testBrokenDataPointer ( Reader   reader )   {  InvalidDatabaseException   ex   =  assertThrows ( InvalidDatabaseException . class , ()  ->   reader . get ( InetAddress . getByName ( """"1.1.1.16"""" ) ,  Map . class ) ) ;  assertThat ( ex . getMessage () , containsString ( """"The MaxMind DB file's data section contains bad data"""" ) ) ;  }
private   boolean   isSpec ( final   PsiElement   elementToSearch ,  final   Project   project )   {  if  ( elementToSearch   instanceof   YAMLKeyValue   ||   elementToSearch   instanceof   JsonProperty )   {  final   VirtualFile   virtualFile   =  elementToSearch . getContainingFile () . getVirtualFile () ;  IndexFacade   indexFacade   =  ApplicationManager . getApplication () . getService ( IndexFacade . class ) ;  return  indexFacade . isMainSpecFile ( virtualFile ,  project )  ||   indexFacade . isPartialSpecFile ( virtualFile ,  project ) ;  }  return  false ;  }
@ Override  public   String   getEscapeCharReplacement ()   {  return  escapeCharReplacement ;  }
@ Override  public   String   toString ()   {  return  String . format ( """"JsonIgnoreProperties.Value(ignored=%s,ignoreUnknown=%s,allowGetters=%s,allowSetters=%s,merge=%s)"""" , _ignored ,  _ignoreUnknown ,  _allowGetters ,  _allowSetters ,  _merge ) ;  }
public   String   getName ()   {  Uri   uri   =  Uri . parse ( getUri () ) ;  return  uri . getQueryParameter ( """"p"""" ) . substring ( uri . getQueryParameter ( """"p"""" ) . lastIndexOf ( '/' ) + 1 ) ;  }
@ Test ( dependsOnMethods   =   { """"testUpdateActionDeletePasswordSharingCertificate"""" } )  public   void   testActivateAction ()   {  getResponseOfPost ( ACTION_MANAGEMENT_API_BASE_PATH   +   PRE_UPDATE_PASSWORD_PATH   +  """"/""""   +   testActionId   +   ACTION_ACTIVATE_PATH ,  """""""" )  . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_OK )  . body ( """"id"""" ,  equalTo ( testActionId ) )  . body ( """"name"""" ,  equalTo ( TEST_ACTION_NAME ) )  . body ( """"description"""" ,  equalTo ( TEST_ACTION_UPDATED_DESCRIPTION ) )  . body ( """"status"""" ,  equalTo ( TEST_ACTION_ACTIVE_STATUS ) ) ;  }
@ Test  public   void   booleanSchema ()   {  BooleanSchema   actual   =  ( BooleanSchema )   SchemaLoader . load ( get ( """"booleanSchema"""" ) ) ;  assertNotNull ( actual ) ;  }
@ Override  public   int   hashCode ()   {  return  Arrays . hashCode ( new   Object [] { uvmEntries } ) ;  }
public   void   setBgImgPath ( final   String   bgImgPath )   {  this . bgImgPath   =   bgImgPath ;  }
@ Override  public   void   doAncsNegativeAction ( IWearableCallbacks   callbacks ,  int   i )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: doAncsNegativeAction: """"   +   i ) ;  }
@ Test  @ SuppressWarnings ( """"unchecked"""" )  void   toArray ()   {  final   Object []   result   =  Underscore . < Integer > toArray ( asList ( 1 ,  2 ,  3 ,  4 ) ) ;  assertEquals ( """"1"""" ,  result [ 0 ] . toString () ) ;  final   Object []   resultObj   =  new   Underscore ( asList ( 1 ,  2 ,  3 ,  4 ) ) . toArray () ;  assertEquals ( """"1"""" ,  resultObj [ 0 ] . toString () ) ;  }
public   Integer   getMaxConcurrentPerNode ()   {  if  ( maxConcurrentPerNode   ==   null )   {  maxConcurrentPerNode   =   0 ;  }  return  maxConcurrentPerNode ;  }
@ Override  public   T   next ()   {  while  ( med   ==   null   ||   ! med . hasNext () )   {  med   =   interMed . next () . iterator () ;  }  return  med . next () ;  }
public   void   initGrads ()   {  this . wGrads   =   new   HashMap < Integer ,  float [] > () ;  }
@ Override  public   void   onMetadataChanged ( MediaMetadataCompat   metadata )   {  mMetadata   =   metadata ;  Log . d ( TAG ,  """"Received new metadata"""" ) ;  Notification   notification   =  createNotification () ;  if  ( notification   !=   null )   {  mNotificationManager . notify ( NOTIFICATION_ID ,  notification ) ;  }  }
public   static   String   padStart ( final   String   string ,  final   Integer   length )   {  return  createPadDir ( false ) . apply ( string ,  length ,  null ) ;  }
public   static   WailaTickHandler   instance ()   {  if  ( INSTANCE   ==   null )   {  INSTANCE   =   new   WailaTickHandler () ;  }  return  INSTANCE ;  }
@ ApiModelProperty ( example   =   """"pickup"""" ,  required   =   true )  @ JsonProperty ( """"name"""" )  @ Valid  @ NotNull ( message   =   """"Property name cannot be null."""" )  @ Pattern ( regexp = """"^[a-zA-Z0-9._-]+(?: [a-zA-Z0-9._-]+)*$"""" )  public   String   getName ()   {  return  name ;  }
public   void   setDepartment ( String   department )   {  this . department   =   department ;  }
@ Override  public   final   void   actionPerformed ( final   ActionEvent   event )   {  
@ Test  public   void   issue458MinimumIncreased ()   {  assertOpenApiChangedEndpoints ( """"parameterDiff/issue-458-integer-limits_1.yaml"""" , """"parameterDiff/issue-458-integer-limits_5.yaml"""" ) ;  }
public   void   setDisparityMultiplier ( int   value )   {  setOption ( RealSense . RS_OPTION_R200_DISPARITY_MULTIPLIER ,  value ) ;  }
@ Override  public   Future < ? >   submit ( Runnable   runnable )   {  return  delegate . submit ( runnable ) ;  }
@ Override  public   void   setGroupPrefix ( String   world ,  String   group ,  String   prefix )   {  throw  new   UnsupportedOperationException ( """"bPermissions does not support altering info nodes"""" ) ;  }
public   Intent   sendRegisterMessageBlocking ( Bundle   data ,  KeyPair   keyPair )   throws  IOException   {  Intent   intent   =  sendRegisterMessageBlockingInternal ( data ,  keyPair ) ;  if  ( intent   !=   null   &&   intent . hasExtra ( EXTRA_MESSENGER ) )   {  
@ Test  public   void   testNodeCreation ()   {  GraphDatabaseService   graphDb   =  getGraphDB () ;  assertThat ( size ( graphDb . getAllNodes () ) ,  is ( 1 ) ) ;  
public   static   WailaCommonRegistration   instance ()   {  if  ( INSTANCE   ==   null )   {  Jade . LOGGER . error ( """"WailaCommonRegistration is not initialized yet."""" ) ;  synchronized  ( WailaCommonRegistration . class )   {  if  ( INSTANCE   ==   null )   {  INSTANCE   =   new   WailaCommonRegistration () ;  }  }  }  return  INSTANCE ;  }
@ Override  public   float   getMaximalWidth ()  {  float   ret   =  0 ;  if  ( ! preservesLineBreaks () )  {  
@ Override  public   int   hashCode ()   {  return  Objects . hash ( name ,  inboundKey ,  properties ) ;  }
public   boolean   updateAction ( String   actionType ,  String   actionId ,  ActionUpdateModel   actionModel )   throws  IOException   {  return  actionsRestClient . updateAction ( actionType ,  actionId ,  actionModel ) ;  }
public   void   onConnectedNodes ( List < NodeParcelable >   nodes )   {  Log . d ( TAG ,  """"onConnectedNodes: """"   +   nodes ) ;  invokeListeners ( null ,  listener  ->   listener . onConnectedNodes ( nodes ) ) ;  }
@ Override   public   void   deallocate ()   {  buffer   =   null ;  if  ( pointer   !=   null )   pointer . deallocate () ;  }
private   void   btnRightsOKActionPerformed ( java . awt . event . ActionEvent   evt )   { 
@ Test  public   void   dateTimeWithNineDigitsInSecFracSuccess ()   {  assertSuccess ( """"2015-02-28T11:00:00.123456789Z"""" ,  new   DateTimeFormatValidator () ) ;  }
private   void   removeDialect ( String   dialectId )   {  getResponseOfDelete ( CLAIM_DIALECTS_ENDPOINT_URI   +   """"/""""   +   dialectId )  . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT ) ;  }
private   String   doComputeHash ( final   WebContext   webContext ,  final   String   pathPrefix )   throws  Exception   {  if  ( aws4HashCalculator . supports ( webContext ) )   {  return  aws4HashCalculator . computeHash ( webContext ,  pathPrefix ) ;  }   else  {  return  legacyHashCalculator . computeHash ( webContext ,  pathPrefix ) ;  }  }
public   static   int   fromFloat ( float   h )   {  return  Float . floatToIntBits ( h )   >>>   16 ;  }
@ AfterClass   public   static   void   tearDownClass ()   throws  Exception   {  Pointer . DeallocatorReference . totalBytes   +=   1L   <<   48 ;  }
@ ApiModelProperty ( value   =   """"A list of roles shared across all organizations."""" )  @ JsonProperty ( """"roles"""" )  @ Valid  public   List < RoleWithAudience >   getRoles ()   {  return  roles ;  }
@ JsonIgnore  public   Subdivision   getLeastSpecificSubdivision ()   {  if  ( this . subdivisions . isEmpty () )   {  return  new   Subdivision () ;  }  return  this . subdivisions . get ( 0 ) ;  }
@ Override  MessageBodyWriter < Graph >   getWriter ()   {  return  new   GraphMlWriter () ;  }
@ ApiModelProperty ( example   =   """"Sample updated scope one"""" )  @ JsonProperty ( """"claims"""" )  @ Valid  public   List < String >   getClaims ()   {  return  claims ;  }
public   void   setInAppBroswer ( InAppBrowser   browser )   {  this . inAppBrowser   =   browser ;  }
@ Override  public   ResourceLocation   getTextureLocation ( ProjectileEntity   entity )  {  return  null ;  }
private   void   validatePaginationScenarioWithLimitOnly ( int   limit ,  int   expectedTotalResults ,  int   expectedStartIndex , int   expectedCount ,  boolean   expectNextLink )   {  String   queryUrl   =  buildQueryUrlWithLimit ( limit ) ;  Response   response   =  getResponseOfGetWithOAuth2 ( queryUrl ,  m2mToken ) ;  validateCommonAssertions ( response ,  expectedTotalResults ,  expectedStartIndex ,  expectedCount ) ;  validateNextLink ( response ,  expectNextLink ) ;  }
public   void   setAuthor ( PersonSummary   author )   {  this . author   =   author ;  }
 <argument pos:start=""""""""102:133"""""""" pos:end=""""""""102:146""""""""><expr pos:start=""""""""102:133"""""""" pos:end=""""""""102:146""""""""><name pos:start=""""""""102:133"""""""" pos:end=""""""""102:146"""""""">fieldValueList</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
@ NonNull  public   static   CredentialSavingClient   getCredentialSavingClient ( @ NonNull   Activity   activity )   {  throw  new   UnsupportedOperationException () ;  }
@ Override  public   void   setLoginTimeout ( final   int   seconds )   {  throw  new   UnsupportedOperationException ( """"#setLoginTimeout()"""" ) ;  }
public   void   setClickable ( boolean   clickable )   {  throw  new   UnsupportedOperationException () ;  }
public   ArrayList < String >   getDrawableNames ()   {  LinkedHashMap < String ,  String >   map   =  new   LinkedHashMap <> () ;  loadComponentAndDrawableNames ( map ) ;  return  new   ArrayList <> ( new   LinkedHashSet <> ( map . values () ) ) ;  }
public   void   add ( Info < T ,  R >   info )   {  String   hash   =  GeoHash . encodeHash ( info . lat () ,  info . lon () ) ;  addToMap ( mapByGeoHash ,  info ,  hash ) ;  addToMapById ( mapById ,  info ,  hash ) ;  }
@ Override  public   String   getGroupInfoString ( String   world ,  String   group ,  String   node ,  String   defaultValue )   {  String   val   =  API . getGroupInfo ( group ,  node ) ;  return  val   !=   null  ?   val   :  defaultValue ;  }
@ Test  public   void   testAddCertificateWithExistingAlias ()   throws  JSONException ,  IOException   {  if  ( ! StringUtils . equals ( MultitenantConstants . SUPER_TENANT_DOMAIN_NAME ,  tenant ) )   {  String   certificateRequest   =  String . format ( readResource ( """"cert-request-body3.json"""" ) ,  tenant ) ;  Response   response   =  getResponseOfJSONPost ( KEYSTORE_MANAGEMENT_API_BASE_PATH   +  KEYSTORE_MANAGEMENT_API_CERTIFICATE_PATH ,  certificateRequest ,  new   HashMap <> () ) ;  validateErrorResponse ( response ,  HttpStatus . SC_BAD_REQUEST ,  """"KSS-60002"""" ) ;  }  }
private   JavaFileObjectSubject   checkGeneratedFile ( Optional < JavaFileObject >   generatedFile ,  Location   location ,  String   path )   {  if  ( ! generatedFile . isPresent () )   {  
public   UserObject   name ( Name   name )   {  this . name   =   name ;  return  this ;  }
private   ValidatingVisitor   createValidatingVisitor ()   {  return  createValidatingVisitor ( """"string"""" ,  STRICT ) ;  }
@ Override  protected   void   onStartLoading ()   {  if  ( storedData   !=   null )   {  deliverResult ( storedData ) ;  }   else  {  forceLoad () ;  }  }
@ DataBoundSetter  public   void   setFailedNewMedium ( Integer   failedNewMedium )   {  this . failedNewMedium   =   failedNewMedium ;  }
@ Override  public   void   init ( Weight   weight )   {  this . learningRate   =   weight . getLearningRate () ;  this . lastDelta   =   new   double [ weight . getNumWeight () ] ;  this . momentum   =   weight . getMomentum () ;  }
 <argument pos:start=""""""""319:96"""""""" pos:end=""""""""319:99""""""""><expr pos:start=""""""""319:96"""""""" pos:end=""""""""319:99""""""""><literal type=""""""""null"""""""" pos:start=""""""""319:96"""""""" pos:end=""""""""319:99"""""""">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Test  void   shouldSelectLastBuildIfBuildNumberIsZero ()   {  Mockito . when ( mockProject . getLastBuild () ) . thenReturn ( mockRun ) ;  Run   actualRun   =  extension . select ( mockProject ,  """"0"""" ,  null ) ;  assertThat ( actualRun ,  is ( mockRun ) ) ;  }
public   static   boolean   checkVersion ( String   groupId ,  String   artifactId )   {  return  checkVersion ( groupId ,  artifactId ,  """"-"""" ,  true ,  getCallerClass ( 2 ) ) ;  }
@ Override  public   void   featureUpdate ( double []   featuerStatistic ,  int   binIndex ,  float   label ,  float   significance ,  float   weight )   {  
@ Override   public   int   hashCode ()   {  return  Objects . hash ( super . hashCode () ,  referredSchema ) ;  }
public   void   setEdgeAreaMin ( double   edgeAreaMin )   {  this . edgeAreaMin   =   edgeAreaMin ;  }
@ Nullable  public   GoogleSignInAccount   getSavedDefaultGoogleSignInAccount ()   {  synchronized  ( sharedPreferences )   {  String   defaultGoogleSignInAccountName   =  sharedPreferences . getString ( PREF_DEFAULT_ACCOUNT ,  null ) ;  if  ( defaultGoogleSignInAccountName   ==   null )   return  null ;  String   googleSignInAccountJson   =  sharedPreferences . getString ( PREF_PREFIX_ACCOUNT   +   defaultGoogleSignInAccountName ,  null ) ;  if  ( googleSignInAccountJson   ==   null )   return  null ;  try  {  return  GoogleSignInAccount . fromJson ( googleSignInAccountJson ) ;  }   catch  ( Exception   e )   {  return  null ;  }  }  }
@ Override  public   void   onCreatePreferences ( Bundle   savedInstanceState ,  String   rootKey )   {  super . onCreatePreferences ( savedInstanceState ,  rootKey ) ;  setPreferencesFromResource ( R . xml . preference_general_home ,  rootKey ) ;  setDisplayHomeAsUpEnabled ( true ) ;  }
public   void   minimumStreamedBytes ( long   minimumStreamedBytes )   {  this . minimumStreamedBytes   =   minimumStreamedBytes ;  }
default   int   i2cWriteDevice ( int   handle ,  CharSequence   data ,  int   offset ,  int   length ) {  return  i2cWriteDevice ( handle ,  data . toString () . getBytes ( StandardCharsets . US_ASCII ) ,  offset  , length ) ;  }
public   ForegroundColorSpan   getFcs ()   {  return  new   ForegroundColorSpan ( ContextCompat . getColor ( mContext ,  R . color . accent ) ) ;  }
@ DataBoundSetter  public   void   setAuthentication ( String   authentication )   {  this . authentication   =   authentication ;  }
public   static   byte []   readInputStreamFully ( @ NonNull   InputStream   inputStream )   throws  IOException   {  return  readInputStreamFully ( inputStream ,  true ) ;  }
public   void   setDepthControlSecondPeakThreshold ( int   value )   {  setOption ( RealSense . RS_OPTION_R200_DEPTH_CONTROL_SECOND_PEAK_THRESHOLD ,  value ) ;  }
@ Override  public   Platform   get ( String   platformId )   throws  PlatformNotFoundException   {  return  platforms . get ( platformId ) ;  }
@ Override  public   ImageLoader   getImageLoader ()  {  if  ( imageLoader   ==   null )  imageLoader   =   new   GraphicsImageLoader ( this ) ;  return  imageLoader ;  }
@ Nonnull  public   FileSystemMavenSandbox   withKeepSandboxWhenFinishedTest ( boolean   keepSandboxWhenFinishedTest )   {  
protected   Set < Visit >   getVisitsInternal ()   {  if  ( this . visits   ==   null )   {  this . visits   =   new   HashSet <> () ;  }  return  this . visits ;  }
public   I2CRegister   getRegister ( int   address )   {  return  new   DefaultI2CRegister ( this ,  address ) ;  }
public   Dictionary < SyntaxChecker >   getSyntaxCheckers ()  {  return  syntaxCheckers ;  }
public   void   setPostInstallScript (  final   String   script )   {  setPostInstallProgram ( readProgram ( script ) ) ;  if  (  script   !=   null )   format . getHeader () . createEntry (  POSTINSCRIPT ,  script ) ;  }
public   static   String   needCaptchaAndroidacyHost ()   {  return  needCaptchaAndroidacyHost ;  }
public   final   float   read ()   {  try  {  clear () ;  this . recordBuffer . limit ( EncogFloatEGBFile . FLOAT_SIZE ) ;  this . fc . read ( this . recordBuffer ) ;  this . recordBuffer . position ( 0 ) ;  return  this . recordBuffer . getFloat () ;  }   catch  ( final   IOException   ex )   {  throw  new   RuntimeException ( ex ) ;  }  }
@ Test  public   void   computeZScore ()   {  Assert . assertEquals ( 0.0 ,  Normalizer . computeZScore ( 2 ,  2 ,  1 ,  6.0 ) [ 0 ] ) ;  Assert . assertEquals ( 6.0 ,  Normalizer . computeZScore ( 12 ,  2 ,  1 ,  6.0 ) [ 0 ] ) ;  Assert . assertEquals ( - 2.0 ,  Normalizer . computeZScore ( 2 ,  4 ,  1 ,  2 ) [ 0 ] ) ;  
@ Test  public   void   renderDoesNotFailWhenHTTPStatusCodeIsRange ()   {  ConsoleRender   render   =  new   ConsoleRender () ;  ByteArrayOutputStream   outputStream   =  new   ByteArrayOutputStream () ;  OutputStreamWriter   outputStreamWriter   =  new   OutputStreamWriter ( outputStream ) ;  ChangedOpenApi   diff   = OpenApiCompare . fromLocations ( """"range_statuscode_1.yaml"""" ,  """"range_statuscode_2.yaml"""" ) ;  render . render ( diff ,  outputStreamWriter ) ;  assertThat ( outputStream . toString () ) . isNotBlank () ;  }
public   void   onCloseInitiated ( WebSocket   conn ,  int   code ,  String   reason )   {  }
@ Test ( dependsOnMethods   =   """"testDeleteDiscoveryConfigUnauthorized"""" )  public   void   deleteOrganizations ()   {  for  ( String   organizationID   :  organizationIDs )   {  String   organizationPath   =  ORGANIZATION_MANAGEMENT_API_BASE_PATH   +   PATH_SEPARATOR   +   organizationID ;  Response   responseOfDelete   =  getResponseOfDelete ( organizationPath ) ;  responseOfDelete . then ()  . log ()  . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT ) ;  }  }
public   AdvancedApplicationConfiguration   fragment ( Boolean   fragment )   {  this . fragment   =   fragment ;  return  this ;  }
 <argument pos:start=""""""""223:108"""""""" pos:end=""""""""223:112""""""""><expr pos:start=""""""""223:108"""""""" pos:end=""""""""223:112""""""""><name pos:start=""""""""223:108"""""""" pos:end=""""""""223:112"""""""">flags</name></expr></argument>
public   int   getCountryId ( String   countryName )   {  if  ( ! countryNames . containsKey ( countryName ) )   {  return  INVALID_LOCATION ;  }  return  countryNames . get ( countryName ) ;  }
@ Override  public   void   draw ( DrawStage   turn )  {  if  ( displayed   &&   isVisible () )  {  if  ( ! this . formsStackingContext () )  {  switch  ( turn )  {  case  DRAW_NONINLINE :  case  DRAW_FLOAT :  
@ Test  public   void   thatHeaderDefinitionKeysAreSuggested ()   {  getCaretCompletions ( """"component_header"""" )  . assertContains ( """"$ref"""" , """"description"""" , """"required"""" , """"deprecated"""" , """"allowEmptyValue"""" , """"style"""" , """"explode"""" , """"allowReserved"""" , """"schema"""" , """"example"""" , """"examples"""" , """"content"""" )  . isOfSize ( 12 ) ;  }
public   APIResourceListItem   properties ( List < Property >   properties )   {  this . properties   =   properties ;  return  this ;  }
@ Override  public   final   void   setValue ( final   Object   value )   {  this . deserializerComboBox . setSelectedItem ( Objects . requireNonNullElse ( value ,  0 ) ) ;  }
@ Override  public   void   onCastStateChanged ( int   newState )   {  if  ( newState   !=   CastState . NO_DEVICES_AVAILABLE )   {  showIntroductoryOverlay () ;  }  }
@ Override  public   boolean   dispatchTouchEvent ( MotionEvent   ev )   {  return  mGesture . onTouchEvent ( ev ) ;  }
@ Override  public   String   toString ()  {  return  keyword   +   """": """"  +   ( additionalOK  ?   """"allowed""""   :  itemsSize   +   """" max"""" ) ;  }
@ NonNull  public   static   AppSetIdClient   getClient   ( Context   context )   {  throw  new   UnsupportedOperationException () ;  }
@ Override  protected   void   notifyListener ( float   currentPos )   {  observableColor . updateValue ( currentPos ,  this ) ;  }
@ Override  protected   boolean   isRedirectable ( String   method )   {  return  false ;  }
public   String   getApplicationContextPath ()   {  return  applicationContextPath ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( username ,  userstore ) ;  }
@ Override  public   void   inject ( Object   key ,  Object   value )   {  args . add ( String . format ( CommonConstants . MAPREDUCE_PARAM_FORMAT ,  key . toString () ,  value . toString () ) ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  @ Test  public   void   arrayProperties_areCopied ()   {  Vertex   v1   =  graph . addVertex ( 1L ) ;  v1 . setProperty ( """"foo"""" ,  new   String []   { """"bar"""" ,  """"baz"""" } ) ;  Vertex   v2   =  graph . addVertex ( 2L ) ;  TinkerGraphUtil . copyProperties ( v1 ,  v2 ) ;  assertThat ( ( List < String > ) v2 . getProperty ( """"foo"""" ) ,  contains ( """"bar"""" ,  """"baz"""" ) ) ;  }
@ Test  void   arraySchema_all_definesProperty ()   {  assertTrue ( ARRAY_SCHEMA . definesProperty ( """"#/all"""" ) ) ;  assertTrue ( ARRAY_SCHEMA . definesProperty ( """"#/all/prop"""" ) ) ;  assertFalse ( ARRAY_SCHEMA . definesProperty ( """"#/all/nonexistent"""" ) ) ;  }
public   synchronized   void   reportCompletion ( ReferenceTestCase   testCase )  {  completedCount ++ ;  if  ( completedCount   %   10   ==   0 )  log . info ( """"Completed """"   +   completedCount   +   """"/""""   +   totalCount ) ;  }
NoteNode   appendRightFromFile ( NoteNode   appendMe ,  int   overrideDelta )   {  if  ( overrideDelta   >   0 )   {  appendMe . note . setDelta ( overrideDelta ) ;  }  if  ( appendMe . note . getDelta ()   ==   - 1 )   {  appendMe . note . setDelta ( this . note . getLength () ) ;  }  if  ( appendMe . note . getLength ()   ==   - 1 )   {  appendMe . note . setLength ( appendMe . note . getDuration () ) ;  }  this . next   =   Optional . of ( appendMe ) ;  appendMe . prev   =   Optional . of ( this ) ;  return  appendMe ;  }
private   static   LocalDateTime   getLocalTimestampMillisValueOrRandom ( final   List < String >   fieldValueList )   {  return  getRandomLocalDateTime ( fieldValueList ) ;  }
@ Override  final   void   doSetRate ( double   permitsPerSecond ,  long   nowMicros )   {  resync ( nowMicros ) ;  double   stableIntervalMicros   =  SECONDS . toMicros ( 1L )   /   permitsPerSecond ;  this . stableIntervalMicros   =   stableIntervalMicros ;  doSetRate ( permitsPerSecond ,  stableIntervalMicros ) ;  }
private   void   updateResidentIDPProperty ( IdentityProvider   residentIdp ,  String   propertyKey ,  String   value )   throws  Exception   {  IdentityProviderProperty []   idpProperties   =  residentIdp . getIdpProperties () ;  for  ( IdentityProviderProperty   providerProperty   :  idpProperties )   {  if  ( propertyKey . equalsIgnoreCase ( providerProperty . getName () ) )   {  providerProperty . setValue ( value ) ;  }  }  updateResidentIDP ( residentIdp ) ;  }
public   FormDataBuilder   add ( String   key ,  String   value )   throws  UnsupportedEncodingException   {  final   String   pair   =  URLEncoder . encode ( key ,  """"UTF-8"""" )   +   """"=""""   +   URLEncoder . encode ( value ,  """"UTF-8"""" ) ;  this . values . add ( pair ) ;  return  this ;  }
@ Override  public   void   disconnect ( DisconnectRequest   request )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: disconnect"""" ) ;  }
default   ContextBuilder   addProperties ( Reader   reader )   throws  IOException {  return  properties ( reader ,  null ) ;  }
 <argument pos:start=""""""""783:54"""""""" pos:end=""""""""783:62""""""""><expr pos:start=""""""""783:54"""""""" pos:end=""""""""783:62""""""""><literal type=""""""""string"""""""" pos:start=""""""""783:54"""""""" pos:end=""""""""783:62"""""""">""""""""#3465A4""""""""</literal></expr></argument>
public   int   runCmd ( String   shell ,  String   command , OutputConsumer   outputHandler ,  OutputConsumer   errorHandler , ExceptionConsumer   exceptionHandler ,  UnexpectedExceptionListener  exceptionListener )   {  return  runCmd ( shell ,  Collections . singletonList ( command ) , outputHandler ,  errorHandler ,  exceptionHandler ,  exceptionListener ) ;  }
@ Override   public   DoubleIndexer   put ( long []   indices ,  double   d )   {  putRaw ( index ( indices ) ,  d ) ;  return  this ;  }
private   void   refresh_config ()  {  int   prev_theme   =  _config . theme ;  _config . refresh ( getResources () ) ;  refreshSubtypeImm () ;  
private   boolean   isRandom ( Integer   port )   {  return  port   !=   null   &&   port   ==   RANDOM_PORT ;  }
private   void   addBuiltInFormatValidators ()   {  Map < String ,  FormatValidator >   defaultFormatValidators   =  specVersion . defaultFormatValidators () ;  if  ( enableOverrideOfBuiltInFormatValidators )   {  for  ( Entry < String ,  FormatValidator >   entry   :  defaultFormatValidators . entrySet () )   {  formatValidators . putIfAbsent ( entry . getKey () ,  entry . getValue () ) ;  }  }   else  {  formatValidators . putAll ( defaultFormatValidators ) ;  }  }
@ Override  public   List < ClientViewGroup < FluidView > >   getClientGroups ( Accessor < ? >   accessor ,  List < ViewGroup < FluidView . Data > >   groups )   {  return  ClientViewGroup . map ( groups ,  FluidView :: readDefault ,  ( group ,  clientGroup )  ->  {  if  ( group . id   !=   null )   {  clientGroup . title   =   Component . literal ( group . id ) ;  }  clientGroup . messageType   =   MessageType . SUCCESS ;  } ) ;  }
public   String   getColumnConfigPath ( SourceType   sourceType )   {  return  getPathBySourceType ( Constants . COLUMN_CONFIG_JSON_FILE_NAME ,  sourceType ) ;  }
@ Override  public   boolean   playerAdd ( String   world ,  String   player ,  String   permission )   {  OfflinePlayer   op   =  Bukkit . getOfflinePlayer ( player ) ;  GroupSet   set   =  perms . getGroupManager () . getWorldSet ( Bukkit . getWorld ( world ) ) ;  User   user   =  set . getUser ( op ) ;  boolean   value   =  ! permission . startsWith ( """"^"""" ) ;  permission   =   value  ?   permission   :  permission . substring ( 1 ) ;  user . addPermission ( permission ,  value ,  true ,  true ) ;  if  ( user . isActive () )   {  user . applyPermissions ( perms . getGroupManager () . getFactory () ) ;  }  return  true ;  }
public   Builder   setVcLength ( VcLength   vcLength )   {  newConfig . vcLength   =   vcLength ;  return  this ;  }
public   static   Context   onAttach ( Context   context )   {  String   lang   =  getPersistedData ( context ,  Locale . getDefault () . getLanguage () ) ;  return  setLocale ( context ,  lang ) ;  }
public   boolean   greaterThan ( UnityVersion   that )   {  return  this . compareTo ( that )   ==   - 1 ;  }
@ Before  public   void   setUp ()   throws  IOException   {  resultsDir   =   Files . createTempDirectory ( ALLURE_RESULTS ) ;  AllureResultsUtils . setResultsDirectory ( resultsDir . toFile () ) ;  List < String >   suites   =  Lists . newArrayList () ;  suites . add ( getClass () . getResource ( SUITE1 ) . getFile () ) ;  suites . add ( getClass () . getResource ( SUITE2 ) . getFile () ) ;  TestNG   testNG   =  new   TestNG () ;  testNG . setTestSuites ( suites ) ;  testNG . setSuiteThreadPoolSize ( 2 ) ;  testNG . setUseDefaultListeners ( false ) ;  testNG . run () ;  }
private   static   void   createAndShowGUI ()   {  final   JComboBox < String >   comboBox   =  new   JComboBox <> ( new   String [] { """"Ester"""" ,  """"Jordi"""" ,  """"Jordina"""" ,  """"Jorge"""" ,  """"Sergi"""" } ) ;  enable ( comboBox ) ;  final   JFrame   frame   =  new   JFrame () ;  frame . setDefaultCloseOperation ( WindowConstants . EXIT_ON_CLOSE ) ;  frame . getContentPane () . add ( comboBox ) ;  frame . pack () ;  frame . setVisible ( true ) ;  }
public   ORRule   rules ( List < ANDRule >   rules )   {  this . rules   =   rules ;  return  this ;  }
public   static   boolean   isExternalStorageDocument ( Uri   uri )   {  return  """"com.android.externalstorage.documents"""" . equals ( uri . getAuthority () ) ;  }
public   void   createConnection ( ConnectionConfiguration   config )   {  if  ( config . nodeId   ==   null )   config . nodeId   =   getLocalNodeId () ;  Log . d ( TAG ,  """"putConfig[nyp]: """"   +   config ) ;  configDatabase . putConfiguration ( config ) ;  configurationsUpdated   =   true ;  }
@ Override  public   int   read ( byte []   buffer ,  int   offset ,  int   length )   {  Integer   counter   =  readNoLogging ( buffer ,  offset ,  length ) ;  if  ( counter   ==   null )   return  - 1 ;  logger . info ( """"{} READ (0x{})"""" ,  logPreamble ,  StringUtil . toHexString ( buffer ,  offset ,  length ) ) ;  return  counter ;  }
public   void   setTestSize ( long   testSize )   {  this . testSize   =   testSize ;  }
public   Optional < String >   getKeyNameOfObject ( final   PsiElement   psiElement )   {  return  traversal . getKeyNameOfObject ( psiElement ) ;  }
private   String   itemContent ( String   title ,  String   contentType ,  ChangedMediaType   changedMediaType ,  boolean   isRequest )   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( itemContent ( title ,  contentType ) )  . append ( StringUtils . repeat ( ' ' ,  10 ) )  . append ( """"Schema: """" )  . append ( changedMediaType . isCompatible ()  ?   """"Backward compatible""""   :  """"Broken compatibility"""" )  . append ( System . lineSeparator () ) ;  if  ( ! changedMediaType . isCompatible () )   {  sb . append ( incompatibilities ( changedMediaType . getSchema () ) ) ;  }  return  sb . toString () ;  }
private   int   compare ( BigDecimal   left ,  BigDecimal   right ,  boolean   nullMeansLessThan )   {  if  ( left   ==   null   &&   right   ==   null )   {  return  0 ;  }  if  ( left   ==   null )   {  return  nullMeansLessThan  ?   - 1   :  1 ;  }  if  ( right   ==   null )   {  return  nullMeansLessThan  ?   1   :  - 1 ;  }  return  left . unscaledValue () . compareTo ( right . unscaledValue () ) ;  }
public   boolean   hasAsset ( String   key )   {  return  assets . containsKey ( key ) ;  }
@ Test  void   scopeInSortDependencyManagementShouldSortByScope ()   {  SortPomImplUtil . create ()  . customSortOrderFile ( """"custom_1.xml"""" )  . sortDependencyManagement ( """"scope,GROUPID,artifactId"""" )  . lineSeparator ( """"\r\n"""" )  . testFiles ( """"/SortDepManagement_input_simpleWithScope.xml"""" , """"/SortDepManagement_expected_simpleWithScope2.xml"""" ) ;  }
@ Test  public   void   thatInValuesAreSuggested ()   {  getCaretCompletions ( """"in"""" ) . assertContains ( """"query"""" ,  """"header"""" ,  """"path"""" ,  """"cookie"""" ) . isOfSize ( 4 ) ;  }
@ BeforeSuite ( alwaysRun   =   true )  public   void   initTest ()   throws  Exception   {  super . init () ;  startTomcat () ;  }
static   MockAnalogOutputProvider   newInstance ()   {  return  new   MockAnalogOutputProviderImpl () ;  }
@ Override  public   boolean   onClick ( Markup   markup )   {  if  ( markup   instanceof   IMarkerDelegate )   {  if  ( onMarkerClickListener   !=   null )   {  try  {  if  ( onMarkerClickListener . onMarkerClick ( ( IMarkerDelegate )   markup ) )  return  true ;  }   catch  ( RemoteException   e )   {  Log . w ( TAG ,  e ) ;  }  }  
@ ApiModelProperty ( required   =   true ,  value   =   """"Email templates for the template type."""" )  @ JsonProperty ( """"templates"""" )  @ Valid  @ NotNull ( message   =   """"Property templates cannot be null."""" )  public   List < EmailTemplateWithID >   getTemplates ()   {  return  templates ;  }
public   Country   getByAlpha ( String   alpha )   {  return  super . getByAlpha ( alpha ,  countries ) ;  }
@ Test  public   void   compilesWithoutError_failureReportsFiles ()   {  expectFailure  . whenTesting ()  . about ( javaSource () )  . that ( HELLO_WORLD_RESOURCE )  . processedWith ( new   FailingGeneratingProcessor () )  . compilesWithoutError () ;  AssertionError   expected   =  expectFailure . getFailure () ;  assertThat ( expected . getMessage () ) . contains ( """"Compilation produced the following diagnostics:\n"""" ) ;  assertThat ( expected . getMessage () ) . contains ( FailingGeneratingProcessor . GENERATED_CLASS_NAME ) ;  assertThat ( expected . getMessage () ) . contains ( FailingGeneratingProcessor . GENERATED_SOURCE ) ;  }
public   boolean   roleNameExists ( String   roleName )  throws  RemoteException ,  UserAdminUserAdminException   {  FlaggedName []   roles ;  roles   =   userAdminStub . getAllRolesNames ( roleName ,  LIMIT ) ;  for  ( FlaggedName   role   :  roles )   {  if  ( role . getItemName () . equals ( roleName ) )   {  log . info ( """"Role name """"   +   roleName   +   """" already exists"""" ) ;  return  true ;  }  }  return  false ;  }
public   Builder   minLength ( int   minLength )   {  this . minLength   =   minLength ;  return  this ;  }
public   SecuritySchemeDiff   getSecuritySchemeDiff ()   {  return  this . securitySchemeDiff ;  }
private   String   twoWayDiffContextStr ()   {  return  Tree . Kind . COMPILATION_UNIT . toString () ;  }
@ Override  public   String   toString ()   {  return  """"XML Language Server: """"   +   super . toString () ;  }
@ ReactMethod  private   void   registerTagEvent ( ReadableMap   options ,  Callback   callback )   {  isReaderModeEnabled   =   options . getBoolean ( """"isReaderModeEnabled"""" ) ;  readerModeFlags   =   options . getInt ( """"readerModeFlags"""" ) ;  readerModeDelay   =   options . getInt ( """"readerModeDelay"""" ) ;  Log . d ( LOG_TAG ,  """"registerTagEvent"""" ) ;  isForegroundEnabled   =   true ;  
@ Override  public   IObjectWrapper   getSession ( String   sessionId )   throws  RemoteException   {  return  ObjectWrapper . wrap ( delegate . createSession ( sessionId ) ) ;  }
@ Test  public   void   testGetAllPrefixes ()   {  Collection < String >   prefixes   =  vocabulary . getAllCuriePrefixes () ;  assertThat ( prefixes ,  hasItems ( """"H"""" ,  """"S"""" ) ) ;  }
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( """"class OwnerResponse {\n"""" ) ;  sb . append ( """"    id: """" ) . append ( toIndentedString ( id ) ) . append ( """"\n"""" ) ;  sb . append ( """"    username: """" ) . append ( toIndentedString ( username ) ) . append ( """"\n"""" ) ;  sb . append ( """"}"""" ) ;  return  sb . toString () ;  }
public   < T   extends  TrackInfo >   T   getOrCreate ( ResourceLocation   tag ,  Class < T >   type ,  Supplier < T >   supplier )   {  List < TrackInfo >   infos   =  map . get ( tag ) ;  T   info   =  null ;  for  ( TrackInfo   o   :  infos )   {  if  ( ! o . updatedThisTick   &&   type . isInstance ( o ) )   {  info   =   type . cast ( o ) ;  break;  }  }  if  ( info   ==   null )   {  info   =   supplier . get () ;  map . put ( tag ,  info ) ;  }  info . updatedThisTick   =   true ;  return  info ;  }
@ Override  public   boolean   getUseDeveloperSupport ()   {  return  BuildConfig . DEBUG ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   endTest ()   throws  Exception   {  try  {  super . endTest () ;  userStoreConfigAdminServiceClient . deleteUserStore ( DOMAIN_ID ) ;  userStoreConfigUtils . waitForUserStoreUnDeployment ( userStoreConfigAdminServiceClient ,  DOMAIN_ID ) ;  }   catch  ( AutomationFrameworkException   e )   {  log . error ( """"Error while shutting down the server. """" ,  e ) ;  }  }
@ Override  public   boolean   shouldUnregisterOnShutdown ()   {  return  this . shouldUnregisterOnShutdown ;  }
@ SubscribeEvent  public   void   onClientTick ( TickEvent . ClientTickEvent   event )  {  if ( event . phase   !=   TickEvent . Phase . END )  return;  Crosshair   crosshair   =  this . getCurrentCrosshair () ;  if ( crosshair   ==   null   ||   crosshair . isDefault () )  return;  crosshair . tick () ;  }
@ Override  public   boolean   equals ( Object   obj )   {  if  ( this   ==   obj )   {  return  true ;  }  if  ( obj   ==   null )   {  return  false ;  }  if  ( getClass ()   !=   obj . getClass () )   {  return  false ;  }  Vulnerability   other   =  ( Vulnerability )   obj ;  return  Objects . equals ( name ,  other . name )   &&   Objects . equals ( severity ,  other . severity )   &&   source   ==   other . source ;  }
@ Override  protected   void   onPostExecute ( Void   result )   {  showCompleteToast () ;  }
private   boolean   isDigit ()   {  return  current   >=   '0'   &&   current   <=   '9' ;  }
private   void   loadListeners ( ServiceLoader < LifecycleListener >   loader )   {  Iterator < LifecycleListener >   iterator   =  loader . iterator () ;  while  ( hasNextSafely ( iterator ) )   {  try  {  LifecycleListener   listener   =  iterator . next () ;  listeners . add ( listener ) ;  LOGGER . info ( String . format ( """"Found %s: %s"""" ,  LifecycleListener . class ,  listener . getClass () ) ) ;  }   catch  ( ServiceConfigurationError   e )   {  LOGGER . error ( """"iterator.next() failed"""" ,  e ) ;  }  }  }
protected   Group   getSCIMGroup ( String   scimUserId , String   externalID , String   displayName )   throws  CharonException   {  Group   scimGroup   =  scimClient . createGroup () ;  scimGroup . setExternalId ( externalID ) ;  scimGroup . setDisplayName ( displayName ) ;  
public   static   MultipleClassification   of ( String   strategy )   {  for ( MultipleClassification   element :  values () )   {  if ( element . toString () . equalsIgnoreCase ( strategy ) )   {  return  element ;  }  }  throw  new   IllegalArgumentException ( """"cannot find such enum in MULTIPLE_CLASSIFICATION"""" ) ;  }
@ Override  public   boolean   process ( Set < ?   extends  TypeElement >   annotations ,  RoundEnvironment   roundEnv )   {  
private   static   BufferedImage   renderImage ( JPanel   panel )   {  JFrame   frame   =  new   JFrame () ;  frame . setUndecorated ( true ) ;  frame . getContentPane () . add ( panel ) ;  frame . pack () ;  BufferedImage   bi   =  new   BufferedImage ( panel . getWidth () ,  panel . getHeight () ,  BufferedImage . TYPE_INT_ARGB ) ;  Graphics2D   graphics   =  bi . createGraphics () ;  panel . print ( graphics ) ;  graphics . dispose () ;  frame . dispose () ;  return  bi ;  }
@ Override  protected   IRecaptchaService   interfaceFromBinder ( IBinder   binder )   {  return  IRecaptchaService . Stub . asInterface ( binder ) ;  }
public   void   createLayout ( Dimension   dim ,  Rectangle   visibleRect )  {  createLayout ( dim ,  visibleRect ,  true ) ;  }
@ Override   public   boolean   containsKey ( Object   key )   {  return  super . containsKey ( key )   ||   ( parent   !=   null   &&   parent . containsKey ( key ) ) ;  }
private   String   mvnHome ( String   home )   {  if  ( home   !=   null )   {  return  home ;  }  return  home ()   +   """"/.m2"""" ;  }
@ Override   public   Bfloat16Indexer   get ( long []   indices ,  float []   h ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  h [ offset   +   n ]   =   getRaw ( index ( indices )   +   n ) ;  }  return  this ;  }
@ Override  public   BINDING_TYPE   remove ( MEMBER_TYPE ...   member )   {  members . removeAll ( List . of ( members ) ) ;  return  ( BINDING_TYPE ) this ;  }
private   float []   parseCoverageTargets ( String   targets )   {  String []   targetValues   =  targets . split ( """","""" ) ;  float []   result   =  new   float [ 3 ] ;  for  ( int   i   =  0 ;   i   <   targetValues . length   &&   i   <   result . length ;   i ++ )   {  try  {  result [ i ]   =   Float . parseFloat ( targetValues [ i ] ) ;  }   catch  ( NumberFormatException   ex )   {  result [ i ]   =   0 ;  }  }  return  result ;  }
@ Override  public   boolean   isMouseOver ( double   mouseX ,  double   mouseY )  {  return  ScreenUtil . isMouseWithin ( EditorScreen . this . list . getRowLeft () ,  EditorScreen . this . list . getTop () ,  EditorScreen . this . list . getRowWidth () ,  EditorScreen . this . list . getHeight () ,  ( int )   mouseX ,  ( int )   mouseY )   &&   super . isMouseOver ( mouseX ,  mouseY ) ;  }
@ Override  public   void   onSaveInstanceState ( Bundle   outState )   throws  RemoteException   {  }
@ Test  public   void   test ()   throws  Exception  {  boolean   pass   =  true ;  String   actual   =  """""""" ;  try {  UriTemplate   t   =  UriTemplate . fromTemplate ( template ) ;  actual   =   t . expand ( variables ) ;  System . out . println ( actual ) ;  }  catch  ( VariableExpansionException   e )  {  pass   =   false ;  }  catch  ( MalformedUriTemplateException   e )  {  pass   =   false ;  }  Assert . assertFalse ( """"Expected """" + template + """" to fail but got """" + actual , pass ) ;  }
public   static   ConstSchemaBuilder   builder ()   {  return  new   ConstSchemaBuilder () ;  }
@ Override  public   final   String   subjectName ( final   String   topic ,  final   boolean   isKey ,  final   ParsedSchema   parsedSchema )   {  String   result   =  null ;  if  ( parsedSchema   !=   null )   {  result   =   getRecordName ( parsedSchema ,  isKey ) ;  }  return  result ;  }
@ Override  public   boolean   onCloseEditor ( Stage   stage )   {  return  resolveOngoingEdits ( stage ) ;   
public   Object   parse ()   {  read () ;  skipWhiteSpace () ;  final   Object   result   =  readValue () ;  skipWhiteSpace () ;  if  ( ! isEndOfText () )   {  throw  error ( """"Unexpected character"""" ) ;  }  return  result ;  }
@ Override  public   void   onDonePressed ( Fragment   currentFragment )   {  super . onDonePressed ( currentFragment ) ;  launchTv () ;  }
public   final   boolean   childOfParameters ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.*.parameters"""" ) ;  }
 <argument pos:start=""""""""192:65"""""""" pos:end=""""""""192:77""""""""><expr pos:start=""""""""192:65"""""""" pos:end=""""""""192:77""""""""><call pos:start=""""""""192:65"""""""" pos:end=""""""""192:77""""""""><name pos:start=""""""""192:65"""""""" pos:end=""""""""192:75""""""""><name pos:start=""""""""192:65"""""""" pos:end=""""""""192:70"""""""">player</name><operator pos:start=""""""""192:71"""""""" pos:end=""""""""192:71"""""""">.</operator><name pos:start=""""""""192:72"""""""" pos:end=""""""""192:75"""""""">getZ</name></name><argument_list pos:start=""""""""192:76"""""""" pos:end=""""""""192:77"""""""">()</argument_list></call></expr></argument>
private   VideoTrack   createScreenTrack ()   {  DisplayMetrics   displayMetrics   =  DisplayUtils . getDisplayMetrics ( reactContext . getCurrentActivity () ) ;  int   width   =  displayMetrics . widthPixels ;  int   height   =  displayMetrics . heightPixels ;  ScreenCaptureController   screenCaptureController   =  new   ScreenCaptureController ( reactContext . getCurrentActivity () ,  width ,  height ,  mediaProjectionPermissionResultData ) ;  return  createVideoTrack ( screenCaptureController ) ;  }
@ Test  public   void   testRightPaddedAttribute ()   {  final   List < UserProfile >   profiles   =  createProfiles () ;  final   Pac4jPrincipal   principal   =  new   Pac4jPrincipal ( profiles ,  Pac4jConstants . USERNAME   +   """" """" ) ;  assertEquals ( TEST_USERNAME ,  principal . getName () ) ;  }
@ Override  public   IObjectWrapper   getWrappedBytes ()   throws  RemoteException   {  return  ObjectWrapper . wrap ( getBytes () ) ;  }
public   static   boolean   sameList ( List < SecurityDiffInfo >   leftSecurities ,  List < SecurityDiffInfo >   rightSecurities )   {  return  ListDiff . diff ( new   ChangedList . SimpleChangedList <> ( leftSecurities ,  rightSecurities ) )  . isUnchanged () ;  }
public   static   IOType   getByConfigClass ( Class < ?   extends  IOConfig >   configClass ) {  for ( var   type   :  IOType . values () ) {  if ( type . getConfigClass () . isAssignableFrom ( configClass ) ) {  return  type ;  }  }  return  null ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"idTokenEncryptionAlgorithm"""" )  @ Valid  public   MetadataProperty   getIdTokenEncryptionAlgorithm ()   {  return  idTokenEncryptionAlgorithm ;  }
public   final   Compiler   withOptions ( Object ...   options )   {  return  withOptions ( ImmutableList . copyOf ( options ) ) ;  }
@ Override  public   FakeConfiguration   addMapping ( final   InputStream   stream )   {  return  this ;  }
@ Test  void   corruptFileShouldThrowException ()   {  Executable   testMethod   = ()  ->   SortPomImplUtil . create () . testFiles ( """"/Corrupt_file.xml"""" ,  """"/Corrupt_file.xml"""" ) ;  var   thrown   =  assertThrows ( FailureException . class ,  testMethod ) ;  assertThat ( """"Unexpected message"""" , thrown . getMessage () , allOf ( endsWith ( """"content: <project><artifactId>sortpom</artifactId>"""" ) , startsWith ( """"Could not sort """" ) ) ) ;  }
public   void   showHint ( @ StringRes   int   res ,  boolean   lengthShort )   {  showHint ( App . getInstance () . getString ( res ) ,  lengthShort ,  null ,  null ) ;  }
@ Before  public   void   setUp ()   throws  Exception   {  annot1   =   new   EntityAnnotation ( null ,  - 5 ,  6 ) ;  annot2   =   new   EntityAnnotation ( null ,  1 ,  6 ) ;  annot3   =   new   EntityAnnotation ( null ,  7 ,  20 ) ;  annot4   =   new   EntityAnnotation ( null ,  0 ,  21 ) ;  annot5   =   new   EntityAnnotation ( null ,  2 ,  3 ) ;  }
@ Override  protected   Animator   onCreateEnterAnimation ()   {  ArrayList < Animator >   animators   =  new   ArrayList <> () ;  animators . add ( createFadeInAnimator ( mBackgroundView ) ) ;  mContentView . setImageResource ( CONTENT_IMAGES [ 0 ] ) ;  mContentAnimator   =   createFadeInAnimator ( mContentView ) ;  animators . add ( mContentAnimator ) ;  AnimatorSet   set   =  new   AnimatorSet () ;  set . playTogether ( animators ) ;  mBackgroundView . setBackground ( new   ColorDrawable ( mColors . get ( 0 ) ) ) ;  return  set ;  }
@ Test  void   writeToFile_filenameIsNull_doesNothing ()   {  assertDoesNotThrow ( ()  ->   FileUtils . writeToFile ( new   ConsoleRender () ,  changedOpenApi ,  null ) ) ;  }
@ Override  public   Set < String >   read ( @ NotNull   DataInput   in )   throws  IOException   {  final   int   size   =  in . readInt () ;  if  ( size   <   0 )   {  
@ Override   public   DoubleIndexer   put ( long   i ,  long   j ,  double []   d ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  putRaw ( index ( i ,  j )   +   n ,  d [ offset   +   n ] ) ;  }  return  this ;  }
@ Override  public   long   index ( long   i )   {  return  ( selectionOffsets [ 0 ]   +   selectionStrides [ 0 ]   *   ( i   /   selectionBlocks [ 0 ] )   +   ( i   %   selectionBlocks [ 0 ] ) )   *   strides [ 0 ] ;  }
@ NonNull  public   static   String   getMimeType ( @ NonNull   String   activity )   {  return  MIME_TYPE_PREFIX   +   activity ;  }
private   void   registerAndDeployApplication ()   throws  Exception   {  applicationId   =   addApplication () . getId () ;  OpenIDConnectConfiguration   oidcConfig   =  getOIDCInboundDetailsOfApplication ( applicationId ) ;  consumerKey   =   oidcConfig . getClientId () ;  consumerSecret   =   oidcConfig . getClientSecret () ;  }
@ Override  public   void   handleServiceRequest ( IGmsCallbacks   callback ,  GetServiceRequest   request ,  GmsService   service )   throws  RemoteException   {  PackageUtils . getAndCheckCallingPackage ( this ,  request . packageName ) ;  callback . onPostInitComplete ( 0 ,  new   WearableServiceImpl ( this ,  wearable ,  request . packageName ) ,  null ) ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"op"""" )  @ Valid  public   RoleItemAddGroupobj . OpEnum   getOp ()   {  return  op ;  }
@ Test ( dependsOnMethods   =   """"testGetRoleWithInvalidId"""" )  public   void   testDeleteRoleWithId ()   throws  Exception   {  HttpResponse   response   =  sendDeleteUserRequest ( roleId1 ) ;  EntityUtils . consume ( response . getEntity () ) ;  assertEquals ( response . getStatusLine () . getStatusCode () ,  204 ,  """"Role has not been deleted successfully."""" ) ;  HttpResponse   response2   =  sendGetRoleRequest ( roleId1 ) ;  EntityUtils . consume ( response2 . getEntity () ) ;  assertEquals ( response2 . getStatusLine () . getStatusCode () ,  404 ,  """"Role has not been deleted successfully."""" ) ;  }
@ Test  void   Should_NotThrow_When_SpecIsCompatible ()   {  final   OpenApiDiffMojo   mojo   =  new   OpenApiDiffMojo () ;  mojo . oldSpec   =   oldSpecFile . getAbsolutePath () ;  mojo . newSpec   =   newSpecFile . getAbsolutePath () ;  mojo . failOnIncompatible   =   true ;  assertDoesNotThrow ( mojo :: execute ) ;  }
@ Hide  public   static   Attachment   fromString ( String   attachment )   throws  UnsupportedAttachmentException   {  for  ( Attachment   value   :  values () )   {  if  ( value . value . equals ( attachment ) )   return  value ;  }  throw  new   UnsupportedAttachmentException ( """"Attachment """"   +   attachment   +   """" not supported"""" ) ;  }
public   final   Application   getApplication ()   {  return  containerService . getApplication () ;  }
@ Override  protected   void   processSetForegroundColorExt ( int   paletteIndex )   {  setForegroundColor ( getPaletteColor ( paletteIndex ) ) ;  }
public   record   Category ( MutableComponent   title ,  List < ConfigEntry < ? > >   entries )   {  }
public   static   PutDataRequest   createWithAutoAppendedId ( String   pathPrefix )   {  return  new   PutDataRequest ( null ) ;  }
public   static   Intent   createIntent ( Context   context ,  String   initialDirectory ,  @ Nullable   String   rootDirectory )   {  Intent   intent   =  new   Intent ( context ,  FolderPickerActivity . class ) ;  if  ( ! TextUtils . isEmpty ( initialDirectory ) )   {  intent . putExtra ( EXTRA_INITIAL_DIRECTORY ,  initialDirectory ) ;  }  if  ( ! TextUtils . isEmpty ( rootDirectory ) )   {  intent . putExtra ( EXTRA_ROOT_DIRECTORY ,  rootDirectory ) ;  }  return  intent ;  }
@ Test  public   void   parsesAs_actualFileFailsToParse ()   {  try  {  assertAbout ( javaSource () )  . that ( JavaFileObjects . forResource ( """"test/HelloWorld-broken.java"""" ) )  . parsesAs ( HELLO_WORLD_RESOURCE ) ;  fail () ;  }   catch  ( IllegalStateException   expected )   {  assertThat ( expected . getMessage () ) . startsWith ( """"Error while parsing *actual* source:\n"""" ) ;  }  }
public   static   void   openUri ( Context   context ,  String   uri )   {  if  ( uri . startsWith ( """"intent:
@ ApiModelProperty ( example   =   """"https:
@ Override  public   int   readRegister ( int   register )   {  return  this . i2c . readRegister ( register ) ;  }
public   Builder   setRequireResidentKey ( @ Nullable   Boolean   requireResidentKey )   {  this . requireResidentKey   =   requireResidentKey ;  return  this ;  }
@ Test  public   void   testCoverBoundingBoxWithMaxHashesIsOne ()   {  Coverage   coverage   =  coverBoundingBoxMaxHashes ( SCHENECTADY_LAT , SCHENECTADY_LON ,  HARTFORD_LAT ,  HARTFORD_LON ,  1 ) ;  assertEquals ( 1 ,  coverage . getHashes () . size () ) ;  assertEquals ( 2 ,  coverage . getHashLength () ) ;  }
static   protected   Relationship   addRelationship ( String   parentIri ,  String   childIri , RelationshipType   type )   {  Node   parent   =  createNode ( parentIri ) ;  Node   child   =  createNode ( childIri ) ;  return  child . createRelationshipTo ( parent ,  type ) ;  }
@ Test  public   void   containedItemSchemaFailure ()   {  TestSupport . failureOf ( ArraySchema . builder ()  . containsItemSchema ( NullSchema . INSTANCE ) )  . expectedKeyword ( """"contains"""" )  . expectedMessageFragment ( """"expected at least one array item to match 'contains' schema"""" )  . input ( ARRAYS . get ( """"onlyOneItem"""" ) )  . expect () ;  }
public   boolean   validateSAMLResponse ( HttpResponse   response ,  String   userName )   throws  IOException   {  BufferedReader   bufferedReader   =  new   BufferedReader ( new   InputStreamReader ( response . getEntity () . getContent () ) ) ;  StringBuffer   buffer   =  new   StringBuffer () ;  String   line   =  """""""" ;  while  ( ( line   =   bufferedReader . readLine () )   !=   null )   {  buffer . append ( line ) ;  }  bufferedReader . close () ;  return  buffer . toString () . contains ( """"You are logged in as """" ) ;  }
private   void   addFile ( String   relativePath ,  String   checksum )   {  this . fileChecksums . put ( relativePath ,  checksum ) ;  }
@ Override  public   Uri   insert ( Uri   uri ,  ContentValues   values )   {  return  null ;  }
public   static   String   padEnd ( final   String   string ,  final   Integer   length ,  final   String   chars )   {  return  createPadDir ( true ) . apply ( string ,  length ,  chars ) ;  }
@ Override  public   ExecutableValidator   forExecutables ()   {  return  new   FakeExecutableValidator () ;  }
public   void   addHeaderEntry (  final   Tag   tag ,  final   char   value )   {  format . getHeader () . createEntry ( tag ,  new   byte []   { ( byte )   value } ) ;  }
private   void   resetISConfiguration ()   throws  Exception {  log . info ( """"Replacing default configurations"""" ) ;  ServerConfigurationManager   serverConfigurationManager   =  new   ServerConfigurationManager ( isServer ) ;  serverConfigurationManager . restoreToLastConfiguration () ;  }
public   void   addItem ( ItemStack   itemStack )   {  boolean   canBeAdded   =  true ;  if  ( hasMaxWeight () )   {  double   totalWeight   =  itemStack . getItem () . getWeight ()   *   itemStack . getAmount () ;  if  ( totalWeight   >   maxWeight )   {  canBeAdded   =   false ;  }  }  if  ( canBeAdded )   {  if  ( contains ( itemStack ) )   {  ItemStack   sameType   =  this . getSameType ( itemStack ) ;  this . itemStacks . remove ( sameType ) ;  this . itemStacks . add ( new   ItemStack ( sameType . getAmount () + 1 ,  sameType . getItem () ) ) ;  }   else  {  this . itemStacks . add ( itemStack ) ;  }  }  }
@ Override  public   String   toString ()   {  if ( status )   {  return  """"[true]"""" ;  }   else  {  return  """"[false, """"   +   causes . get ( 0 )   +   """"]"""" ;  }  }
public   boolean   isReadOnlyUserStore ()   throws  RemoteException ,  UserProfileMgtServiceUserProfileExceptionException   {  return  userProfileMgtServiceStub . isReadOnlyUserStore () ;  }
public   static   boolean   isTypeFilterMap ( final   String   singleTypeFilter )   {  return  singleTypeFilter . matches ( """"^\\[[1-9]*:]"""" ) ;  }
public   String   getChatName ()   {  if  ( chat   !=   null )   {  return  chat . getName () ;  }  return  """""""" ;  }
private   void   addRootOrgBrandingPreference ()   throws  IOException ,  JSONException   {  String   body   =  readResource ( ADD_ROOT_ORG_BRANDING_RESOURCE_FILE ) ;  Response   response   =  getResponseOfPost ( BRANDING_PREFERENCE_API_BASE_PATH ,  body ) ;  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_CREATED )  . header ( HttpHeaders . LOCATION ,  notNullValue () ) ;  }
public   Group   getEditorElement ()   {  if  ( drawnEditors . isEmpty () )   {  redraw () ;  }  return  drawnEditors . values () . iterator () . next () ;  }
private   static   List < Integer >   streamToList ( IntStream   stream )   {  return  stream . boxed () . toList () ;  }
private   Uri   getImageUri ( ServerFile   file )   {  if  ( parentShare   ==   null )  return  mServerClient . getFileUri ( file . getParentShare () ,  file ) ;  else  return  mServerClient . getFileUri ( parentShare ,  file ) ;  }
@ DataProvider ( name   =   """"dataProviderForFilterOrganizations"""" )  public   Object [] []   dataProviderForFilterOrganizations ()   {  return  new   Object [] []   { { """"name co G"""" ,  false ,  false } , { """"attributes.Country co S"""" ,  true ,  false } , { """"attributes.Country eq Sri Lanka and name co Greater"""" ,  true ,  false } , { """"attributes.Country eq Sri Lanka and attributes.Language eq Sinhala"""" ,  true ,  false } , { """"attributes.Country eq USA"""" ,  false ,  true } } ;  }
@ Override  public   void   onGetCloudSyncOptInOutDoneResponse ( GetCloudSyncOptInOutDoneResponse   response )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: onGetCloudSyncOptInOutDoneResponse"""" ) ;  }
 <argument pos:start=""""""""212:94"""""""" pos:end=""""""""212:111""""""""><expr pos:start=""""""""212:94"""""""" pos:end=""""""""212:111""""""""><call pos:start=""""""""212:94"""""""" pos:end=""""""""212:111""""""""><name pos:start=""""""""212:94"""""""" pos:end=""""""""212:109""""""""><name pos:start=""""""""212:94"""""""" pos:end=""""""""212:98"""""""">ghost</name><operator pos:start=""""""""212:99"""""""" pos:end=""""""""212:99"""""""">.</operator><name pos:start=""""""""212:100"""""""" pos:end=""""""""212:109"""""""">getDirmode</name></name><argument_list pos:start=""""""""212:110"""""""" pos:end=""""""""212:111"""""""">()</argument_list></call></expr></argument>
@ Override   public   long   index ( long ...   indices )   {  long   index   =  0 ;  for  ( int   i   =  0 ;   i   <   indices . length   &&   i   <   strides . length ;   i ++ )   {  index   +=   indices [ i ]   *   strides [ i ] ;  }  return  index ;  }
@ Override  public   DigitalState   shutdownState () {  return  this . shutdownState ;  }
private   static   boolean   isAnyCpu ( final   int   cpuId )   {  return  cpuId   ==   AffinityLock . ANY_CPU ;  }
private   static   String   valueFromBoolVal ( String   value ,  Boolean   boolVal ,  boolean   truePresent ,  boolean   falsePresent )   {  if  ( boolVal   !=   null )   {  if  ( boolVal   &&   truePresent )   {  return  """"1"""" ;  }   else if  ( ! boolVal   &&   falsePresent )   {  return  """"0"""" ;  }   else  {  return  null ;  }  }   else  {  return  value ;  }  }
public   SMSSender   sender ( String   sender )   {  this . sender   =   sender ;  return  this ;  }
public   void   setPyramidLevelMin ( int   pyramidLevelMin )   {  this . pyramidLevelMin   =   pyramidLevelMin ;  }
public   void   removeAdapter ( VideoTrack   videoTrack )   {  String   trackId   =  videoTrack . id () ;  TrackMuteUnmuteImpl   onMuteImpl   =  muteImplMap . remove ( trackId ) ;  if  ( onMuteImpl   ==   null )   {  Log . w ( TAG ,  """"removeAdapter - no adapter for """"   +   trackId ) ;  return;  }  videoTrack . removeSink ( onMuteImpl ) ;  onMuteImpl . dispose () ;  Log . d ( TAG ,  """"Deleted adapter for """"   +   trackId ) ;  }
@ Test  public   void   testInvalidRequest ()   throws  Exception   {  Exception   ex   =  assertThrows ( InvalidRequestException . class , ()  ->   createInsightsMeError ( 400 , """"application/json"""" , """"{\""""code\"""":\""""IP_ADDRESS_INVALID\"""",\""""error\"""":\""""IP invalid\""""}"""" ) ) ;  assertEquals ( """"IP invalid"""" ,  ex . getMessage () ) ;  }
public   static   void   setActiveEventSources ( Context   context ,  List < OrderedEventSource >   sources )   {  SharedPreferences   prefs   =  PreferenceManager . getDefaultSharedPreferences ( context ) ;  SharedPreferences . Editor   editor   =  prefs . edit () ;  editor . putString ( PREF_ACTIVE_SOURCES ,  OrderedEventSource . toJsonString ( sources ) ) ;  editor . apply () ;  }
@ Override  public   Chain < T >   tap ( final   Consumer < T >   func )   {  Underscore . tap ( value () ,  func ) ;  return  new   Chain <> ( value () ) ;  }
@ Test  public   void   findingClosestByDecreaseWrap ()   {  assertEquals (  - 4 ,  Utils . getShortestScrollOption ( 0 ,  6 ,  9 ,  true ) ) ;  }
@ Override  public   void   onLocationChanged ( Location   location )   throws  RemoteException   {  executor . execute ( ()  ->   listener . onLocationChanged ( location ) ) ;  }
@ Test  void   testGetCpuRevision_EmptyFile ()   throws  IOException   {  try  ( FileWriter   writer   =  new   FileWriter ( tempCpuInfoFile ) )   {  
public   SOURCE_TYPE   process ( EVENT_TYPE   event ) {  bindings . forEach ( binding -> {  try  {  delegate . process ( binding ,  event ) ;  }  catch  ( Exception   e ) {  logger . error ( e . getMessage () ,  e ) ;  }  } ) ;  return  this . source ;  }
public   String   title ( String   title ,  char   ch )   {  String   little   =  StringUtils . repeat ( ch ,  2 ) ;  return  String . format ( """"%s%s%s%s%n%s"""" , separator ( ch ) ,  little ,  StringUtils . center ( title ,  LINE_LENGTH   -   4 ) ,  little ,  separator ( ch ) ) ;  }
@ Override  public   PendingResult < Cast . ApplicationConnectionResult >   joinApplication ( GoogleApiClient   client ,  String   applicationId ,  String   sessionId )   {  return  null ;  }
private   String   getDateString ( int   daysToSubtract ) {  if ( state . getMode ()   ==   Mode . date  ) {  return  getDateModeString ( daysToSubtract ) ;  }  return  dayWheel . getValue () ;  }
public   final   void   setConstraints ( final   Map < ConstraintTypeEnum ,  String >   constraints )   {  this . constraints   =   constraints ;  }
@ Test  void   validatesOutputForNonNull ()   {  Assertions . assertThrows ( ConstraintViolationException . class , ()  ->   new   JSR303Test . Foo () . nullValue () ) ;  }
public   static   String []   getDataDicHeaders ( final   PMML   pmml )   {  DataDictionary   dictionary   =  pmml . getDataDictionary () ;  List < DataField >   fields   =  dictionary . getDataFields () ;  int   len   =  fields . size () ;  String []   headers   =  new   String [ len ] ;  for ( int   i   =  0 ;   i   <   len ;   i ++ )   {  headers [ i ]   =   fields . get ( i ) . getName () . getValue () ;  }  return  headers ;  }
@ Test  public   void   testJavaCompare ()   {  JexlEngine   jexl   =  new   JexlEngine () ;  String   jexlExp   =  """"time_window == 'DEV' and live_xm_send_amount <= 10000.0"""" ;  Expression   e   =  jexl . createExpression ( jexlExp ) ;  JexlContext   jc   =  new   MapContext () ;  jc . set ( """"time_window"""" ,  """"DEV"""" ) ;  jc . set ( """"live_xm_send_amount"""" ,  """"50"""" ) ;  Assert . assertEquals ( Boolean . TRUE ,  e . evaluate ( jc ) ) ;  }
public   synchronized   void   noteAppUnregistered ( String   packageName ,  String   signature )   {  SQLiteDatabase   db   =  getWritableDatabase () ;  db . delete ( TABLE_REGISTRATIONS ,  FIELD_PACKAGE_NAME   +   """" LIKE ? AND """"   +   FIELD_SIGNATURE   +   """" LIKE ?"""" ,  new   String [] { packageName ,  signature } ) ;  }
public   boolean   isPrestoImpersonation ( String   datasource )   {  return  Boolean . parseBoolean ( environment . getProperty ( """"presto.impersonation.""""   +   datasource ) ) ;  }
@ Override  public   void   onDragDown ( float   alpha )   {  hideKeyboadAndPrefsButton () ;  searchInput . setBackgroundColor ( 0 ) ;  setAlpha ( searchInput ,  alpha ) ;  }
private   void   startFileActivity ( ServerShare   share ,  List < ServerFile >   files ,  ServerFile   file )   {  Intent   intent   =  Intents . Builder . with ( getActivity () ) . buildServerFileIntent ( share ,  files ,  file ) ;  startActivity ( intent ) ;  }
@ Override  public   Builder   queriesPerSecond ( int   maxQps )   {  throw  new   RuntimeException ( """"queriesPerSecond not implemented for Google App Engine"""" ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  AuthenticationRequest   AuthenticationRequest   =  ( AuthenticationRequest )   o ;  return  Objects . equals ( this . username ,  AuthenticationRequest . username )   &&  Objects . equals ( this . password ,  AuthenticationRequest . password ) ;  }
@ Test  void   sumOfInt ()   {    String []   words   =  { """"Gallinule"""" ,  """"Escambio"""" ,  """"Aciform"""" ,  """"Entortilation"""" ,  """"Extensibility"""" } ;  int   sum   = ( Integer )  U . chain ( asList ( words ) )  . filter ( item  ->   item . startsWith ( """"E"""" ) )  . map ( String :: length )  . sum ()  . item () ;  assertEquals ( 34 ,  sum ) ;  }
@ SuppressWarnings ( """"lgtm[jenkins/csrf]"""" )  public   ListBoxModel   doFillCategoryItems ( @ AncestorInPath   Item   item )   {  return  ThrottleJobProperty . fetchDescriptor () . doFillCategoryItems ( item ) ;  }
public   static   Collection < Integer [] >   data ()   {  List < Integer [] >   ret   =  new   ArrayList < Integer [] > ( NUMBER_OF_TESTS ) ;  for  ( int   i   =  1 ;   i   <=   NUMBER_OF_TESTS   +   1 ;   i ++ )   {  ret . add ( new   Integer [] { ( int )   Math . round ( Math . pow ( 2 ,  i ) ) } ) ;  }  return  ret ;  }
@ Test  public   void   dateTimeWithTwoDigitsInSecFracSuccess ()   {  assertSuccess ( """"2015-02-28T11:00:00.12Z"""" ,  new   DateTimeFormatValidator () ) ;  }
@ Override  public   void   appendTooltip ( ITooltip   tooltip ,  BlockAccessor   accessor ,  IPluginConfig   config )   {  BlockState   state   =  accessor . getBlockState () ;  int   level   =  state . getValue ( BeehiveBlock . HONEY_LEVEL ) ;   
public   static   BiMap < Integer ,  String >   commonStrings ( int   version )   throws  IOException   {  
@ Test ( dependsOnMethods   =   """"testAddUser"""" )  public   void   testAddRemoveRolesOfUser ()   throws  Exception   {  super . testAddRemoveRolesOfUser () ;  }
public   static   Builder   continuation ( VarSpec ...   varSpec )  {  return  Builder . create ( Operator . CONTINUATION ,  varSpec ) ;  }
public   void   encryptFiles ( Context   context ,  File ...   filesList )  {  Intent   intent   =  new   Intent ( OpenPgpApi . ACTION_ENCRYPT ) ;  intent . putExtra ( OpenPgpApi . EXTRA_USER_IDS ,  userIds ) ;  handleFiles ( context ,  intent ,  BaseActivity . OPENPGP_REQUEST_ENCRYPT ,  filesList ) ;  }
@ Test ( dependsOnMethods   =   """"keywordExists"""" )  public   final   void   OkThenKoWorks ()  throws  ProcessingException  {  processor   =   spy ( new   DummyProcessor ( WantedState . OK ,  WantedState . KO ,  ptr1 , ptr2 ) ) ;  validator . validate ( processor ,  report ,  BUNDLE ,  data ) ;  verify ( processor ,  times ( 2 ) ) . process ( anyReport () ,  any ( FullData . class ) ) ;  checkOkKo ( report ) ;  }
@ Before  public   void   setup ()   throws  IOException   {  path   =   folder . newFolder () . getAbsolutePath () ;  maker   =   DBMaker . newMemoryDB () . make () ;  }
public   AuthenticationSelector   getAuthenticationSelector ()   {  return  this . authenticationSelector ;  }
@ Override  public   void   setPlayerInfoInteger ( String   world ,  String   player ,  String   node ,  int   value )   {  worldCheck ( world ) ;  privs . getUserNode ( player ) . set ( node ,  value ) ;  }
@ Override  public   boolean   process ( String   option ,  List < String >   arguments )   {  RelationDirection   d ;  RelationType   rt ;  try  {  d   =   RelationDirection . valueOf ( arguments . get ( 1 ) . toUpperCase () ) ;  if  ( """"all"""" . equalsIgnoreCase ( arguments . get ( 0 ) ) )   {  contextRelationPattern   =   new   RelationPattern ( d ) ;  }   else  {  rt   =   RelationType . valueOf ( arguments . get ( 0 ) . toUpperCase () ) ;  contextRelationPattern . addRelation ( rt ,  d ) ;  }  }   catch  ( IllegalArgumentException   e )   {  }  return  true ;  }
public   void   setComparison (  ComparisonEnum   comparisonEnum )   {  String   comparisonValue   =  comparisonEnum . getValue () ;  if  ( """"equal"""" . equals ( comparisonValue ) )   {  this . comparison   =   EQUAL ;  }   else if  ( """"greater"""" . equals ( comparisonValue ) )   {  this . comparison   =   GREATER ;  }   else if  ( """"greater|equal"""" . equals ( comparisonValue ) )   {  this . comparison   =   GREATER   |   EQUAL ;  }   else if  ( """"less"""" . equals ( comparisonValue ) )   {  this . comparison   =   LESS ;  }   else  {   
@ Test  public   void   compilesWithoutError_noNote ()   {  expectFailure  . whenTesting ()  . about ( javaSource () )  . that ( HELLO_WORLD )  . processedWith ( new   DiagnosticMessage . Processor ( Diagnostic . Kind . NOTE ) )  . compilesWithoutError ()  . withNoteContaining ( """"what is it?"""" ) ;  AssertionError   expected   =  expectFailure . getFailure () ;  assertThat ( expected . getMessage () )  . contains ( """"Expected a note containing \""""what is it?\"""", but only found:\n"""" ) ;  
public   static   FlowControl   parse ( String   parity )   {  if ( parity . equalsIgnoreCase ( """"0"""" ) )   return  FlowControl . NONE ;  if ( parity . equalsIgnoreCase ( """"1"""" ) )   return  FlowControl . HARDWARE ;  if ( parity . equalsIgnoreCase ( """"2"""" ) )   return  FlowControl . SOFTWARE ;  if ( parity . toLowerCase () . startsWith ( """"n"""" ) )   return  FlowControl . NONE ;  if ( parity . toLowerCase () . startsWith ( """"h"""" ) )   return  FlowControl . HARDWARE ;  if ( parity . toLowerCase () . startsWith ( """"s"""" ) )   return  FlowControl . SOFTWARE ;  return  FlowControl . NONE ;  }
protected   void   processEraseLine ( int   eraseOption )   throws  IOException   {  }
@ Test  public   void   thenSubschemaFailureElseSubschemaFailure ()   {  ConditionalSchema . builder () . thenSchema ( PATTERN_STRING_SCHEMA ) . elseSchema ( MAX_LENGTH_STRING_SCHEMA ) . build () . validate ( """"barbar"""" ) ;  }
public   static   float   points ( float   px )  {  return  px   *   72.0f   /   dpi ;  }
public   void   addObsoletesMore   ( final   CharSequence   name ,  final   CharSequence   version )   {  int   flag   =  GREATER   |   EQUAL ;  addObsoletes ( name ,  version ,  flag ) ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"accessTokenType"""" )  @ Valid  public   MetadataProperty   getAccessTokenType ()   {  return  accessTokenType ;  }
@ Override  protected   void   runFile ( Path   file )   {  if  ( Files . isDirectory ( file )   &&   recursive )   {  try  {  Files . walk ( file ,  maxDepth ,  FOLLOW_LINKS )  . filter ( this :: fileFilter )  . forEach ( this :: runFileRecursive ) ;  }   catch  ( IOException   ex )   {  L . log ( Level . WARNING ,  """"Can't walk directory """"   +   file ,  ex ) ;  }  }   else  {  runFileRecursive ( file ) ;  }  }
@ NonNull  @ Override  public   Task < Void >   removeGeofences ( List < String >   geofenceRequestIds )   {  return  null ;  }
public   List < OrderedEventSource >   getActiveEventSources ()   {  return  activeEventSources . isEmpty () ?   EventProviderType . getAvailableSources ()  :  activeEventSources ;  }
@ Override  public   void   setStoreFuncUDFContextSignature ( String   signature )   {  shifuStorage . setStoreFuncUDFContextSignature ( signature ) ;  }
public   static   Object   fromXmlWithoutAttributes ( final   String   xml )   {  return  fromXmlWithElementMapper ( xml , ( object ,   namespaces )   ->  String . valueOf ( object ) . startsWith ( """"-"""" )  ?   null   :  String . valueOf ( object ) ) ;  }
@ Test  public   void   testMaybeWithFn ()   {  assertEquals ( Integer . valueOf ( 42 ) ,  subject () . maybeMapping ( """"a"""" ,  obj  ->   42 ) . get () ) ;  }
public   boolean   addResidence ( String   name ,  Location   loc1 ,  Location   loc2 )   {  return  this . addResidence ( name ,  """"Server Land"""" ,  loc1 ,  loc2 ) ;  }
@ Override  public   BlockEntity   getBlockEntity ()   {  return  blockEntity   ==   null  ?   null   :  blockEntity . get () ;  }
@ Override  public   < T   extends  IO >   T   get ( String   id )   throws  IOInvalidIDException ,  IONotFoundException   {  return  registry . get ( id ) ;  }
@ Override  public   Duration   read ( JsonReader   reader )   throws  IOException   {  if  ( reader . peek ()   ==   JsonToken . NULL )   {  reader . nextNull () ;  return  null ;  }  Duration   duration   =  new   Duration () ;  reader . beginObject () ;  while  ( reader . hasNext () )   {  String   name   =  reader . nextName () ;  if  ( name . equals ( """"text"""" ) )   {  duration . humanReadable   =   reader . nextString () ;  }   else if  ( name . equals ( """"value"""" ) )   {  duration . inSeconds   =   reader . nextLong () ;  }  }  reader . endObject () ;  return  duration ;  }
@ Override  public   String   toString ()   {  return  """"DatabaseTable [database=""""   +   database   +   """", table=""""   +   table   +   """"]"""" ;  }
@ DataBoundSetter  public   void   setFailedNewCritical ( Integer   failedNewCritical )   {  this . failedNewCritical   =   failedNewCritical ;  }
@ Override  public   void   usePickedResult ( Block   block )   {  Objects . requireNonNull ( block ) ;  pickBlocks . add ( block ) ;  }
 <argument pos:start=""""""""286:56"""""""" pos:end=""""""""286:58""""""""><expr pos:start=""""""""286:56"""""""" pos:end=""""""""286:58""""""""><literal type=""""""""string"""""""" pos:start=""""""""286:56"""""""" pos:end=""""""""286:58"""""""">""""""""d""""""""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
@ Test  @ WithoutJenkins  public   void   createPermissionEntry ()   {  assertThat ( PermissionEntry . user ( """"foo"""" ) ,  equalTo ( permissionEntry ( """"USER:foo"""" ) ) ) ;  assertThat ( PermissionEntry . group ( """"foo"""" ) ,  equalTo ( permissionEntry ( """"GROUP:foo"""" ) ) ) ;  assertThat ( permissionEntry ( """""""" ) ,  nullValue () ) ;  assertThat ( permissionEntry ( """":-)"""" ) ,  nullValue () ) ;  assertThat ( permissionEntry ( """"Re:"""" ) ,  nullValue () ) ;  assertThat ( permissionEntry ( """"GROUP:"""" ) ,  nullValue () ) ;  assertThat ( permissionEntry ( """"USER:"""" ) ,  nullValue () ) ;  }
@ ReactMethod  public   void   closeTechnology ( Callback   callback )   {  synchronized ( this )   {  if  ( techRequest   !=   null )   {  techRequest . close () ;  techRequest   =   null ;  }  callback . invoke () ;  }  }
ByteBuffer   getBuffer ()   {  if  ( buffer   ==   null )   {  buffer   =   ByteBuffer . wrap ( array ) . order ( ByteOrder . nativeOrder () ) ;  }  return  buffer ;  }
private   static   void   spawnAmmo ( ServerPlayer   player ,  ItemStack   stack )  {  player . getInventory () . add ( stack ) ;  if ( stack . getCount ()   >   0 )  {  player . level . addFreshEntity ( new   ItemEntity ( player . level ,  player . getX () ,  player . getY () ,  player . getZ () ,  stack . copy () ) ) ;  }  }
@ Override  @ Test ( dependsOnMethods   =   { """"testCreateServiceProviderInPrimaryIS"""" } ,  groups   =   """"wso2.is"""" ,  description   =   """"test testCreateServiceProviderInSecondaryIS"""" )  public   void   testCreateServiceProviderInSecondaryIS ()   throws  Exception   {  super . testCreateServiceProviderInSecondaryIS () ;  }
@ BeforeClass  public   void   setUp ()   throws  IOException   {  modelConfig   =   ModelConfig . createInitModelConfig ( """"unittest"""" ,  ALGORITHM . NN ,  """"a model config for unit-test"""" ,  false ) ;  modelConfig . getBasic () . setName ( """"TestMode"""" ) ;  modelConfig . getBasic () . setAuthor ( """"Author"""" ) ;  }
public   Boolean   getNewMinimumExclusiveValue ()   {  return  newMinimumExclusiveValue ;  }
public   static   void   center ( final   Component   component )   {  final   GraphicsDevice   gd   =  GraphicsEnvironment . getLocalGraphicsEnvironment () . getDefaultScreenDevice () ;  final   int   screenWidth   =  gd . getDisplayMode () . getWidth () ;  final   int   screenHeight   =  gd . getDisplayMode () . getHeight () ;  final   Dimension   paneSize   =  component . getSize () ;  component . setLocation ( ( screenWidth   -   paneSize . width )   /   2 ,  ( int )   ( ( screenHeight   -   paneSize . height )   *   0.45 ) ) ;  }
public   static   void   writeLong ( ByteBuffer   buf ,  int   i ,  long   v )   {  assert  buf . order ()   ==   Utils . NATIVE_BYTE_ORDER ;  buf . putLong ( i ,  v ) ;  }
private   Predicate < FieldValueMapping >   compare ( final   FieldValueMapping   fieldValue2 )   {  return  fieldValue  ->   fieldValue . getFieldName () . equalsIgnoreCase ( fieldValue2 . getFieldName () )  &&   fieldValue . getFieldType () . equalsIgnoreCase ( fieldValue2 . getFieldType () )  &&   fieldValue . getRequired () . equals ( fieldValue2 . getRequired () ) ;  }
@ Override  public   void   validate ()   {  if ( StringUtil . isNullOrEmpty ( this . id ) ) {  throw  new   ConfigMissingRequiredKeyException ( ID_KEY ) ;  }  }
public   void   setRevokeTokensWhenIDPSessionTerminated ( Boolean   revokeTokensWhenIDPSessionTerminated )   {  this . revokeTokensWhenIDPSessionTerminated   =   revokeTokensWhenIDPSessionTerminated ;  }
public   void   setTrueLyric ( String   trueLyric )   {  this . lyric . setVisibleAlias ( trueLyric ) ;  }
@ DataProvider ( name   =   """"organizationDiscoveryPaginationValidationDataProvider"""" )  public   Object [] []   organizationDiscoveryPaginationValidationProvider ()   {  return  new   Object [] []   { { 1 } ,  { 2 } ,  { 5 } ,  { 6 } ,  { 10 } ,  { 17 } } ;  }
boolean   isEmpty ()   {  return  this . portamento . isEmpty ()   &&   ! this . vibrato . isPresent () ;  }
@ POST  public   Object   doPOST ()   {  LOG . info ( """"Handling POST Request"""" ) ;  return  getResponse ( Response . Status . METHOD_NOT_ALLOWED ) ;  }
private   static   XmlStringBuilder   checkStandalone ( String   encoding ,  XmlStringBuilder . Step   identStep ,  final   Map   localMap )   {  final   XmlStringBuilder   builder ;  if  ( localMap . containsKey ( STANDALONE ) )   {  builder   =  new   XmlStringBuilderWithoutRoot ( identStep , encoding , """" standalone=\""""""""  +   ( YES . equals ( localMap . get ( STANDALONE ) )  ?   YES   :  """"no"""" )  +   """"\"""""""" ) ;  localMap . remove ( STANDALONE ) ;  }   else  {  builder   =   new   XmlStringBuilderWithoutRoot ( identStep ,  encoding ,  """""""" ) ;  }  return  builder ;  }
public   void   tearDown ()   throws  Exception   {  myCodeInsightFixture . tearDown () ;  }
@ Override  public   boolean   addLyric ( LyricConfigData   lyricData )   {  boolean   wasSuccessful   =  voicebank . get () . addLyricData ( lyricData ) ;  onVoicebankChange () ;  return  wasSuccessful ;  }
@ Override  public   Optional < String >   validate ( final   String   subject )   {  return  DomainValidator . getInstance ( true ) . isValid ( subject )   &&   ! subject . contains ( """"_"""" )  ?  Optional . empty ()   : Optional . of ( String . format ( """"[%s] is not a valid hostname"""" ,  subject ) ) ;  }
default   char []   readRegisterCharArray ( int   register ,  Charset   charset ,  int   numberOfBytes )   throws  IOReadException   {  return  readRegisterCharArray ( register ,  charset ,  0 ,  numberOfBytes ) ;  }
@ Test  public   void   getReachableNodes_traverseAllRels ()   {  Graph   graph   =  graphApi . getReachableNodes ( c ,  Lists . newArrayList () ,  Sets . newHashSet () ) ;  assertThat ( size ( graph . getVertices () ) ,  is ( 1 ) ) ;  assertThat ( size ( graph . getEdges () ) ,  is ( 0 ) ) ;  }
public   String   getPointerToViolation ()   {  if  ( pointerToViolation   ==   null )   {  return  null ;  }  return  pointerToViolation . toString () ;  }
protected   void   init ( TestUserMode   userMode )   throws  Exception   {  super . init ( userMode ) ;  actionsRestClient   =   new   ActionsRestClient ( serverURL ,  tenantInfo ) ;  setSystemproperties () ;  }
public   AccessTokenConfiguration   userAccessTokenExpiryInSeconds ( Long   userAccessTokenExpiryInSeconds )   {  this . userAccessTokenExpiryInSeconds   =   userAccessTokenExpiryInSeconds ;  return  this ;  }
@ Override  public   Optional < Object >   getTrackableSession ( final   WebContext   context )   {  return  Optional . empty () ;  }
public   float   getMinUpdateDistanceMeters ()   {  return  minUpdateDistanceMeters ;  }
public   void   addSchema ( String   description ,  DataHandler   dh )  throws  ResourceAdminServiceExceptionException ,  RemoteException   {  String   fileName ;  fileName   =   dh . getName () . substring ( dh . getName () . lastIndexOf ( '/' )   +   1 ) ;  resourceAdminServiceStub . addResource ( """"/""""   +   fileName ,  MEDIA_TYPE_SCHEMA , description ,  dh ,  null ,  null ) ;  }
@ Override  @ SuppressWarnings ( """"unchecked"""" )  public   Chain < T >   union ( final   List < T > ...   lists )   {  return  new   Chain <> ( Underscore . union ( value () ,  lists ) ) ;  }
@ SuppressWarnings ( """"PMD.AvoidCatchingThrowable"""" )  private   static   Callable < Throwable >   callable ( final   ProceedingJoinPoint   point , final   CountDownLatch   start )   {  return  ()  ->  {  Throwable   result   =  null ;  try  {  start . await () ;  point . proceed () ;  
public   void   append ( String   content )   throws  IOException   {  if  ( count   >   0   &&   buf [ count   -   1 ]   !=   '\n'   &&   buf [ count   -   1 ]   !=   '\r' )   {  write ( '\n' ) ;  }  byte []   contentBytes   =  content . getBytes ( """"UTF-8"""" ) ;  this . write ( contentBytes ) ;  }
@ Override  public   byte []   decrypt ( byte []   encryptedBytes )   {  return  encryptedBytes ;  }
public   WSTrustMetaData   certificateAlias ( MetadataProperty   certificateAlias )   {  this . certificateAlias   =   certificateAlias ;  return  this ;  }
@ Override  public   void   addResult ( final   String   name ,  final   SelfCheckGroup . Result   result ,  final   String   resolution )   {  addResult ( name ,  result ,  resolution ,  null ) ;  }
public   ValidatorBuilder   primitiveValidationStrategy ( PrimitiveValidationStrategy   primitiveValidationStrategy )   {  this . primitiveValidationStrategy   =   primitiveValidationStrategy ;  return  this ;  }
@ Override  public   boolean   apply ( Node   input )   {  return  ! input . equals ( e ) ;  }
public   synchronized   static   Method   loadCopiedMessageMethod ( ClassLoader   classLoader )   throws  Exception   {  return  UnobfuscatorCache . getInstance () . getMethod ( classLoader ,  ()  ->  {  var   method   =  findFirstMethodUsingStrings ( classLoader ,  StringMatchType . Contains ,  """"conversation/copymessage"""" ) ;  if  ( method   ==   null )   throw  new   RuntimeException ( """"CopiedMessage method not found"""" ) ;  return  method ;  } ) ;  }
@ Test  public   void   missingThinRootWithPom ()   throws  Exception   {  deleteRecursively ( new   File ( """"target/thin/test/repository/org/springframework/spring-core"""" ) ) ;  
public   double []   getTransformedRoiPts ()   {  if  ( residualUpdateNeeded )   {  doRoi () ;  doResidual () ;  }  return  dstRoiPts . get () ;  }
public   void   setSeverityDistribution ( SeverityDistribution   severityDistribution )   {  this . severityDistribution   =   severityDistribution ;  }
default   OnOffBinding   setAnalogValueThresholdOn ( int   value ) {  return  analogValueThresholdOn ( value ) ;  }
public   List < Archive >   resolve ( Archive   parent ,  Archive   archive ,  String   name ,  String ...   profiles )   {  log . info ( """"Extracting dependencies from: {}, with profiles {}"""" ,  archive ,  Arrays . asList ( profiles ) ) ;  List < Archive >   archives   =  new   ArrayList <> () ;  if  ( parent   !=   null )   {  archives . addAll ( archives ( extract ( parent ,  archive ,  name ,  profiles ) ) ) ;  }  else  {  archives . addAll ( archives ( extract ( archive ,  name ,  profiles ) ) ) ;  }  addRootArchive ( archives ,  archive ) ;  return  archives ;  }
public   static   VersionChecker   getVersionChecker ()   {  return  versionChecker ;  }
public   Builder   userName ( String   userName )   {  this . _userName   =   userName ;  return  this ;  }
@ Test  void   throwsWhenMethodDoesNotReturnVoidOrFuture ()   {  Assertions . assertThrows ( IllegalStateException . class , ()  ->   new   AsyncTest . Foo () . asyncMethodThatReturnsInt () ) ;  }
private   void   addToCache ( CacheKey   cacheKey ,  DeferredChanged < D >   changed )   {  refDiffMap . put ( cacheKey ,  changed ) ;  }
public   static   String   jsonToXml ( String   json ,  Xml . XmlStringBuilder . Step   identStep )   {  return  jsonToXml ( json ,  identStep ,  null ,  ROOT ) ;  }
@ Test ( dependsOnMethods   =   """"testAddUser"""" )  public   void   testGetUser ()   throws  Exception   {  super . testGetUser () ;  }
@ BeforeTest  public   void   configBeforeTest ( XmlTest   test )   {  if  ( test . getName () . equals ( """"BeforeTest"""" ) )   {  throw  new   RuntimeException () ;  }  }
@ Override  public   float   initWeight ()   {  return  this . randomize . randomize ( NO_USE ) ;  }
public   static   boolean   isSameDate ( @ Nullable   DateTime   date ,  @ Nullable   DateTime   other )   {  if  ( date   ==   null   &&   other   ==   null )   return  true ;  if  ( date   ==   null   ||   other   ==   null )   return  false ;  return  date . equals ( other ) ;  }
private   void   assertSpecVersion ( SpecificationVersion   version ,  SchemaLoader . SchemaLoaderBuilder   loaderBuilder )   {  assertSame ( version ,  loaderBuilder . build () . specVersion () ) ;  }
public   static   int   createNewModel ( String   modelSetName ,  String   modelType ,  String   description )   throws  Exception   {  ALGORITHM   modelAlg   =  null ;  if ( modelType   !=   null )   {  for ( ALGORITHM   alg :  ALGORITHM . values () )   {  if ( alg . name () . equalsIgnoreCase ( modelType . trim () ) )   {  modelAlg   =   alg ;  }  }  }   else  {  modelAlg   =   ALGORITHM . NN ;  }  if ( modelAlg   ==   null )   {  log . error ( """"Unsupported algirithm - {}"""" ,  modelType ) ;  return  2 ;  }  CreateModelProcessor   p   =  new   CreateModelProcessor ( modelSetName ,  modelAlg ,  description ) ;  return  p . run () ;  }
@ EventHandler ( priority   =   EventPriority . MONITOR )  public   void   onPluginEnable ( PluginEnableEvent   event )   {  if  ( API   ==   null )   {  Plugin   permPlugin   =  event . getPlugin () ;  if  ( permPlugin . getDescription () . getName () . equals ( """"DroxPerms"""" ) )   {  API   =   ( ( DroxPerms )   permPlugin ) . getAPI () ;  log . info ( String . format ( """"[%s][Chat] %s hooked."""" ,  plugin . getDescription () . getName () ,  name ) ) ;  }  }  }
@ Test  public   void   testAddCertificate ()   throws  IOException   {  if  ( ! StringUtils . equals ( MultitenantConstants . SUPER_TENANT_DOMAIN_NAME ,  tenant ) )   {  Response   response   =  getResponseOfJSONPost ( KEYSTORE_MANAGEMENT_API_BASE_PATH   +  KEYSTORE_MANAGEMENT_API_CERTIFICATE_PATH ,  readResource ( """"cert-request-body1.json"""" ) , new   HashMap <> () ) ;  validateHttpStatusCode ( response ,  HttpStatus . SC_CREATED ) ;  Assert . assertNotNull ( response . getCookie ( """"Location"""" ) ) ;  }  }
public   void   setOldSelStatus ( boolean   oldSelStatus )   {  this . oldSelStatus   =   oldSelStatus ;  }
@ Override  public   boolean   getGroupInfoBoolean ( String   world ,  String   group ,  String   node ,  boolean   defaultValue )   {  return  privs . getGroupNode ( group ) . getBoolean ( node ,  defaultValue ) ;  }
public   void   authorizeUser ( String   username ,  String   resourceId ,  String   action )   throws  RemoteException , UserStoreExceptionException   {  remoteAuthorizationManagerServiceStub . authorizeUser ( username ,  resourceId ,  action ) ;  }
@ Override   public   UByteIndexer   put ( long   i ,  long   j ,  int []   b ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  putRaw ( index ( i ,  j )   +   n ,  b [ offset   +   n ] ) ;  }  return  this ;  }
@ Override  public   void   setColor ( int   color )   {  this . options . color ( color ) ;  listener . update ( this ) ;  }
@ Nullable  public   FidoAppIdExtension   getFidoAppIdExtension ()   {  return  fidoAppIdExtension ;  }
public   CompletionStage < Result >   call ( final   PlayFrameworkParameters   parameters ,  final   String   clients ,  final   String   authorizers ,  final   String   matchers )   throws  Throwable   {  return  internalCall ( parameters ,  clients ,  authorizers ,  matchers ) ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Validate sub attribute in user info call"""" , dependsOnMethods   =   """"testAuthCodeGrantValidateSub"""" )  public   void   testAuthCodeGrantValidateUserInfo ()   throws  Exception   {  UserInfoResponse   userInfoResponse   =  getUserInfoResponse () ;  if  ( ! userInfoResponse . indicatesSuccess () )   {  Assert . fail ( """"User info API call failed."""" ) ;  }  
@ Override  public   boolean   childOfServerVariable ( PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.servers.variables.*"""" ) ;  }
private   static   ObjectMapper   getObjectMapperInstance ()   {  return  jsonMapper . get () ;  }
@ Override  public   void   preApplication ( MasterContext < WDLParams ,  WDLParams >   context )   {  init ( context ) ;  }
public   void   setLocalRole ( String   localRole )   {  this . localRole   =   localRole ;  }
@ Test  public   void   testMultipleNodeLabels ()   {  graph . addLabel ( foo ,  Label . label ( """"foo"""" ) ) ;  graph . addLabel ( foo ,  Label . label ( """"bar"""" ) ) ;  getGraphDB () ;  assertThat ( graphDb . getNodeById ( 0 ) . getLabels () , hasItems ( Label . label ( """"foo"""" ) ,  Label . label ( """"bar"""" ) ) ) ;  }
@ Keep  public   static   void   onWebViewInitialize ( WebView   webView , boolean   allowInstall )   {  if  ( webView   ==   null )   throw  new   NullPointerException ( """"WebView is null!"""" ) ;  }
@ Override  public   LatLng   getCenter ()   throws  RemoteException   {  return  options . getCenter () ;  }
public   void   setState ( DigitalState   state )   throws  IOException   {  var   path   =  Paths . get ( pinPath , """"value"""" ) ;  Files . writeString ( path ,  ( state . isHigh ()  ?   """"1""""   :  """"0"""" ) ) ;  }
@ RequiresApi ( api   =   21 )  public   DroidGuardResultsRequest   setNetworkToUse ( Network   networkToUse )   {  bundle . putParcelable ( KEY_NETWORK_TO_USE ,  networkToUse ) ;  return  this ;  }
private   void   updatePreference ( String   key ,  String   newValue )   {  getArguments () . putString ( key ,  newValue ) ;  }
public   static   String   getServerFromPref ( Context   context ,  SharedPreferences   sharedPreferences )   {  return  sharedPreferences . getString ( context . getString ( R . string . pref_server_select_key ) ,  null ) ;  }
protected   Map < String ,  List < String > >   getDefaultLogicalFonts ()  {  Map < String ,  List < String > >   ret   =  new   HashMap <> () ;  ret . put ( SERIF ,  Arrays . asList ( """"Serif"""" ) ) ;  ret . put ( SANS_SERIF ,  Arrays . asList ( """"SansSerif"""" ) ) ;  ret . put ( MONOSPACE ,  Arrays . asList ( """"Monospaced"""" ) ) ;  return  ret ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  ManagementMetadata   that   =  ( ManagementMetadata )   o ;  return  Objects . equals ( healthCheckUrl ,  that . healthCheckUrl )   &&   Objects . equals ( statusPageUrl ,  that . statusPageUrl )  &&   Objects . equals ( managementPort ,  that . managementPort ) ;  }
public   ChangedList < T >   setNewValue ( final   List < T >   newValue )   {  this . newValue   =   newValue ;  return  this ;  }
public   AssertableList   assertContains ( String ...   elements )   {  for  ( String   next   :  elements )   {  assertContainsOne ( next ) ;  }  return  this ;  }
public   synchronized   static   boolean   isCalledFromClass ( Class < ? >   cls )   {  var   trace   =  Thread . currentThread () . getStackTrace () ;  for  ( StackTraceElement   stackTraceElement   :  trace )   {  if  ( stackTraceElement . getClassName () . equals ( cls . getName () ) )  return  true ;  }  return  false ;  }
@ Override   public   void   call ( int   level ,  BytePointer   msg )   {  switch  ( level )   {  case  AV_LOG_PANIC :  case  AV_LOG_FATAL :  case  AV_LOG_ERROR :  logger . error ( msg . getString () ) ;  break;  case  AV_LOG_WARNING :  logger . warn ( msg . getString () ) ;  break;  case  AV_LOG_INFO :  logger . info ( msg . getString () ) ;  break;  case  AV_LOG_VERBOSE :  case  AV_LOG_DEBUG :  case  AV_LOG_TRACE :  logger . debug ( msg . getString () ) ;  break;  default:  assert  false ;  }  }
public   static   synchronized   void   reinitialize ()   {  logger . info ( """"Reinitializing BoardInfoHelper singleton instance."""" ) ;  SingletonHelper . resetInstance () ;  }
public   String   getDisplayName ()   {  return  """"Package view for package """"   +   pd ;  }
public   final   String   toInvariantString ()   {  throw  new   UnsupportedOperationException () ;  }
private   static   ImmutableListMultimap < Diagnostic . Kind ,  Diagnostic < ?   extends  JavaFileObject > >  sortDiagnosticsByKind ( Iterable < Diagnostic < ?   extends  JavaFileObject > >   diagnostics )   {  return  Multimaps . index ( diagnostics ,  input  ->   input . getKind () ) ;  }
public   void   setCastSession ( CastSessionImpl   castSession )   {  this . castSession   =   castSession ;  }
@ DataBoundSetter  public   void   setBuildUrl ( String   buildUrl )   {  this . buildUrl   =   buildUrl ;  }
public   boolean   isAllowAnonymousReadPermission ()   {  return  allowAnonymousReadPermission ;  }
public   SchemaLoaderBuilder   nullableSupport ( boolean   nullableSupport )   {  this . nullableSupport   =   nullableSupport ;  return  this ;  }
@ Override   public   TrueSchema   build ()   {  return  new   TrueSchema ( this ) ;  }
@ Test  void   canStopBeforeFirstScheduledRun ()   throws  Exception   {  final   AtomicLong   counter   =  new   AtomicLong () ;  final   ScheduleWithFixedDelayTest . LongDelaySample   sample   = new   ScheduleWithFixedDelayTest . LongDelaySample ( counter ) ;  sample . close () ;  TimeUnit . MILLISECONDS . sleep ( 100 ) ;  MatcherAssert . assertThat ( counter . get () ,  Matchers . is ( 0L ) ) ;  }
@ Test ( groups   =   """"organizationPaginationTests"""" ,  dependsOnMethods   =   """"testDeleteOrganization"""" )  public   void   createOrganizationsForPaginationTests ()   throws  JSONException   {  organizations   =   createOrganizations ( NUM_OF_ORGANIZATIONS_FOR_PAGINATION_TESTS ) ;  assertEquals ( organizations . size () ,  NUM_OF_ORGANIZATIONS_FOR_PAGINATION_TESTS ) ;  }
@ Override   public   CharIndexer   put ( long   i ,  long   j ,  long   k ,  char   c )   {  array [ ( int ) index ( i ,  j ,  k ) ]   =   c ;  return  this ;  }
default   String   readString ( int   offset ,  int   numberOfBytes )   {  return  readString ( StandardCharsets . US_ASCII ,  offset ,  numberOfBytes ) ;  }
private   void   startFileSharingActivity ( ServerFile   file ,  Uri   fileUri )   {  Intent   intent   =  Intents . Builder . with ( this ) . buildServerFileSharingIntent ( file ,  fileUri ) ;  startActivity ( intent ) ;  }
@ Test  public   void   containedItemSchemaEmptyArr ()   {  TestSupport . failureOf ( ArraySchema . builder ()  . containsItemSchema ( NullSchema . INSTANCE ) )  . expectedKeyword ( """"contains"""" )  . expectedMessageFragment ( """"expected at least one array item to match 'contains' schema"""" )  . input ( ARRAYS . get ( """"emptyArray"""" ) )  . expect () ;  }
public   void   columnFormatter ( int   column ,  Function < Object ,  String >   formatter )   {  columnFormatters . put ( column ,  formatter ) ;  }
@ Override  public   void   onResume ()   {  try  {  delegate . onResume () ;  }   catch  ( RemoteException   e )   {  throw  new   RuntimeRemoteException ( e ) ;  }  }
public   void   setTimestamp ( long   timestamp )   throws  Exception   {  this . timestamp   =   timestamp ;  }
@ Override   public   UIntIndexer   get ( long []   indices ,  long []   m ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  m [ offset   +   n ]   =   getRaw ( index ( indices )   +   n )   &   0xFFFFFFFFL ;  }  return  this ;  }
public   String   getTimeDateFunctions ()   throws  SQLException   {  return  null ;  }
private   static   Compiler   throwingCompiler ( RuntimeException   e )   {  return  javac () . withProcessors ( new   ThrowingProcessor ( e ) ) ;  }
@ Test  public   void   noAdditionalProperties ()   {  ObjectSchema   subject   =  ObjectSchema . builder () . additionalProperties ( false ) . build () ;  TestSupport . expectFailure ( subject ,  """"#"""" ,  OBJECTS . get ( """"propertySchemaViolation"""" ) ) ;  }
@ Deprecated  private   Optional < IpRiskResponse >   getIpRisk ( InetAddress   ipAddress )   throws  IOException , GeoIp2Exception   {  LookupResult < IpRiskResponse >   result   =  this . get ( ipAddress , IpRiskResponse . class , DatabaseType . IP_RISK ) ;  IpRiskResponse   response   =  result . getModel () ;  if  ( response   ==   null )   {  return  Optional . empty () ;  }  return  Optional . of ( new   IpRiskResponse ( response , result . getIpAddress () , result . getNetwork () ) ) ;  }
@ Test ( dependsOnMethods   =   """"testPatchIdP"""" )  public   void   testExportIDPToFile ()   {  Response   response   =  getResponseOfGet ( IDP_API_BASE_PATH   +   PATH_SEPARATOR   +   idPId   +   PATH_SEPARATOR   +  """"export"""" ) ;  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_OK )  . body ( """"identityProviderName"""" ,  equalTo ( IDP_NAME ) )  . body ( """"federatedAuthenticatorConfigs.find { it.name == '""""   +   AUTHENTICATOR_NAME   +   """"' }.definedByType"""" , equalTo ( DEFINED_BY_SYSTEM ) ) ;  }
@ Test  public   void   failedToCompile_compilationSucceeded ()   {  expectFailure  . whenTesting ()  . about ( compilations () )  . that ( javac () . compile ( HELLO_WORLD_RESOURCE ) )  . failed () ;  AssertionError   expected   =  expectFailure . getFailure () ;  assertThat ( expected . getMessage () )  . startsWith ( """"Compilation was expected to fail, but contained no errors"""" ) ;  assertThat ( expected . getMessage () ) . contains ( """"No files were generated."""" ) ;  }
private   void   showFileInfo ( String   uniqueKey )   {  AlertDialogFragment   fileInfoDialog   =  new   AlertDialogFragment () ;  FragmentManager   fm   =  getSupportFragmentManager () ;  Bundle   bundle   =  new   Bundle () ;  bundle . putInt ( Fragments . Arguments . DIALOG_TYPE ,  AlertDialogFragment . FILE_INFO_DIALOG ) ;  bundle . putSerializable ( """"file_unique_key"""" ,  uniqueKey ) ;  fileInfoDialog . setArguments ( bundle ) ;  fileInfoDialog . show ( fm ,  """"file_info_dialog"""" ) ;  }
@ Override  public   boolean   less ( Long   val1 ,  Long   val2 )   {  return  val1 + offset   <   val2 ;  }
@ Override  public   void   fire ( ClearTestStorageEvent   event )   {  for  ( LifecycleListener   listener   :  listeners )   {  try  {  listener . fire ( event ) ;  }   catch  ( Exception   e )   {  logError ( listener ,  e ) ;  }  }  }
@ Override  public   void   validate ( final   ProcessingReport   report , final    MessageBundle   bundle ,  final   FullData   data )  throws  ProcessingException  {  final   String   value   =  data . getInstance () . getNode () . textValue () ;  try  {  UUID . fromString ( value ) ;  }   catch  ( IllegalArgumentException   ignored )   {  report . error ( newMsg ( data ,  bundle ,  """"invalidUUID"""" )  . put ( """"input"""" ,  value ) ) ;  }  }
@ Override  public   int   hashCode ()   {  int   result   =  0 ;  for  ( int   ind   =  0 ;   ind   <   results . size () ;   ind ++ )   {  result   =   31   *   result   +   results . get ( ind ) . hashCode () ;  }  return  result ;  }
public   void   setVulnerabilities ( List < Vulnerability >   vulnerabilities )   {  this . vulnerabilities   =   vulnerabilities ;  }
@ Override  public   IObjectWrapper   createModuleContextV2 ( IObjectWrapper   wrappedContext ,  String   moduleId ,  int   minVersion )   throws  RemoteException   {  Log . d ( TAG ,  """"createModuleContext for """"   +   moduleId   +   """" at version """"   +   minVersion ) ;  final   Context   originalContext   =  ( Context )   ObjectWrapper . unwrap ( wrappedContext ) ;  return  ObjectWrapper . wrap ( DynamiteContext . create ( moduleId ,  originalContext ) ) ;  }
@ Override  public   EurekaHttpResponse < InstanceInfo >   getInstance ( String   appName ,  String   id )   {  return  getInstanceInternal ( """"apps"""" ,  appName ,  id ) ;  }
public   Chain < T >   dropWhile ( final   Predicate < T >   pred )   {  return  new   Chain <> ( U . dropWhile ( value () ,  pred ) ) ;  }
public   Builder   allowedOperations ( List < AllowedOperation >   allowedOperations )   {  this . allowedOperations   =   allowedOperations ;  return  this ;  }
@ Override  public   int   hashCode ()   {  return  Arrays . hashCode ( new   Object [] { new   HashSet <> ( uvmEntryList ) } ) ;  }
@ NonNull  @ Override  protected   Class < ? >   getEnclosingClass ()   {  return  CascBenchmark . class ;  }
private   static   long   parseLong ( String   str ,  long   lVal )   {  try  {  return  Long . parseLong ( str ) ;  }   catch  ( Exception   e )   {  return  lVal ;  }  }
protected   T   createElement ()   {  try  {  return  elementFactory . newInstance () ;  }   catch  ( IllegalAccessException  |  InstantiationException   ex )   {  throw  new   RuntimeException ( ex ) ;  }  }
@ Override  public   IElement   item ( ItemStack   stack ,  float   scale )   {  return  ItemStackElement . of ( stack ,  scale ) ;  }
public   Builder   includeAbbreviations ( boolean   include )   {  this . includeAbbreviations   =   include ;   return  this ;  }
public   Note   createDefaultNote ( int   row , int   positionMs , int   durationMs , NoteCallback   callback , BooleanProperty   vibratoEditor , BooleanProperty   showLyrics , BooleanProperty   showAliases )   {  Lyric   lyric   =  lyricProvider . get () ;  Note   trackNote   =  new   Note ( row , scaler . scalePos ( positionMs ) , scaler . scaleX ( durationMs )   -   1 , lyric , callback , vibratoEditor , showLyrics , showAliases , localizer , quantizer , scaler ) ;  lyric . saveChanges () ;  return  trackNote ;  }
private   static   File   newFolder ( File   root ,  String ...   subDirs )   throws  IOException   {  String   subFolder   =  String . join ( """"/"""" ,  subDirs ) ;  File   result   =  new   File ( root ,  subFolder ) ;  if  ( ! result . mkdirs () )   {  throw  new   IOException ( """"Couldn't create folders """"   +   root ) ;  }  return  result ;  }
public   boolean   hasPermission ()   {  return  owner . hasPermission ( Item . WORKSPACE ) ;  }
public   < T >   DatabaseRecord < T >   getRecord ( InetAddress   ipAddress ,  Class < T >   cls )  throws  IOException   {  byte []   rawAddress   =  ipAddress . getAddress () ;  int []   traverseResult   =  traverseTree ( rawAddress ,  rawAddress . length   *   8 ) ;  int   pl   =  traverseResult [ 1 ] ;  int   record   =  traverseResult [ 0 ] ;  int   nodeCount   =  this . metadata . getNodeCount () ;  ByteBuffer   buffer   =  this . getBufferHolder () . get () ;  T   dataRecord   =  null ;  if  ( record   >   nodeCount )   {  
@ Override   public   String   toString ()   {  String   s   =  """"["""" ;  double []   p   =  get () ;  for  ( int   i   =  0 ;   i   <   p . length ;   i ++ )   {  s   +=   ( float ) p [ i ] ;  if  ( i   <   p . length - 1 )   {  s +=   """", """" ;  }  }  s   +=   """"]"""" ;  return  s ;  }
private   static   boolean   isDecimalNotation ( final   String   val )   {  return  val . indexOf ( '.' )   >   - 1   ||   val . indexOf ( 'e' )   >   - 1  ||   val . indexOf ( 'E' )   >   - 1   ||   """"-0"""" . equals ( val ) ;  }
default   < T   extends  SerialProvider >   T   getSerialProvider ()   throws  ProviderException {  return  this . serial () ;  }
default   int   spiRead ( int   handle ,  byte []   buffer ,  int   length ) {  return  spiRead ( handle ,  buffer ,  0 ,  length ) ;  }
@ Override  public   void   setGroupInfoString ( String   world ,  String   group ,  String   node ,  String   value )   {  throw  new   UnsupportedOperationException ( """"iChat does not support mutable info nodes!"""" ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  Properties   properties   =  ( Properties )   o ;  return  Objects . equals ( this . key ,  properties . key )   &&  Objects . equals ( this . value ,  properties . value ) ;  }
@ Test   public   void   testOptional ()   {  System . out . println ( """"Optional"""" ) ;  assertTrue ( testOptionalInt ( new   IntPointer ( ( Pointer ) null ) ) . isNull () ) ;  assertEquals ( 42 ,  testOptionalInt ( new   IntPointer ( 1 ) . put ( 42 ) ) . get ( 0 ) ) ;  }
@ Override  public   ArrayList < String >   getValues ()   {  Calendar   cal   =  Calendar . getInstance () ;  
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Verify the presence of the specified custom boolean claim in the access """"   +  """"token"""" ,  dependsOnMethods   =   """"testGetAccessTokenWithAuthCodeGrant"""" )  public   void   testTokenBooleanClaimAddOperation ()   throws  Exception   {  Boolean   claimValue   =  jwtClaims . getBooleanClaim ( """"custom_claim_boolean_1"""" ) ;  Assert . assertTrue ( claimValue ) ;  }
public   void   setResultsStorage ( QueryResultsStorage   resultsStorage )   {  this . resultsStorage   =   resultsStorage ;  if  ( resultsStorage   !=   null )   {  
@ Deprecated  @ RequiresApi ( VERSION_CODES . Q )  public   boolean   isEnabled ()   {  throw  new   UnsupportedOperationException () ;  }
public   EmailSender   properties ( List < Properties >   properties )   {  this . properties   =   properties ;  return  this ;  }
@ Override  public   void   prepare ()   {  userAgent   =   String . format ( USER_AGENT ,  deviceName ,  buildVersion ) ;  auth   =   """"AidLogin """"   +   androidId   +   """":""""   +   securityToken ;  }
public   static   PropertyProvider   getInstance ()   {  return  InstanceHolder . INSTANCE ;  }
private   Path   getModelSetLocalPath ()   {  return  ( otherConfigs   !=   null   &&   otherConfigs . get ( Constants . SHIFU_CURRENT_WORKING_DIR )   !=   null ) ?   new   Path ( otherConfigs . get ( Constants . SHIFU_CURRENT_WORKING_DIR ) . toString () )  :  new   Path ( """"."""" ) ;  }
@ Test  void   canAnnotate ()   {  final   MarkupText   markupText   =  new   MarkupText ( """"abc123"""" ) ;  assertNull ( actionNote . annotate ( buildRun ,  markupText ,  4 ) ) ;  final   String   output   =  markupText . toString ( false ) ;  assertTrue ( output . contains ( TAG_ACTION_BEGIN   +   """"\""""""""   +   UUID   +   """"\""""""""   +   TAG_ACTION_END ) ) ;  }
void   visitPropertySchemas ( Map < String ,  Schema >   propertySchemas )   {  for  ( Map . Entry < String ,  Schema >   entry   :  propertySchemas . entrySet () )   {  visitPropertySchema ( entry . getKey () ,  entry . getValue () ) ;  }  }
default   DigitalOutput   pulse ( int   interval ,  TimeUnit   unit )   throws  IOException   {  return  pulse ( interval ,  unit ,  DigitalState . HIGH ) ;  }
@ Override  @ SuppressWarnings ( """"ConstantConditions"""" )  public   int   compare ( ModuleHolder   o1 ,  ModuleHolder   o2 )   {  return  o1 . notificationType . compareTo ( o2 . notificationType ) ;  }
@ Test  public   void   testNoPayloadGeolocation0 ()   throws  Exception   {  try  ( LocalTestServerContext   sc   =  new   LocalTestServerContext ( geolocationBasic ) )   {  GeolocationPayload   payload   = new   GeolocationPayload . GeolocationPayloadBuilder () . createGeolocationPayload () ;  GeolocationResult   result   =  GeolocationApi . geolocate ( sc . context ,  payload ) . await () ;  assertNotNull ( result ) ;  assertNotNull ( result . toString () ) ;  assertNotNull ( result . location ) ;  }  }
public   void   setScopes ( List < String >   scopes )   {  this . scopes   =   scopes ;  }
public   void   testExec ()   throws  IOException   {  Tuple   tuple   =  TupleFactory . getInstance () . newTuple ( 31 ) ;  for  ( int   i   =  0 ;   i   <   31 ;   i ++ )   {  tuple . set ( i ,  i   *   10 ) ;  }  tuple . set ( 0 ,  """"M"""" ) ;  
@ Test  public   void   testGetAnnotationsWithEdgeStopWords ()   throws  Exception   {  when ( config . isLongestOnly () ) . thenReturn ( true ) ;  List < EntityAnnotation >   annotations   =  processor . getAnnotations ( """"female in cerebellum of cells"""" ,  config ) ;  assertThat ( getOnlyElement ( annotations ) . getStart () ,  is ( 10 ) ) ;  assertThat ( getOnlyElement ( annotations ) . getEnd () ,  is ( 20 ) ) ;  }
@ Override  public   IObjectWrapper   createModuleContextV3 ( IObjectWrapper   wrappedContext ,  String   moduleId ,  int   minVersion ,  IObjectWrapper   wrappedCursor )   throws  RemoteException   {  throw  new   UnsupportedOperationException () ;  }
@ Test  public   void   testShowVetListXml ()   throws  Exception   {  mockMvc . perform ( get ( """"/vets.xml"""" ) . accept ( MediaType . APPLICATION_XML ) ) . andExpect ( status () . isOk () )  . andExpect ( content () . contentType ( MediaType . APPLICATION_XML_VALUE ) )  . andExpect ( content () . node ( hasXPath ( """"/vets/vetList[id=1]/id"""" ) ) ) ;  }
@ Override  public   Float   convertValue ( Object   value )   {  return  ( ( Number )   value ) . floatValue () ;  }
@ Override  protected   void   onPrepareDialogBuilder ( androidx . appcompat . app . AlertDialog . Builder   builder )   {  if  ( preference . selectNoneButtonText   !=   null )   {  builder . setNeutralButton ( preference . selectNoneButtonText ,  null ) ;  }  }
@ Nullable  public   static   String   getAndCheckCallingPackage ( Context   context ,  int   suggestedCallerUid )   {  return  getAndCheckCallingPackage ( context ,  null ,  suggestedCallerUid ) ;  }
@ Test  public   void   multiplexerFailure ()   {  SchemaException   thrown   =  assertThrows ( SchemaException . class ,  ()  ->  {  INT . canBe ( String . class ,  str  ->  {  } )  . or ( Boolean . class ,  bool  ->  {  } )  . requireAny () ;  } ) ;  assertEquals ( """"#: expected type is one of Boolean or String, found: Integer"""" ,  thrown . getMessage () ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   static   < K ,  V >   List < Map . Entry < K ,  V > >   omit ( final   Map < K ,  V >   object ,  final   K ...   keys )   {  return  without ( map ( newArrayList ( object . entrySet () ) , entry  ->  {  if  ( Arrays . asList ( keys ) . contains ( entry . getKey () ) )   {  return  null ;  }   else  {  return  Map . entry ( entry . getKey () ,  entry . getValue () ) ;  }  } ) , ( Map . Entry < K ,  V > )   null ) ;  }
public   List < T >   first ( final   int   n )   {  return  first ( newArrayList ( iterable ) ,  n ) ;  }
private   void   runDownloadTaskFrom ( EnrichedSettings   enrichedSettings )   {  final   Optional < DownloadIssuesTask >   downloadTask   =  DownloadIssuesTask . from ( project ,  enrichedSettings ,  psiFiles ) ;  if  ( downloadTask . isPresent () )   {  downloadTask . get () . run () ;  }   else  {  Notifications . Bus . notify ( new   Notification ( GROUP_ID ,  TITLE , """"SonarQube is enabled, but the sonar server is not configured. Aborting..."""" , NotificationType . ERROR ) ) ;  }  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"pushAuthorizationRequest"""" )  @ Valid  public   PushAuthorizationRequestConfiguration   getPushAuthorizationRequest ()   {  return  pushAuthorizationRequest ;  }
private   void   setOptionAndDismiss ( @ FileSortOption . Types   int   type )   {  BusProvider . getBus () . post ( new   FileSortOptionClickEvent ( type ) ) ;  dismiss () ;  }
@ Override  public   void   onCreatePreferences ( Bundle   savedInstanceState ,  String   rootKey )   {  super . onCreatePreferences ( savedInstanceState ,  rootKey ) ;  setPreferencesFromResource ( R . xml . preference_general_conversation ,  rootKey ) ;  setDisplayHomeAsUpEnabled ( true ) ;  }
public   UntypedActor   create ()   throws  IOException   {  return  new   RunModelWorker ( modelConfig ,  columnConfigList ,  null ,  parentActorRef ,  dataPrepRef ) ;  }
private   void   testAuthentication ()   throws  Exception   {  HttpResponse   response   =  sendLoginPost ( client ,  sessionDataKey ) ;  EntityUtils . consume ( response . getEntity () ) ;  }
@ JsonProperty ( """"average_income"""" )  public   Integer   getAverageIncome ()   {  return  this . averageIncome ;  }
@ Override  public   boolean   process ( Set < ?   extends  TypeElement >   annotations ,  RoundEnvironment   roundEnv )   {  delegate . process ( annotations ,  roundEnv ) ;  messager . printMessage ( Kind . ERROR ,  ERROR_MESSAGE ) ;  return  false ;  }
@ Override  protected   void   failed ()   {  super . failed () ;  statusBar . setText ( """"Error: Unable to save """"   +   saveLocation . getName () ) ;  errorLogger . logError ( getException () ) ;  }
protected   JobFactory   getJobFactory ()   {  return  new   DropwizardJobFactory ( jobs ) ;  }
private   BallColor   getLightGreyBallColor ()   {  return  lightGreyEquivalents [ random . nextInt ( lightGreyEquivalents . length ) ] ;   
@ SuppressWarnings ( """"PMD.AvoidInstantiatingObjectsInLoops"""" )  private   static   Parallelizer . ParallelException   exceptions ( final   Iterable < Throwable >   failures )   {  Parallelizer . ParallelException   current   =  null ;  for  ( final   Throwable   failure   :  failures )   {  current   =   new   Parallelizer . ParallelException ( failure ,  current ) ;  }  return  current ;  }
@ Test  public   void   testBooleanSchema ()   {  BooleanSchema   subject   =  BooleanSchema . builder ()  . id ( """"bool-id"""" )  . title ( """"bool-title"""" )  . description ( """"bool-description"""" )  . unprocessedProperties ( ImmutableMap . of ( """"$schema"""" ,  """"https:
@ Test  void   testLeadingWhitespace ()   {  Map < String ,  String >   result   =  Xml . parseAttributes ( """"   key1=\""""value1\"""" key2=\""""value2\"""""""" ) ;  assertEquals ( Map . of ( """"key1"""" ,  """"value1"""" ,  """"key2"""" ,  """"value2"""" ) ,  result ) ;  }
protected   String   getHealthCheckUrl ( EurekaInstanceConfigBean   instance ,  int   serverPort ,  String   serverContextPath , String   managementContextPath ,  Integer   managementPort ,  boolean   isSecure )   {  String   healthCheckUrlPath   =  instance . getHealthCheckUrlPath () ;  String   healthCheckUrl   =  getUrl ( instance ,  serverPort ,  serverContextPath ,  managementContextPath ,  managementPort , healthCheckUrlPath ,  isSecure ) ;  log . debug ( """"Constructed eureka meta-data healthcheckUrl: """"   +   healthCheckUrl ) ;  return  healthCheckUrl ;  }
public   static   Map < String ,  Object >   fromXmlMap ( final   String   xml ,  final   Xml . FromType   fromType )   {  final   Object   object   =  Xml . fromXml ( xml ,  fromType ) ;  return  getStringObjectMap ( object ) ;  }
@ Override  public   void   setCloudSyncSetting ( IWearableCallbacks   callbacks ,  boolean   enable )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: setCloudSyncSetting"""" ) ;  }
public   static   void   templateSettings ( final   Map < String ,  String >   templateSettings )   {  setTemplateKey ( templateSettings ,  EVALUATE ) ;  setTemplateKey ( templateSettings ,  INTERPOLATE ) ;  setTemplateKey ( templateSettings ,  ESCAPE ) ;  }
@ ApiModelProperty ( example   =   """"1234A"""" )  @ JsonProperty ( """"employeeNumber"""" )  @ Valid  public   String   getEmployeeNumber ()   {  return  employeeNumber ;  }
default   int   readRegister ( int   register ,  char []   buffer ,  int   offset ,  int   length )   {  return  readRegister ( register ,  StandardCharsets . US_ASCII ,  buffer ,  offset ,  length ) ;  }
@ Test  public   void   timeWithTwoDigitsInSecFracSuccess ()   {  assertSuccess ( """"11:00:00.12Z"""" ,  new   TimeFormatValidator () ) ;  }
private   void   sendConfig ()   {  String   jsonConfig ;  synchronized  ( mConfigLock )   {  jsonConfig   =   new   Gson () . toJson ( mConfig ) ;  }  new   PostConfigRequest ( mContext ,  mUrl ,  mApiKey ,  jsonConfig ,  null ) ;  mOnConfigChangedListener . onConfigChanged () ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  Manager   manager   =  ( Manager )   o ;  return  Objects . equals ( this . value ,  manager . value ) ;  }
private   void   checkMethods ( final   RoundEnvironment   env , final   TypeElement   type )   {  for  ( final   Element   element :  env . getElementsAnnotatedWith ( type ) )   {  if  ( element . getKind ()   ==   ElementKind . METHOD )   {  final   ExecutableElement   method   =  ( ExecutableElement )   element ;  final   TypeMirror   returned   =  method . getReturnType () ;  if  ( ! returned . getKind () . equals ( TypeKind . VOID )  &&   ! this . assignableToFuture ( returned ) )   {  this . processingEnv . getMessager () . printMessage ( Diagnostic . Kind . ERROR , String . format ( 
@ SuppressWarnings ( """"unchecked"""" )  public   List < T >   differenceWith ( final   List < T > ...   lists )   {  return  difference ( newArrayList ( iterable ) ,  lists ) ;  }
public   Builder   setTransitionTypes ( @ TransitionTypes   int   transitionTypes )   {  this . transitionTypes   =   transitionTypes ;  return  this ;  }
@ Override  public   TResult   getResult ()   {  synchronized  ( lock )   {  if  ( ! completed )   throw  new   IllegalStateException ( """"Task is not yet complete"""" ) ;  if  ( cancelled )   throw  new   CancellationException ( """"Task is canceled"""" ) ;  if  ( exception   !=   null )   throw  new   RuntimeExecutionException ( exception ) ;  return  result ;  }  }
@ Override  protected   void   validateRequest ()   {  if  ( ! params () . containsKey ( """"photoreference"""" ) )   {  throw  new   IllegalArgumentException ( """"Request must contain 'photoReference'."""" ) ;  }  if  ( ! params () . containsKey ( """"maxheight"""" )   &&   ! params () . containsKey ( """"maxwidth"""" ) )   {  throw  new   IllegalArgumentException ( """"Request must contain 'maxHeight' or 'maxWidth'."""" ) ;  }  }
@ Override   boolean   canEqual ( Object   o )   {  return  o   instanceof   ConditionalSchemaMismatchEvent ;  }
@ Override  public   boolean   isCascadable ( final   Object   obj ,  final   Path . Node   node , final   Class < ? >   clazz ,  final   Path   path ,  final   ElementType   type )   {  return  false ;  }
public   Builder   exclusiveMinimum ( Number   exclusiveMimimumLimit )   {  this . exclusiveMinimumLimit   =   exclusiveMimimumLimit ;  return  this ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  SAMLAttributeProfile   samlAttributeProfile   =  ( SAMLAttributeProfile )   o ;  return  Objects . equals ( this . enabled ,  samlAttributeProfile . enabled )   &&  Objects . equals ( this . alwaysIncludeAttributesInResponse , samlAttributeProfile . alwaysIncludeAttributesInResponse )   &&  Objects . equals ( this . nameFormat ,  samlAttributeProfile . nameFormat ) ;  }
private   void   deleteObjects ()   throws  Exception   {  deleteUser ( OIDCUtilTest . user ) ;  deleteApplications () ;  }
protected   void   processSetForegroundColor ( int   color )   throws  IOException   {  processSetForegroundColor ( color ,  false ) ;  }
public   < T   extends  Type >   TypeTree < T >   typeTree ()   {  return  typeTree ;  }
public   static   void   dismissDialogSafe ( Dialog   dialog ,  Activity   activity )   {  if  ( dialog   ==   null   ||   ! dialog . isShowing () )  return;  if  ( activity . isFinishing () )  return;  if  ( activity . isDestroyed () )  return;  dialog . dismiss () ;  }
public   AuthRequest   token ( String   token )   {  this . token   =   token ;  return  this ;  }
public   ArrayList < String >   getResidenceList ( String   targetplayer ,  boolean   showhidden ,  boolean   showsubzones ,  boolean   formattedOutput )   {  ArrayList < String >   list   =  new   ArrayList <> () ;  for  ( Entry < String ,  ClaimedResidence >   res   :  residences . entrySet () )   {  this . getResidenceList ( targetplayer ,  showhidden ,  showsubzones ,  """""""" ,  res . getKey () ,  res . getValue () ,  list ,  formattedOutput ) ;  }  return  list ;  }
default   int   i2cWriteBlockData ( int   handle ,  int   register ,  CharSequence   data ) {  return  i2cWriteBlockData ( handle ,  register ,  data ,  data . length () ) ;  }
@ Bean  public   ServletWebServerFactory   servletWebServerFactory ()   {  return  new   JettyServletWebServerFactory () ;  }
public   String   getDocumentBase ()  {  Element   head   =  getHead () ;  if  ( head   !=   null )  {  NodeList   bases   =  head . getElementsByTagName ( """"base"""" ) ;  if  ( bases   !=   null   &&   bases . getLength ()   >   0 )  {  Element   base   =  ( Element )   bases . item ( 0 ) ;  if  ( base . hasAttribute ( """"href"""" ) )  return  base . getAttribute ( """"href"""" ) ;  else  return  null ;  }  else  return  null ;  }  else  return  null ;  }
public   static   boolean   supports ( String   mime_type )   {  return  SUPPORTED_FORMATS . contains ( mime_type ) ;  }
public   String   getCleanedDataPath ()   {  return  getCleanedDataPath ( modelConfig . getDataSet () . getSource () ) ;  }
public   ProcessingMessageAssert   hasLevel ( final   LogLevel   level )  {  assertThat ( level ) . isEqualTo ( actual . getLogLevel () ) ;  return  hasField ( """"level"""" ,  level ) ;  }
@ Override  public   ConnectionResult   blockingConnect ( long   timeout ,  TimeUnit   unit )   {  return  null ;  }
@ Test  public   void   saveAndDeleteTest ()   throws  Exception   {  Attachment   first   =  save ( ATTACHMENT ) ;  assertNotNull ( first ) ;  String   firstSource   =  first . getSource () ;  assertNotNull ( firstSource ) ;  assertThat ( resultsDirectory ,  contains ( firstSource ) ) ;  deleteAttachment ( first ) ;  assertThat ( resultsDirectory ,  notContains ( firstSource ) ) ;  }
 <argument pos:start=""""""""415:69"""""""" pos:end=""""""""415:69""""""""><expr pos:start=""""""""415:69"""""""" pos:end=""""""""415:69""""""""><literal type=""""""""number"""""""" pos:start=""""""""415:69"""""""" pos:end=""""""""415:69"""""""">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   static   ProgressView   read ( Data   data )   {  ProgressView   progressView   =  new   ProgressView ( new   SlimProgressStyle () ) ;  progressView . progress   =   data . progress ;  return  progressView ;  }
public   static   IntIndexer   create ( IntBuffer   buffer ,  long []   sizes ,  long []   strides )   {  return  new   IntBufferIndexer ( buffer ,  sizes ,  strides ) ;  }
@ Override  public   int   getFillColor ()   {  return  options . getFillColor () ;  }
@ Override  public   List < Double >   getDataBin ()   {  List < Double >   binBorders   =  new   ArrayList < Double > () ;  if ( maxVal   <   minVal )   {  
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Get the roles by user name"""" )  public   void   testGetRolesByUserName ()   throws  Exception   {  FlaggedName []   names   =  userMgtClient . getRolesOfUser ( """"testAdminUser"""" ,  """"admin"""" ,  - 1 ) ;  Assert . assertEquals ( names [ 0 ] . getItemName () ,  """"admin"""" , """"Returned role is not 'admin' for user 'testAdminUser'"""" ) ;  }
public   ImageView   getImageView ()   {  return  ( ImageView )   getView () . findViewById ( R . id . image_album_art ) ;  }
@ Override   public   ShortIndexer   get ( long []   indices ,  short []   s ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  s [ offset   +   n ]   =   getRaw ( index ( indices )   +   n ) ;  }  return  this ;  }
@ Override  public   void   onResult ( GeocodingResponse   result )   {  resps . add ( result ) ;  }
@ Test  public   void   delegatesUnhandledProtocolsToFallback ()   {  InputStream   expected   =  ResourceLoader . DEFAULT . getStream ( """"arraytestcases.json"""" ) ;  when ( fallbackClient . get ( """"http:
@ Override  public   void   appendTooltip ( ITooltip   tooltip ,  EntityAccessor   accessor ,  IPluginConfig   config )   {  tooltip . add ( IThemeHelper . get () . modName ( ModIdentification . getModName ( accessor . getEntity () ) ) ) ;  }
double   getGain ()   {  int   curIndex   =  ( int )   ( this . totalCount   -   1 )   %   this . capacity ;  int   lastIndex   =  ( int )   ( this . totalCount   -   2 )   %   this . capacity ;  return  this . queueArray [ lastIndex ]   -   this . queueArray [ curIndex ] ;  }
public   synchronized   void   putString ( String   key ,  String   value )   {  SharedPreferences . Editor   editor   =  sharedPreferences . edit () ;  editor . putString ( key ,  value ) ;  editor . apply () ;  }
public   static   LocationResult   extractResult ( Intent   intent )   {  if  ( ! hasResult ( intent ) )   return  null ;  return  intent . getExtras () . getParcelable ( EXTRA_LOCATION_RESULT ) ;  }
private   List < ServerFile >   checkOfflineFiles ( List < ServerFile >   serverFiles )   {  for  ( ServerFile   file   :  serverFiles )   {  OfflineFile   offlineFile   =  mOfflineFileRepo . getOfflineFile ( file . getName () ,  file . getModificationTime () . getTime () ) ;  if  ( offlineFile   !=   null )   {  file . setOffline ( true ) ;  if  ( offlineFile . getTimeStamp ()   <   file . getModificationTime () . getTime () )   {  offlineFile . setState ( OfflineFile . OUT_OF_DATE ) ;  mOfflineFileRepo . update ( offlineFile ) ;  startDownloadService ( file ) ;  }  }  }  return  serverFiles ;  }
@ JsonIgnore  public   Double   getBinningSampleRate ()   {  return  stats . getSampleRate () ;  }
public   List < Bookmark >   getAll ( String   datasource ,  List < Integer >   bookmarkIds )   {  return  bookmarkRepository . findAllByDatasourceAndBookmarkIdIn ( datasource ,  bookmarkIds ) ;  }
@ Override  protected   Map < String ,  MediaType >   delegate ()   {  return  delegate ;  }
@ Test  public   void   test_onCreate ()   throws  InterruptedException   {  grantRootPrivileges () ;  onView ( withId ( R . id . listview ) ) . check ( matches ( withEffectiveVisibility ( ViewMatchers . Visibility . VISIBLE ) ) ) ;  assertThat ( """"ui thread started"""" ,  activityTestRule . getActivity ()  . uiThread . isPresent () ,  is ( true ) ) ;  activityTestRule . getActivity () . uiThread . get () . join () ;  assertThat ( """"appinfo list"""" ,  activityTestRule . getActivity () . appInfoList , is ( notNullValue () ) ) ;  }
@ Override  public   void   onNotifyChunkTransferred ( int   sessionId ,  String   moduleName ,  String   sliceId ,  int   chunkNumber )   {  completionSource . trySetResult ( null ) ;  }
private   void   pregenerateNote ( String   html )   {  if  ( ! notes . containsKey ( html ) )   {  JenkinsJVM . checkJenkinsJVM () ;  ByteArrayOutputStream   baos   =  new   ByteArrayOutputStream () ;  try  {  new   SimpleHtmlNote ( html ) . encodeTo ( baos ) ;  }   catch  ( IOException   x )   {   
private   String   joinParts ( final   String   joiner ,  List < String >   parts )  {  if  ( parts . isEmpty () )  {  return  null ;  }  if  ( parts . size ()   ==   1 )  {  return  parts . get ( 0 ) ;  }  final   StringBuilder   builder   =  new   StringBuilder () ;  for  ( int   i   =  0 ;   i   <   parts . size () ;   i ++ )  {  final   String   part   =  parts . get ( i ) ;  if  ( ! part . isEmpty () )  {  builder . append ( part ) ;  if  ( parts . size ()   >   0   &&   i   !=   ( parts . size ()   -   1 ) )  {  builder . append ( joiner ) ;  }  }  }  return  builder . toString () ;  }
@ Override  public   boolean   collapsesSpaces ()  {  return  ( whitespace   !=   WHITESPACE_PRE   &&   whitespace   !=   WHITESPACE_PRE_WRAP ) ;  }
public   void   forceShutDown ()   {  this . executorService . shutdownNow () ;  try  {  this . executorService . awaitTermination ( 2 ,  TimeUnit . SECONDS ) ;  }   catch  ( InterruptedException   e )   {  Thread . currentThread () . interrupt () ;  }  }
@ Override  public   String   call ()   throws  IOException   {  Platform   currentPlatform   =  Platform . current () ;  
public   String   addApplication ( ApplicationModel   application )   throws  Exception   {  return  restClient . createApplication ( application ) ;  }
public   void   stop ( int   timeout ,  String   closeMessage )   throws  InterruptedException   {  if  ( ! isclosed . compareAndSet ( false , true ) )   {   
private   char   getVowel ( String   prevLyric )   {  if  ( prevLyric . isEmpty () )   {  return  '-' ;   
public   static   Compiler   compiler ( JavaCompiler   javaCompiler )   {  return  new   AutoValue_Compiler ( javaCompiler ,  ImmutableList . of () ,  ImmutableList . of () ,  Optional . empty () ,  Optional . empty () ) ;  }
private   List < VarSelDesc >   loadVarSelDescList ( String   varselHistory )   throws  IOException   {  Reader   reader   =  ShifuFileUtils . getReader ( varselHistory ,  SourceType . LOCAL ) ;  List < String >   autoFilterList   =  IOUtils . readLines ( reader ) ;  IOUtils . closeQuietly ( reader ) ;  List < VarSelDesc >   varSelDescList   =  new   ArrayList < VarSelDesc > () ;  for ( String   filterDesc :  autoFilterList )   {  VarSelDesc   varSelDesc   =  VarSelDesc . fromString ( filterDesc ) ;  if ( varSelDesc   !=   null )   {  varSelDescList . add ( varSelDesc ) ;  }  }  return  varSelDescList ;  }
public   float   getMinimalContentWidthLimit ()  {  float   ret ;  float   dif   =  declMargin . left   +   padding . left   +   border . left   +  declMargin . right   +   padding . right   +   border . right ;  if  ( wset )  ret   =   content . width ;  else if  ( min_size . width   !=   - 1 )  ret   =   min_size . width ;  else if  ( isInFlow () )  ret   =   ( ( BlockBox )   getContainingBlockBox () ) . getMinimalContentWidthLimit ()   -   dif ;  else  ret   =   0 ;  return  ret ;  }
public   static   ULongIndexer   create ( final   LongPointer   pointer ,  long []   sizes ,  long []   strides ,  boolean   direct )   {  return  create ( pointer ,  Index . create ( sizes ,  strides ) ,  direct ) ;  }
public   void   setVideoQuality ( double   videoQuality )   {  this . videoQuality   =   videoQuality ;  }
public   < K ,  V >   Directives   add ( final   Map < K ,  V >   nodes )   {  for  ( final   Map . Entry < K ,  V >   entry   :  nodes . entrySet () )   {  this . add ( entry . getKey () . toString () )  . set ( entry . getValue () . toString () )  . up () ;  }  return  this ;  }
public   AuthenticationRequest   username ( String   username )   {  this . username   =   username ;  return  this ;  }
@ Test  public   void   defaultSettingsWithReposInPom ()   throws  Exception   {  String   home   =  System . getProperty ( """"user.home"""" ) ;  deleteRecursively ( new   File ( """"target/thin/test/repository/org/springframework/spring-core"""" ) ) ;  String []   args   =  new   String []   {  """"--thin.dryrun=true"""" , """"--thin.archive=src/test/resources/apps/snapshots-with-repos"""" , """"--debug""""  } ;  ThinJarLauncher . main ( args ) ;  assertThat ( new   File ( home ,  """".m2/repository"""" ) . exists () ) . isTrue () ;  assertThat ( new   File ( home ,  """".m2/repository/org/springframework/spring-core"""" ) . exists () )  . isTrue () ;  }
void   performSortThatTestsTimestamps ()   {  try  {  removeOldTemporaryFiles () ;  Files . copy ( Paths . get ( inputResourceFileName ) ,  testpom . toPath () ) ;  var   pomTimestamp   =  testpom . lastModified () ;  performSorting () ;  if  ( pluginParameters . keepTimestamp )   {  assertThat ( testpom . lastModified () ,  is ( pomTimestamp ) ) ;  
public   static   SchemaLoader . SchemaLoaderBuilder   v6Loader ()   {  return  SchemaLoader . builder () . draftV6Support () ;  }
private   float   getValue ( @ Nullable   Float   t1 ,  @ Nullable   Float   t2 ,  Float   s1 ,  Float   s2 ,  Float   def ,  float   partial ,  float   zoom ,  float   leftHanded )  {  float   start   =  t1   !=   null   &&   s1   !=   null  ?   ( s1   +   ( t1   -   s1 )   *   partial )   *   leftHanded   :  ( s1   !=   null  ?   s1   *   leftHanded   :  def ) ;  float   end   =  t2   !=   null   &&   s2   !=   null  ?   ( s2   +   ( t2   -   s2 )   *   partial )   *   leftHanded   :  ( s2   !=   null  ?   s2   *   leftHanded   :  def ) ;  return  Mth . lerp ( zoom ,  start ,  end ) ;  }
public   void   calculate ( float   x ,  float   y )   {  calculate ( x ,  y ,  1f ) ;  }
@ Override  public   int   getThreadId ()   {  throw  new   UnsupportedOperationException () ;  }
public   PreferenceResp   properties ( List < PropertyReq >   properties )   {  this . properties   =   properties ;  return  this ;  }
private   void   cleanTmpModelPath ()   {  if ( ! modelConfig . getTrain () . getIsContinuous () )   {  try  {  FileSystem   fs   =  HDFSUtils . getFS () ;  
public   boolean   setCameraParam ( int   param ,  int   val )  {  return  CLEyeSetCameraParameter ( cameraInstance ,  param ,  val ) ;  }
public   static   float   getCriticalChance ( ItemStack   weapon )  {  float   chance   =  0F ;  for ( int   i   =  0 ;   i   <   IAttachment . Type . values () . length ;   i ++ )  {  IGunModifier []   modifiers   =  getModifiers ( weapon ,  IAttachment . Type . values () [ i ] ) ;  for ( IGunModifier   modifier   :  modifiers )  {  chance   +=   modifier . criticalChance () ;  }  }  chance   +=   GunEnchantmentHelper . getPuncturingChance ( weapon ) ;  return  Mth . clamp ( chance ,  0F ,  1F ) ;  }
public   Attachment   save ( String   string )   throws  IOException   {  return  writeAttachment ( string . getBytes ( Charsets . UTF_8 ) ,  """"other-title"""" ) ;  }
@ Override  public   Set < ?   extends  Class < ? > >   getRequiredContext ()   {  return  Collections . singleton ( TaskListener . class ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  GrantTypeMetaData   grantTypeMetaData   =  ( GrantTypeMetaData )   o ;  return  Objects . equals ( this . options ,  grantTypeMetaData . options ) ;  }
@ Bean  @ ConditionalOnMissingBean  @ ConditionalOnEnabledHealthIndicator ( """"eureka"""" )  public   EurekaHealthIndicator   eurekaHealthIndicator ( EurekaClient   eurekaClient , EurekaInstanceConfig   instanceConfig ,  EurekaClientConfig   clientConfig )   {  return  new   EurekaHealthIndicator ( eurekaClient ,  instanceConfig ,  clientConfig ) ;  }
@ Test  public   void   testSchemaExtensionPointUsingPlatformURL ()   throws  Exception   {  testErrorFile ( """"depp.yml"""" ) ;  }
@ NonNull  @ Override  public   String   getPluginName ()   {  return  """"GroupAdmin"""" ;  }
@ SuppressWarnings ( """"unchecked"""" )  @ Test  void   dropRightWhile ()   {  assertEquals ( """"[1, 2]"""" ,  U . dropRightWhile ( asList ( 1 ,  2 ,  3 ) ,  n  ->   n   >   2 ) . toString () ) ;  assertEquals ( """"[1, 2]"""" , new   U ( asList ( 1 ,  2 ,  3 ) ) . dropRightWhile ( ( Predicate < Integer > )   n  ->   n   >   2 ) . toString () ) ;  assertEquals ( """"[1, 2]"""" ,  U . chain ( asList ( 1 ,  2 ,  3 ) ) . dropRightWhile ( n  ->   n   >   2 ) . value () . toString () ) ;  }
@ Test ( groups   =   """"organizationDiscoveryPaginationTests"""" ,  dependsOnMethods   =   """"testEnableEmailDomainDiscovery"""" )  public   void   testDisableEmailDomainDiscovery ()   {  String   emailDomainIsEnabled   =  """"properties.find { it.key == 'emailDomain.enable' }?.value ?: false"""" ;  
@ Override  public   boolean   onOptionsItemSelected ( MenuItem   item )   {  if  ( item . getItemId ()   ==   android . R . id . home )   {  finish () ;  return  true ;  }  return  super . onOptionsItemSelected ( item ) ;  }
public   void   onNotifyModuleCompleted ( int   sessionId ,  String   moduleName )   {  completionSource . trySetException ( new   Exception ( """"Unexpected callback: onNotifyModuleCompleted"""" ) ) ;  }
@ Override  public   void   doWrite ( DataOutput   out )   throws  IOException   {  out . writeInt ( this . seedPerfList . size () ) ;  for ( CandidatePerf   seedPerf   :  this . seedPerfList )   {  out . writeInt ( seedPerf . getId () ) ;  out . writeDouble ( seedPerf . getVerror () ) ;  }  }
@ ApiModelProperty ()  @ JsonProperty ( """"isEnabled"""" )  @ Valid  public   Boolean   getIsEnabled ()   {  return  isEnabled ;  }
@ Override  public   void   onResponse ( Call < List < ServerFile > >   call ,  Response < List < ServerFile > >   response )   {  if  ( response . isSuccessful () )   {  List < ServerFile >   serverFiles   =  response . body () ;  if  ( serverFiles   ==   null )   {  serverFiles   =   Collections . emptyList () ;  }  for  ( ServerFile   serverFile   :  serverFiles )   {  serverFile . setParentFile ( serverDirectory ) ;  serverFile . setParentShare ( serverShare ) ;  }  BusProvider . getBus () . post ( new   ServerFilesLoadedEvent ( serverFiles ) ) ;  }   else  this . onFailure ( call ,  new   HttpException ( response ) ) ;  }
@ Bean  public   EurekaServerBootstrap   eurekaServerBootstrap ( PeerAwareInstanceRegistry   registry , EurekaServerContext   serverContext )   {  return  new   EurekaServerBootstrap ( this . applicationInfoManager ,  this . eurekaClientConfig ,  this . eurekaServerConfig , registry ,  serverContext ) ;  }
public   SmoothChasingValue   withSpeed ( float   speed )   {  this . speed   =   speed ;  return  this ;  }
@ ApiModelProperty ( example   =   """"SAML2 Inbound"""" )  @ JsonProperty ( """"name"""" )  @ Valid  public   String   getName ()   {  return  name ;  }
public   static   String   loadServersFromAsset ( Context   context )   {  String   json   =  """"[]"""" ;  try  {  InputStream   is   =  context . getAssets () . open ( """"customServers.json"""" ) ;  int   size   =  is . available () ;  byte []   buffer   =  new   byte [ size ] ;  is . read ( buffer ) ;  is . close () ;  json   =   new   String ( buffer ,  StandardCharsets . UTF_8 ) ;  }   catch  ( IOException   ignored )   {  }  return  json ;  }
public   void   addRelation ( Name   dest ,  RelationType   rt ,  RelationDirection   d )   {  RelationPattern   ri   =  relatedClasses . get ( dest . toString () ) ;  if  ( ri   ==   null )   {  ri   =   new   RelationPattern ( RelationDirection . NONE ) ;  relatedClasses . put ( dest . toString () ,  ri ) ;  }  ri . addRelation ( rt ,  d ) ;  }
ScriptBuilder   setFailUnstable ( Boolean   failUnstable )   {  this . failUnstable   =   failUnstable ;  return  this ;  }
@ Override  public   void   onClick ( DialogInterface   dialog ,  int   which )   {  Editor   editor   =  PreferenceManager . getDefaultSharedPreferences ( activity ) . edit () ;  editor . remove ( OSMTracker . Preferences . KEY_OSM_OAUTH2_ACCESSTOKEN ) ;  editor . commit () ;  dialog . dismiss () ;  }
@ Override  public   boolean   playerRemove ( String   world ,  String   player ,  String   permission )   {  return  API . removePlayerPermission ( player ,  world ,  permission ) ;  }
public   static   String   objectToString ( Object   object )   {  if  ( object   ==   null )   {  return  null ;  }  if  ( object   instanceof   Long )   {  return  ( ( Long )   object ) . toString () ;  }  if  ( object   instanceof   Double )   {  if  ( Double . isNaN ( ( Double )   object )   ||   Double . isInfinite ( ( Double )   object ) )   {  return  object . toString () ;  }  return  BigDecimal . valueOf ( ( Double )   object ) . toPlainString () ;  }  return  object . toString () ;  }
public   void   setSslContext ( SSLContext   sslContext )   {  this . sslContext   =   sslContext ;  }
@ Benchmark  public   void   benchmarkPageLoad ( JenkinsState   state ,  WebClientState   webClientState )   throws  Exception   {  webClientState . webClient . goTo ( """""""" ) ;  }
@ Test  @ Timeout ( 5000 )  public   void   testHandshakeRejectionTestCase1 ()   throws  Exception   {  testProtocolRejection ( 1 ,  new   Draft_6455 () ) ;  }
@ Test  public   void   testMultiSentenceChunks ()   {  for  ( Token < String >   chunk   :  lexLib . getChunks ( joinedText ) )   {  assertEquals ( chunk . getToken () ,  joinedText . substring ( chunk . getStart () ,  chunk . getEnd () ) ) ;  }  }
public   String   getVideoOption ( String   key )   {  return  videoOptions . get ( key ) ;  }
@ Test  public   void   testEquals_false ()   {  GithubSecurityRealm   a   =  new   GithubSecurityRealm ( """"http:
public   Frame   grabColor ()   throws  Exception   {  if  ( ! triggerMode )  readNextFrameSet () ;  return  grabCVFrame ( RS2_STREAM_COLOR ,  0 ,  IPL_DEPTH_8U ,  3 ) ;  }
public   boolean   getIsRecoverAuto ()   {  return  getBooleanParam ( this . otherConfigs ,  Constants . IS_TO_RECOVER_AUTO ) ;  }
@ Override  public   int   gpioGetPWMrealRange ( int   pin )   {  logger . trace ( """"[PWM-REAL-RANGE::GET] -> PIN: {}"""" ,  pin ) ;  validateReady () ;  validateUserPin ( pin ) ;  PiGpioPacket   result   =  sendCommand ( PRRG ,  pin ) ;  var   range   =  result . result () ;  logger . trace ( """"[PWM-REAL-RANGE::GET] <- PIN: {}; RANGE={}; SUCCESS={}"""" ,   pin ,  range ,  result . success () ) ;  validateResult ( result ) ;    
public   static   void   saveJson ( Context   context ,  String   key ,  JSONObject   json )   throws  IOException   {  writeStringToFile ( json . toString () ,  jsonFile ( context ,  key ) ) ;  }
@ Test  void   logsToStringResult ()   {  final   StringWriter   writer   =  new   StringWriter () ;  Logger . getRootLogger () . addAppender ( new   WriterAppender ( new   SimpleLayout () ,  writer ) ) ;  new   LoggableTest . Foo () . last ( """"TEST"""" ) ;  MatcherAssert . assertThat ( writer . toString () , new   LoggableTest . RegexContainsMatcher ( LoggableTest . RESULT ) ) ;  }
private   static   Compiler   compilerWithGenerator ()   {  return  javac () . withProcessors ( new   GeneratingProcessor ( """"test.generated"""" ) ) ;  }
public   static   void   downloadCsv ( HttpServletResponse   response ,  String   fileName ,  String   datasource , String   queryId ,  String   encode ,  boolean   showHeader ,  boolean   showBOM )   {  response . setContentType ( """"text/csv"""" ) ;  response . setHeader ( """"Content-Disposition"""" ,  """"inline; filename=\""""""""   +   fileName   +   """"\"""""""" ) ;  download ( response ,  datasource ,  queryId ,  encode ,  showHeader ,  showBOM ,  ',' ) ;  }
@ Override  protected   void   afterHookedMethod ( MethodHookParam   param )   throws  Throwable   {  var   idx   =  ReflectionUtils . findIndexOfType ( param . args ,  Activity . class ) ;  var   homeActivity   =  ( Activity )   param . args [ idx ] ;  var   toolbar   =  ( ViewGroup )   homeActivity . findViewById ( Utils . getID ( """"toolbar"""" ,  """"id"""" ) ) ;  var   logo   =  toolbar . findViewById ( Utils . getID ( """"toolbar_logo_text"""" ,  """"id"""" ) ) ;  if  ( logo   !=   null )   {  logo . setVisibility ( View . GONE ) ;  }  }
@ Override  public   boolean   incrementToken ()   throws  IOException   {  if  ( ! addedBol )   {  termAtt . setEmpty () . append ( bol ) ;  addedBol   =   true ;  return  true ;  }  if  ( input . incrementToken () )   {  return  true ;  }  if  ( ! addedEol )   {  termAtt . setEmpty () . append ( eol ) ;  addedEol   =   true ;  return  true ;  }  return  false ;  }
public   void   setRootElement ( org . w3c . dom . Element   root )  {  this . root   =   root ;  }
@ Restricted ( DoNotUse . class )  public   String   impliedByList ( Permission   p )   {  List < Permission >   impliedBys   =  new   ArrayList <> () ;  while  ( p . impliedBy   !=   null )   {  p   =   p . impliedBy ;  impliedBys . add ( p ) ;  }  return  StringUtils . join ( impliedBys . stream () . map ( Permission :: getId ) . collect ( Collectors . toList () ) ,  """" """" ) ;  }
static   TypedCompilationUnit   create ( CompilationUnitTree   tree )   {  return  new   AutoValue_JavaSourcesSubject_TypedCompilationUnit ( tree ,  getTopLevelTypes ( tree ) ) ;  }
private   static   boolean   doesNotHaveBaseLanguage ( Language   lang )   {  return  lang . getBaseLanguage ()   ==   null ;  }
public   TemplateProcessor   withWorkingDir ( File   workingDir )   {  this . myWorkingDir   =   workingDir ;  return  this ;  }
public   TenantModel   addOwnersItem ( Owner   ownersItem )   {  this . owners . add ( ownersItem ) ;  return  this ;  }
public   LaunchCommandBuilder   withJenkinsUrl ( URL   url )   {  this . jenkinsMaster   =   url ;  return  this ;  }
public   void   randomize ( final   float []   f ,  final   int   begin , final   int   size )   {  for  ( int   i   =  0 ;   i   <   size ;   i ++ )   {  f [ begin   +   i ]   =   randomize () ;  }  }
@ Test  public   void   testUpdateSecretTypeByInvalidName ()   throws  IOException   {  if  ( ! StringUtils . equals ( MultitenantConstants . SUPER_TENANT_DOMAIN_NAME ,  tenant ) )   {  String   body   =  readResource ( """"update-secret-type.json"""" ) ;  Response   response   =  getResponseOfPut ( SECRET_TYPE_API_BASE_PATH   +   PATH_SEPARATOR   +   """"randomName"""" ,  body ) ;  validateErrorResponse ( response ,  HttpStatus . SC_NOT_FOUND ,  """"SECRETM_00021"""" ) ;  }  }
@ Test  public   void   testRequireWithConsumerFailure ()   {  SchemaException   thrown   =  assertThrows ( SchemaException . class ,  ()  ->  {  Consumer < JsonValue >   consumer   =  mockConsumer () ;  subject () . require ( """"aaa"""" ,  consumer ) ;  verify ( consumer ,  never () ) . accept ( any () ) ;  } ) ;  assertEquals ( """"#: required key [aaa] not found"""" ,  thrown . getMessage () ) ;  }
public   static   RoleItemAddGroupobj . OpEnum   fromValue ( String   value )   {  for  ( RoleItemAddGroupobj . OpEnum   op   :  RoleItemAddGroupobj . OpEnum . values () )   {  if  ( op . value . equals ( value ) )   {  return  op ;  }  }  throw  new   IllegalArgumentException ( """"Unexpected value '""""   +   value   +   """"'"""" ) ;  }
private   Animator   createFadeInAnimator ( View   view )   {  return  ObjectAnimator . ofFloat ( view ,  View . ALPHA ,  0.0f ,  1.0f ) . setDuration ( 500 ) ;  }
public   void   setLifecycleStatus ( LifeCycleStatus   lifecycleStatus )   {  this . lifecycleStatus   =   lifecycleStatus ;  }
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( """"class AuthenticationStep {\n"""" ) ;  sb . append ( """"    id: """" ) . append ( toIndentedString ( id ) ) . append ( """"\n"""" ) ;  sb . append ( """"    options: """" ) . append ( toIndentedString ( options ) ) . append ( """"\n"""" ) ;  sb . append ( """"}"""" ) ;  return  sb . toString () ;  }
public   < R >   R   requireString ( Function < String ,  R >   mapper )   {  if  ( obj   instanceof   String )   {  return  mapper . apply ( ( String )   obj ) ;  }  throw  ls . createSchemaException ( typeOfValue () ,  String . class ) ;  }
@ Override  public   void   run ()   {  try  ( Transaction   tx   =  startNode . getGraphDatabase () . beginTx () )   {  for  ( Path   p   :  traversalDescription . traverse ( startNode ) )   {  logger . finest ( p . toString () ) ;   
public   static   double   ofWeightedRoc ( List < PerformanceObject >   weightedRoc )   {  return  calculateArea ( weightedRoc ,  Performances . weightedFpr () ,  Performances . weightedRecall () ) ;  }
@ ParameterizedTest  @ MethodSource ( """"parametersForGenerateSingleLogicalTypeRandomValue"""" )  void   generateSingleLogicalTypeRandomValue ( final   String   fieldType ,  final   Integer   valueLength ,  final   List < String >   fieldValuesList , final   Object   expected ,  final   Map < ConstraintTypeEnum ,  String >   constraints )   {  Assertions . assertThat ( new   RandomObject () . generateRandom ( fieldType ,  valueLength ,  fieldValuesList ,  constraints ) ) . isEqualTo ( expected ) ;  }
public   String   getName ()   {  return  name   ==   null   ||   name . trim () . length ()   ==   0  ?   Messages . CoverageElement_Project ()   :  name ;  }
 <argument pos:start=""""""""179:61"""""""" pos:end=""""""""179:62""""""""><expr pos:start=""""""""179:61"""""""" pos:end=""""""""179:62""""""""><literal type=""""""""number"""""""" pos:start=""""""""179:61"""""""" pos:end=""""""""179:62"""""""">0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Override  public   DriveServiceResponse   openContents ( OpenContentsRequest   request ,  IDriveServiceCallbacks   callbacks )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: openContents"""" ) ;  return  null ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( idp ,  authenticator ) ;  }
@ Override   public   void   setImageMode ( ImageMode   imageMode )   {  if  ( imageMode   !=   this . imageMode )   {  returnMatrix   =   null ;  }  super . setImageMode ( imageMode ) ;  }
@ Test  public   void   testValidatePostTrain ()   throws  Exception   {  ModelConfig   config   =  CommonUtils . loadModelConfig () ;  ValidateResult   result   =  instance . probe ( config ,  ModelStep . POSTTRAIN ) ;  Assert . assertTrue ( result . getStatus () ) ;  }
@ Test  void   rootRefSuccess ()   {  JsonPointerEvaluator   pointer   =  JsonPointerEvaluator . forDocument ( rootSchemaJson ,  """"#"""" ) ;  JsonObject   actual   =  pointer . query () . getQueryResult () . requireObject () ;  assertSame ( rootSchemaJson ,  actual ) ;  }
void   fixTrans ()   {  matrix . getValues ( m ) ;  float   transX   =  m [ Matrix . MTRANS_X ] ;  float   transY   =  m [ Matrix . MTRANS_Y ] ;  float   fixTransX   =  getFixTrans ( transX ,  viewWidth ,  origWidth   *   saveScale ) ;  float   fixTransY   =  getFixTrans ( transY ,  viewHeight ,  origHeight   *   saveScale ) ;  if  ( fixTransX   !=   0   ||   fixTransY   !=   0 )  matrix . postTranslate ( fixTransX ,  fixTransY ) ;  }
public   boolean   completeContactKey ()   {  return  pathResolver . childOfContact ( psiElement ) ;  }
public   boolean   getRentedAutoRepeats ( String   landName )  {  return  getRentableRepeatable ( landName )  ?   ( rentedLand . containsKey ( landName )  ?   rentedLand . get ( landName ) . autoRefresh   :  false )   :  false ;  }
public   Map < Integer ,  Integer >   getColumnNumIndexMapping ()   {  return  columnNumIndexMapping ;  }
private   static   List < FieldValueMapping >   processFieldList ( final   TypeElement   fieldList ,  final   List < String >   imports ,  final   Map < String ,  TypeElement >   nestedTypes )   {  final   List < FieldValueMapping >   completeFieldList   =  new   ArrayList <> () ;  processField ( fieldList ,  completeFieldList ,  imports ,  false ,  nestedTypes ) ;  return  completeFieldList ;  }
@ NotNull  @ Override  public   DataIndexer < String ,  Set < String > ,  FileContent >   getIndexer ()   {  return  new   OpenApiDataIndexer () ;  }
public   void   updateWeights ( WDLParams   params )   {  updateWeights ( params . getWnd () ) ;  
private   String   getServerTime ()   {  Calendar   calendar   =  Calendar . getInstance () ;  SimpleDateFormat   dateFormat   =  new   SimpleDateFormat ( """"EEE, dd MMM yyyy HH:mm:ss z"""" ,  Locale . US ) ;  dateFormat . setTimeZone ( TimeZone . getTimeZone ( """"GMT"""" ) ) ;  return  dateFormat . format ( calendar . getTime () ) ;  }
private   static   String   stripLyric ( String   lyric ,  VoicebankData   voicebankData )   {  String   prefix   =  LyricUtils . guessJpPrefix ( lyric ,  voicebankData ) ;  String   suffix   =  LyricUtils . guessJpSuffix ( lyric ,  voicebankData ) ;  return  LyricUtils . stripPrefixSuffix ( lyric ,  prefix ,  suffix ) ;  }
private   void   initiateVersionsPathTextView ()   {  mPathView   =   mView . findViewById ( R . id . directoryTextView ) ;  String   currentPath   =  getVersionsPath () ;  mPathView . setText ( currentPath ) ;  mPathView . setOnClickListener ( view  ->  startActivityForResult ( FolderPickerActivity . createIntent ( getContext () ,  currentPath ,  null ) ,  FolderPickerActivity . DIRECTORY_REQUEST_CODE ) ) ;  }
public   static   void   appendTooltip ( ITooltip   tooltip ,  @ Nullable   Entity   displayEntity ,  MutableComponent   name )   {  if  ( displayEntity   ==   null )   {  return;  }  name   =   Component . translatable ( """"jade.spawner"""" ,  name ,  displayEntity . getDisplayName () ) ;  tooltip . replace ( JadeIds . CORE_OBJECT_NAME ,  IThemeHelper . get () . title ( name ) ) ;  }
@ Override  public   float   getCoverImageAspectRatio ()   {  return  this . coverImageAspectRatio ;  }
public   Is24HourSource   getIs24HourSource ()   {  return  is24hourSourceProp . getValue () ;  }
public   static   void   assertHasNoPermission ( User   user ,  final   AccessControlled   item ,  final   Permission ...   permissions )   {  for  ( Permission   permission   :  permissions )   {  assertNoPermission ( user ,  item ,  permission ) ;  }  }
@ Override  public   void   setStyle ( NodeData   s )  {  super . setStyle ( s ) ;  loadBlockStyle () ;  }
@ Override  public   void   setZIndex ( float   zIndex )   throws  RemoteException   {  }
private   void   stereotype ( Options   opt ,  Element   c ,  Align   align )   {  List < String >   tags   =  TagUtil . getTag ( docTrees ,  c ,  """"stereotype"""" ) ;  if  ( tags . isEmpty () )   {  return;  }  for  ( String   tag   :  tags )   {  String   t []   =  tokenize ( tag ) ;  if  ( t . length   !=   1 )   {  System . err . println ( """"@stereotype expects one field: """"   +   tag ) ;  continue;  }  tableLine ( align ,  guilWrap ( opt ,  t [ 0 ] ) ) ;  }  }
@ Override  public   SpiConfigBuilder   flags ( Long   flags )   {  this . properties . put ( SpiConfig . FLAGS_KEY ,  flags . toString () ) ;  return  this ;  }
@ Override  public   Pwm   applyPreset ( String   name )   throws  IOException   {  String   key   =  name . toLowerCase () . trim () ;  if ( presets . containsKey ( key ) )   {  PwmPreset   preset   =  presets . get ( key ) ;  if ( preset . dutyCycle ()   !=   null )  setDutyCycle ( preset . dutyCycle () . floatValue () ) ;  if ( preset . frequency ()   !=   null )  setFrequency ( preset . frequency () . intValue () ) ;  on () ;   
@ DataBoundSetter  public   void   setTrendsLimit ( int   trendsLimit )   {  this . trendsLimit   =   trendsLimit ;  }
private   static   int   safeParseInt ( String   number ,  int   backup )   {  try  {  return  Integer . parseInt ( number ) ;  }   catch  ( NumberFormatException   e )   {  System . out . println ( """"Warning: Unable to parse integer value in VSQx."""" ) ;  return  backup ;  }  }
@ Override  protected   ReactRootView   createRootView ()   {  ReactRootView   reactRootView   =  new   ReactRootView ( getContext () ) ;  
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"addedScopes"""" )  @ Valid  public   List < ScopeGetModel >   getAddedScopes ()   {  return  addedScopes ;  }
private   boolean   layoutChangeHandlerAvailable ()   {  return  layoutChangeHandler   !=   null ;  }
private   boolean   commandResSublist ( String []   args ,  boolean   resadmin ,  Player   player ,  int   page )   {  if  ( args . length   ==   1   ||   args . length   ==   2   ||   args . length   ==   3 )   {  ClaimedResidence   res ;  if  ( args . length   ==   1 )   {  res   =   rmanager . getByLoc ( player . getLocation () ) ;  }   else  {  res   =   rmanager . getByName ( args [ 1 ] ) ;  }  if  ( res   !=   null )   {  res . printSubzoneList ( player ,  page ) ;  }   else  {  player . sendMessage ( ChatColor . RED   +   language . getPhrase ( """"InvalidResidence"""" ) ) ;  }  return  true ;  }  return  false ;  }
public   boolean   validateSAMLResponse ( HttpResponse   response ,  String   userName )   throws  IOException   {  BufferedReader   bufferedReader   =  new   BufferedReader ( new   InputStreamReader ( response . getEntity () . getContent () ) ) ;  StringBuffer   buffer   =  new   StringBuffer () ;  String   line   =  """""""" ;  while  ( ( line   =   bufferedReader . readLine () )   !=   null )   {  buffer . append ( line ) ;  }  bufferedReader . close () ;  assertLocalClaims ( buffer . toString () ) ;  return  buffer . toString () . contains ( """"You are logged in as """" ) ;  }
public   void   setPlayerSuffix ( String   world ,  OfflinePlayer   player ,  String   suffix )   {  PermissionUser   user   =  getUser ( player ) ;  if  ( user   !=   null )   {  user . setSuffix ( suffix ,  world ) ;  }  }
@ Override  public   List < Double >   getDataBin ()   {  List < NumBinInfo >   mergedBinInfos   =  combineEmptyBin ( binInfos ) ;  if  (  mergedBinInfos . size ()   >   super . expectedBinningNum  )   {  double   totalInstCnt   =  getTotalInstCount ( mergedBinInfos ) ;  mergedBinInfos   =   adjustBinInfos ( mergedBinInfos ,  super . expectedBinningNum ,  totalInstCnt ) ;  }  List < Double >   retBins   =  new   ArrayList < Double > () ;  for  (  NumBinInfo   numBinInfo   :  mergedBinInfos )   {  retBins . add ( numBinInfo . getLeftThreshold () ) ;  }  return  retBins ;  }
@ Override  public   URI   getUri ()   {  return  DefaultServiceInstance . getUri ( this ) ;  }
public   static   Logger   create ( Class   cls )   {  String   s   =  System . getProperty ( """"org.bytedeco.javacpp.logger"""" ,  """""""" ) . toLowerCase () ;  if  ( s . equals ( """"slf4j"""" )   ||   s . equals ( """"slf4jlogger"""" ) )   {  return  new   Slf4jLogger ( cls ) ;  }   else  {  return  new   Logger () ;  }  }
@ JsonIgnore  @ Deprecated  public   Boolean   getGbtConvertToProb ()   {  return  gbtConvertToProb ;  }
public   List < String >   clear_expired_and_get_history ()  {  long   now_ms   =  System . currentTimeMillis () ;  List < String >   dst   =  new   ArrayList < String > () ;  Iterator < HistoryEntry >   it   =  _history . iterator () ;  while  ( it . hasNext () )  {  HistoryEntry   ent   =  it . next () ;  if  ( ent . expiry_timestamp   <=   now_ms )  it . remove () ;  else  dst . add ( ent . content ) ;  }  return  dst ;  }
@ Test  public   void   stringToStringListTest ()   {  String   str   =  """"[1,2,3,,4]"""" ;  List < Integer >   list   =  CommonUtils . stringToIntegerList ( str ) ;  Assert . assertTrue ( list . get ( 0 )   ==   1 ) ;  }
default   DigitalOutput   toggle ()   throws  IOException   {  return  this . state ( DigitalState . getInverseState ( this . state () ) ) ;  }
default   CharBuffer   readRegisterCharBuffer ( int   register ,  int   offset ,  int   numberOfBytes )   throws  IOReadException   {  return  readRegisterCharBuffer ( register ,  StandardCharsets . US_ASCII ,  offset ,  numberOfBytes ) ;  }
public   static   int   eventRemoveFunc ( int   event ) {  return  eventSetFunc ( event ,  null ) ;  }
@ Override  public   ReactNativeHost   getReactNativeHost ()   {  return  mReactNativeHost ;  }
@ Test  public   void   testInitSeeds ()   throws  Exception   {  CandidatePopulation   seeds   =  generator . initSeeds () ;  System . out . println ( seeds ) ;  }
@ Test  public   void   requiresIntegerSuccess ()   {  NumberSchema . builder () . requiresInteger ( true ) . build () . validate ( 10 ) ;  }
@ Test ( dependsOnMethods   =   """"testGetDiscoveryAttributesOfOrganizations"""" )  public   void   testGetDiscoveryAttributesOfOrganization ()   {  String   endpointURL   =  ORGANIZATION_MANAGEMENT_API_BASE_PATH   +   PATH_SEPARATOR   +   organizationID  +   ORGANIZATION_DISCOVERY_API_PATH ;  Response   response   =  getResponseOfGetWithOAuth2 ( endpointURL ,  m2mToken ) ;  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_OK )  . body ( """"attributes[0].type"""" ,  equalTo ( """"emailDomain"""" ) )  . body ( """"attributes[0].values[0]"""" ,  equalTo ( """"abc.com"""" ) ) ;  }
@ Override  public   PwmPresetBuilder   dutyCycle ( Number   dutyCycle )   {  float   dc   =  dutyCycle . floatValue () ;  
public   static   String   getComment ( DocTrees   docTrees ,  Element   c )   {  List < String >   comments   =  getTag ( docTrees ,  c ,  """"comment"""" ) ;  if  ( comments   ==   null   ||   comments . isEmpty () )   {  return  """""""" ;  }  return  comments . get ( 0 ) ;  }
public   String   getModelConfigPath ( SourceType   sourceType )   {  return  getPathBySourceType ( Constants . MODEL_CONFIG_JSON_FILE_NAME ,  sourceType ) ;  }
public   void   createUser ( SAMLConfig   config )   {  log . info ( """"Creating User """"   +   config . getUser () . getUsername () ) ;  try  {  
@ After  public   void   tearDown ()   throws  Exception   {  database . close () ;  connection   =   null ;  database   =   null ;  compareControl   =   null ;  }
public   static   String   kill ( String   resourceManagerUrl ,  String   applicationId )   {  try  {  Request   request   =  Request . Put ( resourceManagerUrl   +   """"/ws/v1/cluster/apps/""""   +   applicationId   +   """"/state"""" ) ;  request . addHeader ( new   BasicHeader ( """"Content-Type"""" ,  APPLICATION_JSON ) ) ;  String   json   =  OBJECT_MAPPER . writeValueAsString ( Map . of ( """"state"""" ,  """"KILLED"""" ) ) ;  request . body ( new   StringEntity ( json ,  UTF_8 ) ) ;  return  request . execute () . returnContent () . asString ( UTF_8 ) ;  }   catch  ( IOException   e )   {  throw  new   RuntimeException ( e ) ;  }  }
public   static   Node   readYamlFile ( File   file )   {  Yaml   yaml   =  new   Yaml () ;  Node   node   =  yaml . load ( """""""" ) ;  if  ( ! file . canRead () )   {  return  node ;  }  try  {  node   =   yaml . represent ( yaml . load ( FileUtils . openInputStream ( file ) ) ) ;  }   catch  ( IOException   e )   {  
@ BeforeClass ( alwaysRun   =   true )  public   void   initTest ()   throws  Exception   {  super . initTest () ;  
@ Test  public   void   responseWriteOnlyIncreased ()   {  BackwardIncompatibleProp   prop   =  RESPONSE_WRITEONLY_INCREASED ;  assertSpecIncompatible ( BASE ,  """"bc_response_writeonly_increased.yaml"""" ,  prop ) ;  }
public   Handshakedata   translateHandshake ( ByteBuffer   buf )   throws  InvalidHandshakeException   {  return  translateHandshakeHttp ( buf ,  role ) ;  }
@ Override   public   boolean   equals ( Object   o )   {  if  ( o   instanceof   Marker )   {  Marker   m   =  ( Marker ) o ;  return  m . id   ==   id   &&   Arrays . equals ( m . corners ,  corners ) ;  }  return  false ;  }
private   WorkflowJob   getBaseJob ( String   jobName )   throws  Exception   {  WorkflowJob   job   =  jenkinsRule . jenkins . createProject ( WorkflowJob . class ,  jobName ) ;  FilePath   workspace   =  jenkinsRule . jenkins . getWorkspaceFor ( job ) ;  FilePath   report   =  workspace . child ( """"target"""" ) . child ( """"dependency-check-report.xml"""" ) ;  report . copyFrom ( DependencyCheckStepTest . class . getResourceAsStream ( """"/org/jenkinsci/plugins/DependencyCheck/parser/dependency-check-report.xml"""" ) ) ;  return  job ;  }
@ Override  public   boolean   equals ( java . lang . Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  PushAuthorizationRequestConfiguration   pushAuthorizationRequestConfiguration   =  ( PushAuthorizationRequestConfiguration )   o ;  return  Objects . equals ( this . requirePushAuthorizationRequest ,  pushAuthorizationRequestConfiguration . requirePushAuthorizationRequest ) ;  }
@ Hide  public   static   PublicKeyCredentialType   fromString ( String   type )   throws  UnsupportedPublicKeyCredTypeException   {  for  ( PublicKeyCredentialType   value   :  values () )   {  if  ( value . value . equals ( type ) )   return  value ;  }  throw  new   UnsupportedPublicKeyCredTypeException ( """"PublicKeyCredentialType """"   +   type   +   """" not supported"""" ) ;  }
protected   String   durationOrPlainExpression ( String   expression ,  Class < ?   extends  Job >   clazz )   {  if  ( expression . isEmpty ()   ||   expression . matches ( """"\\$\\{.*\\}"""" ) )   {  JobConfiguration   configuration   =  mediator . getConfiguration () ;  String   fromConfig   =  readDurationFromConfig ( expression ,  clazz ,  configuration ) ;  expression   =   ! isEmpty ( fromConfig )  ?   fromConfig   :  expression ;  log . info ( clazz   +   """" is configured in the config file to run every """"   +   expression ) ;  }  return  expression ;  }
public   byte []   readEntireMockBuffer ()   {  var   bytes   =  new   byte [ raw . size () ] ;  for  ( int   i   =  0 ;   ! raw . isEmpty () ;   ++ i )   {  bytes [ i ]   =   raw . pop () ;  }  logger . info ( """"{} READALL (0x{})"""" ,  logPreamble ,  StringUtil . toHexString ( bytes ) ) ;  return  bytes ;  }
@ Test  public   void   allPropertiesProject ()   {  TinkerGraph   graph   =  new   TinkerGraph () ;  Vertex   v   =  graph . addVertex ( 1 ) ;  v . setProperty ( CommonProperties . IRI ,  """"http:
public   void   setServerClientId ( String   serverClientId )   {  this . serverClientId   =   serverClientId ;  }
public   boolean   completeServerVariableKey ()   {  return  pathResolver . childOfServerVariable ( psiElement ) ;  }
@ Test  public   void   builderUsesDefaultSchemaClient ()   {  SchemaLoaderBuilder   actual   =  SchemaLoader . builder () ;  assertNotNull ( actual ) ;  assertTrue ( actual . schemaClient   instanceof   DefaultSchemaClient ) ;  }
public   UvmEntry   build ()   {  return  new   UvmEntry ( userVerificationMethod ,  keyProtectionType ,  matcherProtectionType ) ;  }
public   static   String   formatXml ( String   xml ,  XmlStringBuilder . Step   identStep )   {  Object   result   =  fromXml ( xml ,  FromType . FOR_FORMAT ) ;  return  toXml ( ( Map )   result ,  identStep ,  ROOT ) ;  }
@ Override  public   void   tick ()  {  this . prevRotation   =   this . rotation ;  this . prevScale   =   this . scale ;  this . rotation   +=   4 ;  this . scale   *=   0.75F ;  }
@ Test  public   void   testNoExpressionAndNoVars ()   throws  Exception   {  String   result   =  UriTemplate . expand ( """"https:
@ Override  public   String []   getPlayerGroups ( String   world ,  String   player )   {  OfflinePlayer   op   =  Bukkit . getOfflinePlayer ( player ) ;  GroupSet   set   =  perms . getGroupManager () . getWorldSet ( Bukkit . getWorld ( world ) ) ;  User   user   =  set . getUser ( op ) ;  Set < Group >   children   =  user . getChildren ( true ) ;  List < String >   groups   =  new   ArrayList < String > () ;  for  ( Group   child   :  children )   {  groups . add ( child . getName () ) ;  }  return  groups . toArray ( new   String [ groups . size () ] ) ;  }
public   Value   withContentInclusion ( Include   incl )   {  return  ( incl   ==   _contentInclusion )  ?   this  :  new   Value ( _valueInclusion ,  incl ,  _valueFilter ,  _contentFilter ) ;  }
@ Override  public   boolean   process ( final   Set < ?   extends  TypeElement >   annotations , final   RoundEnvironment   env )   {  for  ( final   TypeElement   type   :  annotations )   {  this . checkMethods ( env ,  type ) ;  }  return  true ;  }
public   static   Version   parseVersion ( final   String   version )   {  String   v   =  StringUtils . trimToNull ( version ) ;  if  ( v   ==   null )   {  return  emptyVersion ;  }  return  new   Version ( v ) ;  }
public   void   printConfig ()   {  System . out . println ( """"********* Configuration *********"""" ) ;  map . forEach ( ( key ,  value )  ->   System . out . println ( key   +   """": """"   +   value ) ) ;  System . out . println ( """"*********************************"""" ) ;  }
public   static   PiGpio   newInstance ()   {  return  new   PiGpioSocketImpl ( DEFAULT_HOST ,  DEFAULT_PORT ) ;  }
@ Override  public   void   handleServiceRequest ( IGmsCallbacks   callback ,  GetServiceRequest   request ,  GmsService   service )   {  
static   GpioDDigitalOutputProvider   newInstance ()   {  return  new   GpioDDigitalOutputProviderImpl () ;  }
public   void   addRequiredClaim ( String   requiredClaimUri )   {  List < String >   requiredClaims   =  getRequiredClaims () ;  if  ( requiredClaims . contains ( requiredClaimUri ) )   {  requiredClaims . add ( requiredClaimUri ) ;  }  }
@ Provides  @ Singleton  Converter . Factory   provideJsonConverterFactory ( Gson   json )   {  return  GsonConverterFactory . create ( json ) ;  }
@ Test  public   void   issue458IntegerFormatChanged ()   {  assertOpenApiChangedEndpoints ( """"parameterDiff/issue-458-integer-limits_1.yaml"""" , """"parameterDiff/issue-458-integer-limits_6.yaml"""" ) ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"rulesEnabled"""" )  @ Valid  public   Boolean   getRulesEnabled ()   {  return  rulesEnabled ;  }
@ NonNull  @ Override  public   String   toString ()   {  return  """"ActivityTransition [mActivityType=""""   +   activityType   +   """", mTransitionType=""""   +   transitionType   +   """"]"""" ;  }
public   List < Class < ?   extends  JavaScriptModule > >   createJSModules ()   {  return  new   ArrayList <> () ;  }
@ Test  void   default100ShouldWorkAsPredefinedSortOrder ()   {  SortPomImplUtil . create ()  . predefinedSortOrder ( """"default_1_0_0"""" )  . lineSeparator ( """"\n"""" )  . testFiles ( """"/full_unsorted_input.xml"""" ,  """"/sortOrderFiles/sorted_default_1_0_0.xml"""" ) ;  }
@ ParameterizedTest  @ MethodSource ( """"useNativeGit"""" )  public   void   shouldResolvePropertiesOnDefaultSettingsForNonPomProject ( boolean   useNativeGit )   throws  Exception   {  mavenSandbox  . withParentProject ( """"my-jar-project"""" ,  """"jar"""" )  . withGitRepoInParent ( AvailableGitTestRepo . WITH_SUBMODULES )  . withChildProject ( """"example-child"""" ,  """"jar"""" )  . create () ;  MavenProject   targetProject   =  mavenSandbox . getChildProject () ;  setProjectToExecuteMojoIn ( targetProject ) ;  mojo . useNativeGit   =   useNativeGit ;  
@ Override  public   int   i2cWriteQuick ( int   handle ,  boolean   bit )   {  logger . trace ( """"[I2C::WRITE] -> HANDLE={}; R/W Bit [{}]"""" ,  handle ,  bit  ?   1   :  0 ) ;  validateReady () ;  validateHandle ( handle ) ;  int   result   =  PIGPIO . i2cWriteQuick ( handle  , bit ) ;  boolean   success   =  ( result >= 0 ) ;  logger . trace ( """"[I2C::WRITE] <- HANDLE={}; SUCCESS={}; RESULT={}"""" ,  handle ,  success ,  result ) ;  validateResult ( result ,  false ) ;  return  result ;  }
@ Test  public   void   ifSubschemaSuccessThenSubschemaFailureElseSubSchemaSuccess ()   {  ConditionalSchema . Builder   subject   =  ConditionalSchema . builder () . ifSchema ( PATTERN_STRING_SCHEMA ) . thenSchema ( MAX_LENGTH_STRING_SCHEMA )  . elseSchema ( MIN_LENGTH_STRING_SCHEMA ) ;  TestSupport . failureOf ( subject )  . expectedKeyword ( """"then"""" )  . expectedPointer ( """"#"""" )  . input ( """"foobar"""" )  . expect () ;  }
@ VisibleForTesting  public   Handler   getInternalHandler ()   {  throw  new   UnsupportedOperationException () ;  }
public   Instance   setItemTranslate ( Vector3f   itemTranslate )  {  this . itemTranslate   =   itemTranslate ;  return  this ;  }
public   void   setTrainSet ( MLDataSet   trainSet )   {  this . trainSet   =   trainSet ;  }
private   boolean   canGetMethodParameterNames ()   {  try  {  Class . forName ( """"java.lang.reflect.Parameter"""" ,  false ,  Thread . currentThread () . getContextClassLoader () ) ;  return  true ;  }   catch  ( ClassNotFoundException   e )   {   
@ PublicApi ( exclude   =   true )  protected   < R ,  A   extends  Api . Client >   Task < R >   scheduleTask ( PendingGoogleApiCall < R ,  A >   apiCall )   {  TaskCompletionSource < R >   completionSource   =  new   TaskCompletionSource <> () ;  manager . scheduleTask ( this ,  apiCall ,  completionSource ) ;  return  completionSource . getTask () ;  }
private   ServerFile   getChangedAudioFile ( int   position )   {  return  audioFiles . get ( position ) ;  }
public   Object   readResolve ()   {  if  ( configVersion   ==   null )   {  configVersion   =   0L ;  }  if  ( categories   ==   null )   {  categories   =   new   CopyOnWriteArrayList <> () ;  }  if  ( category   !=   null )   {  categories . add ( category ) ;  category   =   null ;  }  if  ( configVersion   <   1   &&   throttleOption   ==   null )   {  if  ( categories . isEmpty () )   {  throttleOption   =   """"project"""" ;  }   else  {  throttleOption   =   """"category"""" ;  maxConcurrentPerNode   =   0 ;  maxConcurrentTotal   =   0 ;  }  }  configVersion   =   1L ;  
@ Override  public   void   setStrokeJointType ( int   type )   throws  RemoteException   {  }
void   visitAllItemSchema ( Schema   allItemSchema )   {  visitSchema ( allItemSchema ) ;  }
void   addBufferToQueue ( Iterable < Token < String > >   buffer )   throws  InterruptedException   {  List < Token < String > >   tokenList   =  new   ArrayList <> () ;  for  ( Token < String >   token   :  buffer )   {  tokenList . add ( token ) ;  queue . put ( new   ArrayList <> ( tokenList ) ) ;  }  }
@ Test  public   void   testCopy ()   {  ValidationException   subject   =  subjectWithCauses ( subjectWithCauses () ) ;  ValidationException   copy   =  subject . copy () ;  assertEquals ( subject ,  copy ) ;  }
@ Override   public   LongIndexer   reindex ( Index   index )   {  return  new   LongBufferIndexer ( buffer ,  index ) ;  }
public   static   FloatIndexer   create ( FloatBuffer   buffer ,  Index   index )   {  return  new   FloatBufferIndexer ( buffer ,  index ) ;  }
public   SAMLAssertionConfiguration   encryption ( AssertionEncryptionConfiguration   encryption )   {  this . encryption   =   encryption ;  return  this ;  }
@ Test  public   void   testNoVulnerabilities ()   throws  Exception   {  List < Finding >   findings   =  ReportParser  . parse ( getClass () . getResourceAsStream ( """"dependency-check-report-no-vulnerability.xml"""" ) ) ;  assertNotNull ( findings ) ;  assertEquals ( 0 ,  findings . size () ) ;  }
public   File   addSong ( Song   song )   {  File   tempLocation   =  normalize ( new   File ( tempDir ,  """"Untitled_""""   +   untitledCounter ++ ) ) ;  songs . put ( tempLocation ,  song ) ;  return  tempLocation ;  }
public   static   NpcRepository   createRepo ()   {  if  (  npcRepository   ==   null )   {  File   dataFile   =  new   File ( fileName ) ;  if  ( !   dataFile . exists () )   {  throw  new   RuntimeException ( """"File '""""   +   dataFile   +   """"' does not exist."""" ) ;  }  npcRepository   =   new   NpcRepository () ;  npcRepository . load ( dataFile ) ;  }  return  npcRepository ;  }
private   EurekaClient   getLazyInitEurekaClient ()   throws  Exception   {  return  ( EurekaClient )   ( ( Advised )   this . context . getBean ( """"eurekaClient"""" ,  EurekaClient . class ) ) . getTargetSource ()  . getTarget () ;  }
public   OwnerResponse   username ( String   username )   {  this . username   =   username ;  return  this ;  }
@ Override  public   void   initializeDefaultPreferences ()   {  TypeScriptPreferenceServerConstants . initializeDefaultPreferences () ;  }
public   File   createNoteCache ()   {  File   noteCache   =  new   File ( cachePath ,  UUID . randomUUID ()   +   """"_note.wav"""" ) ;  noteCache . deleteOnExit () ;  return  noteCache ;  }
default   Builder   blockEntity ( BlockEntity   blockEntity )   {  return  blockEntity ( ()  ->   blockEntity ) ;  }
@ Override  public   PendingResult < GetOutputStreamResult >   getOutputStream ( GoogleApiClient   client )   {  Log . d ( TAG ,  """"unimplemented Method: getOutputStream"""" ) ;  return  null ;  }
@ NonNull  public   static   String   getStatusCodeString ( int   statusCode )   {  switch  ( statusCode )   {  case  PLATFORM_NOT_SUPPORTED :  return  """"PLATFORM_NOT_SUPPORTED"""" ;  case  API_NOT_AVAILABLE :  return  """"API_NOT_AVAILABLE"""" ;  case  USER_PERMISSION_REQUIRED :  return  """"USER_PERMISSION_REQUIRED"""" ;  default:  return  CommonStatusCodes . getStatusCodeString ( statusCode ) ;  }  }
@ Test  void   testIsBefore ()   {  Executable   testMethod   =  ()  ->   new   UnsortedWrapper < DefaultText > ( null ) . isBefore ( null ) ;  var   thrown   =  assertThrows ( UnsupportedOperationException . class ,  testMethod ) ;  assertThat ( thrown . getMessage () ,  is ( equalTo ( """"Cannot be sorted"""" ) ) ) ;  }
@ Override   public   long   getLengthInTime ()   {  return  oc . duration ()   *   1000000L   /   AV_TIME_BASE ;  }
public   VideoTrack   createVideoTrack ( AbstractVideoCaptureController   videoCaptureController )   {  return  getUserMediaImpl . createVideoTrack ( videoCaptureController ) ;  }
private   void   createResizedImage ()   {  if  ( originalImage   ==   null )   {  image   =   null ;  }   else  {  image   =   resize ( originalImage ,  getWidth () ,  getHeight () ) ;  relRect . setImgSize ( image . getWidth () ,  image . getHeight () ) ;  offsetX   =   ( getWidth ()   -   image . getWidth () )   /   2 ;  offsetY   =   ( getHeight ()   -   image . getHeight () )   /   2 ;  }  repaint () ;  }
@ Override  public   ParticleType < ? >   getType ()  {  return  ModParticleTypes . TRAIL . get () ;  }
@ Override  public   void   registerConnectionFailedListener ( OnConnectionFailedListener   listener )   {  googleApiClient . registerConnectionFailedListener ( new   ForwardConnectionFailedListener ( listener ) ) ;  }
@ Test  public   void   nonexistantNodeProperty_returnsEmptyList ()   {  long   node   =  graph . createNode ( """"foo"""" ) ;  assertThat ( graph . getNodeProperties ( node ,  """"bar"""" ,  String . class ) ,  is ( empty () ) ) ;  }
@ Override  protected   void   enrichFactory ( ElasticsearchClientFactoryBean   factory )   {  factory . setClasspathRoot ( """"/models/root/settings-13/client"""" ) ;  factory . setForceIndex ( true ) ;  }
public   void   enableVerifyApps ( ISafetyNetCallbacks   callbacks )   throws  RemoteException   {  getServiceInterface () . enableVerifyApps ( callbacks ) ;  }
public   E   get ()   {  if  ( ++ index   >=   count )   {  result   =   localFunction . get () ;  }  return  result ;  }
@ ApiModelProperty ( example   =   """"true"""" ,  value   =   """""""" )  @ JsonProperty ( """"enable"""" )  @ Valid  public   Boolean   getEnable ()   {  return  enable ;  }
@ Override  public   boolean   transfer ( String   playerFrom ,  String   playerTo ,  double   amount )   {  this . checkExist ( playerTo ) ;  this . checkExist ( playerFrom ) ;  if  ( this . canAfford ( playerFrom ,  amount ) )   {  Account   p1   =  new   Accounts () . get ( playerFrom ) ;  Account   p2   =  new   Accounts () . get ( playerTo ) ;  p1 . getHoldings () . subtract ( amount ) ;  p2 . getHoldings () . add ( amount ) ;  return  true ;  }  return  false ;  }
public   boolean   supportsConvert ( int   fromType ,  int   toType )   throws  SQLException   {  return  false ;  }
public   void   setHeaderPath ( String   headerPath )   {  this . headerPath   =   headerPath ;  }
public   void   setFilemode (  String   filemode )   {  this . filemode   =   UnixStat . FILE_FLAG   |   Integer . parseInt ( filemode ,  8 ) ;  }
@ Override  public   boolean   process ( String   option ,  List < String >   arguments )   {  showEnumerations   =   true ;  return  true ;  }
public   String   padEnd ( final   int   length ,  final   String   chars )   {  return  padEnd ( getString () . get () ,  length ,  chars ) ;  }
@ Override  public   Iterable < Relationship >   expand ( Path   path ,  BranchState < Void >   state )   {  return  path . endNode () . getRelationships ( direction ) ;  }
@ Override  public   int   compare ( Node   node1 ,  Node   node2 )   {  Optional < String >   iri1   =  GraphUtil . getProperty ( node1 ,  NodeProperties . IRI ,  String . class ) ;  Optional < String >   iri2   =  GraphUtil . getProperty ( node2 ,  NodeProperties . IRI ,  String . class ) ;  return  iri1 . get () . compareTo ( iri2 . get () ) ;  }
public   ChangedContent   setMissing ( final   Map < String ,  MediaType >   missing )   {  this . missing   =   missing ;  return  this ;  }
@ Test  public   void   testDestroySession ()   {  when ( context . getRequestAttribute ( Pac4jConstants . SESSION_ID ) ) . thenReturn ( Optional . of ( SESSION_ID ) ) ;  store . destroySession ( context ) ;  verify ( cacheApiMock ,  times ( 1 ) ) . remove ( SESSION_ID ) ;  }
@ Override  public   void   appendTooltip ( ITooltip   tooltip ,  BlockAccessor   accessor ,  IPluginConfig   config )   {  }
public   File   createSilenceCache ()   {  File   silenceCache   =  new   File ( cachePath ,  UUID . randomUUID ()   +   """"_silence.wav"""" ) ;  silenceCache . deleteOnExit () ;  return  silenceCache ;  }
private   File   getTarget ( File   jarfile )   {  return  new   File ( jarfile . getParentFile () , StringUtils . stripFilenameExtension ( jarfile . getName () )   +   """"-exec.jar"""" ) ;  }
@ NonNull  public   Builder   setField ( @ NonNull   com . google . android . gms . fitness . data . Field   field ,  int   value )   {  if  ( built )   throw  new   IllegalStateException ( """"DataPoint already built"""" ) ;  this . dataPoint . getValue ( field ) . setInt ( value ) ;  return  this ;  }
public   void   addFile (  final   String   path ,  final   File   source ,  final   int   mode ,  final   Directive   directive )   throws  NoSuchAlgorithmException ,  IOException   {  contents . addFile (  path ,  source ,  mode ,  directive ) ;  }
public   static   CharIndexer   create ( CharPointer   pointer ,  long []   sizes ,  long []   strides )   {  return  new   CharRawIndexer ( pointer ,  sizes ,  strides ) ;  }
@ Override   public   DoublePointer   limit ( long   limit )   {  return  super . limit ( limit ) ;  }
public   void   submitJob ( SourceType   sourceType ,  String   pigScripts )   throws  IOException   {  PigServer   pigServer   =  createPigServer ( sourceType ) ;  pigServer . registerScript ( new   ByteArrayInputStream ( pigScripts . getBytes () ) ) ;  }
@ Bean  public   RestTemplateDiscoveryClientOptionalArgs   forceRestTemplateDiscoveryClientOptionalArgs ( TlsProperties   tlsProperties , EurekaClientHttpRequestFactorySupplier   eurekaClientHttpRequestFactorySupplier )  throws  GeneralSecurityException ,  IOException   {  RestTemplateDiscoveryClientOptionalArgs   result   =  new   RestTemplateDiscoveryClientOptionalArgs ( eurekaClientHttpRequestFactorySupplier ,  RestTemplateBuilder :: new ) ;  setupTLS ( result ,  tlsProperties ) ;  return  result ;  }
@ Override  public   final   EnrichedRecord   nextMessage ()   {  return  ( EnrichedRecord )   protobufSchemaProcessor . next () ;  }
@ After  public   void   tearDown ()   throws  IOException   {  if  ( _zkClient   !=   null )   {  _zkClient . close () ;  }  if  ( _zkServer   !=   null )   {  _zkServer . close () ;  }  }
public   static   UShortIndexer   create ( short []   array ,  Index   index )   {  return  new   UShortArrayIndexer ( array ,  index ) ;  }
@ Override  public   int   gpioGetPWMrange ( int   pin )   {  logger . trace ( """"[PWM-RANGE::GET] -> PIN: {}"""" ,  pin ) ;  validateReady () ;  validateUserPin ( pin ) ;  PiGpioPacket   result   =  sendCommand ( PRG ,  pin ) ;  var   range   =  result . result () ;  logger . trace ( """"[PWM-RANGE::GET] <- PIN: {}; RANGE={}; SUCCESS={}"""" ,   pin ,  range ,  result . success () ) ;  validateResult ( result ) ;    
private   void   fillDeserializer ( final   JComboBox < String >   objectJComboBox )   {  deserializerComboBox   =   objectJComboBox ;  final   Reflections   reflections   =  new   Reflections ( new   ConfigurationBuilder () . addUrls ( ClasspathHelper . forClass ( Deserializer . class ) ) . filterInputsBy ( new   FilterBuilder () . includePackage ( SerDesPackageValue . COM_SNGULAR_KLOADGEN_SERIALIZER )  . includePackage ( SerDesPackageValue . IO_CONFLUENT_KAFKA_SERIALIZERS ) )  . setScanners ( Scanners . SubTypes ) ) ;  ReflectionUtils . extractDeserializers ( deserializerComboBox ,  reflections ,  Deserializer . class ) ;  }
public   static   String   getValidTheme ( SharedPreferences   prefs ,  Resources   res )   {  String   theme   =  prefs . getString ( OSMTracker . Preferences . KEY_UI_THEME ,  OSMTracker . Preferences . VAL_UI_THEME ) ;  if  ( !   Arrays . asList ( res . getStringArray ( R . array . prefs_theme_values ) ) . contains ( theme ) )   {  theme   =   OSMTracker . Preferences . VAL_UI_THEME ;  Editor   e   =  prefs . edit () ;  e . putString ( OSMTracker . Preferences . KEY_UI_THEME ,  OSMTracker . Preferences . VAL_UI_THEME ) ;  e . commit () ;  }  return  theme ;  }
public   void   readParameters ( String   filename )   throws  Exception   {  FileStorage   fs   =  new   FileStorage ( filename ,  FileStorage . READ ) ;  readParameters ( fs ) ;  fs . release () ;  }
@ Override  public   float   getIntrinsicWidth ()  {  if  ( getImage ()   !=   null )  return  getImage () . getWidth () ;  else  return  DEFAULT_IMAGE_WIDTH ;  }
default   int   spiWrite ( int   handle ,  byte []   data ,  int   length ) {  return  spiWrite ( handle ,  data ,  0 ,  length ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( instanceInfo ,  leaseDuration ,  replication ) ;  }
@ Override  public   void   createTabs ( ILaunchConfigurationDialog   dialog ,  String   mode )   {  setTabs ( new   ILaunchConfigurationTab []   { new   NodeAttachDebugTab () , new   DSPOverrideSettingsTab () , new   CommonTab () , new   PrototypeTab () } ) ;  }
default   int   getNormalColor ()   {  return  theme () . text . colors () . normal () ;  }
public   static   final   UriTemplate   fromTemplate ( final   String   templateString )   throws  MalformedUriTemplateException  {  return  new   UriTemplate ( templateString ) ;  }
public   static   void   main ( String []   args )   {  new   ServerStressTest () . setVisible ( true ) ;  }
JsonValue   require ( String   key )   {  keyConsumed ( key ) ;  return  schemaJson . require ( key ) ;  }
public   InstanceSettings   setFilterMode ( FilterMode   filterMode )   {  this . filterMode   =   filterMode ;  return  this ;  }
@ Override  public   void   onWebsocketCloseInitiated ( WebSocket   conn ,  int   code ,  String   reason )   {  onCloseInitiated ( code ,  reason ) ;  }
ScriptBuilder   setBuildResult ( String   result )   {  this . result   =   result ;  return  this ;  }
private   void   testAuthentication ( OIDCApplication   application )   throws  Exception   {  HttpResponse   response   =  sendLoginPost ( client ,  sessionDataKey ) ;  EntityUtils . consume ( response . getEntity () ) ;  }
private   static   boolean   isWindowsJNAAffinityUsable ()   {  if  ( isJNAAvailable () )   {  try  {  return  WindowsJNAAffinity . LOADED ;  }   catch  ( Throwable   t )   {  logThrowable ( t ,  """"Windows JNA-based affinity not usable because it failed to load!"""" ) ;  return  false ;  }  }   else  {  LOGGER . warn ( """"Windows JNA-based affinity not usable due to JNA not being available!"""" ) ;  return  false ;  }  }
@ Override  public   CompileTester   processedWith ( Iterable < ?   extends  Processor >   processors )   {  return  new   CompilationClause ( processors ) ;  }
public   String   getRepositoryDirectory ( String   supplemental )   {  return  getTargetDir ()   +   File . separatorChar   +   """"repos-""""   +   supplemental ;  }
private   static   int   initComboModels ()   throws  Exception   {  Processor   processor   =  new   ComboModelProcessor ( ComboModelProcessor . ComboStep . INIT ) ;  return  processor . run () ;  }
public   ConstSchemaBuilder   permittedValue ( Object   permittedValue )   {  this . permittedValue   =   permittedValue ;  return  this ;  }
private   static   double []   createValues ()   {  double   d []   =  new   double [ MAX_HASH_LENGTH   +   1 ] ;  for  ( int   i   =  0 ;   i   <=   MAX_HASH_LENGTH ;   i ++ )   {  d [ i ]   =   calculateWidthDegrees ( i ) ;  }  return  d ;  }
private   void   setLockTimeZone ()   {  CheckBoxPreference   preference   =  ( CheckBoxPreference )   findPreference ( InstanceSettings . PREF_LOCK_TIME_ZONE ) ;  if  ( preference   !=   null )   {  SnapshotMode   snapshotMode   =  ApplicationPreferences . getSnapshotMode ( getActivity () ) ;  boolean   isChecked   =  snapshotMode   ==   SnapshotMode . SNAPSHOT_TIME   ||  ApplicationPreferences . isTimeZoneLocked ( getActivity () ) ;  if  ( preference . isChecked ()   !=   isChecked )   {  preference . setChecked ( isChecked ) ;  }  }  }
@ Override  public   void   onOnline ( Computer   C ,  TaskListener   t )   {  latch . countDown () ;  unregister () ;  }
@ Test  public   void   stringSchema ()   {  StringSchema   actual   =  ( StringSchema )   SchemaLoader . load ( get ( """"stringSchema"""" ) ) ;  assertEquals ( 2 ,  actual . getMinLength () . intValue () ) ;  assertEquals ( 3 ,  actual . getMaxLength () . intValue () ) ;  }
private   LinkNode < HistogramUnit >   locateHistogram ( double   s ,  LinkNode < HistogramUnit >   startPos )   {  while ( startPos   !=   this . tail )   {  if ( startPos   ==   null )   {  startPos   =   this . header ;  }  if ( startPos . next ()   ==   null )   {  return  startPos ;  }  double   sc   =  sumCache . get ( startPos ) ;  double   sn   =  sumCache . get ( startPos . next () ) ;  if ( sc   >=   s   ||   ( sc   <   s   &&   s   <=   sn ) )   {  return  startPos ;  }  startPos   =   startPos . next () ;  }  return  null ;  }
@ Test  void   findsNodesWithXpathExpression ()   throws  Exception   {  final   Iterable < Directive >   dirs   =  new   Directives ( StringUtils . join ( """"ADD 'root'; ADD 'foo'; ATTR 'bar', '1'; UP; ADD 'bar';"""" , """"XPATH '
public   void   testJsonSchemaWithDescription ()   {  final   String   expected   =  """"<div>Example: object<br/>some description</div>"""" ;  testQuickDocumentation ( """"/json/schema_ref_with_description.json"""" ,  expected ) ;  }
default   int   i2cReadI2CBlockData ( int   handle ,  int   register ,  ByteBuffer   buffer ,  int   offset ,  int   length ) {  
@ Test  public   void   maxLength ()   {  StringSchema   subject   =  buildWithLocation ( StringSchema . builder () . maxLength ( 3 ) ) ;  TestSupport . failureOf ( subject )  . expectedKeyword ( """"maxLength"""" )  . input ( """"foobar"""" )  . expect () ;  }
public   static   Tomcat   getTomcat ( Class   testClass )   {  Tomcat   tomcat   =  new   Tomcat () ;  tomcat . getService () . setContainer ( tomcat . getEngine () ) ;  tomcat . setPort ( CommonConstants . DEFAULT_TOMCAT_PORT ) ;  tomcat . setBaseDir ( """""""" ) ;  StandardHost   stdHost   =  ( StandardHost )   tomcat . getHost () ;  stdHost . setAppBase ( """""""" ) ;  stdHost . setAutoDeploy ( true ) ;  stdHost . setDeployOnStartup ( true ) ;  stdHost . setUnpackWARs ( true ) ;  tomcat . setHost ( stdHost ) ;  setSystemProperties ( testClass ) ;  return  tomcat ;  }
 <argument pos:start=""""""""277:75"""""""" pos:end=""""""""277:75""""""""><expr pos:start=""""""""277:75"""""""" pos:end=""""""""277:75""""""""><literal type=""""""""number"""""""" pos:start=""""""""277:75"""""""" pos:end=""""""""277:75"""""""">0</literal></expr></argument>
private   File   getServiceJar ()   {  URL   serviceJar   =  getClass () . getResource ( ISIntegrationTest . URL_SEPARATOR   +   """"samples""""   +   ISIntegrationTest . URL_SEPARATOR   +  """"userMgt""""   +   ISIntegrationTest . URL_SEPARATOR   +  """"org.wso2.carbon.identity.test.integration.service.jar"""" ) ;  return  new   File ( serviceJar . getPath () ) ;  }
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( """"class Endpoint {\n"""" ) ;  sb . append ( """"    uri: """" ) . append ( toIndentedString ( uri ) ) . append ( """"\n"""" ) ;  sb . append ( """"    authentication: """" ) . append ( toIndentedString ( authentication ) ) . append ( """"\n"""" ) ;  sb . append ( """"}"""" ) ;  return  sb . toString () ;  }
@ Override  public   void   keyTyped ( KeyEvent   keyEvent )   {  super . keyTyped ( keyEvent ) ;  isPasswordFieldChanged   =   true ;  }
@ Test  void   throwsExceptionOnEmpty ()   {  Assertions . assertThrows ( ImpossibleModificationException . class , ()  ->   new   DomStack () . pop () , """"empty stack"""" ) ;  }
public   void   scriptID ( UnityHash128   scriptID )   {  this . scriptID   =   scriptID ;  }
public   int   deleteDataItems ( Uri   uri ,  String   packageName )   {  List < DataItemRecord >   records   =  nodeDatabase . deleteDataItems ( packageName ,  PackageUtils . firstSignatureDigest ( context ,  packageName ) ,  fixHost ( uri . getHost () ,  false ) ,  uri . getPath () ) ;  for  ( DataItemRecord   record   :  records )   {  syncRecordToAll ( record ) ;  }  return  records . size () ;  }
public   void   setAccessTokenAttributes ( List < String >   accessTokenAttributes )   {  this . accessTokenAttributes   =   accessTokenAttributes ;  }
default   < T   extends  Platform >   boolean   exists ( String   platformId ,  Class < T >   platformClass )   throws  PlatformNotFoundException   {  
@ ApiModelProperty ( example   =   """"wso2carbon"""" ,  required   =   true ,  value   =   """""""" )  @ JsonProperty ( """"certificateAlias"""" )  @ Valid  @ NotNull ( message   =   """"Property certificateAlias cannot be null."""" )  public   String   getCertificateAlias ()   {  return  certificateAlias ;  }
public   void   setType ( @ Nullable   String   type )   {  breadcrumb . setType ( type ) ;  }
public   void   setProfile ( String   profile )   {  this . profile   =   profile ;  }
public   void   put ( WebSocketImpl   ws )   throws  InterruptedException   {  iqueue . put ( ws ) ;  }
private   void   loadConfigFiles ( final   Context   context )   {  try  {  SourceType   sourceType   =  SourceType . valueOf ( context . getConfiguration () . get ( Constants . SHIFU_MODELSET_SOURCE_TYPE ,  SourceType . HDFS . toString () ) ) ;  this . columnConfigList   =   CommonUtils . loadColumnConfigList ( context . getConfiguration () . get ( Constants . SHIFU_COLUMN_CONFIG ) ,  sourceType ) ;  }   catch  ( IOException   e )   {  throw  new   RuntimeException ( e ) ;  }  }
private   void   removePropertyChangeListenerIfNeed ()   {  synchronized  ( listenerPerLanguageServer )   {  PropertyChangeListenerWrapper   listener   =  listenerPerLanguageServer . get ( preferenceStoreKey ) ;  if  ( listener   !=   null )   {  listener . endServer () ;  if  ( listener . hasNoServerStarted () )   {  preferenceStoreKey . preferenceStore . removePropertyChangeListener ( listener ) ;  listenerPerLanguageServer . remove ( preferenceStoreKey ) ;  }  }  }  }
private   void   checkMethods ( final   RoundEnvironment   env , final   TypeElement   type )   {  for  ( final   Element   element   :  env . getElementsAnnotatedWith ( type ) )   {  if  ( element . getKind ()   ==   ElementKind . METHOD )   {  final   ExecutableElement   method   =  ( ExecutableElement )   element ;  if  ( ! method . getReturnType () . getKind () . equals ( TypeKind . VOID ) )   {  this . processingEnv . getMessager () . printMessage ( Diagnostic . Kind . ERROR , String . format ( 
@ Override  @ Test ( dependsOnMethods   =   { """"testAttributeConsumerIndex"""" } ,  groups   =   """"wso2.is"""" ,  description   =   """"test testSAMLToSAMLFederation"""" )  public   void   testSAMLToSAMLFederation ()   throws  Exception   {  updateIdentityProviderJitConfiguration ( false ,  false ,  false ,  UserCoreConstants . PRIMARY_DEFAULT_DOMAIN_NAME ) ;  super . testSAMLToSAMLFederation () ;  }
public   void   setModelStatsConf ( ModelStatsConf   modelStatsConf )   {  this . modelStatsConf   =   modelStatsConf ;  }
@ Test  public   void   testPasswordRecovery ()   throws  Exception   {  String   passwordRecoveryFormURL   =  retrievePasswordResetURL ( oidcApplication ,  client ) ;  submitPasswordRecoveryForm ( passwordRecoveryFormURL ,  userObject . getUserName () ,  client ) ;  String   recoveryLink   =  getRecoveryURLFromEmail () ;  HttpResponse   postResponse   =  resetPassword ( recoveryLink ) ;  Assert . assertEquals ( postResponse . getStatusLine () . getStatusCode () ,  200 ) ;  Assert . assertTrue ( EntityUtils . toString ( postResponse . getEntity () ) . contains ( """"Password Reset Successfully"""" ) ) ;  }
boolean   empty ()   {  for  ( Type   t   :  values () )   {  if  ( t   !=   null )   {  return  false ;  }  }  return  true ;  }
public   void   setRequirePushAuthorizationRequest ( Boolean   requirePushAuthorizationRequest )   {  this . requirePushAuthorizationRequest   =   requirePushAuthorizationRequest ;  }
@ Override  public   void   fetchThumbnail ( FetchThumbnailRequest   request ,  IDriveServiceCallbacks   callbacks )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: fetchThumbnail"""" ) ;  }
@ Test  public   void   hadWarningContainingMatch ()   {  assertThat ( compilerWithWarning () . compile ( sourceFile ) )  . hadWarningContainingMatch ( """"this is a? message"""" )  . inFile ( sourceFile )  . onLine ( 6 )  . atColumn ( 8 ) ;  assertThat ( compilerWithWarning () . compile ( sourceFile ) )  . hadWarningContainingMatch ( """"(this|here) is a message"""" )  . inFile ( sourceFile )  . onLine ( 7 )  . atColumn ( 29 ) ;  }
public   static   ParticleOptions   getParticle ( ItemStack   weapon )  {  Map < Enchantment ,  Integer >   enchantments   =  EnchantmentHelper . getEnchantments ( weapon ) ;  if ( enchantments . containsKey ( ModEnchantments . FIRE_STARTER . get () ) )  {  return  ParticleTypes . LAVA ;  }  else if ( enchantments . containsKey ( ModEnchantments . PUNCTURING . get () ) )  {  return  ParticleTypes . ENCHANTED_HIT ;  }  return  new   TrailData ( weapon . isEnchanted () ) ;  }
public   void   getServers ( Context   context ,  String   authenticationToken )   {  api . getServers ( authenticationToken ) . enqueue ( new   ServersResponse ( context ) ) ;  }
public   static   void   setFraction ( @ Nullable   ProgressIndicator   progressIndicator , double   fraction )   {  if  ( progressIndicator   !=   null )   {  ProgressWrapper . unwrap ( progressIndicator ) . setFraction ( fraction ) ;  }  }
public   EmailSenderAdd   properties ( List < Properties >   properties )   {  this . properties   =   properties ;  return  this ;  }
private   ClaimMapping []   getClaimMappings () {  List < ClaimMapping >   claimMappingList   =  new   ArrayList < ClaimMapping > () ;  Claim   lastNameClaim   =  new   Claim () ;  lastNameClaim . setClaimUri ( lastNameClaimURI ) ;  ClaimMapping   lastNameClaimMapping   =  new   ClaimMapping () ;  lastNameClaimMapping . setRequested ( true ) ;  lastNameClaimMapping . setLocalClaim ( lastNameClaim ) ;  lastNameClaimMapping . setRemoteClaim ( lastNameClaim ) ;  claimMappingList . add ( lastNameClaimMapping ) ;  return  claimMappingList . toArray ( new   ClaimMapping [ claimMappingList . size () ] ) ;  }
 <argument pos:start=""""""""131:69"""""""" pos:end=""""""""131:73""""""""><expr pos:start=""""""""131:69"""""""" pos:end=""""""""131:73""""""""><literal type=""""""""boolean"""""""" pos:start=""""""""131:69"""""""" pos:end=""""""""131:73"""""""">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Override  public   void   onInputClosed ( Channel   channel ,  @ ChannelApi . CloseReason   int   closeReason ,  int   appSpecificErrorCode )   {  }
public   RoleSearchRequestObject   addSchemas ( String   schema )   {  if  ( this . schemas   ==   null )   {  this . schemas   =   new   ArrayList <> () ;  }  this . schemas . add ( schema ) ;  return  this ;  }
@ Override  public   void   onInflate ( @ NonNull   Activity   activity ,  @ NonNull   Bundle   options ,  @ Nullable   Bundle   onInflate )   {  throw  new   UnsupportedOperationException ( """"onInflate not allowed on StreetViewPanoramaViewDelegate"""" ) ;  }
public   AuthRequest   putDynamicFiledMap ( Map < Object ,  Object >   dynamicFields )   {  this . dynamicFields   =   dynamicFields ;  return  this ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"assertionEncryptionAlgorithm"""" )  @ Valid  public   MetadataProperty   getAssertionEncryptionAlgorithm ()   {  return  assertionEncryptionAlgorithm ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  SonarIssue   that   =  ( SonarIssue )   o ;  return  Objects . equal ( line ,  that . line )   &&  Objects . equal ( message ,  that . message )   &&  Objects . equal ( severity ,  that . severity )   &&  Objects . equal ( isNew ,  that . isNew ) ;  }
private   static   Item   getItem ( ItemGroup < ? >   group ,  String   name )   {  if  ( group   instanceof   Jenkins )   {  return  ( ( Jenkins )   group ) . getItemMap () . get ( name ) ;  }   else  {  return  group . getItem ( name ) ;  }  }
public   void   onCapabilityQuery ( String   nodeId )   {  Wearable . MessageApi . sendMessage ( getApiClient () ,  nodeId ,  PATH_CAPABILITY ,  writeLocationCapability ( new   DataMap () ,  true ) . toByteArray () ) ;  }
private   static   < T >   void   quicksort ( List < T >   values ,  Comparator < T >   comparator ,  int   low ,  int   high )   {  int   i   =  low ,  j   =  high ;  
@ Override  @ SuppressWarnings ( """"aibolit.P13"""" )  public   Directive . Cursor   exec ( final   Node   dom , final   Directive . Cursor   cursor ,  final   Directive . Stack   stack )   {  final   Document   doc ;  if  ( dom . getOwnerDocument ()   ==   null )   {  doc   =   Document . class . cast ( dom ) ;  }   else  {  doc   =   dom . getOwnerDocument () ;  }  final   String   val   =  this . value . raw () ;  for  ( final   Node   node   :  cursor )   {  final   Node   cdata   =  doc . createCDATASection ( val ) ;  node . appendChild ( cdata ) ;  }  return  cursor ;  }
private   DownloadManager   getDownloadManager ( Context   context )   {  return  ( DownloadManager )   context . getSystemService ( Context . DOWNLOAD_SERVICE ) ;  }
private   boolean   confirmOverwrite ( File   file )   {  final   String   tmpMessage   =  RES . get ( """"filechooser.overwrite.question"""" ,  new   String []   {  file . getAbsolutePath ()  } ) ;  return  JOptionPane . YES_OPTION   ==   JOptionPane . showOptionDialog ( this ,  tmpMessage ,  RES . get ( """"filechooser.save.warning"""" ) , JOptionPane . YES_NO_OPTION ,  JOptionPane . WARNING_MESSAGE ,  null ,  null ,  null ) ;  }
@ Override  public   void   render ( GuiGraphics   guiGraphics , int   index , int   rowTop , int   rowLeft , int   width , int   height , int   mouseX , int   mouseY , boolean   hovered , float   deltaTime )   {  x   =   rowLeft ;  guiGraphics . drawString ( client . font ,  title ,  getTextX ( width ) ,  rowTop   +   height   -   client . font . lineHeight ,  16777215 ) ;  }
private   String   featureSetToString ( Set < Integer >   featureSet )   {  if  ( CollectionUtils . isEmpty ( featureSet ) )   {  return  """"EMPTY"""" ;  }   else  {  return  featureSet . toString () ;  }  }
public   void   gpioNoiseFilter ( int   pin ,  int   steady ,  int   active )   {  logger . trace ( """"[GPIO::NOISE] -> PIN: {}; INTERVAL: {};"""" ,  pin ,  steady ) ;  validateReady () ;  validatePin ( pin ) ;  validateGpioNoiseFilter ( steady ,  active ) ;  int   result   =  PIGPIO . gpioNoiseFilter ( pin ,  steady ,  active ) ;  logger . trace ( """"[GPIO::NOISE] <- PIN: {}; SUCCESS={}"""" ,   pin ,  ( result >= 0 ) ) ;  validateResult ( result ) ;    
public   static   String   pad ( String   data ,  char   pad ,  int   length )   {  return  create ( pad ,  length )   +   data   +   create ( pad ,  length ) ;  }
@ Override  public   List < LatLng >   getPoints ()   {  return  options . getPoints () ;  }
public   void   fillAsInt ( String   preferenceId )   {  int   preferenceValue   =  store . getInt ( preferenceId ) ;  fillSetting ( preferenceId ,  preferenceValue ) ;  }
public   static   ArrayList < Boolean >   readBooleanList ( Parcel   parcel ,  int   header )   {  int   size   =  readSize ( parcel ,  header ) ;  if  ( size   ==   0 )  return  null ;  int   start   =  parcel . dataPosition () ;  int   length   =  parcel . readInt () ;  ArrayList < Boolean >   list   =  new   ArrayList <> ( length ) ;  for  ( int   i   =  0 ;   i   <   length ;   i ++ )   {  list . add ( parcel . readInt ()   !=   0 ) ;  }  parcel . setDataPosition ( start   +   size ) ;  return  list ;  }
private   Failure   getDefaultFailure ()   {  return  new   Failure ()  . withMessage ( getMessage () )  . withStackTrace ( """"There are no stack trace"""" ) ;  }
public   Task < TResult >   addOnCompleteListener ( Activity   activity ,  OnCompleteListener < TResult >   listener )   {  throw  new   UnsupportedOperationException ( """"addOnCompleteListener is not implemented"""" ) ;  }
private   void   listModels ()   throws  IOException   {  File   root   =  new   File ( Constants . BACKUPNAME ) ;  if  ( root . isDirectory () )   {  File []   files   =  root . listFiles () ;  if  ( files   !=   null )   {  for  ( File   folder   :  files )   {  if  ( folder . isDirectory () )   {  System . out . println ( folder . getName () ) ;  }  }  }   else  {  throw  new   IOException ( String . format ( """"Failed to list files in %s"""" ,  root . getAbsolutePath () ) ) ;  }  }  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  deleteApp ( appId ) ;  consumerKey   =   null ;  consumerSecret   =   null ;  appId   =   null ;  client . close () ;  restClient . closeHttpClient () ;  }
public   void   scriptTypeIndex ( short   scriptTypeIndex )   {  this . scriptTypeIndex   =   scriptTypeIndex ;  }
public   List < Integer >   getWayPointIdsOfTrack ( long   trackId )   {  List < Integer >   out   =  new   ArrayList < Integer > () ;  
@ Test  public   void   toStringTest ()   {  JSONObject   rawSchemaJson   =  loader . readObj ( """"numberschema.json"""" ) ;  String   actual   =  SchemaLoader . load ( rawSchemaJson ) . toString () ;  MatcherAssert . assertThat ( new   JSONObject ( actual ) ,  sameJsonAs ( rawSchemaJson ) ) ;  }
@ Override  public   final   boolean   childOfOperation ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.paths.*.*"""" )   &&   ! childOfParameters ( psiElement ) ;  }
Type   get ( String   key )   {  Type   value   =  super . get ( key ) ;  if  ( value   ==   null   &&   parent   !=   null )   {  return  parent . get ( key ) ;  }   else  {  return  value ;  }  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( claim ,  defaultValue ) ;  }
@ Test  public   void   testAssumptionFailureTest ()   throws  Exception   {  Failure   failure   =  mockFailure () ;  doNothing () . when ( runListener ) . testFailure ( eq ( failure ) ) ;  runListener . testAssumptionFailure ( failure ) ;  }
@ Test  public   void   multipleDigitsFollowedByHashmark ()   {  assertSuccess ( """"123#"""" ,  SUBJECT ) ;  }
public   boolean   isStructured ()   {  return  ( this   ==   OBJECT )   ||   ( this   ==   ARRAY ) ;  }
public   void   setWgtCateWoeMap ( Map < Integer ,  Map < String ,  Double > >   wgtCateWoeMap )   {  this . cateWgtWoeMap   =   wgtCateWoeMap ;  }
private   DeferredChanged < D >   getFromCache ( CacheKey   cacheKey )   {  return  refDiffMap . get ( cacheKey ) ;  }
public   void   runOnUiThread ( Runnable   runnable )   {  App . getMainHandler () . post ( runnable ) ;  }
void   removeFullNote ( int   position )   {  if  ( noteMap . containsKey ( position ) )   {  noteMap . remove ( position ) ;  }   else  {  
public   void   setLeftThreshold ( double   leftThreshold )   {  this . leftThreshold   =   leftThreshold ;  }
public   PlaceAutocompleteRequest   type ( PlaceAutocompleteType   type )   {  return  this . types ( type ) ;  }
private   HttpResponse   sendGetRequest ( String   url )   throws  Exception   {  HttpGet   request   =  new   HttpGet ( url ) ;  request . addHeader ( """"User-Agent"""" ,  USER_AGENT ) ;  return  httpClient . execute ( request ) ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"singleSignOnProfile"""" )  @ Valid  public   SingleSignOnProfile   getSingleSignOnProfile ()   {  return  singleSignOnProfile ;  }
default   boolean   isSchemesValue ( PsiElement   psiElement )   {  return  false ;  }
@ Override  protected   void   onDestroy ()   {  super . onDestroy () ;  getListAdapter () . tearDownCallbacks () ;  }
private   void   updateNumberPicker ()   {  NumberPickerFragment   numberPicker   =  ( NumberPickerFragment )   getChildFragmentManager () . findFragmentByTag ( """"numberpicker_staggered_versioning"""" ) ;  numberPicker . updateNumberPicker ( 100 ,  0 ,  getMaxAgeInDays () ) ;  numberPicker . setOnValueChangedLisenter ( ( picker ,  oldVal ,  newVal )  ->   updatePreference ( """"maxAge"""" ,  ( String . valueOf ( TimeUnit . DAYS . toSeconds ( newVal ) ) ) ) ) ;  }
public   void   testGetUserClaimValuesWithID ()   throws  Exception   {  String   usernameClaim   =  """"http:
@ Override  public   void   initializeDefaultPreferences ()   {  HTMLPreferenceServerConstants . initializeDefaultPreferences () ;  }
@ Test  public   void   shouldDetectBadCharacter ()   throws  Exception   {  char []   cbuf   =  string . toCharArray () ;  replaceBadXmlCharactersBySpace ( cbuf ,  off ,  len ) ;  String   actual   =  String . copyValueOf ( cbuf ) ;  assertEquals ( expected ,  actual ) ;  }
public   void   setAsyncExecutorThreadPoolSize ( int   asyncExecutorThreadPoolSize )   {  this . asyncExecutorThreadPoolSize   =   asyncExecutorThreadPoolSize ;  }
public   static   String   setIfNullOrEmpty ( String   data ,  String   replacement ) {  return  setIfNullOrEmpty ( data ,  replacement ,  false ) ;  }
@ Test  public   void   testProcessNewVisitFormSuccess ()   throws  Exception   {  mockMvc . perform ( post ( """"/owners/*/pets/{petId}/visits/new"""" ,  TEST_PET_ID )  . param ( """"name"""" ,  """"George"""" )  . param ( """"description"""" ,  """"Visit Description"""" ) )  . andExpect ( status () . is3xxRedirection () )  . andExpect ( view () . name ( """"redirect:/owners/{ownerId}"""" ) ) ;  }
boolean   waitForServiceBound ()  {  int   i   =  0 ;  while ( service . getService ()   ==   null )  {  try {  if ( i   %   20   ==   0 )  Log . i ( TAG ,  """"waiting for openpgp-api service to be bound"""" ) ;  Thread . sleep ( 100 ) ;  if ( i   >   1000 )  break;  i ++ ;  }  catch ( InterruptedException   e )  {  logError ( """"Crypto.waitForServiceBound interrupted"""" ) ;  Thread . currentThread () . interrupt () ;  }  }  return  service . getService ()   !=   null ;  }
@ Override  public   void   onClose ( int   code ,  String   reason ,  boolean   remote )   { }
@ Test  public   void   scan_testLambdasExplicitVsImplicit ()   {  TreeDifference   diff   = TreeDiffer . diffCompilationUnits ( LAMBDA_1 ,  LAMBDA_IMPLICIT_ARG_TYPE ) ;  assertThat ( diff . isEmpty () ) . isFalse () ;  }
@ JavascriptInterface  public   final   void   showKeyboard ()   {  inputMethodManager . showSoftInput ( webView ,  SHOW_IMPLICIT ) ;  }
public   Chain < Boolean >   startsWith ( final   String   target ,  final   Integer   position )   {  return  new   Chain <> ( U . startsWith ( ( String )   item () ,  target ,  position ) ) ;  }
private   static   Component   compose ( List < Component >   components )   {  if  ( components . isEmpty () )   {  return  Component . empty () ;  }  if  ( components . size ()   ==   1 )   {  return  components . getFirst () ;  }  Component   linebreak   =  Component . literal ( """"\n"""" ) ;  return  components . stream () . skip ( 1 ) . reduce ( components . getFirst () . copy () , ( a ,  b )  ->   a . append ( linebreak ) . append ( b ) , ( a ,  b )  ->   a . append ( linebreak ) . append ( b ) ) ;  }
public   void   requestBothEdgeEvents ( String   consumer )   {  GpioD . lineRequestBothEdgeEvents ( getCPointer () ,  consumer ) ;  }
Type   functionAfter ( Context   context ,  Declaration   decl ,  Declarator   dcl ,  Type   type )   throws  ParserException   {  
static   QueryParser   getQueryParser ()   {  return  new   AnalyzingQueryParser ( NodeProperties . LABEL ,  new   VocabularyQueryAnalyzer () ) ;  }
public   static   Double []   computeZScore ( double   var ,  double   mean ,  double   stdDev ,  double   stdDevCutOff )   {  double   maxCutOff   =  mean   +   stdDevCutOff   *   stdDev ;  if ( var   >   maxCutOff )   {  var   =   maxCutOff ;  }  double   minCutOff   =  mean   -   stdDevCutOff   *   stdDev ;  if ( var   <   minCutOff )   {  var   =   minCutOff ;  }  if ( stdDev   >   0.00001 )   {  return  new   Double []   {  ( var   -   mean )   /   stdDev  } ;  }   else  {  return  new   Double []   {  0.0  } ;  }  }
public   static   void   showMessage ( Context   _context ,  String   _s )   {  Toast . makeText ( _context ,  _s ,  Toast . LENGTH_SHORT ) . show () ;  }
public   ToStringHelper   field ( String   name ,  byte []   val ,  boolean   forceNull )   {  if  ( val   ==   null   &&   ! forceNull )   return  this ;  return  fieldUnquoted ( name ,  val   ==   null  ?   """"null""""   :  Base64 . encodeToString ( val ,  Base64 . NO_WRAP   |   Base64 . NO_PADDING   |   Base64 . URL_SAFE ) ) ;  }
@ ApiModelProperty ( example   =   """"inline-password"""" ,  required   =   true ,  value   =   """"If the provisioning method is inline-password then a valid password should be sent in the request body, if the provisioning method is invite-via-email then password doesn't need to be send through request body, instead an emai link will be sent to the given email address to set the password."""" )  @ JsonProperty ( """"provisioningMethod"""" )  @ Valid  @ NotNull ( message   =   """"Property provisioningMethod cannot be null."""" )  public   String   getProvisioningMethod ()   {  return  provisioningMethod ;  }
@ Override  protected   void   afterHookedMethod ( MethodHookParam   param )   throws  Throwable   {  var   view   =  ( View )   param . args [ 0 ] ;  var   text   =  ( TextView )   view . findViewById ( Utils . getID ( """"message_text"""" ,  """"id"""" ) ) ;  if  ( text   !=   null )   {  text . setOnLongClickListener ( ( view1  ->  {  Utils . setToClipboard ( text . getText () . toString () ) ;  Utils . showToast ( Utils . getApplication () . getString ( ResId . string . copied_to_clipboard ) ,  Toast . LENGTH_LONG ) ;  return  true ;  } ) ) ;  }  }
@ Nullable  @ Override  public   AABB   getHeadshotBox ( T   entity )  {  double   halfWidth   =  this . headWidth   /   2.0 ;  AABB   headBox   =  new   AABB ( - halfWidth   *   0.0625 ,  0 ,  - halfWidth   *   0.0625 ,  halfWidth   *   0.0625 ,  this . headHeight   *   0.0625 ,  halfWidth   *   0.0625 ) ;  headBox   =   headBox . move ( 0 ,  this . headYOffset   *   0.0625 ,  0 ) ;  return  headBox ;  }
@ Override  public   void   sendFragmentedFrame ( Opcode   op ,  ByteBuffer   buffer ,  boolean   fin )   {  send ( draft . continuousFrame ( op ,  buffer ,  fin ) ) ;  }
public   APIResourceListItem   addPropertiesItem ( Property   propertiesItem )   {  if  ( this . properties   ==   null )   {  this . properties   =   new   ArrayList < Property > () ;  }  this . properties . add ( propertiesItem ) ;  return  this ;  }
public   void   setLR_AutoExposureEnabled ( int   value )   {  setOption ( RealSense . RS_OPTION_R200_LR_AUTO_EXPOSURE_ENABLED ,  value ) ;  }
@ ApiModelProperty ( example   =   """"https:
public   void   createLayout ( Dimension   dim ,  Rectangle   visibleRect )  {  engine . createLayout ( dim ,  visibleRect ) ;  setPreferredSize ( new   java . awt . Dimension ( engine . getImage () . getWidth () ,  engine . getImage () . getHeight () ) ) ;  revalidate () ;  }
private   boolean   hasCreatePermission ( RoleMap   roleMap ,  PermissionEntry   principal ,  List < String >   authorities ,  RoleType   roleType )   {  if  ( roleMap . hasPermission ( principal ,  Item . CREATE ,  roleType ,  null ) )   {  return  true ;  }  for  ( String   group   :  authorities )   {  PermissionEntry   groupEntry   =  new   PermissionEntry ( AuthorizationType . GROUP ,  group ) ;  if  ( roleMap . hasPermission ( groupEntry ,  Item . CREATE ,  roleType ,  null ) )   {  return  true ;  }  }  return  false ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"connectorId"""" )  @ Valid  public   String   getConnectorId ()   {  return  connectorId ;  }
@ Test  void   pushesAndPopsCursor ()   throws  Exception   {  MatcherAssert . assertThat ( """"Can't push and pop cursor"""" , XhtmlMatchers . xhtml ( new   Xembler ( new   Directives ()  . add ( """"jeff"""" )  . push () . add ( """"lebowski"""" )  . push () . xpath ( """"/jeff"""" ) . add ( """"dude"""" ) . pop ()  . attr ( """"birthday"""" ,  """"today"""" ) . pop ()  . add ( """"los-angeles"""" ) ) . xml () ) , XhtmlMatchers . hasXPaths ( """"/jeff/lebowski[@birthday]"""" , """"/jeff/los-angeles"""" , """"/jeff/dude"""" ) ) ;  }
public   List < CoverageResult >   getParents ()   {  List < CoverageResult >   result   =  new   ArrayList < CoverageResult > () ;  CoverageResult   p   =  getParent () ;  while  ( p   !=   null )   {  result . add ( p ) ;  p   =   p . getParent () ;  }  Collections . reverse ( result ) ;  return  result ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init () ;  ConfigurationContext   configContext   =  ConfigurationContextFactory  . createConfigurationContextFromFileSystem ( null ,  null ) ;  identityProviderMgtServiceClient   =   new   IdentityProviderMgtServiceClient ( sessionCookie ,  backendURL ,  configContext ) ;  userMgtClient   =   new   UserManagementClient ( backendURL ,  getSessionCookie () ) ;  userMgtClient . addRole ( """"umRole1"""" ,  null ,  new   String [] { """"login"""" } ,  false ) ;  }
@ DataProvider ( name   =   """"SCIM2UserConfigProvider"""" )  public   static   Object [] []   sCIM2UserConfigProvider ()   {  return  new   Object [] [] { { TestUserMode . SUPER_TENANT_ADMIN } , { TestUserMode . TENANT_ADMIN } } ;  }
@ Override  public   String   getPlayerPrefix ( String   world ,  String   player )   {  return  ApiLayer . getValue ( world ,  CalculableType . USER ,  player ,  """"prefix"""" ) ;  }
@ Override  public   boolean   containsAll ( Collection < ? >   c )   {  return  children . containsAll ( c ) ;  }
public   boolean   ownUpdatesAreVisible ( int   type )   throws  SQLException   {  return  false ;  }
public   static   Builder   builder ( Collection < Schema >   subschemas )   {  return  new   Builder () . subschemas ( subschemas ) ;  }
@ Override   public   FloatIndexer   reindex ( Index   index )   {  return  new   FloatArrayIndexer ( array ,  index ) ;  }
public   Item   removeItem ( ItemStack   itemStack ,  int   amount )   {  if  ( contains ( itemStack ) )   {  ItemStack   sameType   =  getSameType ( itemStack ) ;  if  ( sameType . getAmount ()   -   amount   <=   0 )   {  itemStacks . remove ( sameType ) ;  }   else  {  itemStacks . remove ( sameType ) ;  itemStacks . add ( new   ItemStack ( sameType . getAmount ()   -   amount ,  sameType . getItem () ) ) ;  }  return  itemStack . getItem () ;  }  return  null ;  }
public   final   boolean   checkIfNullFieldValueList ( final   List < String >   fieldValueList )   {  return  fieldValueList   ==   null   ||   fieldValueList . size ()   ==   1   &&   fieldValueList . contains ( """"null"""" ) ;  }
@ Override  protected   void   onSetSSLParameters ( SSLParameters   sslParameters )   {  
private   static   void   parse_mapping ( XmlPullParser   parser ,  Map < KeyValue ,  KeyValue >   dst )   throws  Exception  {  KeyValue   a   =  KeyValue . getKeyByName ( parser . getAttributeValue ( null ,  """"a"""" ) ) ;  KeyValue   b   =  KeyValue . getKeyByName ( parser . getAttributeValue ( null ,  """"b"""" ) ) ;  while  ( parser . next ()   !=   XmlPullParser . END_TAG )  continue;  dst . put ( a ,  b ) ;  }
@ DataProvider ( name   =   """"oAuthConsumerApplicationProvider"""" )  public   static   Object [] []   oAuthConsumerApplicationProvider ()   {  
@ Test  void   testSortXmlSimpleShouldAffectVerify ()   {  SortPomImplUtil . create ()  . testVerifyXmlIsNotOrdered ( """"/Simple_input.xml"""" , """"The xml element <modelVersion> should be placed before <artifactId>"""" ) ;  }
@ Test ( dependsOnMethods   =   { """"testResolveL1AppBrandingAfterL1AppBrandingDelete"""" } )  public   void   testResolveL2AppBrandingAfterL1AppBrandingDelete ()   throws  Exception   {  Response   response   =  getResolvedAppBrandingInOrg ( level2OrgId ,  level2AppId ) ;  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_OK )  . body ( """"type"""" ,  equalTo ( ORGANIZATION_TYPE ) )  . body ( """"name"""" ,  equalTo ( level1OrgId ) )  . body ( """"locale"""" ,  equalTo ( DEFAULT_LOCALE ) ) ;  assertBrandingPreferences ( ADD_L1_ORG_BRANDING_RESOURCE_FILE ,  response ) ;  }
@ Override  public   boolean   matchesSafely ( Root   root )   {  int   type   =  root . getWindowLayoutParams () . get () . type ;  if  ( ( type   ==   WindowManager . LayoutParams . TYPE_TOAST ) )   {  IBinder   windowToken   =  root . getDecorView () . getWindowToken () ;  IBinder   appToken   =  root . getDecorView () . getApplicationWindowToken () ;  if  ( windowToken   ==   appToken )   {  return  true ;  }  }  return  false ;  }
public   static   BoardModel   getByBoardCode ( String   boardCode )   throws  Exception   {  var   matches   =  Arrays . stream ( BoardModel . values () )  . filter ( bm  ->   bm . boardCodes . contains ( boardCode ) )  . collect ( Collectors . toList () ) ;  if  ( matches . isEmpty () )   {  return  BoardModel . UNKNOWN ;  }   else if  ( matches . size ()   >   1 )   {  throw  new   Exception ( """"Too many matching models found for code """"   +   boardCode ) ;  }  return  matches . get ( 0 ) ;  }
public   void   compute ( Map < KeyValue ,  KeyboardData . PreferredPos >   dst ,  Query   q )  {  for  ( ExtraKey   k   :  _ks )  k . compute ( dst ,  q ) ;  }
@ Test  public   void   combinedSchemaMatchEventToString ()   {  JSONObject   expected   =  LOADER . readObj ( """"combined-schema-match.json"""" ) ;  CombinedSchemaMatchEvent   subject   =  new   CombinedSchemaMatchEvent ( COMBINED_SCHEMA ,  TrueSchema . INSTANCE ,  INSTANCE ) ;  JSONObject   actual   =  new   JSONObject ( subject . toString () ) ;  assertThat ( actual ,  sameJsonAs ( expected ) ) ;  }
public   void   setDutyCycle ( long   dutyCycle )   throws  IOException   {  var   path   =  Paths . get ( pwmPath , """"duty_cycle"""" ) ;  Files . writeString ( path ,  Long . toString ( dutyCycle ) ) ;  }
public   boolean   isReady ()   {  return  this . countDownLatch . getCount ()   ==   0L ;  }
@ Deprecated  public   void   setPipelines ( String []   pipelines )   {  this . pipelines   =   pipelines ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( audience ,  certificateAlias ) ;  }
@ Override  protected   void   beforeHookedMethod ( MethodHookParam   param )   throws  Throwable   {  var   path   =  ( String )   param . args [ 0 ] ;  var   fakePath   =  """"/data/fakepath"""" ;  if  ( path . contains ( """"qemu"""" )   ||   path . contains ( """"superuser"""" ) )   {  param . args [ 0 ]   =   fakePath ;  }  }
@ Override  public   String   toString ()   {  return  """"class ClaimAttributeMapping {\n""""   +  """"    claimURI: """"   +   toIndentedString ( claimURI )   +   """"\n""""   +  """"    mappedAttribute: """"   +   toIndentedString ( mappedAttribute )   +   """"\n""""   +  """"}"""" ;  }
@ Override   public   float   get ( long ...   indices )   {  return  toFloat ( array [ ( int ) index ( indices ) ] ) ;  }
protected   static   < T >   List < T >   newArrayList ( final   Iterable < T >   iterable )   {  final   List < T >   result ;  if  ( iterable   instanceof   Collection )   {  result   =   new   ArrayList <> ( ( Collection < T > )   iterable ) ;  }   else  {  result   =   new   ArrayList <> () ;  for  ( final   T   item   :  iterable )   {  result . add ( item ) ;  }  }  return  result ;  }
@ Override  public   int   hashCode ()   {  if  ( raw   !=   null )   {  return  raw . hashCode () ;  }   else  {  int   hash   =  5 ;  hash   =   97   *   hash   +   this . major ;  hash   =   97   *   hash   +   this . minor ;  hash   =   97   *   hash   +   this . patch ;  hash   =   97   *   hash   +   Objects . hashCode ( this . build ) ;  return  hash ;  }  }
@ Override  public   void   callback ( WorkerContext < DTMasterParams ,  DTWorkerParams >   context )   {  DTWorker . this . threadPool . shutdownNow () ;  try  {  DTWorker . this . threadPool . awaitTermination ( 2 ,  TimeUnit . SECONDS ) ;  }   catch  ( InterruptedException   e )   {  Thread . currentThread () . interrupt () ;  }  }
public   < F   extends  Comparable < ?   super  F > >   Chain < T >   min ( final   Function < T ,  F >   func )   {  return  new   Chain <> ( Underscore . min ( list ,  func ) ) ;  }
public   void   setForVarSelect ( boolean   isForVarSelect )   {  this . isForVarSelect   =   isForVarSelect ;  }
public   static   < T >   JsonConfig < IgnoreList < T > >   createIgnoreListConfig ( String   file , ResourceKey < Registry < T > >   registryKey , List < String >   defaultValues )   {  List < String >   values   =  List . copyOf ( defaultValues ) ;  return  new   JsonConfig <> ( Jade . ID   +   """"/""""   +   file ,  JadeCodecs . ignoreList ( registryKey ) ,  null ,  ()  ->  {  var   ignoreList   =  new   IgnoreList < T > () ;  ignoreList . values   =   values ;  return  ignoreList ;  } ) ;  }
public   static   String   guilWrap ( Options   opt ,  String   str )   {  return  opt . guilOpen   +   str   +   opt . guilClose ;  }
public   void   removeNpc ( NPC   npc )   {  for  ( int   i   =  0 ;   i   <   npcs . size () ;   i ++ )   {  if  ( npcs . get ( i ) . equals ( npc ) )   {  npcs . remove ( i ) ;  }  }  }
@ Override   public   Map < String ,  Buffer >   getVideoSideData ()   {  if  ( video_st   ==   null )   {  return  super . getVideoSideData () ;  }  videoSideData   =   new   HashMap < String ,  Buffer > () ;  for  ( int   i   =  0 ;   i   <   video_st . nb_side_data () ;   i ++ )   {  AVPacketSideData   sd   =  video_st . side_data () . position ( i ) ;  String   key   =  av_packet_side_data_name ( sd . type () ) . getString () ;  Buffer   value   =  sd . data () . capacity ( sd . size () ) . asBuffer () ;  videoSideData . put ( key ,  value ) ;  }  return  videoSideData ;  }
public   static   String   peekMagiskPath ()   {  return  InstallerInitializer . MAGISK_PATH ;  }
public   SAML2ServiceProvider   getSAMLInboundDetailsOfApplication ( int   portOffset ,  String   appId )   throws  Exception   {  return  applicationManagementRestClients . get ( portOffset ) . getSAMLInboundDetails ( appId ) ;  }
public   void   removeClaimDialect ( String   externalClaimDialect )   throws  RemoteException , ClaimMetadataManagementServiceClaimMetadataException   {  try  {  ClaimDialectDTO   claimDialect   =  new   ClaimDialectDTO () ;  claimDialect . setClaimDialectURI ( externalClaimDialect ) ;  claimMetadataManagementServiceStub . removeClaimDialect ( claimDialect ) ;  }   catch  ( RemoteException   e )   {  throw  e ;  }   catch  ( ClaimMetadataManagementServiceClaimMetadataException   e )   {  throw  e ;  }  }
private   static   boolean   parseLegacyAuthzRuntimeConfig ( String   xmlContent )   throws  Exception   {  DocumentBuilderFactory   factory   =  DocumentBuilderFactory . newInstance () ;  DocumentBuilder   builder   =  factory . newDocumentBuilder () ;  Document   document   =  builder . parse ( new   ByteArrayInputStream ( xmlContent . getBytes () ) ) ;  
private   void   handleOutputDone ( android . os . Message   msg )   {  switch  ( msg . arg1 )   {  case  MCS_HEARTBEAT_PING_TAG :  wakeLock . release () ;  break;  default:  }  }
private   void   fillArguments ()   {  if  ( missingParameters () ) {  mArguments . putString ( """"command"""" ,  """""""" ) ;  }  }
public   UserShareRequestBody   organizations ( List < UserShareRequestBodyOrganizations >   organizations )   {  this . organizations   =   organizations ;  return  this ;  }
private   void   showFileDownloadingFragment ( ServerFile   file )   {  DialogFragment   fragment   =  ServerFileDownloadingFragment . newInstance ( null ,  file ,  FileOption . DOWNLOAD ) ;  fragment . show ( getFragmentManager () ,  ServerFileDownloadingFragment . TAG ) ;  }
@ JsonIgnore  public   Integer   getBinningAutoTypeThreshold ()   {  return  binningAutoTypeThreshold ;  }
 <argument pos:start=""""""""365:153"""""""" pos:end=""""""""365:174""""""""><expr pos:start=""""""""365:153"""""""" pos:end=""""""""365:174""""""""><name pos:start=""""""""365:153"""""""" pos:end=""""""""365:174""""""""><name pos:start=""""""""365:153"""""""" pos:end=""""""""365:162"""""""">descriptor</name><operator pos:start=""""""""365:163"""""""" pos:end=""""""""365:163"""""""">.</operator><name pos:start=""""""""365:164"""""""" pos:end=""""""""365:174"""""""">versionCode</name></name></expr></argument>
@ Override  public   String   getDisplayName ()   {  return  Messages . DisplayName () ;  }
@ Override  public   void   handle ( C2SMessageShooting   message ,  MessageContext   context )  {  context . execute ( ()  -> {  ServerPlayer   player   =  context . getPlayer () ;  if ( player   !=   null )  {  ModSyncedDataKeys . SHOOTING . setValue ( player ,  message . shooting ) ;  }  } ) ;  context . setHandled ( true ) ;  }
public   static   Optional < DownloadIssuesTask >   from ( Project   project , SonarQubeInspectionContext . EnrichedSettings   enrichedSettings , ImmutableList < PsiFile >   psiFiles )   {  return  new   DownloadIssuesTaskBuilder () . buildFrom ( project ,  enrichedSettings ,  psiFiles ) . maybeGetDownloadIssuesTask () ;  }
public   synchronized   List < Registration >   getRegistrationsByApp ( String   packageName )   {  SQLiteDatabase   db   =  getReadableDatabase () ;  Cursor   cursor   =  db . query ( TABLE_REGISTRATIONS ,  null ,  FIELD_PACKAGE_NAME   +   """" LIKE ?"""" ,  new   String [] { packageName } ,  null ,  null ,  null ) ;  if  ( cursor   !=   null )   {  List < Registration >   result   =  new   ArrayList <> () ;  while  ( cursor . moveToNext () )   {  result . add ( new   Registration ( cursor ) ) ;  }  cursor . close () ;  return  result ;  }  return  Collections . emptyList () ;  }
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder ( """"[Special Day: """" ) ;  if  ( date   !=   null )   {  sb . append ( """" (\"""""""" ) . append ( date ) . append ( """"\"""")"""" ) ;  }  if  ( exceptionalHours   !=   null )   {  sb . append ( """" (\"""""""" ) . append ( exceptionalHours ) . append ( """"\"""")"""" ) ;  }  sb . append ( """"]"""" ) ;  return  sb . toString () ;  }
public   AuthorizationDetailsType   description ( String   description )   {  this . description   =   description ;  return  this ;  }
public   void   setToResume ( boolean   toResume )   {  this . isToResume   =   toResume ;  }
public   static   VarSpec   var ( String   varName ,  int   prefix )  {  return  var ( varName ,  Modifier . PREFIX ,  prefix ) ;  }
@ Test  void   prefixesItemsWithNamespaces ()   throws  Exception   {  MatcherAssert . assertThat ( """"Can't prefix items with namespaces"""" , new   Xembler ( new   Directives ()  . add ( """"bbb"""" )  . attr ( """"xmlns:x"""" ,  """"http:
@ Nullable  @ Override  public   View   onCreateView ( LayoutInflater   inflater ,  ViewGroup   container ,  Bundle   savedInstanceState )   {  View   scrollRoot   =  inflater . inflate ( R . layout . self_check ,  container ,  false ) ;  root   =   ( ViewGroup )   scrollRoot . findViewById ( R . id . self_check_root ) ;  reset ( inflater ) ;  return  scrollRoot ;  }
public   void   setSampleMode ( SampleMode   samplesMode )   {  this . sampleMode   =   samplesMode ;  }
public   void   saveConfigAndRestart ()   {  String   jsonConfig ;  synchronized  ( mConfigLock )   {  jsonConfig   =   new   Gson () . toJson ( mConfig ) ;  }  new   PostConfigRequest ( mContext ,  mUrl ,  mApiKey ,  jsonConfig ,  result  ->  {  Intent   intent   =  new   Intent ( mContext ,  SyncthingService . class )  . setAction ( SyncthingService . ACTION_RESTART ) ;  mContext . startService ( intent ) ;  } ) ;  mOnConfigChangedListener . onConfigChanged () ;  }
@ Override  public   String   toString ()   {  final   StringBuilder   sb   =  new   StringBuilder ( """"GetGlobalSearchSourcesResponse{"""" ) ;  sb . append ( """"status="""" ) . append ( status ) ;  sb . append ( """", sources="""" ) . append ( Arrays . toString ( sources ) ) ;  sb . append ( '}' ) ;  return  sb . toString () ;  }
@ Override  public   void   closeContents ( CloseContentsRequest   request ,  IDriveServiceCallbacks   callbacks )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: closeContents"""" ) ;  }
@ Test  public   void   testGetEmptyProperties ()   {  assertThat ( GraphUtil . getProperties ( node ,  """"nothing"""" ,  String . class ) ,  is ( empty () ) ) ;  }
'#container6'];\n""""""""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   static   double   parseNumber ( Object   valStr )   {  if ( valStr   ==   null )   {  return  Double . NaN ;  }  if ( valStr   instanceof   Double )   {  return  ( Double )   valStr ;  }   else if ( valStr   instanceof   Integer )   {  return  ( ( Integer )   valStr ) . doubleValue () ;  }   else  {  try  {  return  Double . parseDouble ( ( String )   valStr ) ;  }   catch  ( NumberFormatException   e )   {  return  Double . NaN ;  }  }  }
@ Override  public   void   run ()   {  try  {  MutableDocument   mDoc   =  new   MutableDocument ( """"doc"""" ) ;  updateDoc ( mDoc ,  revisions ) ;  
private   double   getColumnMetric ( ColumnConfig   config ,  PostCorrelationMetric   metric )   throws  IOException   {  if ( metric   ==   null   ||   metric . equals ( PostCorrelationMetric . IV ) )   {  
public   Intent   buildServerFileOpeningIntent ( ServerFile   file ,  Uri   fileUri )   {  Intent   intent   =  new   Intent ( Intent . ACTION_VIEW ) ;  intent . setDataAndType ( fileUri ,  file . getMime () ) ;  grantUriPermission ( intent ,  fileUri ) ;  return  Intent . createChooser ( intent ,  null ) ;  }
private   String []   parseLine (  String   csvLine  )  {  return  COLUMN_SEPARATOR_PATTERN . split (  csvLine ,  - 1  ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( red ,  green ,  blue ,   hue ,  saturation ,  lightness ,  opacity ) ;  }
@ Override  public   void   run ()   {  WearableListenerService . this . onConnectedNodes ( new   ArrayList < Node > ( nodes ) ) ;  }
@ Override   public   boolean   shouldEarlyStop ( int   epochs ,  double []   weights ,  double   trainingError ,  double   validationError )   {  if  (  epochs   <   minimumEpochs  )   {  return  false ;  }  if  (  validationError   <   this . globalMinimumError  )   {  this . globalMinimumError   =   validationError ;  this . bufferSize   =   0 ;  return  false ;  }   else  {  if  (  this . bufferSize   >=   this . windowSize  )   {  return  true ;  }   else  {  this . bufferSize   ++ ;  return  false ;  }  }  }
@ Override  public   Byte   streamData ( BlockAccessor   accessor )   {  BeehiveBlockEntity   beehive   =  ( BeehiveBlockEntity )   accessor . getBlockEntity () ;  int   bees   =  beehive . getOccupantCount () ;  return  ( byte )   ( beehive . isFull ()  ?   bees   :  - bees ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  restClient . deleteV2Role ( orgRoleID ) ;  deleteApp ( orgAppID ) ;  deleteApp ( applicationAppID ) ;  scim2RestClient . deleteUser ( userID ) ;  consumerKey   =   null ;  consumerSecret   =   null ;  appId   =   null ;  restClient . closeHttpClient () ;  }
@ Override  public   TraversableResolver   getTraversableResolver ()   {  return  new   FakeTraversableResolver () ;  }
protected   void   saveModelConfig ( String   folder ,  ModelConfig   modelConfig )   throws  IOException   {  JSONUtils . writeValue ( new   File ( folder   +   File . separator   +   Constants . MODEL_CONFIG_JSON_FILE_NAME ) ,  modelConfig ) ;  }
public   static   void   assertHasPermission ( User   user ,  final   Permission   permission ,  final   AccessControlled ...   items )   {  for  ( AccessControlled   item   :  items )   {  assertPermission ( user ,  item ,  permission ) ;  }  }
public   FederatedAuthenticator   addProperty ( Property   property )   {  if  ( this . properties   ==   null )   {  this . properties   =   new   ArrayList <> () ;  }  this . properties . add ( property ) ;  return  this ;  }
@ Override  public   NumericalBinInfo   clone ()   {  NumericalBinInfo   other   =  new   NumericalBinInfo () ;  other . setLeftThreshold ( this . leftThreshold ) ;  other . setRightThreshold ( this . rightThreshold ) ;  other . setNegativeCnt ( this . getNegativeCnt () ) ;  other . setPositiveCnt ( this . getPositiveCnt () ) ;  other . setWeightNeg ( this . getWeightNeg () ) ;  other . setWeightPos ( this . getWeightPos () ) ;  return  other ;  }
public   void   requestPreAuthorizedTemporaryExposureKeyHistory ( RequestPreAuthorizedTemporaryExposureKeyHistoryParams   params )   throws  RemoteException   {  getServiceInterface () . requestPreAuthorizedTemporaryExposureKeyHistory ( params ) ;  }
@ Override  public   boolean   hasConfig ( ResourceLocation   key )   {  return  getConfigKeys () . contains ( key ) ;  }
@ Override  public   boolean   destroySession ( final   WebContext   context )   {  getSession ( true ) . stop () ;  return  true ;  }
@ Override  public   void   doWrite ( DataOutput   out )   throws  IOException   {  if ( parameters   ==   null )   {  out . writeInt ( 0 ) ;  }   else  {  out . writeInt ( this . parameters . length ) ;  for ( int   i   =  0 ;   i   <   this . parameters . length ;   i ++ )   {  out . writeDouble ( this . parameters [ i ] ) ;  }  }  out . writeDouble ( this . trainError ) ;  out . writeDouble ( this . testError ) ;  out . writeLong ( this . trainSize ) ;  out . writeLong ( this . testSize ) ;  }
private   static   Predicate < String >   isValid ()   {  return  line  ->   ! line . contains ( """"
public   DeferredSchemaCache   getDeferredSchemaCache ()   {  return  deferredSchemaCache ;  }
@ Test  public   void   thatHeadersFieldIsPopulated ()   {  completeAndCheckResultsByFile ( """"headers"""" ) ;  }
private   void   doDecode ( WebSocketImpl   ws ,  ByteBuffer   buf )   throws  InterruptedException   {  try  {  ws . decode ( buf ) ;  }   catch  ( Exception   e )   {  log . error ( """"Error while reading from remote connection"""" ,  e ) ;  }   finally  {  pushBuffer ( buf ) ;  }  }
public   static   void   addObjectIfNotEmpty ( JsonObject   parent ,  String   key ,  JsonObject   child )  {  if ( child . size ()   >   0 )  {  parent . add ( key ,  child ) ;  }  }
@ Override  public   boolean   has ( String   key )   {  return  this . properties . has ( key ) ;  }
private   static   boolean   isDownloadsDocument ( Uri   uri )   {  return  """"com.android.providers.downloads.documents"""" . equals ( uri . getAuthority () ) ;  }
public   static   < E   extends  Comparable < E > >   int   sortedIndex ( final   List < E >   list ,  final   E   value )   {  int   index   =  0 ;  for  ( E   elem   :  list )   {  if  ( elem . compareTo ( value )   >=   0 )   {  return  index ;  }  index   +=   1 ;  }  return  - 1 ;  }
@ Test  public   void   testQueryParamsHaveOrderPreserved ()   throws  Exception   {  
@ Test  public   void   objectEscape ()   {  ObjectSchema   actual   =  ( ObjectSchema )   SchemaLoader . load ( get ( """"objectEscape"""" ) ) ;  assertTrue ( actual . definesProperty ( """"#/a~0b"""" ) ) ;  assertTrue ( actual . definesProperty ( """"#/a~0b/c~1d"""" ) ) ;  assertFalse ( actual . definesProperty ( """"#/a~0b/c/d"""" ) ) ;  }
private   ParseException   expected ( String   expected )   {  if  ( isEndOfText () )   {  return  error ( """"Unexpected end of input"""" ) ;  }  return  error ( """"Expected """"   +   expected ) ;  }
@ Override   public   CLongPointer   limit ( long   limit )   {  return  super . limit ( limit ) ;  }
@ Override  public   String   getItem ( int   position )   {  if  ( isOAuth () )   {  String   tokens   =  data . service . split ( """":"""" ,  2 ) [ 1 ] ;  return  tokens . split ( """" """" ) [ position ] ;  }  return  data . service ;  }
@ Override  public   Paint . Align   getTextAlign ()   {  return  state . derived . hasOnly2Wheels ()  ?   Paint . Align . LEFT   :  Paint . Align . RIGHT ;  }
public   static   WorkbenchIngredient   of ( ItemStack   stack ,  int   count )  {  return  new   WorkbenchIngredient ( new   Ingredient . ItemValue ( stack ) ,  count ) ;  }
public   static   ActivationFactory   getInstance ()   {  if ( activationFactory   ==   null )   {  activationFactory   =   new   ActivationFactory () ;  }  return  activationFactory ;  }
@ Test ( dependsOnMethods   =   { """"testUpdateActionRemovingExistingRule"""" } )  public   void   testActivateAction ()   {  getResponseOfPost ( ACTION_MANAGEMENT_API_BASE_PATH   +   PRE_ISSUE_ACCESS_TOKEN_PATH   +  """"/""""   +   testActionId   +   ACTION_ACTIVATE_PATH ,  """""""" )  . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_OK )  . body ( """"id"""" ,  equalTo ( testActionId ) )  . body ( """"name"""" ,  equalTo ( TEST_ACTION_NAME ) )  . body ( """"description"""" ,  equalTo ( TEST_ACTION_UPDATED_DESCRIPTION ) )  . body ( """"status"""" ,  equalTo ( TEST_ACTION_ACTIVE_STATUS ) ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  try  {  oauthAdminClient . removeOAuthApplicationData ( consumerKey ) ;  samlSSOConfigServiceClient . removeServiceProvider ( SECONDARY_IS_APPLICATION_NAME ) ;  applicationManagementServiceClient . deleteApplication ( PRIMARY_IS_APPLICATION_NAME ) ;  applicationManagementServiceClient2 . deleteApplication ( SECONDARY_IS_APPLICATION_NAME ) ;  identityProviderMgtServiceClient . deleteIdP ( IDP_NAME ) ;  client . getConnectionManager () . shutdown () ;  this . logManger . logOut () ;  logManger   =   null ;  
@ Override   public   HalfIndexer   get ( long   i ,  long   j ,  float []   h ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  h [ offset   +   n ]   =   getRaw ( index ( i ,  j )   +   n ) ;  }  return  this ;  }
public   CandidateSeed   getSeedById ( int   id )   {  return  seedMapping . get ( id ) ;  }
private   boolean   hasAnyPermission ( PermissionEntry   principal ,  List < String >   authorities ,  Set < PermissionEntry >   sids )   {  PermissionEntry   eitherUser   =  new   PermissionEntry ( AuthorizationType . EITHER ,  principal . getSid () ) ;  if  ( sids . contains ( principal )   ||   sids . contains ( eitherUser ) )   {  return  true ;  }   else  {  for  ( String   authority   :  authorities )   {  if  ( sids . contains ( new   PermissionEntry ( AuthorizationType . GROUP ,  authority ) )  ||   sids . contains ( new   PermissionEntry ( AuthorizationType . EITHER ,  authority ) ) )   {  return  true ;  }  }  }  return  false ;  }
@ Override  public   String   toString ()   {  return  """"class SingleLogoutProfile {\n""""   +  """"    enabled: """"   +   toIndentedString ( enabled )   +   """"\n""""   +  """"    logoutRequestUrl: """"   +   toIndentedString ( logoutRequestUrl )   +   """"\n""""   +  """"    logoutResponseUrl: """"   +   toIndentedString ( logoutResponseUrl )   +   """"\n""""   +  """"    logoutMethod: """"   +   toIndentedString ( logoutMethod )   +   """"\n""""   +  """"    idpInitiatedSingleLogout: """"   +   toIndentedString ( idpInitiatedSingleLogout )   +   """"\n""""   +  """"}"""" ;  }
public   < K >   void   printSchemaMap ( Map < K ,  Schema >   input )   {  object () ;  input . entrySet () . forEach ( entry  ->  {  key ( entry . getKey () . toString () ) ;  entry . getValue () . describeTo ( this ) ;  } ) ;  endObject () ;  }
private   static   void   registerHandler ( String   target ,  HttpMode   method ,  SimpleHandler   handler )   {  HttpRequestTestBase . registerHandler ( target ,  method ,  handler ) ;  }
public   static   boolean   isPartFileAllGzip ( String   filePath ,  SourceType   sourceType )   throws  IOException   {  FileStatus []   fileStatsArr   =  getFilePartStatus ( filePath ,  sourceType ) ;  boolean   isGzip   =  true ;  for ( FileStatus   fileStatus :  fileStatsArr )   {  if ( ! fileStatus . getPath () . toString () . endsWith ( """"gz"""" ) )   {  isGzip   =   false ;  }  }  return  isGzip ;  }
public   static   boolean   ignoreProperty ( Object   value )   {  if  ( value   instanceof   String  &&   ( CharMatcher . WHITESPACE . matchesAllOf ( ( String )   value )  ||   StopAnalyzer . ENGLISH_STOP_WORDS_SET . contains ( ( ( String )   value ) . toLowerCase () ) ) )   {  return  true ;  }  return  false ;  }
@ Override  public   String   toString ()   {  if  ( skipImports )   {  return  url   +   """" (skipImport)"""" ;  }  return  url ;  }
public   Optional < String >   getPrestoImpersonatedUser ( String   datasource )   {  return  Optional . ofNullable ( environment . getProperty ( """"presto.impersonated.user.""""   +   datasource ) ) ;  }
public   static   void   appendHexString ( StringBuilder   builder ,  ByteBuffer   buffer ) {  appendHexString ( builder ,  buffer . array () ) ;  }
@ Override  public   Map < String ,  Provider >   all ()   {  return  providers . all () ;  }
public   void   setBootstrapResolverForQuery ( boolean   bootstrapResolverForQuery )   {  this . bootstrapResolverForQuery   =   bootstrapResolverForQuery ;  }
protected   Index   getBackingIndex ( UniqueConstraint   uniqueConstraint ,  org . hibernate . mapping . Table   hibernateTable ,  DatabaseSnapshot   snapshot )   {  Index   index   =  new   Index () ;  index . setRelation ( uniqueConstraint . getRelation () ) ;  index . setColumns ( uniqueConstraint . getColumns () ) ;  index . setUnique ( true ) ;  index . setName ( String . format ( """"%s_%s_IX"""" , hibernateTable . getName () ,  StringUtil . randomIdentifer ( 4 ) ) ) ;  return  index ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( enable ,  responseType ) ;  }
@ Override  public   ErrorCode   createFromParcel ( Parcel   source )   {  try  {  return  ErrorCode . toErrorCode ( source . readInt () ) ;  }   catch  ( UnsupportedErrorCodeException   e )   {  throw  new   IllegalArgumentException ( e ) ;  }  }
public   void   setDataRow ( int   dataRow )   {  this . dataRow   =   dataRow ;  this . windowIndex   =   dataHolder . getWindowIndex ( dataRow ) ;  }
@ Override  public   I2CConfigBuilder   bus ( Integer   bus ) {  this . properties . put ( I2CConfig . BUS_KEY ,  bus . toString () ) ;  return  this ;  }
public   void   setJenkinsUrl ( URL   jenkinsUrl )   {  this . jenkinsUrl   =   jenkinsUrl ;  }
public   String []   getExplicitlyDeniedUsersForResource ( String   resourceId ,  String   action )   throws  RemoteException , UserStoreExceptionException   {  return  remoteAuthorizationManagerServiceStub . getExplicitlyDeniedUsersForResource ( resourceId ,  action ) ;  }
public   void   complete ( boolean   success )   {  saveTile ( tile ,  os ,  success ) ;  }
@ Override   public   void   setAsText ( String   s )   {  if  ( s   ==   null )   {  setValue ( null ) ;  }  try  {  setValue ( get ( s ) ) ;  }   catch  ( Exception   ex )   {  throw  new   IllegalArgumentException ( ex ) ;  }  }
private   Optional < PsiFile >   getReferencedFile ( final   String   relativePath )   {  final   Optional < VirtualFile >   baseDir   = Optional . ofNullable ( getElement () )  . map ( PsiElement :: getContainingFile )  . map ( PsiFile :: getVirtualFile )  . map ( VirtualFile :: getParent ) ;  final   PsiManager   psiManager   =  PsiManager . getInstance ( getElement () . getProject () ) ;  return  baseDir . map ( dir  ->   dir . findFileByRelativePath ( relativePath ) ) . map ( psiManager :: findFile ) ;  }
@ Override  public   void   loadState ( @ NotNull   Settings   settings )   {  this . settings   =   settings ;  }
public   void   logDebug ( String   title ,  Object   object )   {  if  ( ! DEBUG )   return;  log ( title   +   """": """"   +   object ) ;  if  ( object   instanceof   Throwable   th )   {  Log . i ( """"WAE"""" ,  this . getPluginName ()   +   """"-> """"   +   title   +   """": """"   +   th . getMessage () ,  th ) ;  }   else  {  Log . i ( """"WAE"""" ,  this . getPluginName ()   +   """"-> """"   +   title   +   """": """"   +   object ) ;  }  }
@ Test  public   void   testGetOwnersWithInvalidId ()   {  Response   response   =  getResponseOfGet ( TENANT_API_BASE_PATH   +   PATH_SEPARATOR   +   """"random-id""""   +  TENANT_API_OWNER_PATH ) ;  validateErrorResponse ( response ,  HttpStatus . SC_BAD_REQUEST ,  """"TM-60014"""" ,  """"random-id"""" ) ;  }
@ Override  public   void   run ()   {  try  {  List < GeocodeResult >   results   =  geoFutureEnd . get () ;  if  ( results   !=   null   &&   results . size ()   >   0 )   {  final   Point   endPoint   =  results . get ( 0 ) . getDisplayLocation () ;  
public   static   ModuleElement   getModuleOf ( Elements   elements ,  Element   element )   {  if  ( element   ==   null )   {  return  null ;  }  if  ( element   instanceof   ModuleElement )   {  return  ( ModuleElement )   element ;  }  return  elements . getModuleOf ( element ) ;  }
public   Builder   compile ( boolean   compile )   {  this . compile   =   compile ;  return  this ;  }
@ Test  void   getUrlWithBadge ()   {  try  ( MockedStatic < Stapler >   mockedStatic   =  Mockito . mockStatic ( Stapler . class ) )   {  StaplerRequest2   staplerRequest   =  Mockito . mock ( StaplerRequest2 . class ) ;  Mockito . when ( staplerRequest . getRequestURL () ) . thenReturn ( new   StringBuffer ( """"http:
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Send approval post request."""" , dependsOnMethods   =   """"testImplicitGrantSendLoginPost"""" )  public   void   testImplicitGrantSendApprovalPost ()   throws  Exception   {  HttpResponse   response   =  sendApprovalPost ( client ,  sessionDataKeyConsent ) ;  Assert . assertNotNull ( response ,  """"Approval request failed. response is invalid."""" ) ;  Header   locationHeader   = response . getFirstHeader ( OAuth2Constant . HTTP_RESPONSE_HEADER_LOCATION ) ;  Assert . assertNotNull ( locationHeader ,  """"Approval request failed. Location header is null."""" ) ;  
@ Override  public   Shape   redraw ( double   offsetX )   {  Line   line   =  new   Line () ;  line . getStyleClass () . add ( """"pitchbend"""" ) ;  line . startXProperty () . bind ( startX . subtract ( offsetX ) ) ;  line . startYProperty () . bind ( startY ) ;  line . endXProperty () . bind ( endX . subtract ( offsetX ) ) ;  line . endYProperty () . bind ( endY ) ;  return  line ;  }
@ Override  public   String   getSaveFormat ( File   file )   {  try  {  return  UtsuFileUtils . guessCharset ( FileUtils . readFileToByteArray ( file ) ) . equals ( """"UTF-8"""" ) ?   """"UST 2.0 (UTF-8)""""   :  """"UST 2.0 (Shift JIS)"""" ;  }   catch  ( IOException   e )   {  return  """"UST 2.0 (UTF-8)"""" ;  }  }
@ Override  public   boolean   getGroupInfoBoolean ( String   world ,  String   group ,  String   node ,  boolean   defaultValue )   {  String   s   =  getGroupInfoString ( world ,  group ,  node ,  null ) ;  if  ( s   ==   null )   {  return  defaultValue ;  }   else  {  Boolean   val   =  Boolean . valueOf ( s ) ;  return  val   !=   null  ?   val   :  defaultValue ;  }  }
@ Test  public   void   issue458ExclusiveMinimumTrueToFalse ()   {  assertOpenApiChangedEndpoints ( """"parameterDiff/issue-458-integer-limits_11.yaml"""" , """"parameterDiff/issue-458-integer-limits_13.yaml"""" ) ;  }
static   SimplifiedDiff   create ( TreeDifference . OneWayDiff   other )   {  return  new   SimplifiedDiff ( other . getNodePath () . getLeaf () . getKind () ,  other . getDetails () ) ;  }
default   int   i2cReadBlockData ( int   handle ,  int   register ,  ByteBuffer   buffer )   {  
private   void   copyLocationsFile ()   {  File   source   =  new   File ( """"json/original_data/locations.json"""" ) ;  File   dest   =  new   File ( fileName ) ;  dest . mkdirs () ;  try  {  Files . copy ( source . toPath () ,  dest . toPath () ,  StandardCopyOption . REPLACE_EXISTING ) ;  }   catch  ( IOException   e )   {  e . printStackTrace () ;  }  }
@ Test  public   void   testBadEpoch ()   throws  Exception   {  RedlineTask   task   =  new   RedlineTask () ;  task . setName ( """"nameRequired"""" ) ;  task . setVersion ( """"versionRequired"""" ) ;  task . setGroup ( """"groupRequired"""" ) ;  
public   static   boolean   isPersistentProcess ()   {  String   processName   =  getProcessName () ;  if  ( processName   ==   null )   {  Log . w ( """"GmsPackageUtils"""" ,  """"Can't determine process name of current process"""" ) ;  return  false ;  }  return  processName . endsWith ( """":persistent"""" ) ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"name"""" )  @ Valid  public   String   getName ()   {  return  name ;  }
private   String   getRolesPath ()   {  if  ( tenantDomain . equals ( MultitenantConstants . SUPER_TENANT_DOMAIN_NAME ) )   {  return  serverUrl   +   SCIM2_ROLES_ENDPOINT ;  }   else  {  return  serverUrl   +   TENANT_PATH   +   tenantDomain   +   PATH_SEPARATOR   +   SCIM2_ROLES_ENDPOINT ;  }  }
@ Override  protected   void   succeeded ()   {  super . succeeded () ;  statusBar . setText ( """"Saved changes to voicebank: """"   +   voicebank . getLocation () . getName () ) ;  callback . markChanged ( false ) ;  menuItemManager . disableSave () ;  }
public   void   addDependency (  final   String   name ,  final   int   comparison ,  final   String   version  )   {  requires . add ( new   Dependency ( name ,  version ,  comparison ) ) ;  }
public   static   String   rowNumToPitch ( int   rowNum )   {  return  REVERSE_PITCHES . get ( rowNum   %   12 )   +   Integer . toString ( 7   -   ( rowNum   /   12 ) ) ;  }
public   static   CalendarEntry   fromEvent ( InstanceSettings   settings ,  CalendarEvent   event ,  DateTime   entryDate )   {  CalendarEntry   entry   =  new   CalendarEntry ( settings ,  entryDate ,  event . getEndDate () ) ;  entry . allDay   =   event . isAllDay () ;  entry . event   =   event ;  return  entry ;  }
protected   ClassInfo   getClassInfo ( TypeElement   cd ,  Name   className ,  boolean   create )   {  className   =   removeTemplate ( elementUtils ,  className ) ;  ClassInfo   ci   =  classnames . get ( className ) ;  if  ( ci   ==   null   &&   create )   {  boolean   hidden   =  cd   !=   null  ?   hidden ( cd )  :  optionProvider . getOptionsFor ( className ) . matchesHideExpression ( className ) ;  ci   =   new   ClassInfo ( hidden ) ;  classnames . put ( className ,  ci ) ;  }  return  ci ;  }
@ EventHandler ( priority   =   EventPriority . MONITOR )  public   void   onPluginEnable ( PluginEnableEvent   event )   {  if  ( privs   ==   null )   {  Plugin   permChat   =  event . getPlugin () ;  if  ( PLUGIN_NAME . equals ( permChat . getDescription () . getName () ) )   {  if  ( permChat . isEnabled () )   {  privs   =   ( Privileges )   permChat ;  plugin . getLogger () . info ( String . format ( """"[Chat] %s hooked."""" ,  FRIENDLY_NAME ) ) ;  }  }  }  }
@ Override  public   void   update ( NodeData   style )  {  super . update ( style ) ;  updateMetrics ( g ) ;  }
@ Override  public   boolean   groupRemove ( String   world ,  String   group ,  String   permission )   {  throw  new   UnsupportedOperationException ( getName ()   +   """" no group permissions."""" ) ;  }
public   SchemaDiffOperation   addSchema ( RecursiveSchemaSet   refSet ,  CacheKey   key ,  Schema   left ,  Schema   right )   {  if  ( ! cache . containsKey ( key ) )   {  log . debug ( """"Added schema cache {}"""" ,  key ) ;  SchemaDiffOperation   operation   = new   SchemaDiffOperation ( openApiDiff ,  refSet ,  key ,  left ,  right ) ;  cache . put ( key ,  operation ) ;  processingQueue . add ( key ) ;  return  operation ;  }   else  {  return  cache . get ( key ) ;  }  }
private   String   fullyQualifiedImport ( ImportTree   importTree )   {  ImmutableList . Builder < Name >   names   =  ImmutableList . builder () ;  importTree . getQualifiedIdentifier () . accept ( IMPORT_NAMES_ACCUMULATOR ,  names ) ;  return  Joiner . on ( '.' ) . join ( names . build () . reverse () ) ;  }
@ Test  public   void   testArrayLengthEqual ()   {  float []   a   =  {  3f  } ;  float []   b   =  {  5f  } ;  AssertUtils . assertFloatArrayNotNullAndLengthEqual ( a ,  b ) ;  }
public   EventProvider   getEventProvider ( Context   context ,  int   widgetId )   {  return  new   EventProvider ( this ,  context ,  widgetId ) ;  }
private   float   convertPixelsToDp ( Context   context ,  float   px )   {  DisplayMetrics   metrics   =  context . getResources () . getDisplayMetrics () ;  return  px   /   ( metrics . densityDpi   /   160f ) ;  }
default   int   writeReadRegisterWord ( int   register ,  int   word )   {  writeRegisterWord ( register ,  word ) ;  return  readRegisterWord ( register ) ;  }
@ Override  public   ArrayList < String >   getValues ()   {  ArrayList < String >   values   =  new   ArrayList <> () ;  displayValues   =   new   HashMap <> () ;  Calendar   cal   =  getStartCal () ;  Calendar   endCal   =  getEndCal () ;  while  ( true ) {  String   value   =  getValue ( cal ) ;  values . add ( value ) ;  displayValues . put ( value ,  getDisplayValue ( cal ) ) ;  if ( Utils . isToday ( cal ) )   todayValue   =   value ;  cal . add ( Calendar . DATE ,  1 ) ;  Calendar   startOfCurrentDay   =  toStartOfDay ( ( Calendar )   cal . clone () ) ;  if ( startOfCurrentDay . after ( endCal ) )   break;  }  return  values ;  }
public   boolean   finishConnect ()   throws  IOException   {  return  socketChannel . finishConnect () ;  }
@ Provides  @ Singleton  CacheManager   provideCacheManager ( Context   context )   {  return  new   CacheManager ( context ) ;  }
@ Test  public   void   testBrokenDataPointerFile ()   throws  IOException   {  this . testReader   =   new   Reader ( getFile ( """"MaxMind-DB-test-broken-pointers-24.mmdb"""" ) ) ;  this . testBrokenDataPointer ( this . testReader ) ;  }
public   AmazonS3   fetchClient ()   {  if  ( client   ==   null )   {  client   =   createAWSClient () ;  }  return  client ;  }
@ Override  public   void   beforeShutdown ( ShutdownEvent   event )   {  logger . info ( """"Pi4J RUNTIME EVENT --> BEFORE SHUTDOWN EVENT"""" ) ;  beforeShutdownEventFired   =   true ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  RoleDefinition   that   =  ( RoleDefinition )   o ;  return  Objects . equals ( name ,  that . name ) ;  }
public   static   boolean   propagatePaintToParent ( CoverageElement   element )   {  for  ( CoveragePaintRule   rule   :  INITIAL_RULESET )   {  if  ( element   ==   rule . element )   {  return  CoverageAggregationMode . NONE   !=   rule . mode ;  }  }  return  false ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Check conditional authentication flow."""" )  public   void   testHttpGetWithClientCredentialsAndComplexResponse ()   throws  Exception   {  changeAdaptiveAuthenticationScript ( """"HttpGetScript.js"""" ,  """"dummy-get-with-clientcredential-auth-config"""" ) ;  loginAndAssert () ;  }
@ Override  public   JavaSourcesSubject   withClasspath ( Iterable < File >   classPath )   {  this . classPath   =   ImmutableList . copyOf ( classPath ) ;  return  this ;  }
@ Test  public   void   getPositionInfo ()   {  assertThat ( treeContext () . getNodeStartLine ( compilationSubtree () ) ) . isEqualTo ( subtreeStartLine () ) ;  assertThat ( treeContext () . getNodeEndLine ( compilationSubtree () ) ) . isEqualTo ( subtreeEndLine () ) ;  assertThat ( treeContext () . getNodeStartColumn ( compilationSubtree () ) )  . isEqualTo ( subtreeStartColumn () ) ;  assertThat ( treeContext () . getNodeEndColumn ( compilationSubtree () ) ) . isEqualTo ( subtreeEndColumn () ) ;  }
@ Nullable  public   Boolean   getUserNavigationEnabled ()   {  return  userNavigationEnabled ;  }
public   void   setCritChance ( double   critChance )   {  this . critChance   =   critChance ;  }
@ DataBoundSetter  public   void   setFailedTotalLow ( Integer   failedTotalLow )   {  this . failedTotalLow   =   failedTotalLow ;  }
public   Builder   grantedScopes ( List < String >   grantedScopes )   {  this . grantedScopes   =   grantedScopes ;  return  this ;  }
public   static   void   dumpGraph ( com . tinkerpop . blueprints . Graph   graphDb )   {  for  ( Vertex   node :  graphDb . getVertices () )   {  dumpNode ( node ) ;  }  for  ( Edge   relationship :  graphDb . getEdges () )   {  dumpRelationship ( relationship ) ;  }  }
public   static   boolean   default_checked ( String   name )  {  switch  ( name )  {  case  """"voice_typing"""" :  case  """"change_method"""" :  case  """"switch_clipboard"""" :  case  """"compose"""" :  case  """"tab"""" :  case  """"esc"""" :  case  """"f11_placeholder"""" :  case  """"f12_placeholder"""" :  return  true ;  default:  return  false ;  }  }
@ Nullable  GHUser   loadUser ( @ NonNull   String   username )   throws  IOException   {  GithubUser   user ;  try  {  user   =   usersByIdCache . getIfPresent ( username ) ;  if  ( gh   !=   null   &&   user   ==   null   &&   isAuthenticated () )   {  GHUser   ghUser   =  getGitHub () . getUser ( username ) ;  user   =   new   GithubUser ( ghUser ) ;  usersByIdCache . put ( username ,  user ) ;  }  }   catch  ( IOException   e )   {  LOGGER . log ( Level . FINEST ,  e . getMessage () ,  e ) ;  user   =   UNKNOWN_USER ;  usersByIdCache . put ( username ,  UNKNOWN_USER ) ;  }  return  user   !=   null  ?   user . user   :  null ;  }
@ Test  public   void   properBeansCreatedWhenDiscoveryEnabled_EurekaEnabled ()   {  new   ApplicationContextRunner ()  . withConfiguration ( AutoConfigurations . of ( EurekaConfigServerBootstrapConfiguration . class ) )  . withPropertyValues ( """"spring.cloud.config.discovery.enabled=true"""" ,  """"eureka.client.enabled=true"""" )  . run ( this :: assertEurekaBeansPresent ) ;  }
@ Override  public   void   setGroupInfoBoolean ( String   world ,  String   group ,  String   node ,  boolean   value )   {  throw  new   UnsupportedOperationException ( """"bPermissions does not support altering info nodes"""" ) ;  }
@ Test  public   void   testObjectPropertyAssertion ()   {  Node   i   =  getNode ( """"http:
private   void   showOfflineFiles ()   {  BusProvider . getBus () . post ( new   OfflineFilesSelectedEvent () ) ;  }
@ DataBoundSetter  public   void   setStopBuild ( boolean   stopBuild )   {  this . stopBuild   =   stopBuild ;  }
public   void   updateApplicationCertificate ( String   appId ,  X509Certificate   sp1X509PublicCert )   throws  Exception   {  Certificate   certificate   =  new   Certificate () ;  certificate . setType ( Certificate . TypeEnum . PEM ) ;  certificate . setValue ( convertToPem ( sp1X509PublicCert ) ) ;  ApplicationPatchModel   applicationPatch   =  new   ApplicationPatchModel () ;  applicationPatch   =   applicationPatch . advancedConfigurations ( new   AdvancedApplicationConfiguration () ) ;  applicationPatch . getAdvancedConfigurations () . setCertificate ( certificate ) ;  updateApplication ( appId ,  applicationPatch ) ;  }
public   void   setValidationFilterExpressions ( String   validationFilterExpressions )   {  this . validationFilterExpressions   =   validationFilterExpressions ;  }
@ Override   public   ProjectiveDevice . Settings   getSettings ()   {  return  ( ProjectiveDevice . Settings ) settings ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  Error   error   =  ( Error )   o ;  return  Objects . equals ( this . code ,  error . code )   &&  Objects . equals ( this . message ,  error . message )   &&  Objects . equals ( this . description ,  error . description )   &&  Objects . equals ( this . traceId ,  error . traceId ) ;  }
public   final   boolean   isMimeValue ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.*.*.*.consumes"""" )   ||   hasPath ( psiElement ,  """"$.*.*.*.produces"""" ) ;  }
@ Test  public   void   graphDb_isSingleton ()   {  assertThat ( injector . getInstance ( GraphDatabaseService . class ) , is ( injector . getInstance ( GraphDatabaseService . class ) ) ) ;  }
@ Override   public   UIntIndexer   get ( long   i ,  long   j ,  long []   m ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  m [ offset   +   n ]   =   getRaw ( index ( i ,  j )   +   n )   &   0xFFFFFFFFL ;  }  return  this ;  }
private   boolean   areAudioControlsAvailable ()   {  return  audioControlsAvailable ;  }
static   void   lineUpdate ( long   linePtr )   {  int   result   =  c_gpiod_line_update ( linePtr ) ;  if  ( result   <   0 )  throw  new   GpioDException ( """"c_gpiod_line_update failed: """"   +   result   +   """" (""""   +   c_gpiod_strerror ()   +   """")"""" ) ;  }
public   void   testInit ()   throws  Exception   {  super . init ( config . getUserMode () ) ;  ConfigurationContext   configContext   =  ConfigurationContextFactory . createConfigurationContextFromFileSystem ( null ,  null ) ;  applicationManagementServiceClient   =   new   ApplicationManagementServiceClient ( sessionCookie ,  backendURL ,  configContext ) ;  ssoConfigServiceClient   =   new   SAMLSSOConfigServiceClient ( backendURL ,  sessionCookie ) ;  remoteUSMServiceClient   =   new   RemoteUserStoreManagerServiceClient ( backendURL ,  sessionCookie ) ;  createUser () ;  createApplication () ;  }
public   static   EmbeddableBadgeConfig   resolve ( Run < ? ,  ? >   run ,  String   id )   {  if  ( id   !=   null )   {  EmbeddableBadgeConfigsAction   badgeConfigs   =  run . getAction ( EmbeddableBadgeConfigsAction . class ) ;  if  ( badgeConfigs   !=   null )   {  return  badgeConfigs . getConfig ( id ) ;  }  }  return  null ;  }
@ Test  public   void   repositorySettingsMissing ()   throws  Exception   {  DependencyResolver . close () ;  deleteRecursively ( new   File ( """"target/thin/test/repository/com/example"""" ) ) ;  String []   args   =  new   String []   {  """"--thin.root=target/thin/test"""" , """"--thin.dryrun=true"""" ,  """"--thin.archive=src/test/resources/apps/jitpack"""" , """"--debug""""  } ;  
@ Override  public   int   getBufferPercentage ()   {  return  ( int )   bufferPercent ;  }
void   populateHealthContributors ( Map < String ,  HealthContributor >   healthContributors )   {  for  ( Map . Entry < String ,  HealthContributor >   entry   :  healthContributors . entrySet () )   {  
public   void   setTokenRequestOptions ( String   tokenRequestOptions )   {  this . tokenRequestOptions   =   tokenRequestOptions ;  }
private   ContentValues   generateValues ( String   packageName ,  boolean   fake )   {  ContentValues   contentValues   =  new   ContentValues () ;  contentValues . put ( COLUMN_NAME ,  packageName ) ;  contentValues . put ( COLUMN_FAKE ,  fake  ?   1   :  0 ) ;  return  contentValues ;  }
@ Test ( dependsOnMethods   =   { """"testDeleteBrandingPreferenceByQueryParams"""" } )  public   void   testDeleteBrandingPreferenceByTypeQueryParam ()   throws  IOException   {  String   body   =  readResource ( ADD_ROOT_ORG_BRANDING_RESOURCE_FILE ) ;  
private   boolean   useWakeLock ()   {  return  mPreferences . getBoolean ( Constants . PREF_USE_WAKE_LOCK ,  false ) ;  }
ValidationException   copy ()   {  return  new   ValidationException ( pointerToViolation ,  violatedSchema ,  super . getMessage () ,  causingExceptions , keyword ,  schemaLocation ) ;  }
public   static   < E >   List < E >   initial ( final   List < E >   list ,  final   int   n )   {  return  list . subList ( 0 ,  Math . max ( 0 ,  list . size ()   -   n ) ) ;  }
@ Override  protected   Map < String ,  RefineQuery >   delegate ()   {  return  delegate ;  }
private   static   void   removePackageFromApps ( Map < LauncherItemKey ,  AppIcon >   allApps , String   packageName , UserHandle   userHandle )   {  Iterator < Map . Entry < LauncherItemKey ,  AppIcon > >   it   = allApps . entrySet () . iterator () ;  while  ( it . hasNext () )   {  AppIcon   appIcon   =  it . next () . getValue () ;  if  ( packageName . equals ( appIcon . componentName . getPackageName () )   &&  ( userHandle   ==   null   ||   userHandle . equals ( appIcon . userHandle ) ) )   {  it . remove () ;  }  }  }
public   void   fill ()   {  OpenApiFields . response () . forEach ( this :: addUnique ) ;  }
protected   PiGpioPacket   sendCommand ( PiGpioCmd   cmd ,  int   p1 )   {  return  sendPacket ( new   PiGpioPacket ( cmd ,  p1 ) ) ;  }
@ Test  void   testESLintDiagnosticsInTSX ()   throws  Exception   {  IFile   file   =  project . getFile ( """"ESLintProj.tsx"""" ) ;  IDE . openEditor ( PlatformUI . getWorkbench () . getActiveWorkbenchWindow () . getActivePage () ,  file ) ;  assertESLintIndentMarkerExists ( file ) ;  }
@ Override  public   boolean   showItemModNameTooltip ()   {  return  itemModNameTooltip   &&   itemModNameTooltipDisabledByModsNames . isEmpty () ;  }
@ Override  public   TrackItemType   getType ()   {  return  TrackItemType . PLAYBACK ;  }
private   void   checkArray ( final   Field   field )  throws  ImmutabilityChecker . Violation   {  if  ( ! field . isAnnotationPresent ( Immutable . Array . class ) )   {  throw  new   ImmutabilityChecker . Violation ( String . format ( 
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Verify the presence of the specified custom number claim in the access """"   +  """"token"""" ,  dependsOnMethods   =   """"testGetAccessTokenWithAuthCodeGrant"""" )  public   void   testTokenNumberClaimAddOperation ()   throws  Exception   {  Number   claimValue   =  jwtClaims . getIntegerClaim ( """"custom_claim_number_1"""" ) ;  Assert . assertEquals ( claimValue ,  78 ) ;  }
public   static   Integer   getTargetColumnNum ( List < ColumnConfig >   columnConfigList )   {  return  getTargetColumnConfig ( columnConfigList ) . getColumnNum () ;  }
public   AlertDialogWpp   setTitle ( int   title )   {  if  ( isSystemDialog () )   {  mAlertDialog . setTitle ( title ) ;  return  this ;  }  XposedHelpers . callMethod ( mAlertDialogWpp ,  """"setTitle"""" ,  getContext () . getString ( title ) ) ;  return  this ;  }
@ Override  public   boolean   subtract ( String   playerName ,  double   amount )   {  if  ( canAfford ( playerName ,  amount ) )   {  return  plugin . setPlayerMoney ( playerName ,  plugin . getPlayerMoneyDouble ( playerName )   -   amount ,  false ) ;  }  return  false ;  }
public   Optional < PitchbendData >   getPitchbend ()   {  return  this . pitchbend ;  }
@ Override  public   InteractionResult   use ( BlockState   state ,  Level   world ,  BlockPos   pos ,  Player   playerEntity ,  InteractionHand   hand ,  BlockHitResult   result )  {  if ( ! world . isClientSide () )  {  BlockEntity   tileEntity   =  world . getBlockEntity ( pos ) ;  if ( tileEntity   instanceof   MenuProvider )  {  NetworkHooks . openScreen ( ( ServerPlayer )   playerEntity ,  ( MenuProvider )   tileEntity ,  pos ) ;  }  }  return  InteractionResult . SUCCESS ;  }
public   CityResponse   city ()   throws  IOException ,  GeoIp2Exception   {  return  this . city ( null ) ;  }
private   void   loadTableStyle ()  {  CSSDecoder   dec   =  new   CSSDecoder ( ctx ) ;  
@ ApiModelProperty ( example   =   """"/t/carbon.super/api/server/v1/configs/authenticators/eDUwOUNlcnRpZmljYXRlQXV0aGVudGljYXRvcg"""" ,  value   =   """""""" )  @ JsonProperty ( """"self"""" )  @ Valid  public   String   getSelf ()   {  return  self ;  }
@ BeforeClass  public   static   void   createAction ()   throws  Exception   {  Run < ? ,  ? >   run   =  j . buildAndAssertSuccess ( j . createFreeStyleProject () ) ;  action   =   new   RunBadgeAction ( run ) ;  }
@ Override  protected   void   dump ( FileDescriptor   fd ,  PrintWriter   writer ,  String []   args )   {  writer . println ( TAG   +   """" providing services """"   +   services . toString () ) ;  }
public   void   onClick ( DialogInterface   dialog ,  int   id )   {  action . removeDebianSetup () ;  }
@ Override  public   IResource   getLaunchableResource ( IEditorPart   editorpart )   {  IEditorInput   input   =  editorpart . getEditorInput () ;  if  ( input   instanceof   FileEditorInput )   {  IFile   file   =  ( ( FileEditorInput )   input ) . getFile () ;  if  ( canLaunch ( file . getLocation () . toFile () ) )   {  return  file ;  }  }  return  null ;  }
@ CanIgnoreReturnValue  public   DiagnosticInFile   hadErrorContaining ( String   expectedSubstring )   {  return  hadDiagnosticContaining ( expectedSubstring ,  ERROR ) ;  }
public   static   HadoopSecurityManager   getInstance ( Props   props )  throws  HadoopSecurityManagerException ,  IOException   {  if  ( hsmInstance   ==   null )   {  synchronized  ( HadoopSecurityManager_H_1_0 . class )   {  if  ( hsmInstance   ==   null )   {  logger . info ( """"getting new instance"""" ) ;  hsmInstance   =   new   HadoopSecurityManager_H_1_0 ( props ) ;  }  }  }  return  hsmInstance ;  }
public   OnTypeConsumer < JSONObject >   ifObject ()   {  return  new   IdModifyingTypeConsumerImpl ( JSONObject . class ) ;  }
private   void   triggerResolutionScopeChange ()   {  for  ( ResolutionScopeChangeListener   listener   :  scopeChangeListeners )   {  listener . resolutionScopeChanged ( id ) ;  }  }
private   static   String   apply_fn_event ( KeyValue . Event   ev )  {  switch  ( ev )  {  case  SWITCH_NUMERIC :   return  """"switch_greekmath"""" ;  default:   return  null ;  }  }
public   boolean   usesAmPm () {  if ( state . getIs24HourSource ()   ==   locale )   return  LocaleUtils . localeUsesAmPm ( state . getLocale () ) ;  return  Utils . deviceUsesAmPm () ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init ( userMode ) ;  cookieSpecRegistry   =   RegistryBuilder . < CookieSpecProvider > create ()  . register ( CookieSpecs . DEFAULT ,  new   RFC6265CookieSpecProvider () )  . build () ;  requestConfig   =   RequestConfig . custom ()  . setCookieSpec ( CookieSpecs . DEFAULT )  . build () ;  client   =   HttpClientBuilder . create ()  . setDefaultCookieStore ( cookieStore )  . setDefaultCookieSpecRegistry ( cookieSpecRegistry )  . setDefaultRequestConfig ( requestConfig )  . build () ;  setSystemproperties () ;  setServerEndpoints () ;  }
@ Override  public   boolean   apply ( Concept   concept )   {  return  ! concept . isDeprecated () ;  }
private   void   handleCancelation ( String   appName ,  String   id ,  boolean   isReplication )   {  log ( """"cancelled """"   +   appName   +   """", serverId """"   +   id   +   """", isReplication """"   +   isReplication ) ;  publishEvent ( new   EurekaInstanceCanceledEvent ( this ,  appName ,  id ,  isReplication ) ) ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  tenantInfo   =   context . getContextTenant () ;  restClient   =   new   OAuth2RestClient ( serverURL ,  tenantInfo ) ;  scim2RestClient   =   new   SCIM2RestClient ( serverURL ,  tenantInfo ) ;  setSystemproperties () ;  client   =   HttpClientBuilder . create () . build () ;  createLockedUser () ;  }
private   void   tearDownUploadManager ()   {  if  ( uploadManager   !=   null )   {  uploadManager . tearDownBus () ;  uploadManager   =   null ;  }  }
@ Override   public   ByteIndexer   putInt ( long   i ,  int   j )   {  if  ( RAW   !=   null )   {  RAW . putInt ( array ,  checkIndex ( i ,  array . length   -   3 ) ,  j ) ;  }   else  {  getBuffer () . putInt ( ( int ) i ,  j ) ;  }  return  this ;  }
@ java . lang . Override  public   java . lang . String   toString ()   {  return  """"Change(oldValue=""""  +   this . getOldValue ()  +   """", newValue=""""  +   this . getNewValue ()  +   """", type=""""  +   this . getType ()  +   """")"""" ;  }
public   static   boolean   hasMapOrArrayTypeFilter ( final   String   typeFilter )   {  return  typeFilter . matches ( """"\\[.*].*"""" ) ;  }
@ Override   public   boolean   equals ( Object   obj )   {  return  obj   instanceof   RegexpMatchingFailure ;  }
@ Override  protected   void   beforeHookedMethod ( MethodHookParam   param )   throws  Throwable   {  var   tab   =  ( int )   param . args [ 0 ] ;  if  ( tab   ==   GROUPS )   {  param . setResult ( UnobfuscatorCache . getInstance () . getString ( """"groups"""" ) ) ;  }  }
public   static   Builder   fromXml ( final   String   xml )   {  final   Builder   builder   =  new   Builder () ;  builder . data . putAll ( fromXmlMap ( xml ) ) ;  return  builder ;  }
@ Test  public   void   childForReturnsJsonObject_withoutProjection ()   {  JsonValue   actual   =  createSubject () . childFor ( """"not"""" ) ;  assertEquals ( original . childFor ( """"not"""" ) ,  actual ) ;  }
@ Override  public   void   onChange ( boolean   selfChange )   {  pathChanged () ;  }
public   void   setTriggerMode ( boolean   triggerMode )   {  this . triggerMode   =   triggerMode ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"oidc"""" )  @ Valid  public   OpenIDConnectConfiguration   getOidc ()   {  return  oidc ;  }
public   void   setBasic ( ModelBasicConf   basic )   {  this . basic   =   basic ;  }
public   void   getExposureWindows ( GetExposureWindowsParams   params )   throws  RemoteException   {  getServiceInterface () . getExposureWindows ( params ) ;  }
@ Test  public   void   testStdMethods ()   {  assertEquals ( """"JsonSetter.Value(valueNulls=DEFAULT,contentNulls=DEFAULT)"""" , EMPTY . toString () ) ;  int   x   =  EMPTY . hashCode () ;  if  ( x   ==   0 )   {   
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  PermissionEntry   that   =  ( PermissionEntry )   o ;  return  type   ==   that . type   &&   sid . equals ( that . sid ) ;  }
private   Point2fVectorVector   getImagePoints ( CvMat   points ,  CvMat   counts )   {  FloatBuffer   pointsBuf   =  points . getFloatBuffer () ;  IntBuffer   countsBuf   =  counts . getIntBuffer () ;  int   n   =  counts . length () ;  Point2fVectorVector   vectors   =  new   Point2fVectorVector ( n ) ;  for  ( int   i   =  0 ;   i   <   n ;   i ++ )   {  int   m   =  countsBuf . get () ;  Point2fVector   vector   =  new   Point2fVector ( m ) ;  for  ( int   j   =  0 ;   j   <   m ;   j ++ )   {  vector . put ( j ,  new   Point2f ( pointsBuf . get () ,  pointsBuf . get () ) ) ;  }  vectors . put ( i ,  vector ) ;  }  return  vectors ;  }
private   void   revertConfiguration ()   throws  IOException ,  AutomationUtilException   {  serverConfigurationManager . restoreToLastConfiguration ( false ) ;  }
@ Test  public   void   snakeCase ()   {  assertEquals ( """"foo_bar"""" ,  SnakeCase . snakeCase ( """"Foo Bar"""" ) ) ;  assertEquals ( """"foo_bar"""" ,  SnakeCase . snakeCase ( """"fooBar"""" ) ) ;  assertEquals ( """"foo_bar"""" ,  SnakeCase . snakeCase ( """"--foo-bar"""" ) ) ;  assertEquals ( """""""" ,  SnakeCase . snakeCase ( null ) ) ;  assertEquals ( """"a"""" ,  SnakeCase . snakeCase ( """"\u00c0"""" ) ) ;  }
private   ConnectivityManager   getNetworkManager ()   {  return  ( ConnectivityManager )   context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ;  }
@ Override   public   BooleanIndexer   reindex ( Index   index )   {  return  new   BooleanRawIndexer ( pointer ,  index ) ;  }
@ Override  public   void   openLyricConfig ( int   position )   {  NoteData   noteData   =  song . get () . getNote ( position ) ;  Optional < String >   trueLyric   =  noteData . getTrueLyric () ;  if  ( trueLyric . isEmpty ()   ||   trueLyric . get () . isEmpty () )   {  String   displayLyric   =  noteData . getLyric () ;  statusBar . setText ( """"Error: no lyric config for \""""""""   +   displayLyric   +   """"\"""""""" ) ;  return;  }  callback . openVoicebank ( song . get () . getVoiceDir () ,  trueLyric . get () ) ;  }
public   Builder   setPortraitName ( String   portraitName )   {  newVoicebank . portraitName   =   portraitName ;  return  this ;  }
@ Before  public   void   setup ()   {  Vet   james   =  new   Vet () ;  james . setFirstName ( """"James"""" ) ;  james . setLastName ( """"Carter"""" ) ;  james . setId ( 1 ) ;  Vet   helen   =  new   Vet () ;  helen . setFirstName ( """"Helen"""" ) ;  helen . setLastName ( """"Leary"""" ) ;  helen . setId ( 2 ) ;  Specialty   radiology   =  new   Specialty () ;  radiology . setId ( 1 ) ;  radiology . setName ( """"radiology"""" ) ;  helen . addSpecialty ( radiology ) ;  given ( this . vets . findAll () ) . willReturn ( Lists . newArrayList ( james ,  helen ) ) ;  }
@ Test  void   testResetBackgroundColor ()   throws  IOException   {  assertThatAnnotateIs ( """"\033[42mtic\033[1mtac\033[49mtoe"""" , """"<span style=\""""background-color: #00CD00;\"""">tic<b>tac</b></span><b>toe</b>"""" ) ;  }
public   void   setAppname ( String   appname )   {  this . appname   =   appname ;  }
public   Builder   skipConsent ( boolean   skipConsent )   {  this . skipConsent   =   skipConsent ;  return  this ;  }
@ Test  public   void   getExtraExpectedNodes ()   {  assertThat ( emptyDiff () . getExtraExpectedNodes () . size () ) . isEqualTo ( 0 ) ;  assertThat ( onlyExpectedDiffs () . getExtraExpectedNodes () . size () ) . isEqualTo ( 2 ) ;  assertThat ( onlyActualDiffs () . getExtraExpectedNodes () . size () ) . isEqualTo ( 0 ) ;  assertThat ( twoWayDiffs () . getExtraExpectedNodes () . size () ) . isEqualTo ( 0 ) ;  assertThat ( multiDiffs () . getExtraExpectedNodes () . size () ) . isEqualTo ( 1 ) ;  }
@ NonNull  public   IBinder   instantiate ( @ NonNull   String   className )   throws  LoadingException   {  try  {  return  ( IBinder )   this . moduleContext . getClassLoader () . loadClass ( className ) . newInstance () ;  }   catch  ( ClassNotFoundException  |  IllegalAccessException  |  InstantiationException  |  RuntimeException   e )   {  throw  new   LoadingException ( """"Failed to instantiate module class: """"   +   className ,  e ) ;  }  }
public   void   setBinAvgScore ( List < Integer >   binAvgScore )   {  columnBinning . setBinAvgScore ( binAvgScore ) ;  }
public   void   runTestInCollectingMode ()   {  testWithValidator ( Validator . builder () . build () ,  schema ) ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"state"""" )  @ Valid  public   StateEnum   getState ()   {  return  state ;  }
public   Optional < Publish >   get ( String   publishId )   {  return  publishRepository . findByPublishId ( publishId ) ;  }
@ Override  public   boolean   isFoil ( ItemStack   stack )  {  if ( FMLEnvironment . dist   ==   Dist . CLIENT )  {  ItemStack   weapon   =  GunRenderingHandler . get () . getRenderingWeapon () ;  if ( weapon   !=   null )  {  return  weapon . getItem () . isFoil ( weapon ) ;  }  }  return  super . isFoil ( stack ) ;  }
@ Override  public   boolean   evaluate ( Object   object )   {  String   inputData   =  ( String )   object ;  return  dataPurifier . isFilter ( inputData ) ;  }
@ BeforeEach  public   void   setUpTestCase ()   {  AllCleanRule . enableLogging () ;  }
@ ParameterizedTest  @ MethodSource ( """"parametersForGenerateSingleRandomValue"""" )  void   generateSingleRandomValue ( final   String   fieldType ,  final   Integer   valueLength ,  final   List < String >   fieldValuesList ,  final   Object   expected )   {  Assertions . assertThat ( new   RandomObject () . generateRandom ( fieldType ,  valueLength ,  fieldValuesList ,  Collections . emptyMap () ) ) . isEqualTo ( expected ) ;  }
@ Override  public   boolean   verify ( String   hostname ,  SSLSession   session )   {  return  true ;  }
@ Override  public   boolean   retainAll ( Collection < ? >   c )   {  List < Node < T > >   childrenOld   =  new   ArrayList <> ( children ) ;  boolean   retained   =  children . retainAll ( c ) ;  if  ( retained )   {  childrenOld . removeAll ( children ) ;  childrenOld . forEach ( node  ->   node . parent ( null ) ) ;  }  return  retained ;  }
private   void   loadShares ()   {  if  ( serverClient . isConnected () )   {  serverClient . getShares () ;  }  }
public   void   setMissing ( final   Map < String ,  PathItem >   missing )   {  this . missing   =   missing ;  }
public   Rectangle   getAbsoluteBorderBounds ()  {  return  new   Rectangle ( absbounds . x   +   emargin . left , absbounds . y   +   emargin . top , content . width   +   padding . left   +   padding . right   +   border . left   +   border . right , content . height   +   padding . top   +   padding . bottom   +   border . top   +   border . bottom ) ;  }
public   static   String   getRelativePigHeaderColumnName ( String   raw )   {  int   position   =  raw . lastIndexOf ( Constants . PIG_COLUMN_SEPARATOR ) ;  return  position   >=   0  ?   raw . substring ( position   +   Constants . PIG_COLUMN_SEPARATOR . length () )   :  raw ;  }
public   ServerShare   getItem ( int   position )   {  return  shares . get ( position ) ;  }
public   void   testNonSwaggerFileHasNoErrors ()   {  doTest ( """"not_swagger.json"""" ) ;  doTest ( """"not_swagger.yaml"""" ) ;  }
private   void   setRequestHeaders ( HttpPost   request )   {  request . addHeader ( HttpHeaders . AUTHORIZATION ,  getAuthzHeader () ) ;  request . addHeader ( HttpHeaders . CONTENT_TYPE ,  OAuthDCRMConstants . CONTENT_TYPE ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( username ,  password ,  email ,  firstname ,  lastname ,  provisioningMethod ,  additionalClaims ) ;  }
public   CastSession   getCurrentCastSession ()   {  Session   currentSession   =  getCurrentSession () ;  if  ( currentSession   instanceof   CastSession )   {  return  ( CastSession )   currentSession ;  }  return  null ;  }
MediaStreamTrack   getTrack ( String   id )   {  TrackPrivate   private_   =  tracks . get ( id ) ;  return  private_   ==   null  ?   null   :  private_ . track ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hashCode ( new   Object [] { this . maxUpdateAgeMillis ,  this . granularity ,  this . bypass } ) ;  }
public   static   ConfigProvider   getInstance ()   {  return  InstanceHolder . INSTANCE ;  }
@ Override  public   ProcessingReport   validate ( final   JsonNode   instance )  throws  ProcessingException  {  return  validate ( instance ,  false ) ;  }
@ SetEnvironment ( executionEnvironments   =   {  ExecutionEnvironment . ALL  } )  @ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Check getting all challenge questions"""" ,  dependsOnMethods   =   """"testSendRecoveryNotification"""" )  public   void   testGetAllChallengeQuestions ()   throws  Exception   {  ChallengeQuestionDTO []   bean   =  infoRecoveryClient . getAllChallengeQuestions () ;  Assert . assertNotNull ( bean ,  """"Getting supported claims has failed with null return"""" ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( orgId ,  policy ,  roles ) ;  }
public   PublicKeyCredential   getPublicKeyCredential ()   {  return  publicKeyCredential ;  }
@ Test  public   void   generatesSources_failWithNoGeneratedSources ()   {  expectFailure  . whenTesting ()  . about ( javaSource () )  . that ( HELLO_WORLD_RESOURCE )  . processedWith ( new   NonGeneratingProcessor () )  . compilesWithoutError ()  . and ()  . generatesSources ( JavaFileObjects . forSourceString ( GeneratingProcessor . GENERATED_CLASS_NAME ,  GeneratingProcessor . GENERATED_SOURCE ) ) ;  AssertionError   expected   =  expectFailure . getFailure () ;  assertThat ( expected . getMessage () )  . contains ( """"Compilation generated no additional source files, though some were expected."""" ) ;  }
public   static   void   setAlpha ( RemoteViews   rv ,  int   viewId ,  int   alpha )   {  rv . setInt ( viewId ,  METHOD_SET_ALPHA ,  alpha ) ;  }
@ Override  public   void   call ( int   pin ,  int   state ,  long   tick )   {  logger . info ( """"RECEIVED ALERT EVENT! {} : {} :{}"""" ,  pin ,  state ,  tick ) ;  }
public   < F >   Chain < Map < F ,  T > >   associateBy ( final   Function < T ,  F >   func )   {  return  new   Chain <> ( Underscore . associateBy ( list ,  func ) ) ;  }
@ Test  public   void   recursiveSchemaHasField ()   {  Schema   recursiveSchema   =  SchemaLoader . load ( get ( """"recursiveSchema"""" ) ) ;  assertTrue ( recursiveSchema . definesProperty ( """"#/prop"""" ) ) ;  assertTrue ( recursiveSchema . definesProperty ( """"#/prop/subprop"""" ) ) ;  assertTrue ( recursiveSchema . definesProperty ( """"#/prop/subprop/subprop"""" ) ) ;  assertTrue ( recursiveSchema . definesProperty ( """"#/prop/subprop/subprop/subprop"""" ) ) ;  }
@ Override  protected   Void   doInBackground ( Void ...   voids )   {  startFileCopying ( sourceLocation ,  targetLocation ) ;  deleteFile ( sourceLocation ) ;  return  null ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   Chain   flatten ()   {  return  new   Chain <> ( Underscore . flatten ( list ) ) ;  }
public   WifiAccessPointBuilder   SignalStrength ( int   newSignalStrength )   {  this . _signalStrength   =   newSignalStrength ;  return  this ;  }
public   JButton   getEditSonarServerButton ()   {  return  myEditSonarServerButton ;  }
default   int   transfer ( byte []   buffer ,  int   length )   {  return  transfer ( buffer ,  0 ,  length ) ;  }
public   void   setEnabled ( boolean   enabled )   {  super . setEnabled ( enabled ) ;  mTextView . setEnabled ( enabled ) ;  mSwitch . setEnabled ( enabled ) ;  }
public   void   startEditingPreferences ()   {  ApplicationPreferences . fromInstanceSettings ( getContext () ,  getWidgetId () ) ;  }
private   void   validateTaskState ( Response   response ,  String   taskId ,  STATE   expectedState )   {  validateResponseElement ( response ,  """"find{ it.id == '""""   +   taskId   +   """"' }.status"""" ,  is ( expectedState . toString () ) ) ;  }
private   String   getETag ( File   file )   {  return  Hasher . md5 () . hashFile ( file ) . toHexString () ;  }
public   static   boolean   isPrimitive ( TypeMirror   type )   {  if  ( type . getKind () . isPrimitive () )   {  return  true ;  }  if  ( type . getKind ()   ==   TypeKind . ARRAY )   {  return  isPrimitive ( ( ( ArrayType )   type ) . getComponentType () ) ;  }  return  false ;  }
public   AuthRequest   callerIsApp ()   {  return  caller ( app ,  appSignature ) ;  }
default   boolean   isSecurityScopeNameValue ( PsiElement   psiElement )   {  return  false ;  }
@ Test  public   void   authorizationUrlChanged ()   {  BackwardIncompatibleProp   prop   =  SECURITY_SCHEME_OAUTH2_AUTH_URL_CHANGED ;  assertSpecIncompatible ( BASE ,  """"bc_oauthflow_authorization_url_changed.yaml"""" ,  prop ) ;  }
public   void   refreshNotificationsUI ( ModuleViewAdapter   moduleViewAdapter )   {  final   int   notificationCount   =  this . notifications . size () ;  notifySizeChanged ( moduleViewAdapter ,  0 , notificationCount ,  notificationCount ) ;  }
public   boolean   isCategorical ()   {  return  byteType   ==   C . getByteType () ;  }
@ Override  public   void   onStatus ( Status   status )   {  throw  new   UnsupportedOperationException () ;  }
@ Test  public   void   labelsAreAdded_afterBeingSet ()   {  long   node   =  graph . createNode ( """"foo"""" ) ;  graph . setLabel ( node ,  LABEL1 ) ;  graph . addLabel ( node ,  LABEL2 ) ;  assertThat ( graph . getLabels ( node ) ,  containsInAnyOrder ( LABEL1 ,  LABEL2 ) ) ;  }
protected   Rectangle   computeTargetImagePosition ( BackgroundImage   img )  {  final   Rectangle   pos ;  if  ( isViewportOwner ()   &&   ( ( Viewport )   getOwner () ) . getRootBox ()   !=   null )  {  
@ Override  public   Descriptor < ThrottleMatrixProjectOptions >   getDescriptor ()   {  return  DESCRIPTOR ;  }
public   void   setNumericalValues ( float []   numericalValues )   {  this . numericalValues   =   numericalValues ;  }
@ Test  public   void   classPath_empty ()   {  Compilation   compilation   = javac ()  . withClasspath ( ImmutableList . of () )  . compile ( JavaFileObjects . forSourceLines ( """"Test"""" , """"import com.google.testing.compile.CompilerTest;"""" , """"class Test {"""" , """"  CompilerTest t;"""" , """"}"""" ) ) ;  assertThat ( compilation ) . hadErrorContaining ( """"com.google.testing.compile does not exist"""" ) ;  }
public   void   onGetChunkFileDescriptor ( ParcelFileDescriptor   chunkFileDescriptor )   {  completionSource . trySetException ( new   Exception ( """"Unexpected callback: onGetChunkFileDescriptor"""" ) ) ;  }
public   MutableComponent   title ( String   string )   {  return  add ( new   Title ( string ) ) . getTitle () ;  }
public   Map . Entry < T ,  List < T > >   set ( final   int   index ,  final   T   value )   {  return  set ( ( List < T > )   value () ,  index ,  value ) ;  }
public   void   setUniquenessScope ( UniquenessScopeEnum   uniquenessScope )   {  this . uniquenessScope   =   uniquenessScope ;  }
@ Override  public   Status   getStatus ()   {  return  new   Status ( response . statusCode ) ;  }
public   void   onSelect ()   {  Log . d ( TAG ,  """"unimplemented Method: onSelect: """"   +   this . routeId ) ;  }
String   getCurrentSuiteTitle ( ITestContext   iTestContext )   {  String   suite   =  iTestContext . getSuite () . getName () ;  String   xmlTest   =  iTestContext . getCurrentXmlTest () . getName () ;  String   params   =  """""""" ;  if  ( ! iTestContext . getCurrentXmlTest () . getLocalParameters () . isEmpty ()   &&  AllureConfig . newInstance () . areTestNgParametersEnabled () )   {  params   =   iTestContext . getCurrentXmlTest () . getLocalParameters ()  . toString () . replace ( """"{"""" ,  """"["""" ) . replace ( """"}"""" ,  """"]"""" ) ;  }  return  suite   +   """" : """"   +   xmlTest   +   params ;  }
@ Override  public   void   setEnabled ( boolean   enabled )   {  super . setEnabled ( enabled ) ;  this . getChildAt ( 0 ) . setEnabled ( enabled ) ;  }
public   static   RuntimeRegistry   newInstance ( Runtime   runtime )   {  return  new   DefaultRuntimeRegistry ( runtime ) ;  }
@ Inject ( method   =   """"hurt"""" ,  at   =   @ At ( value   =   """"INVOKE"""" ,  target   =   """"Lnet/minecraft/world/entity/LivingEntity;knockback(DDD)V"""" ) )  private   void   capture ( DamageSource   source ,  float   amount ,  CallbackInfoReturnable < Boolean >   cir )  {  this . source   =   source ;  }
public   boolean   hasRepo ( String   repo )   {  for  ( String   repoEntry   :  this . customRepos )   {  if  ( repo . equals ( repoEntry ) )   return  true ;  }  return  false ;  }
public   int   getVersion ()   {  try  {  return  descriptor . getDeclaredField ( """"MODULE_VERSION"""" ) . getInt ( null ) ;  }   catch  ( Exception   e )   {  return  0 ;  }  }
@ Override  protected   String   getConnectionCatalogName ()   throws  DatabaseException   {  return  getDefaultCatalogName () ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  GroupRequestObject   listObj   =  ( GroupRequestObject )   o ;  return  Objects . equals ( this . schemas ,  listObj . schemas )   &&  Objects . equals ( this . displayName ,  listObj . displayName )   &&  Objects . equals ( this . members ,  listObj . members ) ;  }
@ Override  public   final   void   configure ( final   Map < String ,  ? >   configs ,  final   boolean   isKey )   {  AvroDeserializer . CONFIGS . putAll ( configs ) ;  this . isKey   =   isKey ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init () ;  adminClient   =   new   ClaimManagementServiceClient ( backendURL ,  sessionCookie ) ;  setSystemproperties () ;  }
public   int   getDaysSinceLastExposureWeight ()   {  return  daysSinceLastExposureWeight ;  }
@ Test  public   void   dateTimeWithFourDigitsInSecFracSuccess ()   {  assertSuccess ( """"2015-02-28T11:00:00.1234Z"""" ,  new   DateTimeFormatValidator () ) ;  }
@ Test  public   void   testWidthDegreesForLengthEqualsZero ()   {  assertEquals ( 360.0 ,  widthDegrees ( 0 ) ,  PRECISION ) ;  }
public   void   unityVersion ( UnityVersion   version )   {  this . unityVersion   =   Objects . requireNonNull ( version ) ;  }
public   void   setShouldEnforceRegistrationAtInit ( boolean   shouldEnforceRegistrationAtInit )   {  this . shouldEnforceRegistrationAtInit   =   shouldEnforceRegistrationAtInit ;  }
public   String   getTargetDir ()   {  return  getMavenBaseDir ()   +   File . separatorChar   +   """"target"""" ;  }
@ Override  public   String   getText ()  {  if  ( text   !=   null )  return  text . substring ( textStart ,  textEnd ) ;  else  return  """""""" ;  }
@ Nullable  public   String   getAuthenticatorAttachment ()   {  return  authenticatorAttachment ;  }
@ Override  public   int   compareTo ( Note   other )   {  int   result   =  Integer . compare ( getAbsPositionMs () ,  other . getAbsPositionMs () ) ;  if  ( result   ==   0   &&   this   !=   other )   {  return  - 1 ;   
private   void   markSelected ( String   selected )   {  if  ( selected . matches ( getString ( R . string . preference_entry_server_connection_auto ) ) )  OPTION_CHECKED . set ( 0 ,  true ) ;  if  ( selected . matches ( getString ( R . string . preference_entry_server_connection_remote ) ) )  OPTION_CHECKED . set ( 1 ,  true ) ;  if  ( selected . matches ( getString ( R . string . preference_entry_server_connection_local ) ) )  OPTION_CHECKED . set ( 2 ,  true ) ;  }
public   static   Optional < SonarRules >   getInstance ( Project   project )   {  return  Optional . ofNullable ( project . getService ( SonarRules . class ) ) ;  }
public   static   @ CheckForNull   String   retrieve ( @ NonNull   User   user )   {  GithubAccessTokenProperty   property   =  user . getProperty ( GithubAccessTokenProperty . class ) ;  if  ( property   ==   null )   {  LOGGER . log ( Level . FINE ,  """"Cache miss for username: """"   +   user . getId () ) ;  return  null ;  }   else  {  LOGGER . log ( Level . FINE ,  """"Token retrieved using cache for username: """"   +   user . getId () ) ;  return  property . getAccessToken () . getPlainText () ;  }  }
@ SuppressWarnings ( """"unchecked"""" )  public   static   < T >   Chain < T >   of ( final   T ...   list )   {  return  new   U . Chain <> ( Arrays . asList ( list ) ) ;  }
@ Test  void   testDecodeParseErr3 ()   {  assertThrows ( Json . ParseException . class ,  ()  ->   U . fromJson ( """"{\""""value\"""":123"""" ) ) ;  }
@ Override  protected   void   setUserRole ()   {  newUserRole   =   """"JDBCUserRole"""" ;  }
public   static   List < Server >   filterActiveServers ( List < Server >   servers )   {  List < Server >   activeServers   =  new   ArrayList <> () ;  for  ( Server   server   :  servers )   {  if  ( server . isActive () )   {  activeServers . add ( server ) ;  }  }  return  activeServers ;  }
public   void   deleteApp ( String   appId )   throws  Exception   {  restClient . deleteApplication ( appId ) ;  }
@ Override  public   Change []   fixUnexpected ( DatabaseObject   unexpectedObject ,  DiffOutputControl   control ,  Database   referenceDatabase ,  Database   comparisonDatabase ,  ChangeGeneratorChain   chain )   {  if  ( referenceDatabase   instanceof   HibernateDatabase   ||   comparisonDatabase   instanceof   HibernateDatabase )   {  return  null ;  }   else  {  return  super . fixUnexpected ( unexpectedObject ,  control ,  referenceDatabase ,  comparisonDatabase ,  chain ) ;  }  }
@ Override  public   void   run ()   {  for  ( String   key   :  newDocs . keySet () )   {  String   docID   =  getDocID ( documentStoreName ,  key ) ;  MutableDocument   doc   =  updateMutableDocument ( docID ,  newDocs . get ( key ) ) ;  try  {  db . save ( doc ) ;  }   catch  ( CouchbaseLiteException   e )   {  e . printStackTrace () ;  }  }  }
private   void   copyCoverageFile ( String   sourceResourceName ,  String   targetFileName ,  WorkflowJob   job )   throws  Exception   {  FilePath   directory   =  ensureWorkspaceExists ( job ) ;  FilePath   dest   =  directory . child ( targetFileName ) ;  org . apache . commons . io . IOUtils . copy ( getClass () . getResourceAsStream ( sourceResourceName ) ,  dest . write () ) ;  }
@ Override  public   int   analogValueThresholdOff ()   {  return  this . offValueThreshold ;  }
public   boolean   isResponse ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.responses"""" ) ;  }
private   void   setUpSharesAdapter ()   {  mFastScrollView . setAdapter ( mServerSharesAdapter ) ;  }
@ Override  public   void   write ( JsonWriter   out ,  LatLng   value )   throws  IOException   {  throw  new   UnsupportedOperationException ( """"Unimplemented method."""" ) ;  }
@ JsonIgnore  public   List < String >   getTags ( List < String >   tags1 ,  List < String >   tags2 )   {  List < String >   tags   =  new   ArrayList < String > () ;  if ( CollectionUtils . isNotEmpty ( tags1 ) )   {  tags . addAll ( tags1 ) ;  }  if ( CollectionUtils . isNotEmpty ( tags2 ) )   {  tags . addAll ( tags2 ) ;  }  return  tags ;  }
public   ScanSettings []   newArray ( int   size )   {  return  new   ScanSettings [ size ] ;  }
@ Test  public   void   patternPropertyViolation ()   {  ObjectSchema   subject   =  ObjectSchema . builder ()  . patternProperty ( """"^b_.*"""" ,  BooleanSchema . INSTANCE )  . patternProperty ( """"^s_.*"""" ,  new   StringSchema () )  . build () ;  TestSupport . expectFailure ( subject ,  BooleanSchema . INSTANCE ,  """"#/b_1"""" , OBJECTS . get ( """"patternPropertyViolation"""" ) ) ;  }
@ Override  public   void   onCreateContextMenu ( ContextMenu   menu ,  View   v ,  ContextMenu . ContextMenuInfo   menuInfo )   {  super . onCreateContextMenu ( menu ,  v ,  menuInfo ) ;  
@ Test  public   void   conditionalSchemaElse ()   {  ConditionalSchema   actual   =  ( ConditionalSchema )   loadAsV7 ( get ( """"conditionalSchemaElse"""" ) ) ;  assertFalse ( actual . getIfSchema () . isPresent () ) ;  assertFalse ( actual . getThenSchema () . isPresent () ) ;  assertTrue ( actual . getElseSchema () . isPresent () ) ;  }
 <expr pos:start=""""""""77:66"""""""" pos:end=""""""""77:66""""""""><literal type=""""""""number"""""""" pos:start=""""""""77:66"""""""" pos:end=""""""""77:66"""""""">2</literal></expr>
public   List < Float >   getVersionsMemoryInMb ()   {  return  versionsMemoryInKb . stream () . map ( m  ->   m   /   1024F ) . collect ( Collectors . toList () ) ;  }
public   int   quickReboot ()  {  List < String >   commands   =  new   ArrayList <> () ;  commands . add ( busybox   +   """" pkill system_server"""" ) ;  
public   void   addSubOrgUserStore ( UserStoreReq   userStoreReq ,  String   switchedM2MToken )   throws  IOException   {  String   jsonRequest   =  toJSONString ( userStoreReq ) ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpPost ( userStoreSubOrgBasePath ,  jsonRequest , getHeadersWithBearerToken ( switchedM2MToken ) ) )   {  Assert . assertEquals ( response . getStatusLine () . getStatusCode () ,  HttpServletResponse . SC_CREATED , """"User store creation failed"""" ) ;  }  }
public   void   setBatchReplication ( boolean   batchReplication )   {  this . batchReplication   =   batchReplication ;  }
private   static   < T   extends  ProjectileEntity >   RegistryObject < EntityType < T > >   registerProjectile ( String   id ,  BiFunction < EntityType < T > ,  Level ,  T >   function )  {  return  REGISTER . register ( id ,  ()  ->   EntityType . Builder . of ( function :: apply ,  MobCategory . MISC )  . sized ( 0.25F ,  0.25F )  . setTrackingRange ( 0 )  . noSummon ()  . fireImmune ()  . setShouldReceiveVelocityUpdates ( false )  . setCustomClientFactory ( ( spawnEntity ,  world )  ->   null )  . build ( id ) ) ;  }
@ Test  public   void   parseURI_emptyFragment ()   {  SchemaLocation   actual   =  SchemaLocation . parseURI ( """"http:
 <argument pos:start=""""""""356:91"""""""" pos:end=""""""""356:93""""""""><expr pos:start=""""""""356:91"""""""" pos:end=""""""""356:93""""""""><name pos:start=""""""""356:91"""""""" pos:end=""""""""356:93"""""""">sum</name></expr></argument>
public   static   ComponentFilter   country ( String   country )   {  return  new   ComponentFilter ( """"country"""" ,  country ) ;  }
public   void   removeVoicebankForEdit ()   {  voicebankManager . removeVoicebank ( normalizedLocation ) ;  }
@ Override  default   Descriptor   describe ()   {  return  Descriptor . create ()  . id ( id () )  . name ( name () )  . description ( description () ) ;  }
@ Override  public   int   write ( byte []   data ,  int   offset ,  int   length )   {  Objects . checkFromIndexSize ( offset ,  length ,  data . length ) ;  piGpio . i2cWriteDevice ( this . handle ,  data ,  offset ,  length ) ;  return  length ;  }
@ Override  public   EurekaHttpResponse < Applications >   getSecureVip ( String   secureVipAddress ,  String ...   regions )   {  return  getApplicationsInternal ( """"svips/""""   +   secureVipAddress ,  regions ) ;  }
public   Builder   setShowAddAccountButton ( boolean   showAddAccountButton )   {  this . showAddAccountButton   =   showAddAccountButton ;  return  this ;  }
public   void   checkResultByFile ( @ NotNull   final   String   testFileNoExt ,  @ NotNull   final   Format   fileKind )   {  myCodeInsightFixture . checkResultByFile ( fileKind . getFileNameWithExtension ( testFileNoExt ) ,  true ) ;  }
public   static   Date   createDateFrom ( int   year ,  int   month ,  int   day ,  int   hour ,  int   minute ,  int   second )   {  return  new   Date ( year - 1900 ,  month - 1 ,  day ,  hour ,  minute ,  second ) ;  }
@ Override  public   ResourceLocation   getTextureLocation ( GrenadeEntity   entity )  {  return  null ;  }
private   void   infoDialogWindowClosing ( java . awt . event . WindowEvent   evt )   { 
default   ContextBuilder   addProperties ( Properties   properties ) {  return  properties ( properties ,  null ) ;  }
@ Override  protected   void   onSetInitialValue ( boolean   restorePersistedValue ,  Object   defaultValue )  {  int   value ;  if  ( restorePersistedValue )  {  value   =   getPersistedInt ( _min ) ;  }  else {  value   =   ( Integer ) defaultValue ;  persistInt ( value ) ;  }  _seekBar . setProgress ( value   -   _min ) ;  updateText () ;  }
@ Test  @ Ignore  public   void   testWithDefaultDateFormat ()   throws  Exception  {  String   uri   =  UriTemplate . fromTemplate ( TEMPLATE ) . set ( """"date"""" ,  date ) . expand () ;  assertEquals ( """"/2012/2012-04-20T16%3A20%3A00.000-0400"""" ,  uri ) ;  }
public   void   setLogoutReturnUrl ( String   logoutReturnUrl )   {  this . logoutReturnUrl   =   logoutReturnUrl ;  }
public   boolean   keyHasFlag ( int   index ,  int   flag )  {  return  ( keysflags   &   ( flag   <<   index ) )   !=   0 ;  }
public   JSONObject   getSubOrgGroup ( String   groupId ,  String   switchedM2MToken )   throws  Exception   {  String   endPointUrl   =  getSubOrgGroupsPath ()   +   PATH_SEPARATOR   +   groupId ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpGet ( endPointUrl , getHeadersWithBearerToken ( switchedM2MToken ) ) )   {  return  getJSONObject ( EntityUtils . toString ( response . getEntity () ) ) ;  }  }
public   String   getPSIInfoPath ( SourceType   sourceType )   {  String   preTrainPath   =  getPreferPath ( modelConfig . getTrain () . getCustomPaths () ,  Constants . KEY_PRE_PSI_PATH ) ;  if ( StringUtils . isBlank ( preTrainPath ) )   {  return  getPathBySourceType ( new   Path ( Constants . TMP ,  """"PSIInfo"""" ) ,  sourceType ) ;  }   else  {  return  new   Path ( preTrainPath ) . toString () ;  }  }
public   void   uploadArtifact ( String   description ,  DataHandler   dh )  throws  ResourceAdminServiceExceptionException ,  RemoteException   {  String   fileName ;  fileName   =   dh . getName () . substring ( dh . getName () . lastIndexOf ( '/' )   +   1 ) ;  resourceAdminServiceStub . addResource ( """"/""""   +   fileName ,  MEDIA_TYPE_GOVERNANCE_ARCHIVE , description ,  dh ,  null ,  null ) ;  }
@ Override  public   void   setOnValueChangeListenerInScrolling ( final   OnValueChangeListenerInScrolling   listener )   {  listenerInScrolling   =   listener ;  }
@ Override  public   void  prepare ( final   PreparedStatement   stmt )  throws  SQLException   {  ( ( CallableStatement )   stmt )  . registerOutParameter ( 2 ,  Types . VARCHAR ) ;  }
public   Object   getDeviceJid ()   {  try  {  return  deviceJidField . get ( fmessage ) ;  }   catch  ( Exception   e )   {  XposedBridge . log ( e ) ;  }  return  null ;  }
public   DateFormatValue   getValue ()   {  return  value . type   ==   DateFormatType . UNKNOWN  ?   defaultValue   :  value ;  }
@ Override  public   double   scaleX ( int   scaleMe )   {  return  horizontalScale . get ()   *   scaleMe ;  }
public   Map < Integer ,  NodeStats >   getNodeStatsMap ()   {  return  nodeStatsMap ;  }
@ Override  public   void   onUsingTick ( ItemStack   stack ,  LivingEntity   player ,  int   count )  {  if ( ! this . canCook () )  return;  int   duration   =  this . getUseDuration ( stack )   -   count ;  if ( duration   ==   10 )  player . level . playLocalSound ( player . getX () ,  player . getY () ,  player . getZ () ,  ModSounds . ITEM_GRENADE_PIN . get () ,  SoundSource . PLAYERS ,  1.0F ,  1.0F ,  false ) ;  }
@ Override   public   int   get ( long ...   indices )   {  return  buffer . get ( ( int ) index ( indices ) ) ;  }
private   Optional < CountryResponse >   getCountry ( InetAddress   ipAddress )   throws  IOException ,  GeoIp2Exception   {  LookupResult < CountryResponse >   result   =  this . get ( ipAddress , CountryResponse . class , DatabaseType . COUNTRY ) ;  CountryResponse   response   =  result . getModel () ;  if  ( response   ==   null )   {  return  Optional . empty () ;  }  return  Optional . of ( new   CountryResponse ( response , result . getIpAddress () , result . getNetwork () , locales ) ) ;  }
public   static   String   formatDate ( Date   date ,  boolean   localTimestampFormat )  {  String   dateFormated ;  if ( localTimestampFormat )  {  DateFormat   dateFormat   =  DateFormat . getDateTimeInstance () ;  dateFormated   =   dateFormat . format ( date ) ;  }  else {  SimpleDateFormat   dateFormat   =  new   SimpleDateFormat ( """"yyyy/MM/dd - HH:mm:ss"""" ) ;  dateFormated   =   dateFormat . format ( date ) ;  }  return  dateFormated ;  }
public   SAMLRequestValidation   enableSignatureValidation ( Boolean   enableSignatureValidation )   {  this . enableSignatureValidation   =   enableSignatureValidation ;  return  this ;  }
@ Override   public   Buffer   getAudioSideData ( String   key )   {  return  getAudioSideData () . get ( key ) ;  }
@ Override  public   Optional < String >   getKeyNameIfKey ( final   PsiElement   psiElement )   {  return  getAsYamlKeyValue ( psiElement ) . map ( YAMLKeyValue :: getKeyText ) ;  }
public   static   synchronized   Class   loadTranscriptSegment ( ClassLoader   classLoader )   throws  Exception   {  return  UnobfuscatorCache . getInstance () . getClass ( classLoader ,  ()  ->   findFirstClassUsingStrings ( classLoader ,  StringMatchType . Contains ,  """"TranscriptionSegment("""" ) ) ;  }
private   static   RegionBounds   getRegionBounds ( List < NoteData >   notes )   {  int   minMs   =  Integer . MAX_VALUE ;  int   maxMs   =  0 ;  for  ( NoteData   noteData   :  notes )   {  if  ( minMs   >   noteData . getPosition () )   {  minMs   =   noteData . getPosition () ;  }  if  ( maxMs   <   noteData . getPosition () )   {  maxMs   =   noteData . getPosition ()   +   noteData . getDuration () ;  }  }  return  new   RegionBounds ( minMs ,  maxMs ) ;  }
public   boolean   changeVerticalScale ( int   oldRank ,  int   newRank )   {  if  ( oldRank   !=   verticalRank . get () )   {  
@ Override  public   boolean   isRotateGesturesEnabled ()   throws  RemoteException   {  return  rotateGesturesEnabled ;  }
@ Override   public   Bfloat16Indexer   get ( long   i ,  long   j ,  float []   h ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  h [ offset   +   n ]   =   getRaw ( index ( i ,  j )   +   n ) ;  }  return  this ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"attributeConsumingServiceIndex"""" )  @ Valid  public   String   getAttributeConsumingServiceIndex ()   {  return  attributeConsumingServiceIndex ;  }
public   Optional < SecurityRequirement >   contains ( List < SecurityRequirement >   securityRequirements ,  SecurityRequirement   left )   {  return  securityRequirements . stream ()  . filter ( rightSecurities  ->   same ( left ,  rightSecurities ) )  . findFirst () ;  }
@ Override  public   void   onSwitchChanged ( SwitchCompat   switchView ,  boolean   isChecked )   {  if  ( switchView   ==   switchCompat )   {  onSwitchBarChanged ( isChecked ) ;  }  }
public   static   void   resetConfig ()   {  rootConfig () . setEnableProfiles ( false ) ;  int   themesHash   =  history () . themesHash ;  Preconditions . checkState ( rootConfig . getFile () . delete () ) ;  invalidateConfig () ;  history () . themesHash   =   themesHash ;  rootConfig . save () ;  }
private   static   void   add ( List < OrderedEventSource >   list ,  EventSource   source )   {  if  ( source   !=   EventSource . EMPTY )   {  list . add ( new   OrderedEventSource ( source ,  list . size ()   +   1 ) ) ;  }  }
public   ChangedMetadata   setRight ( final   String   right )   {  this . right   =   right ;  return  this ;  }
public   AuthenticationType   putPropertiesItem ( String   key ,  Object   propertiesItem )   {  if  ( this . properties   ==   null )   {  this . properties   =   new   HashMap < String ,  Object > () ;  }  this . properties . put ( key ,  propertiesItem ) ;  return  this ;  }
@ Deprecated  public   List < BasicDigestAuthentication >   getBasicDigestAuthentications ()   {  return  basicDigestAuthentications ;  }
public   CvMat   getN ()   {  double []   src   =  projectorTransformer . getReferencePoints2 () ;  double []   dst   =  projectorTransformer . getReferencePoints1 () . clone () ;  dst [ 0 ]   =   projectorParameters . get ( 0 ) ;  dst [ 2 ]   =   projectorParameters . get ( 1 ) ;  dst [ 4 ]   =   projectorParameters . get ( 2 ) ;  
private   Resource   findResource ( Archive   archive ,  String   pattern )   {  try  {  for  ( Resource   resource   :  ResourcePatternUtils . getResourcePatternResolver ( new   DefaultResourceLoader () )  . getResources ( archive . getUrl ()   +   pattern ) )   {  if  ( resource . exists () )   {  if  ( resource . getFilename ()   != null   &&   resource . getFilename () . contains ( """"org.springframework.boot.experimental/spring-boot-thin-wrapper"""" ) )   {  
@ Override  public   String   toString ()   {  return  """"class InboundProtocolListItem {\n""""   +  """"    type: """"   +   toIndentedString ( type )   +   """"\n""""   +  """"    name: """"   +   toIndentedString ( name )   +   """"\n""""   +  """"    self: """"   +   toIndentedString ( self )   +   """"\n""""   +  """"}"""" ;  }
public   synchronized   static   Class < ? >   findFirstClassUsingStrings ( ClassLoader   classLoader ,  StringMatchType   type ,  String ...   strings )   throws  Exception   {  var   matcher   =  new   ClassMatcher () ;  for  ( String   string   :  strings )   {  matcher . addUsingString ( string ,  type ) ;  }  var   result   =  dexkit . findClass ( FindClass . create () . matcher ( matcher ) ) ;  if  ( result . isEmpty () )   return  null ;  return  result . get ( 0 ) . getInstance ( classLoader ) ;  }
@ JsonIgnore  public   String   getName ()   {  for  ( String   lang   :  this . locales )   {  if  ( this . names . containsKey ( lang ) )   {  return  this . names . get ( lang ) ;  }  }  return  null ;  }
public   static   void   receiveCommand ( final   PickerView   view ,  int   commandId ,  final   ReadableArray   args )   {  if  ( commandId   ==   SCROLL )   {  int   wheelIndex   =  args . getInt ( 0 ) ;  int   scrollTimes   =  args . getInt ( 1 ) ;  view . scroll ( wheelIndex ,  scrollTimes ) ;  }  }
@ Test ( groups   =   """"wso2.is"""" ,  dependsOnMethods   =   """"addUserIntoJDBCUserStore"""" )  public   void   changePassWordByUserTest ()   throws  Exception   {  try {  userMgtClient . changePasswordByUser ( newUserName ,  newUserPassword ,  """"Password@2"""" ) ;  }   catch  ( UserAdminUserAdminException   e )   {  Assert . fail ( """"password change by user for secondary User Store failed"""" ) ;  }  }
@ Override  public   void   updateReminder ( IRemindersCallbacks   callbacks ,  TaskEntity   task )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: updateReminder"""" ) ;  }
@ BeforeEach  void   setUp ()   {  out   =   new   StringWriter () ;  writer   =   new   StringLineSeparatorWriter ( out ,  """"separator"""" ) ;  }
@ Override  public   SpiConfigBuilder   mode ( SpiMode   mode )   {  this . properties . put ( SpiConfig . MODE_KEY ,  Integer . toString ( mode . getMode () ) ) ;  return  this ;  }
@ Override  public   void   destroy ( String   appName )   {  super . getWrapper ( appName ) . cancel () ;  }
public   File   getLocalRepository ()   {  return  DependencyResolver . instance () . getLocalRepository () ;  }
@ NonNull  public   String   save ()   {  if  ( type   ==   type . toSave () )   {  return  type   ==   DateFormatType . UNKNOWN ?   """"""""  :  type . code   +   """":""""   +   getPattern () ;  }   else  {  return  toSave () . save () ;  }  }
Collector < Long ,  ? ,  String >   toLineList ()   {  return  Collectors . mapping ( this :: listLine ,  joining ( """"\n"""" ) ) ;  }
@ Override  public   String   toString ()   {  return  String . format ( """"[Geometry: %s (%s) bounds=%s, viewport=%s]"""" ,  location ,  locationType ,  bounds ,  viewport ) ;  }
public   static   < E ,  F   extends  Number >   F   sum ( final   Iterable < E >   iterable ,  final   Function < E ,  F >   func )   {  F   result   =  null ;  for  ( final   E   item   :  iterable )   {  result   =   add ( result ,  func . apply ( item ) ) ;  }  return  result ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Check Oauth2 application registration"""" )  public   void   testRegisterApplication ()   throws  Exception   {  createOauthApp () ;  OAuthConsumerAppDTO []   appDtos   =  adminClient . getAllOAuthApplicationData () ;  boolean   found   =  false ;  
protected   String   buildGetRequestURL ( String   endpointURL ,  String   tenantDomain ,  List < NameValuePair >   queryParams )   {  String   authorizeEndpoint   =  getTenantQualifiedURL ( endpointURL ,  tenantDomain ) ;  if  ( queryParams   ==   null   ||   queryParams . isEmpty () )   {  return  authorizeEndpoint ;  }  StringJoiner   queryParamJoiner   =  new   StringJoiner ( AMPERSAND ) ;  for  ( NameValuePair   queryParam   :  queryParams )   {  queryParamJoiner . add ( queryParam . getName ()   +   EQUAL   +   queryParam . getValue () ) ;  }  return  authorizeEndpoint   +   QUESTION_MARK   +   queryParamJoiner ;  }
@ Override  public   void   onSpinnerStateChange ()   {  onChangeListener . onStateChange ( wheel ) ;  }
@ Override  public   String   getDescription ()   {  return  """"Filters out everything that is not a folder."""" ;  }
@ Override  public   ValidatorFactory   buildValidatorFactory ( final   ConfigurationState   state )   {  return  new   FakeValidationProvider . FakeValidatorFactory () ;  }
@ Override  public   void   onBackPressed ()   {  if  ( mIsCreateMode )   {  showDiscardDialog () ;  }  else  {  super . onBackPressed () ;  }  }
@ ApiModelProperty ()  @ JsonProperty ( """"idpInitiatedSingleLogout"""" )  @ Valid  public   IdpInitiatedSingleLogout   getIdpInitiatedSingleLogout ()   {  return  idpInitiatedSingleLogout ;  }
@ Test ( dependsOnMethods   =   """"testDeleteOIDCScope"""" )  public   void   testGetDeletedOIDCScope ()   {  Response   responseAfterDelete   =  getResponseOfGet ( OIDC_SCOPE_MANAGEMENT_API_BASE_PATH   +   PATH_SEPARATOR   +   scopeId ) ;  validateHttpStatusCode ( responseAfterDelete ,  HttpStatus . SC_NOT_FOUND ) ;  }
private   void   info ( String   msg )   {  if  ( sonarConsole   !=   null )   {  sonarConsole . info ( msg ) ;  }  }
public   LaunchCommandBuilder   withContainerInfo ( Optional < ContainerInfo >   containerInfo )   {  this . containerInfo   =   containerInfo ;  return  this ;  }
@ ApiModelProperty ( example   =   """"adwefi2429asdfdf94444rraf44"""" ,  value   =   """""""" )  @ JsonProperty ( """"templateId"""" )  @ Valid  public   String   getTemplateId ()   {  return  templateId ;  }
@ Loggable  public   short []   logsShortArray ()   {  final   short []   shorts   =  new   short [ 10 ] ;  final   Random   random   =  new   Random () ;  for  ( int   idx   =  0 ;   idx   <   shorts . length ;   ++ idx )   {  shorts [ idx ]   =   ( short )   random . nextInt () ;  }  return  shorts ;  }
default   int   readRegister ( int   register ,  byte []   buffer ,  int   length )   {  return  readRegister ( register ,  buffer ,  0 ,  length ) ;  }
public   static   Intent   createViewIntent ()   {  Intent   intent   =  new   Intent ( Intent . ACTION_VIEW ) ;  intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_TASK   |   Intent . FLAG_ACTIVITY_RESET_TASK_IF_NEEDED  |   Intent . FLAG_ACTIVITY_CLEAR_TOP ) ;  return  intent ;  }
public   static   void   setPrefs ( SharedPreferences   mPrefs )   {  DesignUtils . mPrefs   =   mPrefs ;  }
public   UserSharedRolesResponse   addLinksItem ( UserSharedOrganizationsResponseLinks   linksItem )   {  if  ( this . links   ==   null )   {  this . links   =   new   ArrayList <> () ;  }  this . links . add ( linksItem ) ;  return  this ;  }
void   addCuries ( Graph   graph )   {  for  ( Vertex   vertex :  graph . getVertices () )   {  String   iri   =  ( String ) vertex . getProperty ( CommonProperties . IRI ) ;  Optional < String >   curie   =  curieUtil . getCurie ( iri ) ;  if  ( curie . isPresent () )   {  vertex . setProperty ( CommonProperties . CURIE ,  curie . get () ) ;  }  }  }
public   void   setSaml ( SAML2Configuration   saml )   {  this . saml   =   saml ;  }
public   static   String   printToday ( Locale   locale )   {  return  PrettyTime . of ( locale ) . printToday () ;  }
@ Override  public   Task < VerificationHandle >   challengeAccount ( RecaptchaHandle   recaptchaHandle ,  String   challengeRequestToken )   {  return  Tasks . forException ( new   UnsupportedOperationException () ) ;  }
@ Nullable  @ Override  public   String   valueOf ( Resource   resource )   {  return  SonarResource . of ( resource ) . getName () ;  }
@ Override  public   void   acceptTargets ( Set < String >   myTargets ,  Set < String >   otherTargets )   {  }
 <argument pos:start=""""""""1181:112"""""""" pos:end=""""""""1181:117""""""""><expr pos:start=""""""""1181:112"""""""" pos:end=""""""""1181:117""""""""><literal type=""""""""string"""""""" pos:start=""""""""1181:112"""""""" pos:end=""""""""1181:117"""""""">""""""""lst6""""""""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   void   removeChunkList ( String   name )   {  ClaimedResidence   res   =  residences . get ( name ) ;  if  ( res   !=   null )   {  String   world   =  res . getWorld () ;  if  ( chunkResidences . get ( world )   !=   null )   {  for  ( ChunkRef   chunk   :  getChunks ( res ) )   {  List < String >   ress   =  new   ArrayList <> () ;  if  ( chunkResidences . get ( world ) . containsKey ( chunk ) )   {  ress . addAll ( chunkResidences . get ( world ) . get ( chunk ) ) ;  }  ress . remove ( name ) ;  chunkResidences . get ( world ) . put ( chunk ,  ress ) ;  }  }  }  }
@ NonNull  @ Override  public   String   getDisplayName ()   {  return  """"Perform an HTTP Request and return a response object"""" ;  }
 <argument pos:start=""""""""402:63"""""""" pos:end=""""""""402:63""""""""><expr pos:start=""""""""402:63"""""""" pos:end=""""""""402:63""""""""><literal type=""""""""number"""""""" pos:start=""""""""402:63"""""""" pos:end=""""""""402:63"""""""">0</literal></expr></argument>)</argument_list></call> <operator pos:start=""""""""402:66"""""""" pos:end=""""""""402:67"""""""">!=</operator> <literal type=""""""""number"""""""" pos:start=""""""""402:69"""""""" pos:end=""""""""402:69"""""""">0</literal> <operator pos:start=""""""""402:71"""""""" pos:end=""""""""402:72"""""""">&amp;&amp;</operator>
@ Override  public   boolean   groupRemove ( String   world ,  String   group ,  String   permission )   {  return  perms . getXgroup () . removeNode ( group ,  permission ) ;  }
@ AfterClass ( alwaysRun   =   true )  @ Override  public   void   testConclude ()   throws  Exception   {  super . conclude () ;  this . remoteUSMServiceClient . deleteUser ( this . user ) ;  this . remoteUSMServiceClient . deleteRole ( this . role ) ;  }
@ Test  void   parameterSortDependencyExclusionsShouldEndUpInElementWrapperCreator ()   {  assertParameterMoveFromMojoToRestOfApplication ( """"sortDependencyExclusions"""" ,  """"groupId,scope"""" ) ;  var   sortDependencyExclusions   = new   ReflectionHelper ( elementWrapperCreator ) . getField ( """"sortDependencyExclusions"""" ) ;  assertThat ( sortDependencyExclusions . toString () , is ( """"DependencySortOrder{childElementNames=[groupId, scope]}"""" ) ) ;  }
@ Override  public   void   doWrite ( DataOutput   out )   throws  IOException   {  out . writeDouble ( getTrainError () ) ;  out . writeDouble ( getTestError () ) ;  out . writeLong ( getTrainSize () ) ;  out . writeInt ( getWeights () . length ) ;  for ( double   weight :  getWeights () )   {  out . writeDouble ( weight ) ;  }  out . writeInt ( getGradients () . length ) ;  for ( double   gradient :  getGradients () )   {  out . writeDouble ( gradient ) ;  }  out . writeLong ( count ) ;  out . writeInt ( this . wrCount ) ;  }
@ Override  public   void   perform ( @ NonNull   final   Run < ? ,  ? >   build , @ NonNull   final   FilePath   workspace , @ NonNull   final   EnvVars   env , @ NonNull   final   Launcher   launcher , @ NonNull   final   TaskListener   listener )   throws  InterruptedException ,  IOException   {  Launcher   mockLauncher   =  mock ( Launcher . class ) ;  ProcStarter   proc   =  mock ( ProcStarter . class ,  Answers . RETURNS_DEEP_STUBS ) ;  when ( mockLauncher . launch () ) . thenReturn ( proc ) ;  when ( proc . cmds ( any ( ArgumentListBuilder . class ) )   //  . envs ( env )   
public   static   < K ,  V >   boolean   has ( final   Map < K ,  V >   object ,  final   K   key )   {  return  object . containsKey ( key ) ;  }
@ Override  @ NonNls  protected   String   getBasePath ()   {  return  """"/intention/createreference/yaml"""" ;  }
public   String   getDescription ()   {  String []   descriptions   =  null ;  descriptions   =   CanvasFrame . getScreenDescriptions () ;  if  ( descriptions   !=   null   &&   screenNumber   >=   0   &&   screenNumber   <   descriptions . length )   {  return  descriptions [ screenNumber ] ;  }   else  {  return  """""""" ;  }  }
public   boolean   tryAcquire ( int   permits ,  long   timeout ,  TimeUnit   unit )   {  long   timeoutMicros   =  max ( unit . toMicros ( timeout ) ,  0 ) ;  checkPermits ( permits ) ;  long   microsToWait ;  synchronized  ( mutex () )   {  long   nowMicros   =  stopwatch . readMicros () ;  if  ( ! canAcquire ( nowMicros ,  timeoutMicros ) )   {  return  false ;  }   else  {  microsToWait   =   reserveAndGetWaitLength ( permits ,  nowMicros ) ;  }  }  stopwatch . sleepMicrosUninterruptibly ( microsToWait ) ;  return  true ;  }
public   void   setFixFocalLength ( boolean   fixFocalLength )   {  if  ( fixFocalLength )   {  flags   |=   CV_CALIB_FIX_FOCAL_LENGTH ;  }   else  {  flags   &=   ~ CV_CALIB_FIX_FOCAL_LENGTH ;  }  }
@ Test  void   sendAllAcceptTypes ()   throws  Exception   {  for  ( MimeType   mimeType   :  MimeType . values () )   {  
public   static   List < String >   words ( final   String   string )   {  final   String   localString   =  baseToString ( string ) ;  final   List < String >   result   =  new   ArrayList <> () ;  final   java . util . regex . Matcher   matcher   =  RE_WORDS . matcher ( localString ) ;  while  ( matcher . find () )   {  result . add ( matcher . group () ) ;  }  return  result ;  }
@ Override  public   void   animateCameraWithDurationAndCallback ( IObjectWrapper   cameraUpdate ,  int   duration , ICancelableCallback   callback )   throws  RemoteException   {  CameraUpdate   camUpdate   =  ( CameraUpdate )   ObjectWrapper . unwrap ( cameraUpdate ) ;  backendMap . applyCameraUpdateAnimated ( camUpdate ,  duration ) ;  }
String   deploy ( Resource   resource ,  String   name ,  String ...   args )   {  AppDefinition   definition   =  new   AppDefinition ( name , Collections . < String ,  String > emptyMap () ) ;  AppDeploymentRequest   request   =  new   AppDeploymentRequest ( definition ,  resource , Collections . < String ,  String > emptyMap () ,  Arrays . asList ( args ) ) ;  String   deployed   =  deployer . deploy ( request ) ;  return  deployed ;  }
@ Test  void   unsortedCustomSortOrderShouldTriggerVerify ()   {  SortPomImplUtil . create ()  . customSortOrderFile ( """"difforder/differentOrder.xml"""" )  . lineSeparator ( """"\n"""" )  . testVerifyXmlIsNotOrdered ( """"/full_unsorted_input.xml"""" , """"The xml element <modelVersion> should be placed before <parent>"""" ) ;  }
public   String   getOutPath ()   {  String   tmpResult ;  if  ( StringUtils . isEmpty ( outPath ) )   {  tmpResult   =   """"./"""" ;  }   else  {  tmpResult   =   outPath . replaceAll ( """"\\\\"""" ,  """"/"""" ) ;  if  ( ! tmpResult . endsWith ( """"/"""" ) )   {  tmpResult   =   tmpResult   +   """"/"""" ;  }  }  return  tmpResult ;  }
public   List < IdentityProvider >   getAllPaginatedIdPsInfo ( int   pageNumber )   throws  Exception   {  IdentityProvider []   identityProviders   =  idPMgtStub . getAllPaginatedIdpInfo ( pageNumber ) ;  if  ( identityProviders   !=   null   &&   identityProviders . length   >   0 )   {  return  Arrays . asList ( identityProviders ) ;  }   else  {  return  new   ArrayList <> () ;  }  }
@ Override  public   void   setPlayerInfoBoolean ( String   worldName ,  String   playerName ,  String   node ,  boolean   value )   {  setPlayerValue ( worldName ,  playerName ,  node ,  value ) ;  }
@ Test  public   void   contextLoadsWithRestClient ()   {  new   WebApplicationContextRunner () . withUserConfiguration ( EurekaSampleApplication . class )  . withPropertyValues ( """"eureka.client.restclient.enabled=true"""" )  . run ( context  ->  {  assertThat ( context ) . doesNotHaveBean ( RestTemplateDiscoveryClientOptionalArgs . class ) ;  assertThat ( context ) . doesNotHaveBean ( WebClientDiscoveryClientOptionalArgs . class ) ;  assertThat ( context ) . hasSingleBean ( RestClientDiscoveryClientOptionalArgs . class ) ;  } ) ;  }
public   void   endMessage ()  {  Message   endMessage   =  Message . obtain () ;  endMessage . what   =   DISMISS_DIALOG ;  handler . sendMessage ( endMessage ) ;  }
private   static   DateTime   otherDate ( InstanceSettings   settings ,  TaskEvent   event )   {  return  settings . getTaskScheduling ()   ==   TaskScheduling . DATE_DUE ?   event . getStartDate ()  :  event . getDueDate () ;  }
@ Override  public   void   run ()   {  spinning   =   false ;  onValueChangedListener . onValueChange () ;  onValueChangedListener . onSpinnerStateChange () ;  }
public   JustInTimeProvisioning   userstore ( String   userstore )   {  this . userstore   =   userstore ;  return  this ;  }
@ Override  public   boolean   playerRemove ( String   world ,  String   player ,  String   permission )   {  try  {  PermissionBase   user   =  manager . getUser ( player ) ;  user . remPerm ( permission ,  world ) ;  return  true ;  }   catch  ( IOException   ex )   {  plugin . getLogger () . log ( Level . SEVERE , String . format ( """"[%s] An error occured while saving perms"""" ,  totalperms . getDescription () . getName () ) ,  ex ) ;  return  false ;  }  }
@ ParameterizedTest  @ MethodSource ( """"data"""" )  public   void   runNoCloseBlockingTestScenario ()   throws  Exception   {  runTestScenario ( false ) ;  }
public   void   setInputNodeCount ( int   inputNodeCount )   {  this . inputNodeCount   =   inputNodeCount ;  }
public   Optional < Double >   getPreutter ()   {  if  ( preutter   >=   0 )   {  return  Optional . of ( preutter ) ;  }  return  Optional . empty () ;  }
public   int   addAPIAuthorizationToApplication ( String   appId ,  AuthorizedAPICreationModel   authorizedAPICreationModel )  throws  IOException   {  String   jsonRequestBody   =  toJSONString ( authorizedAPICreationModel ) ;  String   endPointUrl   =  applicationManagementApiBasePath   +   PATH_SEPARATOR   +   appId   +   AUTHORIZED_API_BASE_PATH ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpPost ( endPointUrl ,  jsonRequestBody ,  getHeaders () ) )   {  return  response . getStatusLine () . getStatusCode () ;  }  }
@ Override  protected   Control   createDialogArea ( Composite   parent )   {  Composite   parentArea   =  ( Composite )   super . createDialogArea ( parent ) ;  Composite   container   =  new   Composite ( parentArea ,  SWT . FILL ) ;  container . setLayoutData ( new   GridData ( GridData . FILL_BOTH ) ) ;  GridLayout   layout   =  new   GridLayout ( 3 ,  false ) ;  layout . marginWidth   =   layout . marginHeight   =   10 ;  container . setLayout ( layout ) ;  createContentTypeEditor ( container ) ;  createSchemaLocationEditor ( container ) ;  return  parentArea ;  }
@ Override  public   AnalogOutput   value ( Integer   value )   throws  IOIllegalValueException ,  IOBoundsException   {  return  null ;  }
public   static   void   onConfigReload ( ModConfigEvent . Reloading   event )  {  ModConfig   config   =  event . getConfig () ;  if ( config . getType ()   ==   ModConfig . Type . CLIENT   &&   config . getModId () . equals ( Reference . MOD_ID ) )  {  ResourceLocation   id   =  ResourceLocation . tryParse ( Config . CLIENT . display . crosshair . get () ) ;  if ( id   !=   null )  {  CrosshairHandler . get () . setCrosshair ( id ) ;  }  }  }
@ Test  void   testStopWithCallbackCallsStop ()   {  eurekaServerInitializerConfiguration . stop ( this :: setCallbackCalledTrue ) ;  assertThat ( callbackCalled ) . isTrue () ;  verify ( eurekaServerBootstrapMock ) . contextDestroyed ( any () ) ;  }
public   static   Map < String ,  Object >   deepCopyMap ( Map < String ,  Object >   map )   {  Map < String ,  Object >   outMap   =  new   LinkedHashMap <> () ;  for  ( Map . Entry < String ,  Object >   entry   :  map . entrySet () )   {  outMap . put ( entry . getKey () ,  makeDeepCopyMap ( entry . getValue () ) ) ;  }  return  outMap ;  }
public   void   setColors ( CvScalar   foregroundColor ,  CvScalar   backgroundColor )   {  this . foregroundColor   =   foregroundColor ;  this . backgroundColor   =   backgroundColor ;  setPrewarp ( prewarp ) ;  }
private   JPanel   getStructurePanel ()  {  if  ( structurePanel   ==   null )  {  GridLayout   gridLayout   =  new   GridLayout () ;  gridLayout . setRows ( 1 ) ;  structurePanel   =   new   JPanel () ;  structurePanel . setPreferredSize ( new   java . awt . Dimension ( 200 ,  408 ) ) ;  structurePanel . setLayout ( gridLayout ) ;  structurePanel . add ( getBoxScroll () ,  null ) ;  }  return  structurePanel ;  }
@ Override  public   void   setPlayerSuffix ( String   world ,  String   player ,  String   suffix )   {  throw  new   UnsupportedOperationException ( """"iChat does not support mutable info nodes!"""" ) ;  }
@ Override   public   IntIndexer   get ( long   i ,  int []   m ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  m [ offset   +   n ]   =   getRaw ( index ( i )   +   n ) ;  }  return  this ;  }
public   final   ObjectFieldBuilder   required ( final   List < String >   requiredFields )   {  required   =   requiredFields ;  return  this ;  }
@ Override  public   void   postApply ( String   targetClassName ,  ClassNode   targetClass ,  String   mixinClassName ,  IMixinInfo   mixinInfo )   {  }
public   void   onCancelDownloads ()   {  completionSource . trySetException ( new   Exception ( """"Unexpected callback: onCancelDownloads"""" ) ) ;  }
@ Override  public   void   onError ( Bundle   bundle )   {  int   errorCode   =  BundleKeys . get ( bundle ,  BundleKeys . ERROR_CODE ,  AssetPackErrorCode . INTERNAL_ERROR ) ;  onError ( errorCode ) ;  }
public   Features   with ( Feature ... features )   {  int   e   =  _enabled ;  for  ( Feature   f   :  features )   {  e   |=   ( 1   <<   f . ordinal () ) ;  }  return  ( e   ==   _enabled )  ?   this   :  new   Features ( e ,  _disabled ) ;  }
@ Override  public   boolean   onException ( Exception   e ,  Uri   model ,  Target < GlideDrawable >   target ,  boolean   isFirstResource )   {  Toast . makeText ( getContext () ,  R . string . message_connect_and_try_again ,  Toast . LENGTH_SHORT ) . show () ;  getActivity () . finish () ;  return  false ;  }
@ Override  protected   boolean   canEqual ( Object   other )   {  return  other   instanceof   NullSchema ;  }
static   PiGpioDigitalOutputProvider   newInstance ( PiGpio   piGpio )   {  return  new   PiGpioDigitalOutputProviderImpl ( piGpio ) ;  }
@ Override  public   PendingResult < Status >   receiveFile ( GoogleApiClient   client ,  Uri   uri ,  boolean   append )   {  Log . d ( TAG ,  """"unimplemented Method: receiveFile"""" ) ;  return  null ;  }
public   static   Map < String ,  Object >   replaceNumberAndBooleanWithString ( Map < String ,  Object >   map )   {  Map < String ,  Object >   outMap   =  new   LinkedHashMap <> () ;  for  ( Map . Entry < String ,  Object >   entry   :  map . entrySet () )   {  outMap . put ( entry . getKey () , entry . getValue ()   instanceof   Boolean   ||   entry . getValue ()   instanceof   Number ?   String . valueOf ( entry . getValue () )  :  makeReplaceNumberAndBoolean ( entry . getValue () ) ) ;  }  return  outMap ;  }
public   static   String   getBasicAuthHeader ( User   userInfo )   {  BasicAuthInfo   basicAuthInfo   =  new   BasicAuthInfo () ;  basicAuthInfo . setUserName ( userInfo . getUserName () ) ;  basicAuthInfo . setPassword ( userInfo . getPassword () ) ;  BasicAuthHandler   basicAuthHandler   =  new   BasicAuthHandler () ;  BasicAuthInfo   encodedBasicAuthInfo   =  ( BasicAuthInfo )   basicAuthHandler . getAuthenticationToken ( basicAuthInfo ) ;  return  encodedBasicAuthInfo . getAuthorizationHeader () ;  }
@ Test  public   void   testStepStartedEvent ()   throws  Exception   {  new   StepStartedEvent ( """"name"""" ) . withTitle ( """"title"""" ) . process ( step ) ;  verify ( step ) . setName ( """"name"""" ) ;  verify ( step ) . setStart ( anyLong () ) ;  verify ( step ) . setStatus ( Status . PASSED ) ;  verify ( step ) . setTitle ( """"title"""" ) ;  verifyNoMoreInteractions ( step ) ;  }
@ Override  public   int   getPlayerInfoInteger ( String   world ,  String   player ,  String   node ,  int   defaultValue )   {  String   s   =  getPlayerInfoString ( world ,  player ,  node ,  null ) ;  if  ( s   ==   null )   {  return  defaultValue ;  }  try  {  return  Integer . valueOf ( s ) ;  }   catch  ( NumberFormatException   e )   {  return  defaultValue ;  }  }
@ Override  public   void   onOpen ( ServerHandshake   handshakedata )   {  countDownLatch . countDown () ;  }
public   static   DataHolder   empty ( int   statusCode ,  Bundle   metadata )   {  return  new   DataHolder ( new   String [ 0 ] ,  new   CursorWindow [ 0 ] ,  statusCode ,  metadata ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( o   ==   this )   {  return  true ;  }   else if  ( o   instanceof   SimplifiedDiff )   {  SimplifiedDiff   that   =  ( SimplifiedDiff )   o ;  return  this . kind . equals ( that . kind )  &&   this . details . equals ( that . details ) ;  }   else  {  return  false ;  }  }
private   String   getVirtualDecrementButtonText ()   {  int   value   =  mValue   -   1 ;  if  ( mWrapSelectorWheel )   {  value   =   getWrappedSelectorIndex ( value ) ;  }  if  ( value   >=   mMinValue )   {  return  ( mDisplayedValues   ==   null )  ?   formatNumber ( value )  :  mDisplayedValues [ value   -   mMinValue ] ;  }  return  null ;  }
protected   Response   getResponseOfPost ( String   endpointUri ,  String   body )   {  return  given () . auth () . preemptive () . basic ( authenticatingUserName ,  authenticatingCredential )  . contentType ( ContentType . JSON )  . header ( HttpHeaders . ACCEPT ,  ContentType . JSON )  . body ( body )  . log () . ifValidationFails ()  . filter ( validationFilter )  . log () . ifValidationFails ()  . when ()  . log () . ifValidationFails ()  . post ( endpointUri ) ;  }
@ Nullable  @ Override  public   VideoDecoder   createDecoder ( VideoCodecInfo   codecInfo )   {  if  ( codecInfo . name . equalsIgnoreCase ( """"H264"""" ) )   {  return  this . hardwareVideoDecoderFactory . createDecoder ( codecInfo ) ;  }  return  this . softwareVideoDecoderFactory . createDecoder ( codecInfo ) ;  }
private   boolean   checkIfEnum ( final   Schema   type )   {  return  Schema . Type . ENUM . equals ( type . getType () ) ;  }
@ ApiModelProperty ( example   =   """"USA"""" ,  value   =   """"Region of the tenant."""" )  @ JsonProperty ( """"region"""" )  @ Valid  public   String   getRegion ()   {  return  region ;  }
private   EditText   getUsernameEdit ()   {  TextInputLayout   username_layout   =  findViewById ( R . id . username_layout ) ;  return  username_layout . getEditText () ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  deleteApp ( applicationId ) ;  restClient . closeHttpClient () ;  log . info ( """"Replacing deployment.toml with default configurations."""" ) ;  serverConfigurationManager . restoreToLastConfiguration ( false ) ;  }
private   int   daysRemaining ( String   area )  {  Long   get   =  leaseExpireTime . get ( area ) ;  if ( get <= System . currentTimeMillis () )  return  0 ;  return  msToDays ( ( int ) ( get - System . currentTimeMillis () ) ) ;  }
@ Nullable  @ Override  public   Runnable   enableSearch ( String   option )   {  return  null ;  }
@ Test  public   void   thatExampleKeysAreSuggested ()   {  getCaretCompletions ( """"example"""" )  . assertContains ( """"$ref"""" ,  """"summary"""" ,  """"description"""" ,  """"value"""" ,  """"externalValue"""" )  . isOfSize ( 5 ) ;  }
public   void   setTemplateId ( String   templateId )   {  this . templateId   =   templateId ;  }
 <argument pos:start=""""""""108:62"""""""" pos:end=""""""""108:80""""""""><expr pos:start=""""""""108:62"""""""" pos:end=""""""""108:80""""""""><name pos:start=""""""""108:62"""""""" pos:end=""""""""108:80""""""""><name pos:start=""""""""108:62"""""""" pos:end=""""""""108:69"""""""">Computer</name><operator pos:start=""""""""108:70"""""""" pos:end=""""""""108:70"""""""">.</operator><name pos:start=""""""""108:71"""""""" pos:end=""""""""108:80"""""""">DISCONNECT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   TextSearchRequest   query ( String   query )   {  return  param ( """"query"""" ,  query ) ;  }
public   void   setConfig ( BrowserConfig   config )  {  this . config   =   config ;  overflowX   =   overflowY   =   config . getClipViewport ()  ?   OVERFLOW_HIDDEN   :  OVERFLOW_VISIBLE ;  }
public   record   TextSetting ( ColorPalette   colors ,  boolean   shadow ,  @ Nullable   Style   modNameStyle ,  int   itemAmountColor )   {  public   static   final   TextSetting   DEFAULT   =  new   TextSetting ( ColorPalette . DEFAULT ,  true ,  Optional . empty () ,  0xFFFFFFFF ) ;  @ SuppressWarnings ( """"OptionalUsedAsFieldOrParameterType"""" )  public   TextSetting ( ColorPalette   colors ,  boolean   shadow ,  Optional < Style >   modNameStyle ,  int   itemAmountColor )   {  this ( colors ,  shadow ,  modNameStyle . orElse ( null ) ,  itemAmountColor ) ;  }  }
private   SharedPreferences . Editor   put ( PutListener   listener )   {  SharedPreferences . Editor   editor   =  preferences . edit () ;  listener . put ( editor ) ;  return  editor ;  }
public   final   boolean   childOfHeader ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.paths.*.*.responses.*.headers.*"""" ) ;  }
public   ClaimedResidence   getSubzone ( String   subzonename )   {  if  ( ! subzonename . contains ( """"."""" ) )   {  return  subzones . get ( subzonename ) ;  }  String   split []   =  subzonename . split ( """"\\."""" ) ;  ClaimedResidence   get   =  subzones . get ( split [ 0 ] ) ;  for  ( int   i   =  1 ;   i   <   split . length ;   i ++ )   {  if  ( get   ==   null )   {  return  null ;  }  get   =   get . getSubzone ( split [ i ] ) ;  }  return  get ;  }
@ EventHandler ( priority   =   EventPriority . MONITOR )  public   void   onPluginEnable ( PluginEnableEvent   event )   {  if  ( this . chat . chat   ==   null )   {  Plugin   chat   =  event . getPlugin () ;  if  ( chat . getDescription () . getName () . equals ( """"bPermissions"""" ) )   {  this . chat . chat   =   Permissions . getInfoReader () ;  log . info ( String . format ( """"[%s][Chat] %s hooked."""" ,  plugin . getDescription () . getName () ,  """"bPermissions"""" ) ) ;  }  }  }
public   void   setThresholdWindowMax ( int   thresholdWindowMax )   {  this . thresholdWindowMax   =   thresholdWindowMax ;  }
public   AudioFilesAdapter . AudioFileViewHolder   getAudioFileHolder ()   {  return  audioFileHolder ;  }
@ Override   public   Optional < String >   validate ( String   subject )   {  if  ( """""""" . equals ( subject ) )   {  return  Optional . empty () ;  }  try  {  new   JSONPointer ( subject ) ;  if  ( subject . startsWith ( """"#"""" ) )   {  return  failure ( subject ) ;  }  return  checkEscaping ( subject ) ;  }   catch  ( IllegalArgumentException   e )   {  return  failure ( subject ) ;  }  }
@ Override  public   < F >   Chain < F >   reduceRight ( final   BiFunction < F ,  T ,  F >   func ,  final   F   zeroElem )   {  return  new   Chain <> ( Underscore . reduceRight ( value () ,  func ,  zeroElem ) ) ;  }
@ EventHandler ( priority   =   EventPriority . MONITOR )  public   void   onPluginEnable ( PluginEnableEvent   event )   {  if  ( ! hooked )   {  Plugin   p   =  event . getPlugin () ;  if ( p . getDescription () . getName () . equals ( """"bPermissions"""" ) )   {  hooked   =   true ;  log . info ( String . format ( """"[%s][Permission] %s hooked."""" ,  plugin . getDescription () . getName () ,  name ) ) ;  }  }  }
@ Test ( groups   =   """"wso2.is"""" ,  dependsOnMethods   =   { """"getCountEnabledUserStores"""" } )  public   void   deleteUserFromJDBCUserStore ()   throws  Exception   {  userMgtClient . deleteUser ( newUserName ) ;  Assert . assertFalse ( Utils . nameExists ( userMgtClient . listAllUsers ( newUserName ,  10 ) ,  newUserName ) ,  """"User Deletion failed"""" ) ;  userMgtClient . deleteRole ( newUserRole ) ;  Assert . assertFalse ( Utils . nameExists ( userMgtClient . getAllRolesNames ( newUserRole ,  100 ) ,  newUserRole ) ,  """"User Role still exist"""" ) ;  }
@ Override  public   Context   getApplicationContext ()   {  return  applicationContext ;  }
public   static   String   readModuleId ( InputStream   inputStream )   {  return  readModulePropSimple ( inputStream ,  """"id"""" ) ;  }
 <argument pos:start=""""""""328:109"""""""" pos:end=""""""""328:119""""""""><expr pos:start=""""""""328:109"""""""" pos:end=""""""""328:119""""""""><name pos:start=""""""""328:109"""""""" pos:end=""""""""328:119"""""""">autosaveInt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Override  public   FakeConfiguration   createSpecializedConfiguration ( final   BootstrapState   state )   {  return  new   FakeValidationProvider . FakeConfiguration () ;  }
public   int   getRecursiveCnt ()   {  return  getIntParam ( this . otherConfigs ,  Constants . RECURSIVE_CNT ,  1 ) ;  }
public   void   printLists ( Player   player )  {  StringBuilder   sbuild   =  new   StringBuilder () ;  Map < String ,  FlagPermissions >   get   =  lists . get ( player . getName () ) ;  sbuild . append ( ChatColor . YELLOW ) . append ( Residence . getLanguage () . getPhrase ( """"Lists"""" ) ) . append ( """":"""" ) . append ( ChatColor . DARK_AQUA ) . append ( """" """" ) ;  if ( get != null )  {  for (  Entry < String ,  FlagPermissions >   thislist   :  get . entrySet () )  {  sbuild . append ( thislist . getKey () ) . append ( """" """" ) ;  }  }  player . sendMessage ( sbuild . toString () ) ;  }
protected   final   ProcessingMessage   newMsg ( final   FullData   data )  {  return  data . newMessage () . put ( """"domain"""" ,  """"validation"""" )  . put ( """"keyword"""" ,  keyword )  . setExceptionProvider ( EXCEPTION_PROVIDER ) ;  }
@ Override  public   Optional < Concept >   getConceptFromId ( Query   query )   {  String   idQuery   =  StringUtils . strip ( query . getInput () ,  """"\"""""""" ) ;  idQuery   =   curieUtil . getIri ( idQuery ) . orElse ( idQuery ) ;  try  ( Transaction   tx   =  graph . beginTx () )   {  Node   node   = graph . index () . getNodeAutoIndexer () . getAutoIndex () . get ( CommonProperties . IRI ,  idQuery )  . getSingle () ;  tx . success () ;  Concept   concept   =  null ;  if  ( null   !=   node )   {  concept   =   transformer . apply ( node ) ;  }  return  Optional . ofNullable ( concept ) ;  }  }
@ Override   public   ULongIndexer   get ( long []   indices ,  BigInteger []   l ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  l [ offset   +   n ]   =   getRaw ( index ( indices )   +   n ) ;  }  return  this ;  }
public   String   getSearchStringEscape ()   throws  SQLException   {  return  null ;  }
public   boolean   hasCapabilities ( int []   capabilities )   {  for  ( int   capability   :  capabilities )   {  if  ( ! this . hasCapability ( capability ) )   {  return  false ;  }  }  return  true ;  }
@ NonNull  public   List < DataSet >   getDataSet ( @ NonNull   Session   session ,  @ NonNull   DataType   dataType )   {  if  ( ! sessions . contains ( session ) )   throw  new   IllegalArgumentException ( """"Attempting to read data for session which was not returned"""" ) ;  List < DataSet >   dataSets   =  new   ArrayList <> () ;  for  ( SessionDataSet   sessionDataSet   :  this . sessionDataSets )   {  if  ( session . equals ( sessionDataSet . session )   &&   dataType . equals ( sessionDataSet . dataSet . getDataType () ) )   {  dataSets . add ( sessionDataSet . dataSet ) ;  }  }  return  dataSets ;  }
@ Override   public   BooleanIndexer   get ( long   i ,  long   j ,  boolean []   b ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  b [ offset   +   n ]   =   getRaw ( index ( i ,  j )   +   n ) ;  }  return  this ;  }
private   void   removeQuota ( char []   processed ,  char   c )   {  int   startOps   =  - 1 ;  int   endOps   =  - 1 ;  for  (  int   i   =  0 ;   i   <   processed . length ;   i   ++  )   {  if  (  processed [ i ]   ==   c  )   {  if  (  startOps   >=   0  )   {  endOps   =   i ;  }   else  {  startOps   =   i ;  }  if  (  startOps   >=   0   &&   endOps   >=   0  )   {  setBlank ( processed ,  startOps ,  endOps ) ;  startOps   =   - 1 ;  endOps   =   - 1 ;  }  }  }  }
public   UserStoreDTO []   getActiveDomains ()   throws  Exception   {  return  stub . getSecondaryRealmConfigurations () ;  }
protected   DataType   getDataType ( OpType   optype )   {  return  ( optype . equals ( OpType . CONTINUOUS )  ?   DataType . DOUBLE   :  DataType . STRING ) ;  }
private   boolean   locationTrackingEnabled ()   {  LocationManager   locationManager   =  ( LocationManager )   getApplicationContext ()  . getSystemService ( Context . LOCATION_SERVICE ) ;  return  locationManager . isProviderEnabled ( LocationManager . GPS_PROVIDER ) ;  }
private   VirtualFile   getReferencedFile ( final   String   ref ,  final   VirtualFile   containingFile )   {  final   String   relativePath   =  StringUtils . substringBefore ( ref ,  """"#"""" ) ;  return  containingFile . getParent () . findFileByRelativePath ( relativePath ) ;  }
@ SuppressWarnings ( """"PMD.ShortMethodName"""" )  public   Directives   up ()   {  this . all . add ( new   UpDirective () ) ;  return  this ;  }
@ Override   public   DoubleIndexer   get ( long []   indices ,  double []   d ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  d [ offset   +   n ]   =   array [ ( int ) index ( indices )   +   n ] ;  }  return  this ;  }
@ Override  public   long   getLastPlayedWithTimestamp ()   {  return  lastPlayedWithTimestamp ;  }
@ Test  public   void   shouldCreateProgrammingLabel ()   throws  Exception   {  Label   label   =  AllureModelUtils . createProgrammingLanguageLabel () ;  assertThat ( label . getName () ,  is ( LabelName . LANGUAGE . value () ) ) ;  assertThat ( label . getValue () ,  is ( """"JAVA"""" ) ) ;  }
@ Override  public   void   onThemeChanged ()   {  configEditor . redrawSpectrogram () ;  }
@ Override  public   boolean   isEmpty ()   {  throw  new   UnsupportedOperationException () ;  }
public   String   getDefaultSortOrderXml ()   throws  IOException   {  CheckedSupplier < InputStream ,  IOException >   createStreamFunc   = ()  ->  {  if  ( customSortOrderFile   !=   null )   {  var   urlWrapper   =  new   UrlWrapper ( customSortOrderFile ) ;  if  ( urlWrapper . isUrl () )   {  return  urlWrapper . openStream () ;  }   else  {  return  openCustomSortOrderFile () ;  }  }  return  getPredefinedSortOrder ( predefinedSortOrder ) ;  } ;  try  ( var   inputStream   =  createStreamFunc . get () )   {  return  new   String ( inputStream . readAllBytes () ,  StandardCharsets . UTF_8 ) ;  }  }
protected   String   property ( int   deepness ,  String   title ,  String   name ,  String   type ,  String   description )   {  return  format ( """"%s* %s `%s` (%s)\n%s\n"""" , indent ( deepness ) ,  title ,  name ,  type ,  metadata ( indent ( deepness   +   1 ) ,  description ) ) ;  }
public   int   getStreamId ()   {  lastStreamIdReported   =   streamId ;  return  streamId ;  }
@ Override  public   boolean   playerRemove ( String   world ,  String   player ,  String   permission )   {  ApiLayer . removePermission ( world ,  CalculableType . USER ,  player ,  permission ) ;  return  true ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  UserUnshareRequestBodyUserCriteria   userUnshareRequestBodyUserCriteria   =  ( UserUnshareRequestBodyUserCriteria )   o ;  return  Objects . equals ( this . userIds ,  userUnshareRequestBodyUserCriteria . userIds ) ;  }
@ ApiModelProperty ( example   =   """"[\""""Option 1\"""",\""""Option 2\""""]"""" ,  value   =   """""""" )  @ JsonProperty ( """"options"""" )  @ Valid  public   List < String >   getOptions ()   {  return  options ;  }
public   void   setVideoStream ( int   videoStream )   {  this . videoStream   =   videoStream ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"custom"""" )  @ Valid  public   List < CustomInboundProtocolConfiguration >   getCustom ()   {  return  custom ;  }
@ Override  public   void   onBackPressed ()   {  if  ( ! mRootsAdapter . contains ( mLocation )   &&   mLocation   !=   null )   {  displayFolder ( mLocation . getParentFile () ) ;  }   else if  ( mRootsAdapter . contains ( mLocation )   &&   mRootsAdapter . getCount ()   >   1 )   {  displayRoot () ;  }   else  {  setResult ( Activity . RESULT_CANCELED ) ;  finish () ;  }  }
public   void   releaseConnection ( String   tenantIdentifier ,  Connection   connection )   throws  SQLException   {  }
@ NonNull  public   Builder   setServiceId ( String   serviceId )   {  this . serviceId   =   serviceId ;  return  this ;  }
public   static   boolean   getNeedToStoreResults ( int   widgetId )   {  return  theStorage   !=   null   &&   ( widgetId   ==   0   ||   widgetId   ==   widgetIdResultsToStore ) ;  }
public   static   int   getWidgetHeaderBackgroundColor ( Context   context )   {  return  getInt ( context ,  PREF_WIDGET_HEADER_BACKGROUND_COLOR , PREF_WIDGET_HEADER_BACKGROUND_COLOR_DEFAULT ) ;  }
public   static   void   setLocale ( ContextWrapper   contextWrapper )   {  setLocale ( contextWrapper ,  ApplicationPreferences . getString ( contextWrapper ,  KEY_CUSTOM_LOCALE ,  CUSTOM_LOCALE_DEFAULT ) ) ;  }
 <argument pos:start=""""""""278:84"""""""" pos:end=""""""""278:89""""""""><expr pos:start=""""""""278:84"""""""" pos:end=""""""""278:89""""""""><name pos:start=""""""""278:84"""""""" pos:end=""""""""278:89"""""""">hasuse</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start=""""""""278:93"""""""" pos:end=""""""""282:25"""""""">{<block_content pos:start=""""""""279:29"""""""" pos:end=""""""""281:35"""""""">
private   int   getSizeBytes ( ByteBuffer   mes )   {  if  ( mes . remaining ()   <=   125 )   {  return  1 ;  }   else if  ( mes . remaining ()   <=   65535 )   {  return  2 ;  }  return  8 ;  }
@ AfterTest  public   void   tearDown ()   throws  IOException   {  FileUtils . deleteDirectory ( new   File ( """"test"""" ) ) ;  }
public   BooleanIndexer   putRaw ( long   i ,  boolean   b )   {  RAW . putBoolean ( base   +   checkIndex ( i ,  size )   *   VALUE_BYTES ,  b ) ;  return  this ;  }
public   ApplicationPatchModel   name ( String   name )   {  this . name   =   name ;  return  this ;  }
private   boolean   readChar ( char   ch )   {  if  ( current   !=   ch )   {  return  false ;  }  read () ;  return  true ;  }
@ Override  public   IObjectWrapper   createForAccount ( IObjectWrapper   context ,  int   size ,  int   annotation ,  String   url ,  String   account )   throws  RemoteException   {  Context   ctx   =  ( Context )   ObjectWrapper . unwrap ( context ) ;  return  ObjectWrapper . wrap ( new   PlusOneButtonImpl ( ctx ,  size ,  annotation ,  url ,  account ) ) ;  }
public   APIResourceListItem   id ( String   id )   {  this . id   =   id ;  return  this ;  }
public   static   AbstractBinning < ? >   constructBinningFromStr ( ModelConfig   modelConfig ,  ColumnConfig   columnConfig , String   objValStr )   {  AbstractBinning < ? >   binning ;  if ( columnConfig . isCategorical () )   {  binning   =   new   CategoricalBinning () ;  }   else  {  if ( modelConfig . getBinningMethod () . equals ( BinningMethod . EqualInterval ) )   {  binning   =   new   EqualIntervalBinning () ;  }   else  {  binning   =   new   EqualPopulationBinning () ;  }  }  binning . stringToObj ( objValStr ) ;  return  binning ;  }
private   Optional < JsonObject >   getJsonObject ( final   PsiElement   psiElement )   {  final   List < PsiElement >   children   = Optional . of ( psiElement )  . map ( PsiElement :: getChildren )  . map ( Arrays :: asList )  . orElse ( new   ArrayList <> () ) ;  return  children . stream ()  . filter ( child  ->   child   instanceof   JsonObject )  . map ( JsonObject . class :: cast )  . findFirst () ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Send token post request with used code"""" , dependsOnMethods   =   """"testTokenRequest"""" )  public   void   testExpiredDeviceTokenRequest ()   throws  Exception   {  
public   void   setKnows ( List < Knows >   knows )   {  this . knows . clear () ;  this . knows . addAll ( knows ) ;  }
@ Override  public   boolean   shouldRequestData ( BlockAccessor   accessor )   {  BlockEntity   blockEntity   =  accessor . getBlockEntity () ;  if  ( blockEntity   ==   null )   {  return  false ;  }  return  blockEntity   instanceof   Nameable   ||   blockEntity . components () . has ( DataComponents . ITEM_NAME ) ;  }
private   static   void   migratePublicMarkerVersion1To2 ( Bucket   bucket )   {  try  {  File   legacyPublicMarker   =  new   File ( bucket . getFolder () ,  """"__ninja_public"""" ) ;  if  ( legacyPublicMarker . exists ()   &&   ! bucket . getPublicMarker () . exists () )   {  Files . move ( legacyPublicMarker . toPath () ,  bucket . getPublicMarker () . toPath () ) ;  }   else if  ( legacyPublicMarker . exists () )   {  Files . delete ( legacyPublicMarker . toPath () ) ;  }  }   catch  ( IOException   e )   {  throw  Exceptions . handle ( Storage . LOG ,  e ) ;  }  }
@ Test  public   void   testEmptyConfigIfNotAndroid ()   {  AndroidAuthenticationConfig   config   =  provider . provide () ;  Assert . assertEquals ( AndroidAuthenticationConfig . EMPTY ,  config ) ;  }
private   ClaimMappings   getClaimMapping ( String   claimUri )   {  ClaimMappings   claim   =  new   ClaimMappings () . applicationClaim ( claimUri ) ;  claim . setLocalClaim ( new   org . wso2 . identity . integration . test . rest . api . server . application . management . v1 . model . Claim () . uri ( claimUri ) ) ;  return  claim ;  }
public   Set < Short >   getLeftOrRightCategories ()   {  return  leftOrRightCategories ;  }
public   synchronized   Console   print ( Object   data ) {  logger . info ( data . toString () ) ;  return  this ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   testClear ()   throws  Exception   {  deleteUser () ;  deleteApplication () ;  applicationManagementServiceClient   =   null ;  ssoConfigServiceClient   =   null ;  identityProviderMgtServiceClient   =   null ;  remoteUSMServiceClient   =   null ;  httpClient   =   null ;  }
public   SAMLMetaData   keyEncryptionAlgorithm ( MetadataProperty   keyEncryptionAlgorithm )   {  this . keyEncryptionAlgorithm   =   keyEncryptionAlgorithm ;  return  this ;  }
public   void   isVerifyAppsEnabled ( ISafetyNetCallbacks   callbacks )   throws  RemoteException   {  getServiceInterface () . isVerifyAppsEnabled ( callbacks ) ;  }
public   Builder   setUrl ( String   url )   {  this . url   =   url ;  return  this ;  }
public   void   deleteFedIdpAccountAssociation ( String   idpName , String   idpAssociatedId )   throws  Exception {  userProfileMgtServiceStub . removeAssociateID ( idpName ,  idpAssociatedId ) ;  }
@ Test  void   shouldSelectLastBuild ()   {  Mockito . when ( mockProject . getLastBuild () ) . thenReturn ( mockRun ) ;  Run   actualRun   =  extension . select ( mockProject ,  """"last"""" ,  null ) ;  assertThat ( actualRun ,  is ( mockRun ) ) ;  }
@ Test  public   void   curie_canBeDefinedInAnyOrder ()   {  assertThat ( util . getCurie ( """"http:
public   static   boolean   changeUsualCountry ( Random   random ,  long   date )   {  double   diffIpForTravelersProb   =  random . nextDouble () ;  boolean   isTravelSeason   =  DateUtils . isTravelSeason ( date ) ;  return  ( isTravelSeason   &&   diffIpForTravelersProb   <   probDiffIPinTravelSeason )   ||  ( ! isTravelSeason   &&   diffIpForTravelersProb   <   probDiffIPnotTravelSeason ) ;  }
@ Override  public   void   appendTooltip ( ITooltip   tooltip ,  EntityAccessor   accessor ,  IPluginConfig   config )   {  ItemFrame   itemFrame   =  ( ItemFrame )   accessor . getEntity () ;  ItemStack   stack   =  itemFrame . getItem () ;  if  ( ! stack . isEmpty () )   {  tooltip . add ( IDisplayHelper . get () . stripColor ( stack . getHoverName () ) ) ;  }  }
private   Optional < PsiElement >   getPsiElement ( final   String   jsonPointer ,  final   PsiFile   file )   {  Optional < PsiElement >   psiElement   = Optional . ofNullable ( jsonPointer )  . map ( pointer  ->  pointer  
@ ApiModelProperty ( example   =   """"This is the configuration for Pickup application."""" ,  value   =   """""""" )  @ JsonProperty ( """"description"""" )  @ Valid  public   String   getDescription ()   {  return  description ;  }
public   static   List < Field >   contact ()   {  return  ImmutableList . of ( new   StringField ( """"name"""" ) ,  new   StringField ( """"url"""" ) ,  new   StringField ( """"email"""" ) ) ;  }
public   void   setWoeWgtMean ( double   woeWgtMean )   {  this . woeWgtMean   =   woeWgtMean ;  }
public   void   setCompassHeading ( Double   compassHeading )   {  this . compassHeading   =   compassHeading ;  }
private   ByteBuffer   enlargeBuffer ( ByteBuffer   buffer ,  int   sessionProposedCapacity )   {  if  ( sessionProposedCapacity   >   buffer . capacity () )   {  buffer   =   ByteBuffer . allocate ( sessionProposedCapacity ) ;  }   else  {  buffer   =   ByteBuffer . allocate ( buffer . capacity ()   *   2 ) ;  }  return  buffer ;  }
@ Override  public   EurekaHttpClient   newClient ( EurekaEndpoint   serviceUrl )   {  return  new   RestTemplateEurekaHttpClient ( restTemplate ( serviceUrl . getServiceUrl () ) , stripUserInfo ( serviceUrl . getServiceUrl () ) ) ;  }
public   static   DescriptorImpl   fetchDescriptor ()   {  return  Jenkins . get () . getDescriptorByType ( DescriptorImpl . class ) ;  }
@ Override  public   String   toString ()   {  return  new   StringBuilder ( """"EurekaInstanceRegisteredEvent{"""" ) . append ( """"instanceInfo="""" )  . append ( instanceInfo )  . append ( """", """" )  . append ( """"leaseDuration="""" )  . append ( leaseDuration )  . append ( """", """" )  . append ( """"replication="""" )  . append ( replication )  . append ( """"}"""" )  . toString () ;  }
@ Override  public   void   onUpgrade ( SQLiteDatabase   db ,  int   oldVersion ,  int   newVersion )   {  switch  ( oldVersion )   {  
public   String   getTestSuiteFileExtension ()   {  return  testSuiteFileExtension ;  }
private   void   setUpAudioMetadata ()   {  if  ( ! isAudioServiceAvailable () )   {  return;  }  if  ( audioService . getAudioMetadataFormatter ()   !=   null )   {  setUpAudioMetadata ( audioService . getAudioMetadataFormatter () ) ;  }  }
@ Nullable  @ Override  public   String   valueOf ( Resource   sonarResource )   {  return  sonarResource . getKey () ;  }
@ Override  public   void   close ()   throws  IOException   {  write ( REST_CODE ) ;  flush () ;  super . close () ;  }
 <argument pos:start=""""""""1068:64"""""""" pos:end=""""""""1068:64""""""""><expr pos:start=""""""""1068:64"""""""" pos:end=""""""""1068:64""""""""><literal type=""""""""number"""""""" pos:start=""""""""1068:64"""""""" pos:end=""""""""1068:64"""""""">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   double []   undistort ( double   ...   x )   {  double []   xn   =  normalize ( x ,  cameraMatrix ) ;  double []   xu   =  undistort ( xn ,  distortionCoeffs . get () ) ;  return  unnormalize ( xu ,  cameraMatrix ) ;  }
public   String   getVarSelsPath ( SourceType   sourceType )   {  return  getPathBySourceType ( new   Path ( Constants . VarSels ) ,  sourceType ) ;  }
protected   void   refreshTable ()   {  schemaTable . removeAll () ;  String   schemaString   =  store . getString ( SchemaAssociationsPreferenceInitializer . SCHEMA_ASSOCIATIONS_PREFERENCE ) ;  insertTableItems ( schemaString ) ;  }
private   LiTag   li_missingSecurityRequirement ( SecurityRequirement   securityRequirement )   {  return  li () . withText ( """"Deleted security requirement : """" )  . with ( span ( null   ==   securityRequirement . toString ()  ?   """"""""   :  ( securityRequirement . toString () ) ) ) ;  }
@ DisplayName ( """"SERIAL :: Verify Serial Instance"""" )  @ Order ( 1 )  @ Test  public   void   testSerialInstance ()   {  
@ Override  @ SuppressWarnings ( """"unchecked"""" )  public   < F   extends  Comparable < ?   super  F > >   Chain < F >   sortWith ( final   Comparator < F >   comparator )   {  return  new   Chain <> ( Underscore . sortWith ( ( List < F > )   value () ,  comparator ) ) ;  }
public   Ratio   aggregate ( Ratio   a ,  Ratio   b )   {  return  Ratio . create ( a . numerator   +   b . numerator ,  a . denominator   +   b . denominator ) ;  }
public   IndependentNNModel   getIndependentNNModel ()   {  return  independentNNModel ;  }
public   String   lowerFirst ()   {  return  lowerFirst ( getString () . get () ) ;  }
public   void   testListParentsBuiltin ()   throws  Exception   {  ArrayList <  String >   list   =  new   ArrayList <  String > () ;  new   Contents () . listParents ( list ,  new   File ( """"/bin/one/two/three/four"""" ) ) ;  assertEquals (  3 ,  list . size () ) ;  assertEquals (  """"/bin/one/two/three"""" ,  list . get (  0 ) ) ;  assertEquals (  """"/bin/one/two"""" ,  list . get (  1 ) ) ;  assertEquals (  """"/bin/one"""" ,  list . get (  2 ) ) ;  }
default   boolean   childOfComponent ( PsiElement   psiElement )   {  return  false ;  }
@ Test  public   void   classPath_customFiles_urlClassLoader ()   throws  Exception   {  File   lib   =  compileTestLib () ;  Compilation   compilation   = javac ()  . withClasspathFrom ( new   URLClassLoader ( new   URL []   { lib . toURI () . toURL () } ) )  . withOptions ( """"-verbose"""" )  . compile ( JavaFileObjects . forSourceLines ( """"Test"""" ,  """"class Test {"""" ,  """"  Lib lib;"""" ,  """"}"""" ) ) ;  assertThat ( compilation ) . succeeded () ;  }
@ Test  public   void   uriFragmentPercentHandling ()   {  assertSame ( document . get ( """"c%d"""" ) ,  query ( """"#/c%25d"""" ) ) ;  assertSame ( document . get ( """"e^f"""" ) ,  query ( """"#/e%5Ef"""" ) ) ;  assertSame ( document . get ( """"g|h"""" ) ,  query ( """"#/g%7Ch"""" ) ) ;  assertSame ( document . get ( """"m~n"""" ) ,  query ( """"#/m~0n"""" ) ) ;  }
 <argument pos:start=""""""""478:58"""""""" pos:end=""""""""478:61""""""""><expr pos:start=""""""""478:58"""""""" pos:end=""""""""478:61""""""""><name pos:start=""""""""478:58"""""""" pos:end=""""""""478:61"""""""">lowY</name></expr></argument>
@ Override   public   long   get ( long ...   indices )   {  return  getRaw ( index ( indices ) )   &   0xFFFFFFFFL ;  }
private   List < Double >   readDoubleList ( DataInput   in )   throws  IOException   {  int   size   =  in . readInt () ;  List < Double >   list   =  new   ArrayList < Double > () ;  for ( int   i   =  0 ;   i   <   size ;   i ++ )   {  list . add ( in . readDouble () ) ;  }  return  list ;  }
@ Override  public   boolean   isClassAcceptable ( Class < ? >   clazz )   {  return  first . isClassAcceptable ( clazz )   ||   second . isClassAcceptable ( clazz ) ;  }
public   EmailTemplateType   templates ( List < EmailTemplateWithID >   templates )   {  this . templates   =   templates ;  return  this ;  }
@ Override  public   void   makeTaskRecurring ( IRemindersCallbacks   callbacks ,  TaskEntity   task )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: makeTaskRecurring"""" ) ;  }
@ Override  public   void   getAccountState ( IRemindersCallbacks   callbacks )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: getAccountState"""" ) ;  }
@ Override   public   UByteIndexer   get ( long   i ,  int []   b ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  b [ offset   +   n ]   =   array [ ( int ) index ( i )   +   n ]   &   0xFF ;  }  return  this ;  }
@ Override  public   void   addData ( String   val )   {  String   fval   =  StringUtils . trimToEmpty ( val ) ;  if ( ! isMissingVal ( fval ) )   {  double   dval   =  0 ;  try  {  dval   =   Double . parseDouble ( fval ) ;  }   catch  ( NumberFormatException   e )   {  
@ ReactMethod  public   void   getBackgroundTag ( Callback   callback )   {  callback . invoke ( null ,  bgTag ) ;  }
@ Test  public   void   testSetNullColor ()   {  EmbeddableBadgeConfig   config   =  new   EmbeddableBadgeConfig ( """"test-null-color"""" ) ;  config . setColor ( null ) ;  assertThat ( config . getColor () ,  is ( nullValue () ) ) ;  }
public   static   void   main ( String []   args )  {  System . out . println ( """"STARTING...\n"""" ) ;  demo () ;  System . out . println ( """"ALL DONE"""" ) ;  }
@ Override  public   void   onSessionResumeFailed ( CastSession   session ,  int   error )   {  onApplicationDisconnected () ;  }
private   void   addDependency ( ObjectSchema . Builder   builder ,  String   ifPresent ,  JsonValue   deps )   {  deps . canBeSchema ( obj  ->   builder . schemaDependency ( ifPresent ,  defaultLoader . loadChild ( obj ) . build () ) )  . or ( JsonArray . class ,  arr  ->   arr . forEach ( ( i ,  entry )  ->   builder . propertyDependency ( ifPresent ,  entry . requireString () ) ) )  . requireAny () ;  }
public   void   setListKeys ( boolean   listKeys )   {  this . listKeys   =   listKeys ;  }
public   static   < T >   Result < T >   runCatching ( Supplier < T >   block )   {  try  {  return  Result . success ( block . get () ) ;  }   catch  ( Throwable   e )   {  return  Result . failure ( e ) ;  }  }
private   void   setUpAppsContent ( Bundle   state )   {  if  ( isAppsStateValid ( state ) )   {  setUpAppsState ( state ) ;  }   else  {  setUpAppsContent () ;  }  }
@ DataBoundSetter  public   void   setHttpProxy ( String   httpProxy )   {  this . httpProxy   =   httpProxy ;  }
protected   String   handleSchemaReference ( final   PsiElement   targetElement ,  final   PsiElement   originalElement )   {  final   Optional < String >   type   =  getType ( targetElement ,  originalElement ) ;  final   Optional < String >   title   =  getUnquotedFieldValue ( targetElement ,  """"title"""" ) ;  final   Optional < String >   description   =  getUnquotedFieldValue ( targetElement ,  """"description"""" ) ;  return  toHtml ( Stream . of ( type ,  title ,  description ) ) ;  }
private   synchronized   void   resetConditionViews ()   {  conditionContainer . removeAllViews () ;  for  ( Condition   condition   :  conditions )   {  if  ( condition . isEvaluated () )   {  if  ( condition . isActive ( this ) )   {  addConditionToView ( condition ) ;  }  }   else  {  evaluateConditionAsync ( condition ) ;  }  }  }
@ Subscribe  public   void   onSharesLoaded ( ServerSharesLoadedEvent   event )   {  List < ServerShare >   serverShareList   =  event . getServerShares () ;  this . serverShareList   =   serverShareList ;  for  ( int   i   =  0 ;   i   <   serverShareList . size () ;   i ++ )   {  serverClient . getFiles ( serverShareList . get ( i ) ) ;  }  }
@ Bean  @ ConditionalOnMissingBean  public   EurekaDiscoveryClient   discoveryClient ( EurekaClient   client ,  EurekaClientConfig   clientConfig )   {  return  new   EurekaDiscoveryClient ( client ,  clientConfig ) ;  }
public   Optional < ServiceMetadata >   getServiceMetadata ()   {  return  serviceMetadata ;  }
private   void   applyTimezone ( String   timeZoneStr ,  CronScheduleBuilder   scheduleBuilder )   {  if  ( StringUtils . isNotBlank ( timeZoneStr ) )   {  TimeZone   timeZone   =  TimeZone . getTimeZone ( ZoneId . of ( timeZoneStr ) ) ;  scheduleBuilder . inTimeZone ( timeZone ) ;  }  }
public   static   void   setColorFilter ( RemoteViews   rv ,  int   viewId ,  int   color )   {  rv . setInt ( viewId ,  METHOD_SET_COLOR_FILTER ,  color ) ;  }
@ Override  public   final   void   validate ( final   Processor < FullData ,  FullData >   processor , final   ProcessingReport   report ,  final   MessageBundle   bundle , final   FullData   data )  throws  ProcessingException  {  final   JsonNode   instance   =  data . getInstance () . getNode () ;  if  ( valueIsLong ( instance )   &&   isLong )  validateLong ( report ,  bundle ,  data ) ;  else  validateDecimal ( report ,  bundle ,  data ) ;  }
@ Provides  private   Engine   provideEngine ( Resampler   resampler , WavtoolConverter   wavtoolConverter , StatusBar   statusBar , CacheManager   cacheManager , PreferencesManager   preferencesManager )   {  
static   String   format ( String   template ,  Object ...   args )   {  template   =   String . valueOf ( template ) ;   
@ Override  public   String   toString ()   {  return  String . format ( """"%s \""""%s\"""""""" ,  shortName ,  name ) ;  }
@ NonNull  private   static   Jenkins   getJenkins ()   {  Jenkins   jenkins   =  Jenkins . getInstanceOrNull () ;  if  ( jenkins   ==   null )   {  throw  new   IllegalStateException ( """"Jenkins is null"""" ) ;  }  return  jenkins ;  }
public   void   setClipBlock ( BlockBox   clipblock )  {  this . clipblock   =   clipblock ;  }
@ Test  void   setsNsAttr ()   throws  Exception   {  final   Document   dom   =  DocumentBuilderFactory . newInstance ()  . newDocumentBuilder () . newDocument () ;  final   Element   root   =  dom . createElement ( """"f"""" ) ;  dom . appendChild ( root ) ;  final   String   name   =  """"somens"""" ;  new   NsDirective ( new   Arg ( name ) ) . exec ( dom ,  new   DomCursor ( Collections . singletonList ( root ) ) , new   DomStack () ) ;  MatcherAssert . assertThat ( """"fails to set namespace attribute"""" , new   XMLDocument ( dom ) . toString () , XhtmlMatchers . hasXPath ( """"/ns1:f"""" ,  name ) ) ;  }
public   < V   extends  Changed >   DeferredChanged < V >   buildIsChanged ( V   changed )   {  return  build () . flatMap ( values  ->   ( DeferredChanged < V > )   DeferredChanged . of ( isChanged ( changed ) ) ) ;  }
private   static   void   deleteNodeAndFollowingSiblings (  Node   node )   {  if  (  node   ==   null )   return;  Node   parent   =  node . getParentNode () ;  while  (  true )   {  Node   sib   =  node . getNextSibling () ;  if  (  sib   ==   null )   break;  parent . removeChild (  sib ) ;  }  parent . removeChild (  node ) ;  }
@ Override  public   List < Framedata >   createFrames ( String   text ,  boolean   mask )   {  TextFrame   curframe   =  new   TextFrame () ;  curframe . setPayload ( ByteBuffer . wrap ( Charsetfunctions . utf8Bytes ( text ) ) ) ;  curframe . setTransferemasked ( mask ) ;  try  {  curframe . isValid () ;  }   catch  ( InvalidDataException   e )   {  throw  new   NotSendableException ( e ) ;  }  return  Collections . singletonList ( ( Framedata )   curframe ) ;  }
private   boolean   isBom ( String   artifactId )   {  return  artifactId . endsWith ( """"-dependencies"""" )   ||   artifactId . endsWith ( """"-bom"""" ) ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Send authorize user request"""" , dependsOnMethods   =   """"testSlowDownDeviceTokenRequest"""" )  public   void   testSendDeviceAuthorozedPost ()   throws  Exception   {  List < NameValuePair >   urlParameters   =  new   ArrayList <> () ;  urlParameters . add ( new   BasicNameValuePair ( USER_CODE ,  userCode ) ) ;  String   response   =  responsePost ( urlParameters ,  deviceAuthPageEndpoint ) ;  Assert . assertNotNull ( response ,  """"Authorized response is null"""" ) ;  }
@ Override  public   void   load ()   {  super . load () ;  initThrottledPipelines () ;  LOGGER . log ( Level . FINE ,  """"load: {0}"""" ,  throttledPipelinesByCategory ) ;  }
@ Deprecated  public   static   LocationRequest   create ()   {  return  new   LocationRequest () ;  }
private   < E >   Consumer < E >   onPassConsumer ()   {  return  ( Consumer < E > )   onPass ;  }
private   String   getAutoUploadTitle ( boolean   isUploadEnabled )   {  return  isUploadEnabled  ?   getString ( R . string . enable )   :  getString ( R . string . disable ) ;  }
@ Test  public   void   suiteFilesCountTest ()   throws  Exception   {  assertThat ( listTestSuiteFiles ( resultsDir . toFile () ) . size () ,  is ( 1 ) ) ;  }
@ Test  public   void   findingClosestByDecreaseNoWrap ()   {  assertEquals (  - 4 ,  Utils . getShortestScrollOption ( 5 ,  1 ,  9 ,  true ) ) ;  }
private   void   showIntroductoryOverlay ()   {  if  ( mIntroductoryOverlay   !=   null )   {  mIntroductoryOverlay . remove () ;  }  if  ( ( mediaRouteMenuItem   !=   null )   &&   mediaRouteMenuItem . isVisible () )   {  new   Handler () . post ( ()  ->  {  mIntroductoryOverlay   =   new   IntroductoryOverlay  . Builder ( getActivity () ,  mediaRouteMenuItem )  . setTitleText ( R . string . introducing_cast )  . setSingleTime ()  . setOnOverlayDismissedListener ( ()  ->   mIntroductoryOverlay   =   null )  . build () ;  mIntroductoryOverlay . show () ;  } ) ;  }  }
private   void   playPause ()   {  PlaybackControlsRow . PlayPauseAction   pauseAction   =  ( ( TvPlaybackVideoFragment )   fragment ) . getmPlayPauseAction () ;  ( ( TvPlaybackVideoFragment )   fragment ) . togglePlayPause ( pauseAction . getIndex ()   ==   PlaybackControlsRow . PlayPauseAction . PAUSE ) ;  }
@ Test  public   void   testAgentLifecycle ( TestUtils . JenkinsRule   j )   throws  Exception   {  MesosCloud   cloud   = new   MesosCloud ( mesosCluster . getMesosUrl () . toString () , """"MesosTest"""" , null , """"*"""" , System . getProperty ( """"user.name"""" ) , j . getURL () . toString () , Collections . emptyList () ) ;  final   String   name   =  """"jenkins-lifecycle"""" ;  final   MesosAgentSpecTemplate   spec   =  AgentSpecMother . simple ;  MesosJenkinsAgent   agent   =  ( MesosJenkinsAgent )   cloud . startAgent ( name ,  spec ) . get () ;  agent . waitUntilOnlineAsync ( materializer ) . get () ;  
public   static   void   tryLoad ()   throws  FrameGrabber . Exception   {  if  ( loadingException   !=   null )   {  loadingException . printStackTrace () ;  throw  loadingException ;  }   else  {  try  {  Loader . load ( org . bytedeco . flycapture . global . FlyCapture2 . class ) ;  }   catch  ( Throwable   t )   {  throw  loadingException   =   new   FrameGrabber . Exception ( """"Failed to load """"   +   FlyCapture2FrameGrabber . class ,  t ) ;  }  }  }
@ Override   public   Bfloat16Indexer   get ( long []   indices ,  float []   h ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  h [ offset   +   n ]   =   toFloat ( buffer . get ( ( int ) index ( indices )   +   n ) ) ;  }  return  this ;  }
@ NonNull  public   static   PendingIntent   getPermittedPendingActivityIntent ( InstanceSettings   settings ,  Intent   intent )   {  Intent   intentPermitted   =  getPermittedActivityIntent ( settings . getContext () ,  intent ) ;  return  PendingIntent . getActivity ( settings . getContext () ,  settings . getWidgetId () ,  intentPermitted ,  PendingIntent  . FLAG_UPDATE_CURRENT ) ;  }
@ Override  public   void   remove ()   {  throw  new   UnsupportedOperationException ( """"Cannot remove elements from a DataBufferIterator"""" ) ;  }
public   static   Baud   getInstance ( int   baud_rate ) {  for ( Baud   b   :  Baud . values () ) {  if ( b . getValue ()   ==   baud_rate ) {  return  b ;  }  }  return  null ;  }
@ Override  public   PLATFORM   shutdown ( Context   context )   throws  ShutdownException   {  return  ( PLATFORM ) this ;  }
@ ApiModelProperty ( example   =   """"samlsso"""" )  @ JsonProperty ( """"type"""" )  @ Valid  public   String   getType ()   {  return  type ;  }
public   ToStringHelper   field ( String   name ,  Object []   val )   {  return  field ( name ,  val ,  false ) ;  }
public   void   onPointerFlagsChanged ( boolean   shouldVibrate )  {  updateFlags () ;  invalidate () ;  if  ( shouldVibrate )  vibrate () ;  }
@ Test  void   values ()   {  Collection < Integer >   result   = Underscore . values ( new   LinkedHashMap < String ,  Integer > ()   { {  put ( """"one"""" ,  1 ) ;  put ( """"two"""" ,  2 ) ;  put ( """"three"""" ,  3 ) ;  } } ) ;  assertEquals ( """"[1, 2, 3]"""" ,  result . toString () ) ;  }
@ Override  public   float   modifyProjectileDamage ( float   damage )  {  return  damage   *   0.75F ;  }
public   void   disableColorStream ()   {  if  ( colorEnabled )   {  device . disable_stream ( RealSense . color ) ;  colorEnabled   =   false ;  }  }
public   boolean   nullsAreSortedHigh ()   throws  SQLException   {  return  false ;  }
public   CastOptions   build ()   {  return  new   CastOptions ( castDevice ,  castListener ,  verboseLoggingEnabled ) ;  }
@ Test  public   void   testFilterApplicationsWithInvalidFilterQuery ()   {  Map < String ,  Object >   params   =  new   HashMap < String ,  Object > ()   { {  put ( """"filter"""" ,  """"nameeq APP_1 """" ) ;  } } ;  Response   response   =  getResponseOfGet ( USER_APPLICATION_ENDPOINT_URI ,  params ) ;  validateErrorResponse ( response ,  HttpStatus . SC_BAD_REQUEST ,  """"APP-10004"""" ) ;  }
public   static   void   installIfNeeded ( final   Context   context )   {  if  ( context   ==   null )   {  throw  new   NullPointerException ( """"Context must not be null"""" ) ;  }  if  ( called )  return;  called   =   true ;  try  {  
public   FormValidation   doCheckRedB ( @ QueryParameter   String   value )   {  return  validateColorLiteral ( value ) ;  }
public   static   ChangedOpenApi   fromSpecifications ( OpenAPI   oldSpec ,  OpenAPI   newSpec ,  OpenApiDiffOptions   options )   {  return  OpenApiDiff . compare ( notNull ( oldSpec ,  """"old"""" ) ,  notNull ( newSpec ,  """"new"""" ) ,  options ) ;  }
@ Test ( dependsOnMethods   =   { """"testGetAuthorizedAppById"""" } ,  description   =   """"Delete all authorized apps"""" )  public   void   testDeleteAuthorizedApps ()   throws  Exception   {  getResponseOfDelete ( this . userAuthorizedAppsEndpointUri )  . then ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT )  . log () . ifValidationFails () ;  }
@ Test  public   void   testDeleteAuthorizedApps ()   throws  Exception   {  getResponseOfDelete ( this . userAuthorizedAppsEndpointUri )  . then ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT )  . log () . ifValidationFails () ;  }
public   HashMap < Character ,  TrieNode >   getChildren ()   {  return  children ;  }
private   rs2_sensor []   getSensors ( rs2_device   device )   throws  Exception   {  rs2_sensor_list   sensorList   =  rs2_query_sensors ( device ,  error ) ;  checkError ( error ) ;  int   sensorCount   =  rs2_get_sensors_count ( sensorList ,  error ) ;  checkError ( error ) ;  rs2_sensor []   sensors   =  new   rs2_sensor [ sensorCount ] ;  for  ( int   i   =  0 ;   i   <   sensorCount ;   i ++ )   {  rs2_sensor   sensor   =  rs2_create_sensor ( sensorList ,  i ,  error ) ;  checkError ( error ) ;  sensors [ i ]   =   sensor ;  }  rs2_delete_sensor_list ( sensorList ) ;  return  sensors ;  }
public   HashMap < String ,  Integer >   getCharacterLevels ()   {  return  characterLevels ;  }
  <argument pos:start=""""""""309:27"""""""" pos:end=""""""""309:28""""""""><expr pos:start=""""""""309:27"""""""" pos:end=""""""""309:28""""""""><name pos:start=""""""""309:27"""""""" pos:end=""""""""309:28"""""""">H2</name></expr></argument>
@ Test  public   void   testWithCustomDefaultDateFormat ()   throws  Exception  {  UriTemplate   template   =  UriTemplate . fromTemplate ( TEMPLATE )  . withDefaultDateFormat ( """"yyyy-MM-dd"""" )  . set ( """"date"""" , date ) ;  assertEquals ( """"/2012/2012-04-20"""" ,  template . expand () ) ;  }
public   static   CharIndexer   create ( CharBuffer   buffer ,  long ...   sizes )   {  return  new   CharBufferIndexer ( buffer ,  sizes ) ;  }
public   void   setSubject ( SubjectConfig   subject )   {  this . subject   =   subject ;  }
public   synchronized   static   Method   loadFabMethod ( ClassLoader   classLoader )   throws  Exception   {  return  UnobfuscatorCache . getInstance () . getMethod ( classLoader ,  ()  ->  {  ClassData   classData   =  dexkit . getClassData ( """"com.whatsapp.conversationslist.ConversationsFragment"""" ) ;  var   result   =  classData . findMethod ( FindMethod . create () . matcher ( MethodMatcher . create () . paramCount ( 0 ) . usingNumbers ( 200 ) . returnType ( int . class ) ) ) ;  if  ( result . isEmpty () )   throw  new   Exception ( """"Fab method not found"""" ) ;  return  result . get ( 0 ) . getMethodInstance ( classLoader ) ;  } ) ;  }
private   List < SparseInput >   getEmbedInputs ( Map < String ,  Object >   dataMap )   {  List < SparseInput >   embedInputs   =  new   ArrayList <> () ;  Object   value ;  for ( Integer   columnId   :  this . wnd . getEmbedColumnIds () )   {  value   =   getValueByColumnId ( columnId ,  dataMap ) ;  if ( value   !=   null )   {  embedInputs . add ( new   SparseInput ( columnId ,  getValueIndex ( columnId ,  value . toString () ) ) ) ;  }   else  {  
@ Test  public   void   test ()   {  Schema   schema   =  SchemaLoader . load ( readObject ( """"schema.json"""" ) ) ;  Object   subject   =  readObject ( """"subject.json"""" ) ;  try  {  schema . validate ( subject ) ;  Assertions . fail ( """"did not throw exception"""" ) ;  }   catch  ( ValidationException   e )   {  Assertions . assertEquals ( """"#/notification/target/apps/0/id"""" ,  e . getPointerToViolation () ) ;  }  }
private   void   bindFileMetadataView ( ServerFile   file ,  ServerFileMetadata   fileMetadata ,  ServerFileMetadataViewHolder   holder )   {  holder . fileTitle . setText ( null ) ;  holder . fileTitle . setBackgroundResource ( android . R . color . transparent ) ;  Glide . with ( holder . itemView . getContext () )  . load ( fileMetadata . getArtworkUrl () )  . diskCacheStrategy ( DiskCacheStrategy . ALL )  . centerCrop ()  . fitCenter ()  . placeholder ( Mimes . getFileIcon ( file ) )  . error ( Mimes . getFileIcon ( file ) )  . into ( holder . fileIcon ) ;  }
@ Override  public   void   onPutDataResponse ( PutDataResponse   response )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: onPutDataResponse"""" ) ;  }
@ Override  public   void   cancelPendingActions ( CancelPendingActionsRequest   request ,  IDriveServiceCallbacks   callbacks )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: cancelPendingActions"""" ) ;  }
protected   Response   getResponseOfGet ( String   endpointUri ,  String   contentType )   {  return  given () . auth () . preemptive () . basic ( authenticatingUserName ,  authenticatingCredential )  . config ( RestAssured . config () . encoderConfig ( encoderconfig  . appendDefaultContentCharsetToContentTypeIfUndefined ( false ) ) )  . contentType ( contentType )  . header ( HttpHeaders . ACCEPT ,  contentType )  . log () . ifValidationFails ( LogDetail . ALL )  . filter ( validationFilter )  . when ()  . get ( endpointUri ) ;  }
public   boolean   checkBusybox ( String   busyboxPath )  {  int   ret   =  commandHandler . runCmd ( """"sh"""" ,  busyboxPath , line  ->  { } ,  line  ->   writeErrorLog ( """"busybox"""" ,  line ) , e  ->   Log . e ( TAG ,  """"checkBusybox: """" ,  e ) ,  this ) ;  return  ret   ==   0 ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"clientAuthentication"""" )  @ Valid  public   ClientAuthenticationConfiguration   getClientAuthentication ()   {  return  clientAuthentication ;  }
public   static   int   transferByteBuffer ( ByteBuffer   source ,  ByteBuffer   dest )   {  if  ( source   ==   null   ||   dest   ==   null )   {  throw  new   IllegalArgumentException () ;  }  int   fremain   =  source . remaining () ;  int   toremain   =  dest . remaining () ;  if  ( fremain   >   toremain )   {  int   limit   =  Math . min ( fremain ,  toremain ) ;  source . limit ( limit ) ;  dest . put ( source ) ;  return  limit ;  }   else  {  dest . put ( source ) ;  return  fremain ;  }  }
@ SuppressWarnings ( """"unchecked"""" )  @ Test  public   void   closeup ()   throws  IOException  {  ctl   =   EasyMock . createControl () ;  CoverageResult   result   =  new   CoverageResultBuilder (  ctl  ) 
public   int   getCommandQueueBufferSize ()   {  return  this . commandQueueBufferSize ;  }
private   String   convert ( String   str )   {  char []   ch   =  str . toCharArray () ;  for  ( int   i   =  0 ;   i   <   str . length () ;   i ++ )   {  if  ( i   ==   0   &&   ch [ i ]   !=   ' '   ||   ch [ i ]   !=   ' '   &&   ch [ i   -   1 ]   ==   ' ' )   {  if  ( ch [ i ]   >=   'a'   &&   ch [ i ]   <=   'z' )   {  ch [ i ]   =   ( char )   ( ch [ i ]   -   'a'   +   'A' ) ;  }  }   else if  ( ch [ i ]   >=   'A'   &&   ch [ i ]   <=   'Z' )   {  ch [ i ]   =   ( char )   ( ch [ i ]   +   'a'   -   'A' ) ;  }  }  return  new   String ( ch ) ;  }
@ Test  public   void   responseExplodeChanged ()   {  BackwardIncompatibleProp   prop   =  RESPONSE_HEADER_EXPLODE_CHANGED ;  assertSpecIncompatible ( BASE ,  """"bc_response_header_explode_changed.yaml"""" ,  prop ) ;  }
@ JavascriptInterface  public   final   void   setNewAccountCreated ()   {  Log . d ( TAG ,  """"JSBridge: setNewAccountCreated"""" ) ;  }
 <argument pos:start=""""""""152:72"""""""" pos:end=""""""""152:73""""""""><expr pos:start=""""""""152:72"""""""" pos:end=""""""""152:73""""""""><literal type=""""""""number"""""""" pos:start=""""""""152:72"""""""" pos:end=""""""""152:73"""""""">11</literal></expr></argument>
@ Test  void   defaults ()   {  Map < String ,  String >   iceCream   = new   LinkedHashMap < String ,  String > ()   { {  put ( """"flavor"""" ,  """"chocolate"""" ) ;  } } ;  Map < String ,  String >   result   = Underscore . defaults ( iceCream , new   LinkedHashMap < String ,  String > ()   { {  put ( """"flavor"""" ,  """"vanilla"""" ) ;  put ( """"sprinkles"""" ,  """"lots"""" ) ;  } } ) ;  assertEquals ( """"{flavor=chocolate, sprinkles=lots}"""" ,  result . toString () ) ;  }
@ Test ( dependsOnMethods   =   """"testAddExistingDiscoveryConfig"""" )  public   void   testGetDiscoveryConfigUnauthorized ()   {  String   endpointURL   =  ORGANIZATION_CONFIGS_API_BASE_PATH   +   ORGANIZATION_DISCOVERY_API_PATH ;  Response   response   =  getResponseOfGetWithOAuth2 ( endpointURL ,  invalidM2MToken ) ;  validateHttpStatusCode ( response ,  HttpStatus . SC_UNAUTHORIZED ) ;  }
@ Test  void   testESLintDiagnosticsInTS ()   throws  Exception   {  IFile   file   =  project . getFile ( """"ESLintProj.ts"""" ) ;  IDE . openEditor ( PlatformUI . getWorkbench () . getActiveWorkbenchWindow () . getActivePage () ,  file ) ;  assertESLintIndentMarkerExists ( file ) ;  }
@ Test  void   object ()   {  final   List < Map . Entry < String ,  String > >   result   = Underscore . object ( asList ( """"moe"""" ,  """"larry"""" ,  """"curly"""" ) ,  asList ( """"30"""" ,  """"40"""" ,  """"50"""" ) ) ;  assertEquals ( """"[moe=30, larry=40, curly=50]"""" ,  result . toString () ) ;  }
static   int   lastLiterals ( byte []   src ,  int   sOff ,  int   srcLen ,  byte []   dest ,  int   dOff ,  int   destEnd )   {  final   int   runLen   =  srcLen ;  if  ( dOff   +   runLen   +   1   +   ( runLen   +   255   -   RUN_MASK )   /   255   >   destEnd )   {  throw  new   LZ4Exception () ;  }  if  ( runLen   >=   RUN_MASK )   {  dest [ dOff ++ ]   =   ( byte )   ( RUN_MASK   <<   ML_BITS ) ;  dOff   =   writeLen ( runLen   -   RUN_MASK ,  dest ,  dOff ) ;  }   else  {  dest [ dOff ++ ]   =   ( byte )   ( runLen   <<   ML_BITS ) ;  }  
public   static   TreeModel   loadFromStream ( InputStream   input ,  boolean   isConvertToProb )   throws  IOException   {  return  new   TreeModel ( IndependentTreeModel . loadFromStream ( input ,  isConvertToProb ) ) ;  }
private   Map < String ,  Object >   getApplications ()   {  Applications   applications   =  this . eurekaClient . getApplications () ;  if  ( applications   ==   null )   {  return  Collections . emptyMap () ;  }  Map < String ,  Object >   result   =  new   HashMap <> () ;  for  ( Application   application   :  applications . getRegisteredApplications () )   {  if  ( ! application . getInstances () . isEmpty () )   {  result . put ( application . getName () ,  application . getInstances () . size () ) ;  }  }  return  result ;  }
@ Override  public   Seq < ResourceRequirement >   resourceRequirements ()   {  return  this . simpleTaskInfoBuilder . resourceRequirements () ;  }
@ Override  public   boolean   isConnectionFailedListenerRegistered ( OnConnectionFailedListener   listener )   {  return  googleApiClient . isConnectionFailedListenerRegistered ( new   ForwardConnectionFailedListener ( listener ) ) ;  }
@ Override  public   double   unscalePos ( double   unscaleMe )   {  return  ( unscaleMe   /   horizontalScale . get () )   -   ( Quantizer . COL_WIDTH   *   4 ) ;  }
@ Override  public   final   boolean   childOfHeader ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.*"""" ) ;  }
public   static   int []   readIntArray ( Parcel   parcel ,  int   header )   {  int   size   =  readSize ( parcel ,  header ) ;  if  ( size   ==   0 )  return  null ;  int   start   =  parcel . dataPosition () ;  int []   arr   =  parcel . createIntArray () ;  parcel . setDataPosition ( start   +   size ) ;  return  arr ;  }
public   final   ParsedSchema   processSchema ( final   String   fileContent )   {  return  new   ParsedSchema ( fileContent ,  """"AVRO"""" ) ;  }
@ Override  public   final   boolean   handle ( Request   request ,  Response   response ,  Callback   callback )   throws  IOException ,  ServletException   {  return  doHandle ( request ,  response ,  callback ) ;  }
@ Test  void   testCustomPeerNodesShouldTakePrecedenceOverDefault ()   {  assertThat ( peerEurekaNodes   instanceof   CustomEurekaPeerNodes )  . as ( """"PeerEurekaNodes should be the user created one"""" )  . isTrue () ;  }
@ Test  public   void   testUsernameRecoveryWithMultipleUsersSupport ()   throws  Exception   {  
@ Override   public   UIntIndexer   get ( long []   indices ,  long []   m ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  m [ offset   +   n ]   =   buffer . get ( ( int ) index ( indices )   +   n )   &   0xFFFFFFFFL ;  }  return  this ;  }
@ Override  public   final   void   testStarted ()   {  if  ( log . isInfoEnabled () )   {  final   long   now   =  System . currentTimeMillis () ;  log . info ( """"{} ({})"""" ,  JMeterUtils . getResString ( """"running_test"""" ) ,  now ) ;  }  }
private   int   binarySearch ( double   prob )   {  int   upperBound   =  distribution . size ()   -   1 ;  int   lowerBound   =  0 ;  int   midPoint   =  ( upperBound   +   lowerBound )   /   2 ;  while  ( upperBound   >   ( lowerBound   +   1 ) )   {  if  ( distribution . get ( midPoint ) . getL ()   >   prob )   {  upperBound   =   midPoint ;  }   else  {  lowerBound   =   midPoint ;  }  midPoint   =   ( upperBound   +   lowerBound )   /   2 ;  }  return  midPoint ;  }
public   static   List < String >   getDerivedColumnNames ( List < ColumnConfig >   columnConfigList )   {  List < String >   derivedColumnNames   =  new   ArrayList < String > () ;  for ( ColumnConfig   config :  columnConfigList )   {  if ( config . getColumnName () . startsWith ( Constants . DERIVED ) )   {  derivedColumnNames . add ( config . getColumnName () ) ;  }  }  return  derivedColumnNames ;  }
public   void   setSecurePort ( int   securePort )   {  this . securePort   =   securePort ;  }
public   static   boolean   isFile ( String   path )   {  if  ( ! isExistFile ( path ) )   return  false ;  return  new   File ( path ) . isFile () ;  }
private   void   assertEurekaBeansPresent ( AssertableApplicationContext   context )   {  assertThat ( context ) . hasSingleBean ( EurekaClientConfigBean . class ) ;  assertThat ( context ) . hasSingleBean ( RestTemplateEurekaHttpClient . class ) ;  assertThat ( context ) . hasSingleBean ( ConfigServerInstanceProvider . Function . class ) ;  }
@ Override  public   final   void   setValue ( final   Object   value )   {  this . schemaRegistryName . setSelectedItem ( Objects . requireNonNullElse ( value ,  0 ) ) ;  }
@ Override  default   boolean   isEmpty ()  {  for ( ItemStack   itemstack   :  this . getInventory () )  {  if ( ! itemstack . isEmpty () )  {  return  false ;  }  }  return  true ;  }
@ Override  public   void   performApply ( ILaunchConfigurationWorkingCopy   configuration )   {  Object   selectedBrowser   =  ( ( IStructuredSelection ) browserToUse . getSelection () ) . getFirstElement () ;  if  ( selectedBrowser   instanceof   IBrowserDescriptor   desc )   {  configuration . setAttribute ( ChromeRunDAPDebugDelegate . RUNTIME_EXECUTABLE ,  desc . getLocation () ) ;  }   else if  ( selectedBrowser   instanceof   String )   {  configuration . setAttribute ( ChromeRunDAPDebugDelegate . RUNTIME_EXECUTABLE ,  selectedBrowser ) ;  }  }
@ Override  public   InteractionResultHolder < ItemStack >   use ( Level   worldIn ,  Player   playerIn ,  InteractionHand   handIn )  {  ItemStack   stack   =  playerIn . getItemInHand ( handIn ) ;  playerIn . startUsingItem ( handIn ) ;  return  InteractionResultHolder . consume ( stack ) ;  }
public   ChangedSecurityRequirements   setOldSecurityRequirements ( final   List < SecurityRequirement >   oldSecurityRequirements )   {  this . oldSecurityRequirements   =   oldSecurityRequirements ;  return  this ;  }
@ Test  void   shouldRethrowWhenFirstPredicateReturnsTrueSecondPredicateFailsUsingAnd ()   {  final   CheckedPredicate < Object >   p   =  ignored  ->  {   throw  ERROR ;   } ;  assertThrows ( ERROR . getClass () ,  ()  ->   TRUE . and ( p ) . test ( null ) ) ;  }
private   void   assertSundayEntryAt ( CalendarEvent   event ,  DateTime   sunday ,  DateTime   currentDateTime )   {  CalendarEntry   entry1   =  getSundayEntryAt ( event ,  currentDateTime ) ;  assertEquals ( sunday ,  entry1 . entryDate ) ;  assertEquals ( event . getEndDate () ,  entry1 . endDate ) ;  assertEquals ( event . getTitle () ,  entry1 . getTitle () ) ;  String   timeString   =  entry1 . getEventTimeString () ;  assertTrue ( timeString ,  timeString . contains ( ARROW ) ) ;  assertEquals ( timeString ,  timeString . indexOf ( ARROW ) ,  timeString . lastIndexOf ( ARROW ) ) ;  }
@ Override  protected   void   runUnsafe ()   {  String   toolVersion   =  getClass () . getPackage () . getImplementationVersion () ;  LOGGER . info ( toolVersion ) ;  }
@ Test  public   void   nonLiteralAnnotationAssertionAxiom ()   {  Node   person   =  getNode ( ROOT   +   """"/Person"""" ) ;  Node   fazz   =  getNode ( ROOT   +   """"/Fazz"""" ) ;  Relationship   relationship   =  getOnlyElement ( GraphUtil . getRelationships ( person ,  fazz ,  RelationshipType . withName ( ROOT   +   """"/fizz"""" ) ,  true ) ) ;  assertThat ( GraphUtil . getProperty ( relationship ,  CommonProperties . IRI ,  String . class ) . get () , is ( ROOT   +   """"/fizz"""" ) ) ;  }
private   void   fillOutputPdfName ()   {  String   oldName   =  tfInPdfFile . getText () ;  File   f   =  new   File ( oldName ) ;  try  {  if  ( f . exists ()   &&   f . isFile () )   {  String   justName   =  f . getName () ;  int   dotPosition   =  justName . lastIndexOf ( '.' ) ;  if  ( dotPosition   >   0 )   {  justName   =   justName . substring ( 0 ,  dotPosition ) ;  }  File   signedPDF   =  new   File ( f . getParentFile () ,  justName   +   """"_signed.pdf"""" ) ;  tfOutPdfFile . setText ( signedPDF . getPath () ) ;  }  }   catch  ( Exception   ex )   {  ex . printStackTrace () ;  LOGGER . fine ( ex . getMessage () ) ;  }  }
public   static   String   padRight ( String   data ,  int   length )   {  return  padRight ( data ,  DEFAULT_PAD_CHAR ,  length ) ;  }
@ NonNull  @ Override  public   String   toString ()   {  return  ToStringHelper . name ( """"ResolveAccountResponse"""" )  . field ( """"connectionResult"""" ,  connectionResult )  . field ( """"saveDefaultAccount"""" ,  saveDefaultAccount )  . field ( """"fromCrossClientAuth"""" ,  fromCrossClientAuth )  . end () ;  }
private   static   void   packZip ( File   output ,  List < File >   sources )   throws  IOException   {  ZipOutputStream   zipOut   =  new   ZipOutputStream ( new   FileOutputStream ( output ) ) ;  zipOut . setLevel ( Deflater . DEFAULT_COMPRESSION ) ;  for  ( File   source   :  sources )   {  if  ( source . isDirectory () )   {  zipDir ( zipOut ,  """""""" ,  source ) ;  }  else  {  zipFile ( zipOut ,  """""""" ,  source ) ;  }  }  zipOut . flush () ;  zipOut . close () ;  }
public   static   ByteIndexer   create ( byte []   array )   {  return  new   ByteArrayIndexer ( array ) ;  }
public   void   setPrivilegesRequired ( String   privilegesRequired )   {  this . privilegesRequired   =   privilegesRequired ;  }
private   static   int   hammingDistance ( String   a ,  String   b )   {  int   count   =  0 ;  for  ( int   i   =  0 ,  l   =  Math . min ( a . length () ,  b . length () ) ;   i   <   l ;   ++ i )   {  if  ( a . charAt ( i )   !=   b . charAt ( i ) )   {  ++ count ;  }  }  return  count ;  }
@ Test  void   dashboardLoads ()   {  ResponseEntity < String >   entity   =  new   TestRestTemplate ()  . getForEntity ( """"http:
@ Override  public   String   visitIdentifier ( IdentifierTree   reference ,  Void   v )   {  return  ( reference   !=   null )  ?   detailedKindString ( reference ,  reference . getName () )   :  """""""" ;  }
@ Override   public   int   getPixelFormat ()   {  if  ( imageMode   ==   ImageMode . COLOR   ||   imageMode   ==   ImageMode . GRAY )   {  if  ( pixelFormat   ==   AV_PIX_FMT_NONE )   {  return  imageMode   ==   ImageMode . COLOR  ?   AV_PIX_FMT_BGR24   :  AV_PIX_FMT_GRAY8 ;  }   else  {  return  pixelFormat ;  }  }   else if  ( video_c   !=   null )   {   
@ SuppressWarnings ( """"unchecked"""" )  private   static   < E >   void   doInvoke ( List < Object >   args ,  List < E >   result ,  Method   method ,  E   arg )   {  try  {  result . add ( ( E )   method . invoke ( arg ,  args . toArray ( new   Object [ 0 ] ) ) ) ;  }   catch  ( Exception   e )   {  throw  new   IllegalArgumentException ( e ) ;  }  }
@ Override   public   short   get ( long   i ,  long   j ,  long   k )   {  return  array [ ( int ) index ( i ,  j ,  k ) ] ;  }
@ Test ( expected   =   IllegalStateException . class )  public   void   initTest ()   throws  Exception   {  new   AllureNamingUtils () ;  }
public   void   updateExternalClaim ( String   dialectId ,  String   claimId ,  ExternalClaimReq   claimRequest )  throws  IOException   {  String   endPointUrl   =  serverBasePath   +   CLAIM_DIALECTS_ENDPOINT_URI   +   PATH_SEPARATOR   +   dialectId   +  CLAIMS_ENDPOINT_URI   +   PATH_SEPARATOR   +   claimId ;  String   jsonRequest   =  toJSONString ( claimRequest ) ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpPut ( endPointUrl ,  jsonRequest ,  getHeaders () ) )   {  Assert . assertEquals ( response . getStatusLine () . getStatusCode () ,  HttpServletResponse . SC_OK , """"External claim update failed"""" ) ;  }  }
public   synchronized   boolean   isKilled ()   {  if  ( currentStatus . isPresent () )   {  return  currentStatus  . get ()  . taskStatuses ()  . values ()  . forall ( taskStatus  ->   taskStatus . getState ()   ==   TaskState . TASK_KILLED ) ;  }   else  {  return  false ;  }  }
@ Override  public   void   onPlayerError ( ExoPlaybackException   error )   {  getAudioPlayer () . stop () ;  tearDownAudioMetadataFormatter () ;  }
public   final   List < FieldValueMapping >   processSchema ( final   Schema   schemaReceived )   {  return  processSchemaDefault ( schemaReceived ) ;  }
private   static   Holder . Reference < DamageType >   getHolder ( RegistryAccess   access ,  ResourceKey < DamageType >   damageTypeKey )  {  return  access . registryOrThrow ( Registries . DAMAGE_TYPE ) . getHolderOrThrow ( damageTypeKey ) ;  }
public   SingleLogoutProfile   logoutRequestUrl ( String   logoutRequestUrl )   {  this . logoutRequestUrl   =   logoutRequestUrl ;  return  this ;  }
public   static   String []   splitAndNormalizeFullFieldName ( final   String   fullFieldName )   {  final   String []   fields   =  fullFieldName . split ( """"\\."""" ) ;  return  Arrays . stream ( fields ) . map ( field  ->   field . replaceAll ( """"\\[.*]"""" ,  """""""" ) ) . toArray ( String [] :: new ) ;  }
@ Before  public   void   before ()   {  httpClientBuilder   =   mock ( HttpClientBuilder . class ) ;  when ( HttpClientBuilder . create () ) . thenReturn ( httpClientBuilder ) ;  when ( httpClientBuilder . build () ) . thenReturn ( client ) ;  }
private   static   boolean   waitForMessage ( ServerLogReader   inputStreamHandler ,  boolean   disable )   {  long   time   =  System . currentTimeMillis ()   +   60   *   1000 ;  String   message   =  """"Adaptive authentication successfully enabled."""" ;  if  ( disable )   {  message   =   """"Adaptive authentication successfully disabled."""" ;  }  while  ( System . currentTimeMillis ()   <   time )   {  if  ( inputStreamHandler . getOutput () . contains ( message ) )   {  return  true ;  }  }  return  false ;  }
protected   ByteBuffer   getHeader ()   throws  IOException   {  ByteBuffer   buffer   =  ByteBuffer . allocate (  HEADER_HEADER_SIZE ) ;  buffer . putInt (  MAGIC_WORD ) ;  buffer . putInt (  0 ) ;  buffer . putInt (  count () ) ;  return  buffer ;  }
private   static   PropertyResolver   getPropertyResolver ( BootstrapContext   context )   {  return  context . getOrElseSupply ( PropertyResolver . class , ()  ->   new   PropertyResolver ( context . get ( Binder . class ) ,  context . getOrElse ( BindHandler . class ,  null ) ) ) ;  }
@ Test  public   void   generatedFilePath_fail ()   {  expectFailure  . whenTesting ()  . about ( compilations () )  . that ( compilerWithGenerator () . compile ( HELLO_WORLD_RESOURCE ) )  . generatedFile ( CLASS_OUTPUT ,  """"com/google/testing/compile/Bogus.class"""" ) ;  AssertionError   expected   =  expectFailure . getFailure () ;  assertThat ( expected )  . factValue ( """"expected to generate file"""" )  . isEqualTo ( """"/com/google/testing/compile/Bogus.class"""" ) ;  }
private   List < File >   getAllFilesPath ( File   folderFolder )   {  File []   files   =  folderFolder . listFiles () ;  if  ( files   ==   null )   {  return  Collections . emptyList () ;  }  ArrayList < File >   list   =  new   ArrayList <> () ;  for  ( File   file   :  files )   {  if  ( file . isDirectory () )   {  list . addAll ( getAllFilesPath ( file ) ) ;  }   else  {  list . add ( file ) ;  }  }  return  list ;  }
public   long   skip (  long   n )   throws  IOException   {  if  (  length   <=   0 )   return  0 ;  if  (  n   >   length )   n   =   length ;  long   result   =  in . skip (  n ) ;  length   -=   result ;  return  result ;  }
public   void   executeKernel ( CLKernel   kernel , long   globalWorkOffsetX ,  long   globalWorkOffsetY , long   globalWorkSizeX ,  long   globalWorkSizeY , long   localWorkSizeX ,  long   localWorkSizeY ,  CLEventList   events )   {  commandQueue . put2DRangeKernel ( kernel , globalWorkOffsetX ,  globalWorkOffsetY , globalWorkSizeX ,  globalWorkSizeY , localWorkSizeX ,  localWorkSizeY ,  events ) ;  }
@ Whitelisted  public   void   setLink ( String   link )   {  this . link   =   link ;  }
@ BeforeEach  public   void   open ()   {  out   =   System . out ;  FileSystemUtils . deleteRecursively ( new   File ( """"target/repository"""" ) ) ;  }
@ Override  public   void   onActivityPaused ( @ NonNull   Activity   activity )   {  Log . v ( TAG ,  activity . getClass () . getSimpleName ()   +   """" Paused"""" ) ;  }
 <argument pos:start=""""""""510:75"""""""" pos:end=""""""""510:75""""""""><expr pos:start=""""""""510:75"""""""" pos:end=""""""""510:75""""""""><literal type=""""""""number"""""""" pos:start=""""""""510:75"""""""" pos:end=""""""""510:75"""""""">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   void   executeKernel ( CLKernel   kernel , long   globalWorkOffsetX ,  long   globalWorkOffsetY ,  long   globalWorkOffsetZ , long   globalWorkSizeX ,  long   globalWorkSizeY ,  long   globalWorkSizeZ , long   localWorkSizeX ,  long   localWorkSizeY ,  long   localWorkSizeZ ,  CLEventList   events )   {  commandQueue . put3DRangeKernel ( kernel , globalWorkOffsetX ,  globalWorkOffsetY ,  globalWorkOffsetZ , globalWorkSizeX ,  globalWorkSizeY ,  globalWorkSizeZ , localWorkSizeX ,  localWorkSizeY ,  localWorkSizeZ ,  events ) ;  }
@ Test ()  public   void   exceptionIsThrown_whenJsonIsMalformed ()   {  exception . expect ( Exception . class ) ;  resources . client () . target ( """"/refine/reconcile?query=%5Bbad%20json%5D%5D"""" ) . request () . get ( RefineResults . class ) ;  }
@ Override  public   void   onClose ()   {  if  ( canceller   !=   null )   {  canceller . run () ;  }  Objects . requireNonNull ( minecraft ) . setScreen ( parent ) ;  }
@ Test ( dataProvider   =   """"dataProvider"""" )  public   void   parametrizedTest ( int   parameter )   {  assertThat ( parameter ,  equalTo ( 2 ) ) ;  }
@ Override  public   void   onSharedUuid ( String   s )   throws  RemoteException   {  }
@ RequirePOST  public   FormValidation   doCheckForWhitespace ( @ QueryParameter   String   value )   {  checkAdminPerm () ;  if  ( value   ==   null   ||   value . trim () . equals ( value ) )   {  return  FormValidation . ok () ;  }   else  {  return  FormValidation . warning ( Messages . RoleBasedProjectNamingStrategy_WhiteSpaceWillBeTrimmed () ) ;  }  }
public   ScoreObject   score ( Map < String ,  String >   rawDataMap )   {  return  scoreNsData ( NormalUtils . convertRawMapToNsDataMap ( rawDataMap ) ) ;  }
@ Test  void   shouldBeAbleToThrowCheckedException ()   {  final   CheckedFunction < ? ,  ? >   f   =  ignored  ->  {   throw  new   Exception () ;   } ;  assertThrows ( Exception . class ,  ()  ->   f . apply ( null ) ) ;  }
public   static   JavaFileObject   forSourceLines ( String   fullyQualifiedName ,  Iterable < String >   lines )   {  return  forSourceString ( fullyQualifiedName ,  LINE_JOINER . join ( lines ) ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  userStoreConfigAdminServiceClient . deleteUserStore ( DOMAIN_ID ) ;  Assert . assertTrue ( userStoreConfigUtils . waitForUserStoreUnDeployment ( userStoreConfigAdminServiceClient ,  DOMAIN_ID ) , """"Deletion of user store has failed"""" ) ;  }
@ Override  protected   List < String >   getClassPaths ()   {  List < String >   hadoopJavaClassPath   =  super . getClassPaths () ;  return  ImmutableList . < String > builder ()  
@ Override  public   Void   process ()   throws  IOException   {  LOG . info ( """"Saving ModelConfig, ColumnConfig and then upload to HDFS ..."""" ) ;  JSONUtils . writeValue ( new   File ( pathFinder . getModelConfigPath ( SourceType . LOCAL ) ) ,  modelConfig ) ;  JSONUtils . writeValue ( new   File ( pathFinder . getColumnConfigPath ( SourceType . LOCAL ) ) ,  columnConfigList ) ;  VarSelectModelProcessor   processor   =  new   VarSelectModelProcessor ( super . otherConfigs ) ;  try  {  processor . run () ;  }   catch  ( Exception   e )   {  LOG . error ( """"Error in training"""" ,  e ) ;  }  return  null ;  }
@ Override  public   ColumnConfig   clone ()   {  ColumnConfig   other   =  new   ColumnConfig () ;  other . setColumnName ( columnName ) ;  other . setColumnNum ( columnNum ) ;  other . setVersion ( version ) ;  other . setColumnType ( columnType ) ;  other . setColumnFlag ( columnFlag ) ;  other . setFinalSelect ( finalSelect ) ;  other . setColumnStats ( columnStats ) ;  other . setColumnBinning ( columnBinning ) ;  
public   Map < String ,  String >   getExtensionParameters ()   {  return  extensionParameters ;  }
@ Override  public   IObjectWrapper   defaultMarker ()   throws  RemoteException   {  return  ObjectWrapper . wrap ( DefaultBitmapDescriptor . DEFAULT_DESCRIPTOR ) ;  }
public   static   < T ,  E >   E   foldl ( final   Iterable < T >   iterable ,  final   BiFunction < E ,  T ,  E >   func ,  final   E   zeroElem )   {  return  reduce ( iterable ,  func ,  zeroElem ) ;  }
@ Test  public   void   testGetApplicationEmailTemplateWithIncorrectTemplateId ()   {  Response   response   =  getResponseOfGet ( EMAIL_TEMPLATES_API_BASE_PATH   +   EMAIL_TEMPLATE_TYPES_PATH   +  PATH_SEPARATOR   +   SAMPLE_TEMPLATE_TYPE_ID   +   APP_EMAIL_TEMPLATES_PATH   +  PATH_SEPARATOR   +   SAMPLE_APPLICATION_UUID   +   PATH_SEPARATOR   +   INCORRECT_TEMPLATE_ID ) ;  validateErrorResponse ( response ,  HttpStatus . SC_NOT_FOUND ,  """"ETM-50003"""" ) ;  }
public   static   int   getBinNum ( List < Double >   binBoundaryList ,  String   columnVal )   {  if ( StringUtils . isBlank ( columnVal ) )   {  return  - 1 ;  }  double   dval   =  0.0 ;  try  {  dval   =   Double . parseDouble ( columnVal ) ;  }   catch  ( Exception   e )   {  return  - 1 ;  }  return  BinUtils . getBinIndex ( binBoundaryList ,  dval ) ;  }
@ Override  protected   void   processCursorRight ( int   count )   {  emitter . emitInvisibleSequence () ;  }
void   assertTokenResponse ( JSONObject   tokenResponse )   throws  Exception   {  this . assertAccessToken ( tokenResponse . optString ( OAuth2Constant . ACCESS_TOKEN ) ) ;  this . assertRefreshToken ( tokenResponse . optString ( OAuth2Constant . REFRESH_TOKEN ) ) ;  this . assertAuthorizationDetails ( tokenResponse  . optString ( OAuth2Constant . OAUTH2_AUTHORIZATION_DETAILS ) ,  false ) ;  this . assertScopes ( tokenResponse . optString ( OAuth2Constant . OAUTH2_SCOPE ) ,  false ) ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   init ()   throws  Exception   {  super . testInit ( API_VERSION ,  swaggerDefinition ,  tenant ) ;  oAuth2RestClient   =   new   OAuth2RestClient ( serverURL ,  tenantInfo ) ;  orgMgtRestClient   =   new   OrgMgtRestClient ( context ,  tenantInfo ,  serverURL , new   JSONObject ( readResource ( """"organization-self-service-apis.json"""" ) ) ) ;  
@ Override  public   boolean   isTrafficEnabled ()   throws  RemoteException   {  return  false ;  }
public   void   setExpireTime ( String   area ,  int   days )  {  this . setExpireTime ( null ,  area ,  days ) ;  }
public   void   setMagConfidence ( int   magConfidence )   {  this . magConfidence   =   magConfidence ;  fieldsMask   =   ( byte )   ( fieldsMask   |   0x2 ) ;  }
public   static   File   cacheResource ( URL   resourceURL )   throws  IOException   {  return  cacheResource ( resourceURL ,  null ) ;  }
@ Test  public   void   checkBundleExports ()   {  final   Bundle   bundle   =  findBundle ( context ,  """"net.openhft.affinity"""" ) ;  assertNotNull ( bundle ) ;  final   String   exports   =  bundle . getHeaders () . get ( """"Export-Package"""" ) ;  final   String []   packages   =  exports . split ( """","""" ) ;  assertTrue ( packages . length   >=   2 ) ;  assertTrue ( packages [ 0 ] . startsWith ( """"net.openhft.affinity;"""" )  ||   packages [ 0 ] . startsWith ( """"net.openhft.affinity.impl;"""" ) ) ;  assertTrue ( packages [ 1 ] . startsWith ( """"net.openhft.affinity;"""" )  ||   packages [ 1 ] . startsWith ( """"net.openhft.affinity.impl;"""" ) ) ;  }
public   int   getEntryBackgroundColor ( WidgetEntry < ? >   entry )   {  return  entry . timeSection  . select ( getPastEventsBackgroundColor () ,  getTodaysEventsBackgroundColor () ,  getEventsBackgroundColor () ) ;  }
@ Test  void   notUpdatedWhenDnsIsTrue ()   {  changeProperty ( """"eureka.client.use-dns-for-fetching-service-urls=true"""" , """"eureka.client.region=unavailable-region"""" ,  
public   void   removeListener ( IWearableListener   listener )   {  for  ( List < ListenerInfo >   list   :  listeners . values () )   {  for  ( int   i   =  0 ;   i   <   list . size () ;   i ++ )   {  if  ( list . get ( i ) . listener . equals ( listener ) )   {  list . remove ( i ) ;  i -- ;  }  }  }  }
public   void   setValue ( DateFormatValue   value )   {  this . value   =   value ;  ApplicationPreferences . setDateFormat ( getContext () ,  getKey () ,  value ) ;  showValue () ;  }
private   HttpResponse   sendSAMLMessage ( String   url ,  String   samlMsgKey ,  String   samlMsgValue )   throws  IOException   {  List < NameValuePair >   urlParameters   =  new   ArrayList <> () ;  HttpPost   post   =  new   HttpPost ( url ) ;  post . setHeader ( USER_AGENT ,  OAuth2Constant . USER_AGENT ) ;  urlParameters . add ( new   BasicNameValuePair ( samlMsgKey ,  samlMsgValue ) ) ;  post . setEntity ( new   UrlEncodedFormEntity ( urlParameters ) ) ;  return  client . execute ( post ) ;  }
@ Override  void   visitPattern ( Regexp   pattern )   {  if  ( pattern   !=   null   &&   pattern . patternMatchingFailure ( stringSubject ) . isPresent () )   {  String   message   =  format ( """"string [%s] does not match pattern %s"""" ,  subject ,  pattern . toString () ) ;  owner . failure ( message ,  """"pattern"""" ) ;  }  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"authentication"""" )  @ Valid  public   AuthenticationType   getAuthentication ()   {  return  authentication ;  }
public   void   resetNetworkWeights ()   {  double []   weights   =  new   double [ this . network . getWeights () . length ] ;  for ( int   i   =  0 ;   i   <   subGradients . length ;   i ++ )   {  double []   subWeights   =  subGradients [ i ] . getNetwork () . getWeights () ;  for ( int   j   =  0 ;   j   <   weights . length ;   j ++ )   {  weights [ j ]   +=   subWeights [ j ] ;  }  }  for ( int   j   =  0 ;   j   <   weights . length ;   j ++ )   {  weights [ j ]   /=   subGradients . length ;  }  this . network . setWeights ( weights ) ;  }
public   synchronized   static   IplImage   toIplImage ( Mat   src ) {  return  iplConv . convertToIplImage ( matConv . convert ( src ) ) . clone () ;  }
public   RequestObjectConfiguration   requestObjectSigningAlg ( String   requestObjectSigningAlg )   {  this . requestObjectSigningAlg   =   requestObjectSigningAlg ;  return  this ;  }
@ Override  public   boolean   onQueryTextSubmit ( String   s )   {  return  false ;  }
public   PropertyRes   description ( String   description )   {  this . description   =   description ;  return  this ;  }
@ Test ( expected   =   WriteOperationsNotAllowedException . class )  public   void   graphDbReadOnlyWithCypher ()   {  GraphDatabaseService   graphDb   =  injectorReadOnly . getInstance ( GraphDatabaseService . class ) ;  Transaction   tx   =  graphDb . beginTx () ;  try  {  graphDb . execute ( """"CREATE (n: test)"""" ) ;  }   finally  {  tx . close () ;  }  }
@ Test  public   void   removeTest ()   throws  Exception   {  TestSuiteResult   testSuite   =  testSuiteStorage . get ( """"a"""" ) ;  assertTrue ( testSuite   ==   testSuiteStorage . get ( """"a"""" ) ) ;  testSuiteStorage . remove ( """"a"""" ) ;  assertFalse ( testSuite   ==   testSuiteStorage . get ( """"a"""" ) ) ;  }
@ Override  public   int   hashCode ()   {  int   result   =  ( mShouldRun  ?   1   :  0 ) ;  result   =   31   *   result   +   mBlockReasons . hashCode () ;  return  result ;  }
private   Map < String ,  String >   extractQueryParams ( String   url )   throws  Exception   {  Map < String ,  String >   queryParams   =  new   HashMap <> () ;  List < NameValuePair >   params   =  URLEncodedUtils . parse ( new   URI ( url ) ,  StandardCharsets . UTF_8 ) ;  if  ( params . isEmpty () )   {  return  queryParams ;  }  for  ( NameValuePair   param   :  params )   {  queryParams . put ( param . getName () ,  param . getValue () ) ;  }  return  queryParams ;  }
protected   static   boolean   matchOption ( String   given ,  String   expect ,  boolean   negative )   {  int   begin   =  0 ,  end   =  given . length () ;  if  ( begin   <   end   &&   given . charAt ( begin )   ==   '-' )   {  ++ begin ;  }  
public   Value   withoutAllowGetters ()   {  return  ! _allowGetters  ?   this   : construct ( _ignored ,  _ignoreUnknown ,  false ,  _allowSetters ,  _merge ) ;  }
@ BeforeClass  public   void   setUp ()   throws  IOException   {  modelConfig   =   CommonUtils . loadModelConfig ( """"src/test/resources/example/cancer-judgement/ModelStore/ModelSet1/ModelConfig.json"""" ,  SourceType . LOCAL ) ;  columnConfigList   =   CommonUtils . loadColumnConfigList ( """"src/test/resources/example/cancer-judgement/ModelStore/ModelSet1/ColumnConfig.json"""" ,  SourceType . LOCAL ) ;  actorSystem   =   ActorSystem . create ( """"shifuActorSystem"""" ) ;  }
public   void   setTransactionBatchSize ( int   size )   {  this . transactionBatchSize   =   size ;  }
public   static   BooleanIndexer   create ( BooleanPointer   pointer ,  long ...   sizes )   {  return  new   BooleanRawIndexer ( pointer ,  sizes ) ;  }
private   boolean   isRootInMiningList ( FieldName   root ,  List < MiningField >   miningList )   {  for ( int   i   =  0 ;   i   <   miningList . size () ;   i ++ )   {  MiningField   mField   =  miningList . get ( i ) ;  if ( mField . getUsageType ()   !=   MiningField . UsageType . ACTIVE )  continue;  FieldName   mFieldName   =  mField . getName () ;  if ( root . equals ( mFieldName ) )   {  return  true ;  }  }  return  false ;  }
public   static   < T >   List < List < T > >   chunkFill ( final   Iterable < T >   iterable ,  final   int   size ,  final   int   step ,  final   T   fillValue )   {  if  ( step   <=   0   ||   size   <   0 )   {  return  new   ArrayList <> () ;  }  final   List < List < T > >   result   =  chunk ( iterable ,  size ,  step ) ;  int   difference   =  size   -   result . get ( result . size ()   -   1 ) . size () ;  for  ( int   i   =  difference ;   0   <   i ;   i -- )   {  result . get ( result . size ()   -   1 ) . add ( fillValue ) ;  }  return  result ;  }
@ Test  void   duplicatePropertiesShouldNotTriggerSorting ()   {  SortPomImplUtil . create ()  . predefinedSortOrder ( """"default_0_4_0"""" )  . sortProperties ()  . sortPlugins ( """"groupId,artifactId"""" )  . sortDependencies ( """"groupId,artifactId"""" )  . lineSeparator ( """"\n"""" )  . testNoSorting ( """"/SortProp_input_duplicate.xml"""" ) ;  }
public   int   getPastEventsBackgroundColor ()   {  return  pastEventsBackgroundColor ;  }
private   EurekaServerContext   getServerContext ()   {  return  EurekaServerContextHolder . getInstance () . getServerContext () ;  }
public   boolean   isOpenSource ()   {  return  GpioD . lineIsOpenSource ( getCPointer () ) ;  }
private   Object   getValueByColumnId ( int   columnId ,  Map < String ,  Object >   dataMap )   {  return  dataMap . get ( this . numNameMap . get ( columnId ) ) ;  }
public   void   deleteStore ( String   keyStoreName )   throws  Exception   {  try  {  DeleteStore   request   =  new   DeleteStore () ;  request . setKeyStoreName ( keyStoreName ) ;  stub . deleteStore ( request ) ;  }   catch  ( Exception   e )   {  log . error ( """"Error in deleting keystore"""" ,  e ) ;  throw  new   Exception ( """"Error in deleting keystore"""" ) ;  }  }
public   static   void   writeDoubleList ( Parcel   parcel ,  int   fieldId ,  List < Double >   val ,  boolean   mayNull )   {  if  ( val   ==   null )   {  if  ( mayNull )   {  writeHeader ( parcel ,  fieldId ,  0 ) ;  }  }   else  {  int   start   =  writeObjectHeader ( parcel ,  fieldId ) ;  parcel . writeInt ( val . size () ) ;  for  ( Double   d   :  val )   {  parcel . writeDouble ( d ) ;  }  finishObjectHeader ( parcel ,  start ) ;  }  }
@ Test  public   void   petclinic ()   throws  Exception   {  Resource   resource   =  new   ClassPathResource ( """"apps/petclinic/pom.xml"""" ) ;  Model   model   =  resolver . readModel ( resource ) ;  assertThat ( model . getDependencies () . size () ) . isGreaterThan ( 1 ) ;  assertThat ( model . getDependencies () ) . filteredOn ( """"artifactId"""" ,  """"bootstrap"""" )  . hasSize ( 1 ) ;  assertThat ( model . getDependencies () ) . filteredOn ( """"artifactId"""" ,  """"bootstrap"""" ) . first ()  . is ( version ( """"3.3.6"""" ) ) ;  }
@ Test  public   void   testJudge ()   {  Assert . assertTrue ( judger . judge ( 1.0 ,  2.0 ) ) ;  Assert . assertTrue ( judger . judge ( 1.0 ,  1.0 ) ) ;  Assert . assertFalse ( judger . judge ( 1.0 ,  0.1 ) ) ;  }
@ Override   public   String   getFormat ()   {  if  ( oc   ==   null )   {  return  super . getFormat () ;  }   else  {  return  oc . iformat () . name () . getString () ;  }  }
@ Override  public   void   writeData ( FriendlyByteBuf   buffer )  {  Validate . notNull ( CustomGunLoader . get () ) ;  CustomGunLoader . get () . writeCustomGuns ( buffer ) ;  }
@ Override  public   void   reset ()   {  incompleteframe   =   null ;  if  ( negotiatedExtension   !=   null )   {  negotiatedExtension . reset () ;  }  negotiatedExtension   =   new   DefaultExtension () ;  protocol   =   null ;  }
@ Test  public   void   runJar ()   throws  Exception   {  ProcessBuilder   builder   =  new   ProcessBuilder ( Utils . javaCommand () ,  """"-Xmx128m"""" , """"-noverify"""" ,  """"-XX:TieredStopAtLevel=1"""" , """"-Djava.security.egd=file:/dev/./urandom"""" ,  """"-jar"""" , """"../multi/application/target/application-0.0.1-SNAPSHOT.jar"""" , """"--server.port=0"""" ) ;  builder . redirectErrorStream ( true ) ;  started   =   builder . start () ;  String   output   =  output ( started . getInputStream () ,  """"Started"""" ) ;  assertThat ( output ) . contains ( """"Started DemoApplication"""" ) ;  assertThat ( output ) . contains ( """"2.3.9.RELEASE"""" ) ;  }
private   void   handleAudioFocusGain ()   {  if  ( isAudioPlaying () )   {  setUpAudioVolume () ;  }   else  {  if  ( audioFocus   ==   AudioFocus . LOSS )   {  playAudio () ;  }  }  this . audioFocus   =   AudioFocus . GAIN ;  }
public   ChangedSchema   setNewSchema ( final   Schema < ? >   newSchema )   {  this . newSchema   =   newSchema ;  return  this ;  }
@ Override  public   float []   backward ( float []   out )   {  AssertUtils . assertFloatArrayNotNullAndLengthEqual ( out ,  lastForward ) ;  float []   results   =  new   float [ out . length ] ;  for ( int   i   =  0 ;   i   <   results . length ;   i ++ )   {  results [ i ]   =   out [ i ]   *   lastForward [ i ]   *   ( 1f   -   lastForward [ i ] ) ;  }  return  results ;  }
private   static   Properties   getNodeJsInfoProperties ()   {  if  ( cachedNodeJsInfoProperties   ==   null )   {  URL   nodeJsInfo   =  FileLocator . find ( Activator . getDefault () . getBundle () ,  new   Path ( """"nodejs-info.properties"""" ) ) ;  if  ( nodeJsInfo   !=   null )   {  try  ( InputStream   infoStream   =  nodeJsInfo . openStream () )   {  Properties   properties   =  new   Properties () ;  properties . load ( infoStream ) ;  cachedNodeJsInfoProperties   =   properties ;  }   catch  ( IOException   e )   {  ILog . get () . error ( e . getMessage () ,  e ) ;  }  }  }  return  cachedNodeJsInfoProperties ;  }
public   Builder   property ( String   key ,  String   value )   {  if  ( key . length ()   >   0   &&   value . length ()   >   0 )   {  properties . put ( key ,  value ) ;  }  return  this ;  }
private   void   initValues ()   throws  VarExploderException  {  ObjectMapper   mapper   =  new   ObjectMapper () ;  try {  values   =   mapper . readValue ( source ,  new   TypeReference < Map < String ,  Object > > ()  {} ) ;  }  catch  ( JsonParseException   e )  {  throw  new   VarExploderException ( e ) ;  }  catch  ( JsonMappingException   e )  {  throw  new   VarExploderException ( e ) ;  }  catch  ( IOException   e )  {  throw  new   VarExploderException ( e ) ;  }  }
public   static   UIntIndexer   create ( IntPointer   pointer ,  Index   index )   {  return  new   UIntRawIndexer ( pointer ,  index ) ;  }
@ Test  void   indexOf ()   {  final   Integer   result   =  Underscore . indexOf ( asList ( 1 ,  2 ,  3 ) ,  2 ) ;  assertEquals ( 1 ,  result . intValue () ) ;  final   Integer   resultArray   =  Underscore . indexOf ( new   Integer []   { 1 ,  2 ,  3 } ,  2 ) ;  assertEquals ( 1 ,  resultArray . intValue () ) ;  }
public   int   getConfidence ()   {  throw  new   UnsupportedOperationException () ;  }
private   void   sendLoginPostForIdentifier ( HttpClient   client ,  String   sessionDataKey ,  String   username )  throws  IOException   {  List < NameValuePair >   urlParameters   =  new   ArrayList <> () ;  urlParameters . add ( new   BasicNameValuePair ( """"username"""" ,  username ) ) ;  urlParameters . add ( new   BasicNameValuePair ( """"sessionDataKey"""" ,  sessionDataKey ) ) ;  sendPostRequestWithParameters ( client ,  urlParameters , getTenantQualifiedURL ( OAuth2Constant . COMMON_AUTH_URL ,  tenantInfo . getDomain () ) ) ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   init ()   throws  IOException   {  super . testInit ( API_VERSION ,  swaggerDefinition ,  tenant ) ;  }
@ Before  public   void   setUp ()   throws  Exception   {  db   =   new   HibernateClassicDatabase () ;  }
@ Override  public   boolean   doActionLong ( Chip   button ,  ModuleHolder   moduleHolder )   {  Context   context   =  button . getContext () ;  Toast . makeText ( context ,  context . getString ( R . string . module_id_prefix )   +   moduleHolder . moduleId ,  Toast . LENGTH_SHORT ) . show () ;  return  true ;  }
public   static   < T ,  E >   List < T >   mapIndexed ( final   List < E >   list ,  final   BiFunction < Integer ,  ?   super  E ,  T >   func )   {  final   List < T >   transformed   =  newArrayListWithExpectedSize ( list . size () ) ;  int   index   =  0 ;  for  ( E   element   :  list )   {  transformed . add ( func . apply ( index ,  element ) ) ;  index   +=   1 ;  }  return  transformed ;  }
@ Override   public   long   get ( long   i ,  long   j )   {  return  getRaw ( index ( i ,  j ) ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   static   < T >   Predicate < T >   or ( final   Predicate < ?   super  T >   pred1 , final   Predicate < ?   super  T >   pred2 , final   Predicate < ?   super  T > ...   rest )   {  checkNotNull ( pred1 ) ;  checkNotNull ( pred2 ) ;  checkNotNullElements ( Arrays . asList ( rest ) ) ;  return  value  ->  {  boolean   result   =  pred1 . test ( value )   ||   pred2 . test ( value ) ;  if  ( result )   {  return  true ;  }  for  ( Predicate < ?   super  T >   predicate   :  rest )   {  if  ( predicate . test ( value ) )   {  return  true ;  }  }  return  false ;  } ;  }
private   boolean   isWorkflowsEqual ( WorkflowWizard   actual ,  WorkflowWizard   expected )   {  return  ( actual . getWorkflowName () . equals ( expected . getWorkflowName () )   &&  actual . getWorkflowDescription () . equals ( expected  . getWorkflowDescription () ) ) ;  }
@ Override  public   void   onRefresh ()   {  resetFilter () ;  if  ( ! isOfflineFragment () )   {  setUpFilesContent () ;  }   else  {  showOfflineFiles () ;  }  }
private   Schema . Builder   loadSchemaBoolean ( Boolean   rawBoolean )   {  return  rawBoolean  ?   TrueSchema . builder ()   :  FalseSchema . builder () ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  ANDRule   anDRule   =  ( ANDRule )   o ;  return  Objects . equals ( this . condition ,  anDRule . condition )   &&  Objects . equals ( this . expressions ,  anDRule . expressions ) ;  }
public   void   dataOffset ( long   dataOffset )   {  this . dataOffset   =   dataOffset ;  }
public   FilterMode   getFilterMode ()   {  return  filterMode   ==   FilterMode . NORMAL_FILTER   &&   clock () . getSnapshotMode ()   !=   SnapshotMode . LIVE_DATA ?   FilterMode . DEBUG_FILTER  :  filterMode ;  }
@ Test  void   otherType_nullPermitted_nullObject ()   {  ValidatingVisitor   subject   =  createValidatingVisitor ( JSONObject . NULL ,  STRICT ) ;  subject . ifPassesTypeCheck ( JSONObject . class ,  true ,  Boolean . TRUE ,  onPassConsumer () ) ;  verifyTypeCheckDidNotPass () ;  }
public   void   setParams ( Map < String ,  Object >   params )   {  this . params   =   params ;  }
public   static   URL []   findLibrary ( Class   cls ,  ClassProperties   properties ,  String   libnameversion )   {  return  findLibrary ( cls ,  properties ,  libnameversion ,  Loader . pathsFirst ) ;  }
@ Test  public   void   testOK ()   {  final   byte []   encrypted   =  encrypter . encrypt ( VALUE . getBytes ( StandardCharsets . UTF_8 ) ) ;  final   byte []   decrypted   =  encrypter . decrypt ( encrypted ) ;  assertEquals ( VALUE ,  new   String ( decrypted ,  StandardCharsets . UTF_8 ) ) ;  }
@ Schema ( example   =   """"[{\""""key\"""":\""""body.scope\"""",\""""value\"""":\""""true\""""},{\""""key\"""":\""""mail.smtp.starttls.enable\"""",\""""value\"""":true}]"""" ,  description   =   """""""" )  public   List < Properties >   getProperties ()   {  return  properties ;  }
@ Test  void   parameterIndentBlankLineShouldEndUpInXmlProcessor ()   {  assertParameterMoveFromMojoToRestOfApplicationForBoolean ( """"indentBlankLines"""" ,  xmlOutputGenerator ) ;  }
public   List < Endpoint >   getDeprecatedEndpoints ()   {  return  changedOperations . stream ()  . filter ( ChangedOperation :: isDeprecated )  . map ( c  ->  EndpointUtils . convert2Endpoint ( c . getPathUrl () ,  c . getHttpMethod () ,  c . getNewOperation () ) )  . collect ( Collectors . toList () ) ;  }
public   void   setSubjectToken ( SubjectTokenConfiguration   subjectToken )   {  this . subjectToken   =   subjectToken ;  }
public   void   setMessageDeleter ( boolean   messageDeleter )   {  isMessageDeleter   =   messageDeleter ;  }
private   void   setUpSharesContent ( Bundle   state )   {  if  ( isSharesStateValid ( state ) )   {  setUpSharesState ( state ) ;  }   else  {  setUpSharesContent () ;  }  }
@ Override  DataBundleValue   create ( Float   value ,  List < Asset >   assets )   {  return  new   DataBundleValue . Builder () . floatVal ( value ) . build () ;  }
@ Override  public   int   i2cWriteByte ( int   handle ,  byte   value )   {  logger . trace ( """"[I2C::WRITE] -> HANDLE={}; Byte [{}]"""" ,  handle ,  Byte . toUnsignedInt ( value ) ) ;  validateReady () ;  validateHandle ( handle ) ;  int   result   =  PIGPIO . i2cWriteByte ( handle ,  value ) ;  boolean   success   =  ( result >= 0 ) ;  logger . trace ( """"[I2C::WRITE] <- HANDLE={}; SUCCESS={}; RESULT={}"""" ,  handle ,  success ,  result ) ;  validateResult ( result ,  false ) ;  return  result ;  }
@ Override  public   Collection < Long >   createRelationshipsPairwise ( Collection < Long >   nodeIds , RelationshipType   type )   {  Set < Long >   relationships   =  new   HashSet <> () ;  for  ( Long   start   :  nodeIds )   {  for  ( Long   end   :  nodeIds )   {  if  ( start . equals ( end ) )   {  continue;  }   else  {  if  ( ! getRelationship ( end ,  start ,  type ) . isPresent () )   {  relationships . add ( createRelationship ( start ,  end ,  type ) ) ;  }  }  }  }  return  relationships ;  }
private   void   dispose ()   {  try  {  if  ( this . container   !=   null )   {  this . container . dispose () ;  }  }  catch  ( Exception   e )   {  
public   static   Object   generateIteratorForFieldValueList ( final   String   fieldName ,  final   String   fieldType ,  final   List < String >   fieldValueList ,  final   Map < String ,  Object >   context )   {  final   var   index   =  ( Integer )   context . compute ( fieldName ,  ( fieldNameMap ,  itObject )   ->   itObject   ==   null  ?   0   :  ( ( ( Integer )   itObject )   +   1 )   %   fieldValueList . size () ) ;  return  ValueUtils . castValue ( fieldValueList . get ( index ) ,  fieldType ) ;  }
@ Override  public   long   index ( long   i ,  long   j ,  long   k )   {  return  ( selectionOffsets [ 0 ]   +   selectionStrides [ 0 ]   *   ( i   /   selectionBlocks [ 0 ] )   +   ( i   %   selectionBlocks [ 0 ] ) )   *   strides [ 0 ]  +   ( selectionOffsets [ 1 ]   +   selectionStrides [ 1 ]   *   ( j   /   selectionBlocks [ 1 ] )   +   ( j   %   selectionBlocks [ 1 ] ) )   *   strides [ 1 ]  +   ( selectionOffsets [ 2 ]   +   selectionStrides [ 2 ]   *   ( k   /   selectionBlocks [ 2 ] )   +   ( k   %   selectionBlocks [ 2 ] ) )   *   strides [ 2 ] ;  }
private   void   setUpNavigationListener ()   {  getNavigationListView () . addOnItemTouchListener ( new   RecyclerItemClickListener ( mContext ,  ( view ,  position )  ->  {  getNavigationListView () . dispatchSetActivated ( false ) ;  view . setActivated ( true ) ;  if  ( ! areServersVisible )   {  selectedServerListener ( position ) ;  }   else  {  serverClicked ( position ) ;  }  } ) ) ;  getOfflineFilesLayout () . setOnClickListener ( view  ->   showOfflineFiles () ) ;  getRecentFilesLayout () . setOnClickListener ( view  ->   showRecentFiles () ) ;  }
public   void   setBrightnessForeground ( double   brightnessForeground )   {  firePropertyChange ( """"brightnessForeground"""" ,  this . brightnessForeground , this . brightnessForeground   =   brightnessForeground ) ;  }
private   void   clearSecondsAndMilliseconds ( Calendar   cal )   {  if  ( cal   ==   null )   return;  cal . set ( Calendar . SECOND ,  0 ) ;  cal . set ( Calendar . MILLISECOND ,  0 ) ;  }
@ Override   public   boolean   get ( long ...   indices )   {  return  getRaw ( index ( indices ) ) ;  }
public   boolean   nullsAreSortedAtEnd ()   throws  SQLException   {  return  false ;  }
static   void   safeArraycopy ( ByteBuffer   src ,  int   sOff ,  ByteBuffer   dest ,  int   dOff ,  int   len )   {  for  ( int   i   =  0 ;   i   <   len ;   ++ i )   {  dest . put ( dOff   +   i ,  src . get ( sOff   +   i ) ) ;  }  }
 <argument pos:start=""""""""212:112"""""""" pos:end=""""""""212:117""""""""><expr pos:start=""""""""212:112"""""""" pos:end=""""""""212:117""""""""><literal type=""""""""string"""""""" pos:start=""""""""212:112"""""""" pos:end=""""""""212:117"""""""">""""""""lst0""""""""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Override  public   synchronized   I2C   create ( I2CConfig   config )   {  LinuxFsI2CBus   i2CBus   =  this . i2CBusMap . computeIfAbsent ( config . getBus () ,  busNr  ->   new   LinuxFsI2CBus ( config ) ) ;  
public   boolean   childOfItemsCollectionFormat ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.**.items.collectionFormat"""" ) ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init () ;  setSystemproperties () ;  super . init ( TestUserMode . SUPER_TENANT_USER ) ;  }
private   RequestedClaimConfiguration   getRequestedClaim ( String   claimUri )   {  RequestedClaimConfiguration   requestedClaim   =  new   RequestedClaimConfiguration () ;  requestedClaim . setClaim ( new   org . wso2 . identity . integration . test . rest . api . server . application . management . v1 . model . Claim () . uri ( claimUri ) ) ;  return  requestedClaim ;  }
@ Test  public   void   success ()   {  assertSame ( Optional . empty () ,  createHandler () . patternMatchingFailure ( """"aaaaaaaaab"""" ) ) ;  }
protected   Response   getResponseOfMultipartFilePut ( String   endpointUri ,  String   filePath )   {  return  given () . auth () . preemptive () . basic ( authenticatingUserName ,  authenticatingCredential )  . config ( RestAssured . config () . encoderConfig ( encoderconfig  . appendDefaultContentCharsetToContentTypeIfUndefined ( false ) ) )  . multiPart ( new   File ( filePath ) )  . when ()  . put ( endpointUri ) ;  }
 <argument pos:start=""""""""103:107"""""""" pos:end=""""""""103:161""""""""><expr pos:start=""""""""103:107"""""""" pos:end=""""""""103:161""""""""><operator pos:start=""""""""103:107"""""""" pos:end=""""""""103:109"""""""">new</operator> <call pos:start=""""""""103:111"""""""" pos:end=""""""""103:161""""""""><name pos:start=""""""""103:111"""""""" pos:end=""""""""103:115"""""""">Field</name><argument_list pos:start=""""""""103:116"""""""" pos:end=""""""""103:161"""""""">(<argument pos:start=""""""""103:117"""""""" pos:end=""""""""103:122""""""""><expr pos:start=""""""""103:117"""""""" pos:end=""""""""103:122""""""""><literal type=""""""""string"""""""" pos:start=""""""""103:117"""""""" pos:end=""""""""103:122"""""""">""""""""name""""""""</literal></expr></argument>
public   static   AffinityLock   acquireLock ( int   cpuId )   {  return  acquireLock ( true ,  cpuId ,  AffinityStrategies . ANY ) ;  }
@ BeforeEach  public   void   setUpProject ()   throws  Exception   {  this . project   =   ResourcesPlugin . getWorkspace () . getRoot () . getProject ( getClass () . getName ()   +   System . nanoTime () ) ;  project . create ( null ) ;  project . open ( null ) ;  IWorkbenchPage   activePage   =  PlatformUI . getWorkbench () . getActiveWorkbenchWindow () . getActivePage () ;  for  ( IViewReference   ref   :  activePage . getViewReferences () )   {  activePage . hideView ( ref ) ;  }  }
public   MyStringBuilder   atNewLine ( CharSequence   text )   {  return  append ( """""""" ,  text ,  """", \n"""" ,  false ) ;  }
@ Override   public   DoubleIndexer   put ( long []   indices ,  double   d )   {  array [ ( int ) index ( indices ) ]   =   d ;  return  this ;  }
@ Override   public   byte   get ( long   i ,  long   j )   {  return  buffer . get ( ( int ) index ( i ,  j ) ) ;  }
public   void   setProjectorImage ( IplImage   projectorImage0 ,  int   minLevel ,  int   maxLevel )   {  setProjectorImage ( projectorImage0 ,  minLevel ,  maxLevel ,  true ) ;  }
public   static   double   getProjectileSpeedModifier ( ItemStack   weapon )  {  int   level   =  EnchantmentHelper . getItemEnchantmentLevel ( ModEnchantments . ACCELERATOR . get () ,  weapon ) ;  if ( level   >   0 )  {  return  1.0   +   0.5   *   level ;  }  return  1.0 ;  }
public   void   setExpireTime ( Player   player ,  String   area ,  int   days )  {  area   =   area . replace ( """"."""" ,  """"_"""" ) ;  if ( manager . getByName ( area ) != null )  {  leaseExpireTime . put ( area ,  daysToMs ( days )   +   System . currentTimeMillis () ) ;  if ( player != null )  player . sendMessage ( ChatColor . GREEN + Residence . getLanguage () . getPhrase ( """"LeaseRenew"""" ,  getExpireTime ( area ) . toString () ) ) ;  }  else {  if ( player != null )  player . sendMessage ( ChatColor . RED + Residence . getLanguage () . getPhrase ( """"InvalidArea"""" ) ) ;  }  }
@ Test ( dependsOnMethods   =   """"keywordExists"""" )  public   void   failingSubSchemaLeadsToFailure ()  throws  ProcessingException  {  final   ArgumentCaptor < ProcessingMessage >   captor  =  ArgumentCaptor . forClass ( ProcessingMessage . class ) ;  processor   =   new   DummyProcessor ( WantedState . KO ,  msg ) ;  validator . validate ( processor ,  report ,  BUNDLE ,  data ) ;  verify ( report ) . error ( captor . capture () ) ;  final   ProcessingMessage   message   =  captor . getValue () ;  assertMessage ( message ) . hasMessage ( FOO ) ;  }
@ Test  public   void   naiveInjectionPrevention ()   {  Multimap < String ,  Object >   valueMap   =  HashMultimap . create () ;  valueMap . put ( """"node_id"""" ,  """"HP_123"""" ) ;  valueMap . put ( """"rel_id"""" ,  """"DELETE *"""" ) ;  exception . expect ( IllegalArgumentException . class ) ;  util . substituteRelationships ( """"({node_id})-[:${rel_id}!]-(end)"""" ,  valueMap ) ;  }
@ JavascriptInterface  public   void   fetchIIDToken ( String   entity )   {  Log . d ( TAG ,  """"JSBridge: fetchIIDToken"""" ) ;  }
@ Test  public   void   test_perform_build_step_aborted_without_notifying_stash ()   {  
public   void   setFisheyeAutoExposureMode ( int   value )   {  setOption ( RealSense . RS_OPTION_FISHEYE_AUTO_EXPOSURE_MODE ,  value ) ;  }
@ Test ( dependsOnMethods   =   """"testGetMe"""" )  public   void   testDeleteMe ()   throws  Exception   {  HttpDelete   request   =  new   HttpDelete ( getPath () ) ;  request . addHeader ( HttpHeaders . AUTHORIZATION ,  getAuthzHeader () ) ;  HttpResponse   response   =  client . execute ( request ) ;  assertEquals ( response . getStatusLine () . getStatusCode () ,  204 ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( id ,  self ) ;  }
@ Test  public   void   testGetGitHubText_ghe ()   {  try  ( MockedStatic < Jenkins >   mockedJenkins   =  Mockito . mockStatic ( Jenkins . class ) )   {  mockJenkins ( mockedJenkins ) ;  mockGithubSecurityRealmWebUriFor ( """"https:
@ Override  public   < F   extends  Comparable < ?   super  F > >   Chain < T >   max ( final   Function < T ,  F >   func )   {  return  new   Chain <> ( Underscore . max ( value () ,  func ) ) ;  }
@ Test  void   shortRunningTaskShouldBeAllowedToFinish ()   throws  Exception   {  final   MethodSchedulerTest . ShortRun   target   =  new   MethodSchedulerTest . ShortRun () ;  TimeUnit . SECONDS . sleep ( 5 ) ;  target . close () ;  MatcherAssert . assertThat ( target . finished ,  Matchers . equalTo ( true ) ) ;  }
private   void   worldCheck ( String   world )   {  if  ( world   !=   null   &&   ! world . isEmpty () )   {  throw  new   UnsupportedOperationException ( """"Privileges does not support multiple worlds for player/group metadata."""" ) ;  }  }
@ Test  public   void   challengedConstructorRaisesAnException ()  {  final   Map < String ,  JsonNode >   digests   =  Maps . newTreeMap () ;  digests . put ( K1 ,  JacksonUtils . nodeFactory () . nullNode () ) ;  digests . put ( CHALLENGED ,  JacksonUtils . nodeFactory () . nullNode () ) ;  final   SchemaDigest   digest   =  new   SchemaDigest ( null ,  digests ) ;  final   ProcessingReport   report   =  mock ( ProcessingReport . class ) ;  try  {  validatorBuilder . process ( report ,  digest ) ;  fail ( """"No exception thrown??"""" ) ;  }   catch  ( ProcessingException   ignored )   {  }  }
@ Test  public   void   newProperty_IsMultiValuedArray_whenStartingFromAnArray ()   {  assertThat ( ( String [] ) GraphUtil . getNewPropertyValue ( new   String [] { """"1"""" ,  """"2"""" } ,  """"3"""" ) ,  is ( new   String [] { """"1"""" ,  """"2"""" ,  """"3"""" } ) ) ;  }
@ DataBoundSetter  public   void   setDisableInprogressNotification ( boolean   disableInprogressNotification )   {  this . disableInprogressNotification   =   disableInprogressNotification ;  }
void   createFileHandle ()   {  newName   =   pomFile . getAbsolutePath ()   +   backupFileExtension ;  backupFile   =   new   File ( newName ) ;  }
private   Modifiers   getModifiers ( boolean   skip_latched )  {  int   n_ptrs   =  _ptrs . size () ;  KeyValue []   mods   =  new   KeyValue [ n_ptrs ] ;  int   n_mods   =  0 ;  for  ( int   i   =  0 ;   i   <   n_ptrs ;   i ++ )  {  Pointer   p   =  _ptrs . get ( i ) ;  if  ( p . value   !=   null  &&   ! ( skip_latched   &&   p . hasFlagsAny ( FLAG_P_LATCHED )  &&   ( p . flags   &   FLAG_P_LOCKED )   ==   0 ) )  mods [ n_mods ++ ]   =   p . value ;  }  return  Modifiers . ofArray ( mods ,  n_mods ) ;  }
static   JsonValue   of ( Object   obj )   {  if  ( obj   instanceof   JsonValue )   {  return  ( JsonValue )   obj ;  }   else if  ( obj   instanceof   Map )   {  return  new   JsonObject ( ( Map < String ,  Object > )   obj ) ;  }   else if  ( obj   instanceof   List )   {  return  new   JsonArray ( ( List < Object > )   obj ) ;  }   else if  ( obj   instanceof   JSONObject )   {  return  new   JsonObject ( toMap ( ( JSONObject )   obj ) ) ;  }   else if  ( obj   instanceof   JSONArray )   {  return  new   JsonArray ( toList ( ( JSONArray )   obj ) ) ;  }  return  new   JsonValue ( obj ) ;  }
@ SubscribeEvent ( receiveCanceled   =   true )  public   void   onPlayerLoggedOut ( PlayerEvent . PlayerLoggedOutEvent   event )  {  playerBoxes . remove ( event . getEntity () ) ;  }
@ Override  public   int   i2cOpen ( int   bus ,  int   device ,  int   flags )   {  logger . trace ( """"[I2C::OPEN] -> Open I2C Bus [{}] and Device [{}]; flags={}"""" ,  bus ,  device ,  flags ) ;  validateReady () ;  validateI2cBus ( bus ) ;  validateI2cDeviceAddress ( device ) ;  PiGpioPacket   tx   =  new   PiGpioPacket ( I2CO ,  bus ,  device ) . data ( flags ) ;  PiGpioPacket   rx   =  sendPacket ( tx ) ;  int   handle   =  rx . result () ;  logger . trace ( """"[I2C::OPEN] <- HANDLE={}; SUCCESS={}"""" ,   handle ,  rx . success () ) ;  validateResult ( rx ,  false ) ;  
private   double   getTotalInstCount ( List < AbstractBinInfo >   binInfos )   {  double   total   =  0.0 ;  for  ( AbstractBinInfo   binInfo   :  binInfos )   {  total   +=   ( binInfo . getNegativeCnt ()   +   binInfo . getPositiveCnt () ) ;  }  return  total ;  }
public   void   fillAsStringArray ( String   preferenceId ,  String   separator )   {  String []   preferenceValue   =  store . getString ( preferenceId ) . split ( separator ) ;  fillSetting ( preferenceId ,  preferenceValue ) ;  }
private   void   setUpFileActivity ( ServerShare   share ,  List < ServerFile >   files ,  ServerFile   file )   {  if  ( Intents . Builder . with ( getActivity () ) . isServerFileSupported ( file ) )   {  startFileActivity ( share ,  files ,  file ) ;  }  }
@ Override  public   Builder   proxy ( Proxy   proxy )   {  builder . proxy ( proxy ) ;  return  this ;  }
 <argument pos:start=""""""""787:82"""""""" pos:end=""""""""787:87""""""""><expr pos:start=""""""""787:82"""""""" pos:end=""""""""787:87""""""""><name pos:start=""""""""787:82"""""""" pos:end=""""""""787:87"""""""">blockZ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
public   TenantResponseModel   region ( String   region )   {  this . region   =   region ;  return  this ;  }
public   static   ByteIndexer   create ( byte []   array ,  Index   index )   {  return  new   ByteArrayIndexer ( array ,  index ) ;  }
public   void   setRemoteRegionTrustStore ( String   remoteRegionTrustStore )   {  this . remoteRegionTrustStore   =   remoteRegionTrustStore ;  }
@ Override  public   long   gpioHardwareRevision ()   {  logger . trace ( """"[HARDWARE] -> GET REVISION"""" ) ;  validateReady () ;  int   revision   =  PIGPIO . gpioHardwareRevision () ;  logger . trace ( """"[HARDWARE] <- REVISION: {}"""" ,  revision ) ;  if ( revision   <=   0 )   throw  new   PiGpioException ( """"Hardware revision could not be determined."""" ) ;  return  revision ;  }
@ Override  public   Object   shutdown ( Context   context )   throws  ShutdownException   {  return  null ;  }
public   void   setProperties ( List < PropertyRes >   properties )   {  this . properties   =   properties ;  }
@ Override  public   boolean   isPlaying ()   {  return  audioService . getAudioPlayer () . getPlayWhenReady () ;  }
@ Test ( dependsOnMethods   =   { """"testResolveL2AppBrandingAfterL1OrgBrandingDelete"""" } )  public   void   testDeleteRootAppBrandingPreference ()   throws  IOException   {  Response   response   =  getResponseOfDelete ( BRANDING_PREFERENCE_API_BASE_PATH   +   String . format  ( PREFERENCE_COMPONENT_WITH_QUERY_PARAM ,  APPLICATION_TYPE ,  rootAppId ,  DEFAULT_LOCALE ) ) ;  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT ) ;  }
@ Override   public   ULongIndexer   put ( long   i ,  long   j ,  BigInteger   l )   {  buffer . put ( ( int ) index ( i ,  j ) ,  fromBigInteger ( l ) ) ;  return  this ;  }
@ Test  void   sortingOfFullPomFileShouldNotAffectVerify ()   {  SortPomImplUtil . create ()  . sortProperties ()  . sortPlugins ( """"groupId,artifactId"""" )  . sortDependencies ( """"groupId,artifactId"""" )  . lineSeparator ( """"\n"""" )  . testVerifyXmlIsOrdered ( """"/SortProp_expected.xml"""" ) ;  }
public   static   String   encodeBytes ( byte []   source ,  int   off ,  int   len ,  int   options )  throws  java . io . IOException   {  byte []   encoded   =  encodeBytesToBytes ( source ,  off ,  len ,  options ) ;  
private   void   setUpRecentFiles ( ServerFile   serverFile )   {  long   size ;  if  ( isFileAvailableOffline ( serverFile ) )   {  size   =   new   File ( getOfflineFileUri ( serverFile . getName () ) ) . length () ;  }   else  {  size   =   serverFile . getSize () ;  }  String   serverName   =  Preferences . getServerName ( this ) ;  RecentFile   recentFile   =  new   RecentFile ( serverFile . getUniqueKey () , getImageUri ( serverFile ) , serverName , System . currentTimeMillis () , size ) ;  RecentFileRepository   recentFileRepository   =  new   RecentFileRepository ( this ) ;  recentFileRepository . insert ( recentFile ) ;  }
@ Test  public   void   testCommitsApi ()   throws  Exception  {  RequestBuilder   builder   =  new   RequestBuilder ( """"GET"""" ) ;  Request   request   =  builder . setUrl ( UriTemplate . buildFromTemplate ( BASE )  . literal ( PATH_EXPRESSION )  . build ()  . set ( """"user"""" ,  """"damnhandy"""" )  . set ( """"repo"""" ,  """"Handy-URI-Templates"""" )  . set ( """"function"""" , """"commits"""" )  . expand () ) . build () ;  Assert . assertEquals ( """"https:
@ Test  public   void   getBySubregion ()   throws  Exception   {  List < Country >   countries   =  CountryService . getInstance () . getBySubregion ( """"Northern Europe"""" ) ;  Assert . assertNotNull ( countries ) ;  Assert . assertFalse ( countries . isEmpty () ) ;  for ( Country   country   :  countries )   {  Assert . assertEquals ( """"Northern Europe"""" ,  country . getSubregion () ) ;  }  }
private   Optional < String >   getType ( final   PsiElement   targetElement ,  final   PsiElement   originalElement )   {  final   String   unquotedText   =  StringUtil . unquoteString ( originalElement . getText () ) ;  final   Optional < String >   refName   = Optional . of ( StringUtils . substringAfterLast ( unquotedText ,  """"/"""" ) )  . map ( v  ->   v . isEmpty ()  ?   unquotedText   :  v ) ;  return  refName . map ( name  ->  {  String   type   =  getUnquotedFieldValue ( targetElement ,  """"type"""" ) . orElse ( """"undefined type"""" ) ;  return  String . format ( """"%s: %s"""" ,  name ,  type ) ;  } ) ;  }
 <argument pos:start=""""""""140:66"""""""" pos:end=""""""""140:69""""""""><expr pos:start=""""""""140:66"""""""" pos:end=""""""""140:69""""""""><literal type=""""""""boolean"""""""" pos:start=""""""""140:66"""""""" pos:end=""""""""140:69"""""""">true</literal></expr></argument>)</argument_list></call> <operator pos:start=""""""""140:72"""""""" pos:end=""""""""140:72"""""""">*</operator> <literal type=""""""""number"""""""" pos:start=""""""""140:74"""""""" pos:end=""""""""140:77"""""""">0.02</literal></expr></argument>
public   static   RoleDefinitionEntry   fromPermissionEntry ( PermissionEntry   entry )   {  final   RoleDefinitionEntry   roleDefinitionEntry   =  new   RoleDefinitionEntry () ;  roleDefinitionEntry . type   =   entry . getType () ;  roleDefinitionEntry . name   =   entry . getSid () ;  return  roleDefinitionEntry ;  }
@ Bean  public   EurekaServiceRegistry   eurekaServiceRegistry ( EurekaInstanceConfigBean   eurekaInstanceConfigBean )   {  return  new   EurekaServiceRegistry ( eurekaInstanceConfigBean ) ;  }
private   void   printLogMessageWhenValueOrShouldMatchToIsEmpty ( String   name ,  String   value ,  String   shouldMatchTo )   {  String   commonLogMessage   = """"since one of the values was null! (value = '""""  +   value  +   """"'; shouldMatchTo = '""""  +   shouldMatchTo  +   """"')."""" ;  if  ( name   !=   null )   {  getLog () . warn ( """"Skipping validation '""""   +   name   +   """"' """"   +   commonLogMessage ) ;  }   else  {  getLog ()  . warn ( """"Skipping an unidentified validation (please set the name property-tag to be able to""""  +   """" identify the validation) """"  +   commonLogMessage ) ;  }  }
@ Parameterized . Parameters ( name   =   """"{1}"""" )  public   static   Collection < Object [] >   testData ()   throws  Exception  {  File   file   =  new   File ( """"./uritemplate-test/spec-examples.json"""" ) ;  return  loadTestData ( file ) ;  }
private   TreePath   expectedDiffSubtree ()   {  return  MoreTrees . findSubtreePath ( COMPILATION_UNIT ,  Tree . Kind . METHOD ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  AccessToken   that   =  ( AccessToken )   o ;  return  Objects . equals ( tokenType ,  that . tokenType )   &&   ( scopes   ==   null  ?   that . scopes   ==   null   : scopes . size ()   ==   that . scopes . size ()   &&   scopes . containsAll ( that . scopes ) )   &&  ( claims   ==   null  ?   that . claims   ==   null   : claims . size ()   ==   that . claims . size ()   &&   claims . containsAll ( that . claims ) ) ;  }
@ After  public   void   tearDown ()   throws  IOException   {  reader . close () ;  }
void   send_text ( CharSequence   text )  {  InputConnection   conn   =  _recv . getCurrentInputConnection () ;  if  ( conn   ==   null )  return;  conn . commitText ( text ,  1 ) ;  _autocap . typed ( text ) ;  }
protected   final   JSONSchemaParser   getSchemaParser ()   {  return  JSON_SCHEMA_PARSER ;  }
@ Override  public   MutableComponent   failure ( Object   componentOrString )   {  return  color ( componentOrString ,  theme () . text . colors () . failure () ) ;  }
public   static   boolean   isObject ( final   Object   object )   {  return  object   instanceof   Map ;  }
private   HttpResponse   sendPostRequestWithParameters ( HttpClient   client ,  List < NameValuePair >   urlParameters ,  String   url )  throws  ClientProtocolException ,  IOException   {  HttpPost   request   =  new   HttpPost ( url ) ;  request . setHeader ( """"User-Agent"""" ,  OAuth2Constant . USER_AGENT ) ;  request . setEntity ( new   UrlEncodedFormEntity ( urlParameters ) ) ;  HttpResponse   response   =  client . execute ( request ) ;  return  response ;  }
@ Test  public   void   testDeleteDirectorySuccess ()   {  assertTrue ( FileSystemUtils . delete ( sourceDirectory ,  true ) ) ;  assertFalse ( sourceDirectory . exists () ) ;  }
public   void   storeMetadata ( RepoModule   repoModule ,  byte []   data )   throws  IOException   {  Files . write ( new   File ( this . cacheRoot ,  repoModule . id   +   """".prop"""" ) ,  data ) ;  }
public   static   PwmPresetBuilder   newInstance ( String   name )   {  return  new   DefaultPwmPresetBuilder ( name ) ;  }
@ DataBoundSetter  public   void   setJsonReportDirectory ( String   jsonReportDirectory )   {  this . jsonReportDirectory   =   jsonReportDirectory ;  }
@ NonNull  @ Override  public   String   getDisplayName ()   {  return  """"Basic/Digest Authentication"""" ;  }
public   int   getDaysSinceOnsetOfSymptoms ()   {  return  daysSinceOnsetOfSymptoms ;  }
@ SuppressLint ( """"MissingPermission"""" )  public   void   invalidateAuthToken ( String   auth )   {  getAccountManager () . invalidateAuthToken ( accountType ,  auth ) ;  }
private   void   adjustLyricAndAlias ()   {  if  ( editMode . get () )   {  return;  }  for  ( double   offsetX   :  drawnHBoxes . keySet () )   {  HBox   hBox   =  drawnHBoxes . get ( offsetX ) ;  hBox . getChildren () . clear () ;  if  ( ! lyric . get () . isEmpty () )   {  hBox . getChildren () . add ( drawnLyrics . get ( offsetX ) ) ;  }  if  ( ! alias . get () . isEmpty () )   {  hBox . getChildren () . add ( drawnAliases . get ( offsetX ) ) ;  }  }  }
public   static   void   dumpRelationship ( Edge   relationship )   {  System . out . println ( String . format ( """"%s [%s->%s] (%s)"""" , relationship . getId () ,  relationship . getVertex ( Direction . OUT ) . getId () , relationship . getVertex ( Direction . IN ) . getId () , relationship . getLabel () ) ) ;  dumpProperties ( relationship ) ;  }
public   static   void   check (  int   expected ,  int   actual )   throws  IOException   {  if  (  expected   !=   actual )   throw  new   IOException (  """"check expected """"   +   Integer . toHexString (  0xff   &   expected )   +   """", found """"   +   Integer . toHexString (  0xff   &   actual ) ) ;  }
@ Override  public   void   doHook ()   throws  Exception   {  if  ( ! WppCore . getPrivBoolean ( """"dndmode"""" , false ) )   return;  var   dndMethod   =  Unobfuscator . loadDndModeMethod ( classLoader ) ;  logDebug ( Unobfuscator . getMethodDescriptor ( dndMethod ) ) ;  XposedBridge . hookMethod ( dndMethod ,  XC_MethodReplacement . DO_NOTHING ) ;  }
public   List < Entry >   getEntries ( int   start ,  int   count )   {  List < Entry >   result   =  Lists . newArrayList () ;  int   index   =  start ;  int   itemsToReturn   =  count ;  synchronized  ( entries )   {  Iterator < Entry >   iter   =  entries . iterator () ;  while  ( iter . hasNext ()   &&   index   >   0 )   {  iter . next () ;  index -- ;  }  while  ( iter . hasNext ()   &&   itemsToReturn   >   0 )   {  result . add ( iter . next () ) ;  itemsToReturn -- ;  }  }  return  result ;  }
@ Override  public   void   startOfProcess ()   {  var   previousBaseIndent   =  baseIndent . substring ( INDENT_LENGTH ) ;  builder . append ( previousBaseIndent ) . append ( """"HierarchyWrapper{\n"""" ) ;  processFirstOtherContent   =   true ;  }
@ Override   public   ULongIndexer   get ( long []   indices ,  BigInteger []   l ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  l [ offset   +   n ]   =   toBigInteger ( array [ ( int ) index ( indices )   +   n ] ) ;  }  return  this ;  }
@ Override   public   boolean   equals ( Object   o )   {  if  ( this   ==   o )  return  true ;  if  ( ! canEqual ( o ) )   {  return  false ;  }  if  ( ! super . equals ( o ) )  return  false ;  SchemaReferencedEvent   that   =  ( SchemaReferencedEvent )   o ;  return  referredSchema . equals ( that . referredSchema ) ;  }
@ Override   public   ByteIndexer   get ( long   i ,  long   j ,  byte []   b ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  b [ offset   +   n ]   =   array [ ( int ) index ( i ,  j )   +   n ] ;  }  return  this ;  }
public   static   Screen   createEditorScreen ( IEditorMenu   menu )  {  return  new   EditorScreen ( Minecraft . getInstance () . screen ,  menu ) ;  }
public   int   getApplicationsResolverDataStalenessThresholdSeconds ()   {  return  applicationsResolverDataStalenessThresholdSeconds ;  }
@ SubscribeEvent  public   static   void   registerEntityRenders ( EntityRenderersEvent . RegisterRenderers   event )  {  event . registerEntityRenderer ( ModEntities . PROJECTILE . get () ,  ProjectileRenderer :: new ) ;  event . registerEntityRenderer ( ModEntities . GRENADE . get () ,  GrenadeRenderer :: new ) ;  event . registerEntityRenderer ( ModEntities . MISSILE . get () ,  MissileRenderer :: new ) ;  event . registerEntityRenderer ( ModEntities . THROWABLE_GRENADE . get () ,  ThrowableGrenadeRenderer :: new ) ;  event . registerEntityRenderer ( ModEntities . THROWABLE_STUN_GRENADE . get () ,  ThrowableGrenadeRenderer :: new ) ;  }
private   boolean   isDoubleFrequentVariable ( String []   items )   {  for ( String   string :  items ) {  if ( ! StringUtils . isNotBlank ( string ) ) {  try {  Double . parseDouble ( string ) ;  } catch ( NumberFormatException   e ) {  return  false ;  }  }  }  return  true ;  }
public   void   addRow ( Cursor   cursor )   {  addRow ( QueryRow . fromCursor ( cursor ) ) ;  }
@ Override   public   UIntIndexer   put ( long   i ,  long   j ,  long   k ,  long   n )   {  buffer . put ( ( int ) index ( i ,  j ,  k ) ,  ( int ) n ) ;  return  this ;  }
public   Map < String , FlagPermissions >   getGlobalGroupDefaultFlags ()  {  return  globalGroupDefaults ;  }
public   void   addVowelMapping ( String   key ,  String   vowel )   {  newConfig . vowelMappings . put ( key ,  vowel ) ;  }
public   void   release ()   throws  Exception   {  if  ( writer   !=   null )   {  writer . release () ;  writer   =   null ;  }  }
protected   void   addProvider ( Context   context ,  String   providerId )   throws  ProviderException   {  var   provider   =  context . providers () . get ( providerId ) ;  this . providers . put ( IOType . getByProviderClass ( provider . getClass () ) ,  provider ) ;  }
@ BeforeClass   public   static   void   setUpClass ()   throws  Exception   {  System . out . println ( """"Builder"""" ) ;  Class   c   =  ThreadTest . class ;  Builder   builder   =  new   Builder () . classesOrPackages ( c . getName () ) ;  File []   outputFiles   =  builder . build () ;  System . out . println ( """"Loader"""" ) ;  Loader . load ( c ) ;  }
@ Override  public   PROVIDER_TYPE   initialize ( Context   context )   throws  InitializeException   {  this . context   =   context ;  return  ( PROVIDER_TYPE ) this ;  }
public   Object   unmarshal ( HierarchicalStreamReader   reader , UnmarshallingContext   context )   {  GithubSecurityRealm   realm   =  new   GithubSecurityRealm () ;  String   node ;  String   value ;  while  ( reader . hasMoreChildren () )   {  reader . moveDown () ;  node   =   reader . getNodeName () ;  value   =   reader . getValue () ;  setValue ( realm ,  node ,  value ) ;  reader . moveUp () ;  }  if  ( realm . getGithubWebUri ()   ==   null )   {  realm . setGithubWebUri ( DEFAULT_WEB_URI ) ;  }  if  ( realm . getGithubApiUri ()   ==   null )   {  realm . setGithubApiUri ( DEFAULT_API_URI ) ;  }  return  realm ;  }
@ Override  public   void   onClick ( View   v )   {  mPicker . setCurrentColor ( preference . defaultColor ) ;  }
@ Override  public   int   i2cWriteBlockData ( int   handle ,  int   register ,  byte []   data ,  int   offset ,  int   length )   {  logger . trace ( """"[I2C::WRITE] -> [{}]; Register [{}]; Block [{} bytes]; offset={}"""" ,  handle  , register ,  length ,  offset ) ;  validateReady () ;  validateHandle ( handle ) ;  validateI2cRegister ( register ) ;  validateI2cBlockLength ( length ) ;  Objects . checkFromIndexSize ( offset ,  length ,  data . length ) ;  
public   static   File   getLayoutsDirectory () {  String   appDirectory   =  getAppDirectory () . getAbsolutePath () ;  File   layoutsDirectory   =  new   File ( appDirectory   +   File . separator   +   Preferences . LAYOUTS_SUBDIR ) ;  layoutsDirectory . mkdirs () ;  return  layoutsDirectory ;  }
@ Override  protected   Object   createSettings ()   {  Map < String ,  Object >   settings   =  new   HashMap <> () ;  
@ SubscribeEvent  public   void   onRespawn ( ClientPlayerNetworkEvent . Clone   event )  {  this . bullets . clear () ;  }
@ Override  public   PendingResult < Cast . ApplicationConnectionResult >   joinApplication ( GoogleApiClient   client ,  String   applicationId )   {  return  null ;  }
public   static   UriTemplateBuilder   createBuilder ()  {  return  new   UriTemplateBuilder () ;  }
@ NonNull  public   static   InstanceSettings   instanceFromId ( Context   context ,  Integer   widgetId )   {  ensureLoadedFromFiles ( context ,  false ) ;  synchronized  ( instances )   {  InstanceSettings   settings   =  instances . get ( widgetId ) ;  return  settings   ==   null  ?   newInstance ( context ,  widgetId )   :  settings ;  }  }
public   record   OwnerRequest ( @ NotBlank   String   firstName , @ NotBlank   String   lastName , @ NotBlank   String   address , @ NotBlank   String   city , @ NotBlank  @ Digits ( fraction   =   0 ,  integer   =   12 )  String   telephone )   {  }
public   void   testAdd ()   throws  Exception   {  DTEarlyStopDecider   dtEarlyStopDecider   =  new   DTEarlyStopDecider ( 6 ) ;  LOG . info ( """"Total iteration size: {}"""" ,  this . validationErrorList . size () ) ;  int   iteration   =  0 ;  for ( ;   iteration   <   this . validationErrorList . size () ;   iteration ++ )   {  if ( dtEarlyStopDecider . add ( this . validationErrorList . get ( iteration ) ) )   {  
@ Override  public   void   fire ( TestSuiteEvent   event )   {  for  ( LifecycleListener   listener   :  listeners )   {  try  {  listener . fire ( event ) ;  }   catch  ( Exception   e )   {  logError ( listener ,  e ) ;  }  }  }
@ Override  public   void   handleServiceRequest ( IGmsCallbacks   callback ,  GetServiceRequest   request ,  GmsService   service )   throws  RemoteException   {  callback . onPostInitComplete ( 0 ,  new   PlacesServiceImpl () . asBinder () ,  null ) ;  }
public   T   elementAt ( final   int   index )   {  return  elementAt ( ( List < T > )   value () ,  index ) ;  }
@ Override   public   String   toString ()   {  return  """"JsonValue{""""   +  """"obj=""""   +   obj   +  '}' ;  }
public   int   getValue ( Random   random )   {  return  ( int )   powerDist . inverseF ( random . nextDouble () ) ;  }
@ Override  public   void   initV2 ( IObjectWrapper   resources ,  int   flags )   throws  RemoteException   {  ResourcesContainer . set ( ( Resources )   ObjectWrapper . unwrap ( resources ) ) ;  }
public   static   ByteIndexer   create ( ByteBuffer   buffer )   {  return  new   ByteBufferIndexer ( buffer ) ;  }
@ Test  @ Timeout ( 5000 )  public   void   testHandshakeRejectionTestCase22 ()   throws  Exception   {  ArrayList < IProtocol >   protocols   =  new   ArrayList <> () ;  protocols . add ( new   Protocol ( """"chat2"""" ) ) ;  protocols . add ( new   Protocol ( """"chat3"""" ) ) ;  protocols . add ( new   Protocol ( """"chat1"""" ) ) ;  testProtocolRejection ( 22 ,  new   Draft_6455 ( Collections . < IExtension > emptyList () ,  protocols ) ) ;  }
private   static   void   setDirectory ( Uri   uri )   {  if  ( uri   ==   null )   return;  if  ( mOnFilePickedListener   ==   null )   {  mOnUriPickedListener . onUriPicked ( uri ) ;  mOnUriPickedListener   =   null ;  }  if  ( mOnFilePickedListener   !=   null )   {  String   realPath   =  null ;  try  {  realPath   =   RealPathUtil . getRealFolderPath ( mActivity ,  uri ) ;  }   catch  ( Exception   ignored )   {  }  if  ( realPath   ==   null )   return;  mOnFilePickedListener . onFilePicked ( new   File ( realPath ) ) ;  mOnFilePickedListener   =   null ;  }  }
@ Override  public   int   hashCode ()   {  return  Arrays . hashCode ( new   Object []   {  cellStatus ,  wifiStatus ,  elapsedRealtimeNanos  } ) ;  }
public   boolean   supportsStoredFunctionsUsingCallSyntax ()   throws  SQLException   {  return  false ;  }
public   void   fire ( TestCaseFinishedEvent   event )   {  TestCaseResult   testCase   =  testCaseStorage . get () ;  event . process ( testCase ) ;  Step   root   =  stepStorage . pollLast () ;  if  ( Status . PASSED . equals ( testCase . getStatus () ) )   {  new   RemoveAttachmentsEvent ( AllureConfig . newInstance () . getRemoveAttachments () ) . process ( root ) ;  }  testCase . getSteps () . addAll ( root . getSteps () ) ;  testCase . getAttachments () . addAll ( root . getAttachments () ) ;  stepStorage . remove () ;  testCaseStorage . remove () ;  notifier . fire ( event ) ;  }
private   void   removeLocalClaim ( String   localClaimId )   {  getResponseOfDelete ( CLAIM_DIALECTS_ENDPOINT_URI   +   LOCAL_CLAIMS_ENDPOINT_URI   +   """"/""""   +   localClaimId )  . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT ) ;  }
 <argument pos:start=""""""""233:56"""""""" pos:end=""""""""233:58""""""""><expr pos:start=""""""""233:56"""""""" pos:end=""""""""233:58""""""""><literal type=""""""""number"""""""" pos:start=""""""""233:56"""""""" pos:end=""""""""233:58"""""""">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type=""""""""line"""""""" pos:start=""""""""233:62"""""""" pos:end=""""""""233:87"""""""">
@ Override  public   void   create ()   {  super . create () ;  setTitle ( """"Add Schema"""" ) ;  setMessage ( """"Associate YAML Schema"""" ) ;  }
@ Test  public   void   getByNamePriority ()   throws  Exception   {  List < Country >   countries   =  CountryService . getInstance () . getByName ( """"Iran"""" ,  false ) ;  Assert . assertNotNull ( countries ) ;  Assert . assertFalse ( countries . isEmpty () ) ;  Assert . assertEquals ( """"Iran (Islamic Republic of)"""" ,  countries . get ( 0 ) . getName () ) ;  countries   =   CountryService . getInstance () . getByName ( """"United"""" ,  false ) ;  Assert . assertNotNull ( countries ) ;  Assert . assertFalse ( countries . isEmpty () ) ;  Assert . assertEquals ( """"United States Minor Outlying Islands"""" ,  countries . get ( 0 ) . getName () ) ;  }
public   boolean   isAllowGithubWebHookPermission ()   {  return  allowGithubWebHookPermission ;  }
@ Test  @ Timeout ( 5000 )  public   void   testHandshakeRejectionTestCase29 ()   throws  Exception   {  testProtocolRejection ( 29 ,  new   Draft_6455 ( Collections . < IExtension > emptyList () , Collections . < IProtocol > singletonList ( new   Protocol ( """"opc"""" ) ) ) ) ;  }
public   static   < K ,  V >   Function < Map < K ,  V > ,  V >   iteratee ( final   K   key )   {  return  item  ->   item . get ( key ) ;  }
@ ApiModelProperty ( value   =   """"Decides the credentials for the service account to access Google Play Integrity Service."""" )  @ JsonProperty ( """"androidAttestationServiceCredentials"""" )  @ Valid  public   Object   getAndroidAttestationServiceCredentials ()   {  return  androidAttestationServiceCredentials ;  }
public   static   ViewAction   waitForView ( final   int   viewId ,  final   long   timeout )   {  return  new   WaitForView ( viewId ,  timeout ) ;  }
public   static   void   tryLoad ()   throws  Exception   {  if  ( loadingException   !=   null )   {  throw  loadingException ;  }   else  {  try  {  Loader . load ( org . bytedeco . libfreenect . global . freenect . class ) ;  }   catch  ( Throwable   t )   {  throw  loadingException   =   new   Exception ( """"Failed to load """"   +   OpenKinectFrameGrabber . class ,  t ) ;  }  }  }
@ Test  @ SuppressWarnings ( """"serial"""" )  void   getNull ()   {  assertNull ( U . < String > get ( ( Map < String ,  Object > )   null ,  """"a[0].b.c"""" ) ) ;  assertNull ( U . < String > get ( new   LinkedHashMap < String ,  Object > ()   { {  put ( """"b"""" ,  LodashTest . class ) ;  } } , """"a[0].b.c"""" ) ) ;  assertNull ( U . < String > get ( new   LinkedHashMap < String ,  Object > ()   { {  put ( """"a"""" ,  LodashTest . class ) ;  } } , """"a[0].b.c"""" ) ) ;  }
@ Test  public   void   thatRootKeysAreSuggested ()   {  getCaretCompletions ( """"root"""" )  . assertContains ( """"info"""" ,  """"servers"""" ,  """"paths"""" ,  """"components"""" ,  """"security"""" ,  """"tags"""" ,  """"externalDocs"""" )  . isOfSize ( 7 ) ;  }
@ Override   public   DoubleIndexer   put ( long []   indices ,  double []   d ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  buffer . put ( ( int ) index ( indices )   +   n ,  d [ offset   +   n ] ) ;  }  return  this ;  }
@ Test  void   testGetCpuRevision_CorruptedFile ()   throws  IOException   {  try  ( FileWriter   writer   =  new   FileWriter ( tempCpuInfoFile ) )   {  writer . write ( """"This is not valid CPU info\n"""" ) ;  }  CommandResult   result   =  CpuInfoReader . getCpuRevision () ;  assertFalse ( result . isSuccess () ) ;  assertEquals ( """""""" ,  result . getOutputMessage () ) ;  assertEquals ( """"CPU revision not found in file"""" ,  result . getErrorMessage () ) ;  }
@ Override  public   boolean   onBackPressed ( FoxActivity   compatActivity )   {  compatActivity . setTitle ( R . string . app_name ) ;  compatActivity . getSupportFragmentManager () . beginTransaction () . replace ( R . id . settings ,  this ) . setTransition ( FragmentTransaction . TRANSIT_FRAGMENT_FADE ) . commit () ;  return  true ;  }
@ Override  public   void   onViewCreated ( View   view ,  @ Nullable   Bundle   savedInstanceState )   {  super . onViewCreated ( view ,  savedInstanceState ) ;  setUpListView ( view ) ;  }
default   Future < ? >   blinkAsync ( int   interval ,  TimeUnit   unit ) {  return  this . blinkAsync ( interval ,  interval ,  unit ,  DigitalState . HIGH ) ;  }
@ ApiModelProperty ( example   =   """"http:
public   static   ByteIndexer   create ( BytePointer   pointer )   {  return  new   ByteRawIndexer ( pointer ) ;  }
public   static   void   show_dialog_on_ime ( AlertDialog   dialog ,  IBinder   token )  {  Window   win   =  dialog . getWindow () ;  WindowManager . LayoutParams   lp   =  win . getAttributes () ;  lp . token   =   token ;  lp . type   =   WindowManager . LayoutParams . TYPE_APPLICATION_ATTACHED_DIALOG ;  win . setAttributes ( lp ) ;  win . addFlags ( WindowManager . LayoutParams . FLAG_ALT_FOCUSABLE_IM ) ;  dialog . show () ;  }
public   static   UserDefinedLocalAuthenticatorUpdate   getBasedUserDefinedLocalAuthenticatorUpdate ( UserDefinedLocalAuthenticatorConfig   config )   {  UserDefinedLocalAuthenticatorUpdate   configForUpdate   =  new   UserDefinedLocalAuthenticatorUpdate () ;  configForUpdate . setDisplayName ( config . getDisplayName () ) ;  configForUpdate . setIsEnabled ( config . isEnabled () ) ;  configForUpdate . setEndpoint ( convertToEndpoint ( config . getEndpointConfig () ) ) ;  return  configForUpdate ;  }
@ Override   public   BooleanIndexer   put ( long   i ,  boolean   b )   {  array [ ( int ) index ( i ) ]   =   b ;  return  this ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( ! ( o   instanceof   BrowserPublicKeyCredentialCreationOptions ) )   return  false ;  BrowserPublicKeyCredentialCreationOptions   that   =  ( BrowserPublicKeyCredentialCreationOptions )   o ;  if  ( delegate   !=   null  ?   ! delegate . equals ( that . delegate )   :  that . delegate   !=   null )   return  false ;  if  ( origin   !=   null  ?   ! origin . equals ( that . origin )   :  that . origin   !=   null )   return  false ;  return  Arrays . equals ( clientDataHash ,  that . clientDataHash ) ;  }
public   double   getWidthX ()   {  double   measureWidth   =  4   *   scaler . scaleX ( Quantizer . COL_WIDTH ) ;  return  measureWidth   *   ( track . getNumMeasures ()   +   1 ) ;   
@ Override  protected   boolean   canEqual ( Object   other )   {  return  other   instanceof   NumberSchema ;  }
@ Override   public   IntPointer   limit ( long   limit )   {  return  super . limit ( limit ) ;  }
@ Override  public   boolean   playerInGroup ( String   world ,  String   player ,  String   group )   {  return  new   KPlayer ( player ,  kperms ) . isMemberOfGroup ( group ) ;  }
public   UriTemplateBuilder   continuation ( String ...   var )  {  return  continuation ( toVarSpec ( var ) ) ;  }
private   boolean   isTaskThrottledPipeline ( Task   origTask ,  List < FlowNode >   flowNodes )   {  if  ( origTask   instanceof   PlaceholderTask   task )   {   
@ Override  public   void   serialize ( UriTemplate   value ,  JsonGenerator   jgen ,  SerializerProvider   provider )   throws  IOException , JsonProcessingException  {  jgen . writeString ( value . getTemplate () ) ;  }
public   synchronized   boolean   willBeEvaluating ()   {  if  ( ! evaluating   &&   ! evaluated   &&   evaluation   !=   null )   {  return  evaluating   =   true ;  }   else  {  return  false ;  }  }
@ Override  public   Integer   call ()   throws  Exception   {  return  countChanged . get () ;  }
public   SortPomImplUtil   sortExecutions ()   {  sortExecutions   =   true ;  return  this ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"key"""" )  @ Valid  public   String   getKey ()   {  return  key ;  }
@ Test  public   void   testDefinitionRefValueInSchema ()   {  getCaretCompletions ( """"definition_ref_value_in_schema"""" )  . assertContains ( """"#/definitions/Pets"""" ,  """"#/definitions/Error"""" )  . isOfSize ( 2 ) ;  }
public   static   UByteIndexer   create ( byte []   array ,  long ...   sizes )   {  return  new   UByteArrayIndexer ( array ,  sizes ) ;  }
@ Test  void   healthCheckUrlPathWithServerPortAndContextPathKebobCase ()   {  TestPropertyValues  . of ( """"server.port=8989"""" ,  """"server.servlet.context-path=/servletContextPath"""" , """"eureka.instance.health-check-url-path=${server.servlet.context-path:}/myHealthCheck"""" )  . applyTo ( this . context ) ;  setupContext ( RefreshAutoConfiguration . class ) ;  EurekaInstanceConfigBean   instance   =  this . context . getBean ( EurekaInstanceConfigBean . class ) ;  assertThat ( instance . getHealthCheckUrl () ) . as ( """"Wrong health check: """"   +   instance . getHealthCheckUrl () )  . endsWith ( """":8989/servletContextPath/myHealthCheck"""" ) ;  }
 <argument pos:start=""""""""501:60"""""""" pos:end=""""""""501:63""""""""><expr pos:start=""""""""501:60"""""""" pos:end=""""""""501:63""""""""><name pos:start=""""""""501:60"""""""" pos:end=""""""""501:63"""""""">page</name></expr></argument>)</argument_list></call></expr>;</return>
public   IdpInitiatedSingleLogout   addReturnToUrls ( String   returnToUrl )   {  if  ( this . returnToUrls   ==   null )   {  this . returnToUrls   =   new   ArrayList <> () ;  }  this . returnToUrls . add ( returnToUrl ) ;  return  this ;  }
@ Test  void   defaultSortOrderFromNonExistingShouldThrowException ()   {  var   fileUtil   =  createFileUtil ( """"zzz_Attribute_expected.xml"""" ) ;  var   thrown   =  assertThrows ( IOException . class ,  fileUtil :: getDefaultSortOrderXml ) ;  assertThat ( thrown . getMessage () ,  startsWith ( """"Could not find"""" ) ) ;  assertThat ( thrown . getMessage () ,  endsWith ( """"or zzz_Attribute_expected.xml in classpath"""" ) ) ;  }
public   static   void   assertHasPermission ( User   user ,  final   AccessControlled   item ,  final   Permission ...   permissions )   {  for  ( Permission   permission   :  permissions )   {  assertPermission ( user ,  item ,  permission ) ;  }  }
@ Override  public   boolean   playerAddGroup ( String   worldName ,  String   playerName ,  String   groupName )   {  PermissionGroup   group   =  PermissionsEx . getPermissionManager () . getGroup ( groupName ) ;  PermissionUser   user   =  PermissionsEx . getPermissionManager () . getUser ( playerName ) ;  if  ( group   ==   null   ||   user   ==   null )   {  return  false ;  }   else  {  user . addGroup ( groupName ,  worldName ) ;  return  true ;  }  }
@ SuppressWarnings ( """"unchecked"""" )  public   double   median ()   {  return  median ( ( Iterable < Number > )   getIterable () ) ;  }
private   void   displayStatus ()   {  System . out . println ( Thread . currentThread ()   +   """" on """"   +   Affinity . getCpu ()   +   """"\n""""   +   AffinityLock . dumpLocks () ) ;  }
@ NonNull  public   PublicKeyCredentialRequestOptions   build ()   {  return  new   PublicKeyCredentialRequestOptions ( challenge ,  timeoutSeconds ,  rpId ,  allowList ,  requestId ,  tokenBinding ,  requireUserVerification ,  authenticationExtensions ) ;  }
@ Override  public   void   init ( FilterConfig   filterConfig )   throws  ServletException   {  keyParam   =   filterConfig . getInitParameter ( KEY_REQUEST_PARAM ) ;  if  ( ! isNullOrEmpty ( filterConfig . getInitParameter ( DEFAULT_API_KEY ) ) )   {  defaultApiKey   =   Optional . of ( filterConfig . getInitParameter ( DEFAULT_API_KEY ) ) ;  }  }
public   float   getContentOffsetX ()  {  return  margin . left   +   border . left   +   padding . left ;  }
public   synchronized   void   clear ()   {  markupMap . clear () ;  mapView . items () . removeAllItems () ;  drawableMarkups . clear () ;  mapView . drawables () . clear () ;  redraw () ;  }
@ Override  boolean   doHandle ( Request   request ,  Response   response ,  Callback   callback )   {  Enumeration < String >   headers   =  request . getHeaders () . getValues ( """"customHeader"""" ) ;  String   value1   =  headers . nextElement () ;  String   value2   =  headers . nextElement () ;  assertFalse ( headers . hasMoreElements () ) ;  assertEquals ( """"value1"""" ,  value1 ) ;  assertEquals ( """"value2"""" ,  value2 ) ;  return  okAllIsWell ( response ,  callback ) ;  }
@ Override  public   float   getMinimalWidth ()  {  return  boxw   +   declMargin . left   +   padding . left   +   border . left   +  declMargin . right   +   padding . right   +   border . right ;  }
private   List < Object >   readArray ()   {  read () ;  List < Object >   array   =  new   ArrayList <> () ;  skipWhiteSpace () ;  if  ( readChar ( ']' ) )   {  return  array ;  }  do  {  skipWhiteSpace () ;  array . add ( readValue () ) ;  skipWhiteSpace () ;  }  while  ( readChar ( ',' ) ) ;  if  ( ! readChar ( ']' ) )   {  throw  expected ( """"',' or ']'"""" ) ;  }  return  array ;  }
private   Uri   getAudioUri ()   {  if  ( getShare ()   !=   null )   {  return  serverClient . getFileUri ( getShare () ,  getFile () ) ;  }   else  {  return  getRecentFileUri () ;  }  }
private   void   loadThinProperties ( Properties   props ,  String []   locations ,  String   name ,  String []   profiles )   {  for  ( String   profile   :  profiles )   {  String   path   =  name   +   ( """""""" . equals ( profile )  ?   """"""""   :  """"-"""" )   +   profile   +   """".properties"""" ;  for  ( String   location   :  locations )   {  try  {  if  ( ! location . endsWith ( """"/"""" ) )   {  location   =   location   +   """"/"""" ;  }  loadProperties ( props ,  location ,  path ) ;  }  catch  ( Exception   e )   {  throw  new   IllegalStateException ( """"Cannot load properties"""" ,  e ) ;  }  }  }  }
@ Test ( priority   =   7 ,  groups   =   """"wso2.is"""" ,  description   =   """"Test deleteUserClaimValues operation"""" )  public   void   testDeleteUserClaimValues ()  throws  RemoteUserStoreManagerServiceUserStoreExceptionException ,  RemoteException   {  
private   void   writeSamples ( int   nb_samples )   throws  Exception   {  if  ( samples_out   ==   null   ||   samples_out . length   ==   0 )   {  return;  }  frame . nb_samples ( nb_samples ) ;  avcodec_fill_audio_frame ( frame ,  audio_c . ch_layout () . nb_channels () ,  audio_c . sample_fmt () ,  samples_out [ 0 ] ,  ( int ) samples_out [ 0 ] . position () ,  0 ) ;  for  ( int   i   =  0 ;   i   <   samples_out . length ;   i ++ )   {  int   linesize   =  0 ;  if  ( samples_out [ 0 ] . position ()   >   0   &&   samples_out [ 0 ] . position ()   <   samples_out [ 0 ] . limit () )   {  
@ Test  public   void   parseLeaderPriority ()   {  List < String >   leaderPriority   =  cliqueConfiguration . getLeaderPriority () ;  assertThat ( leaderPriority , contains ( """"http:
@ Override  public   String   getServiceId ()   {  return  this . instanceConfig . getAppname () ;  }
@ NonNull  @ Override  public   Task < Location >   getCurrentLocation ( int   priority ,  CancellationToken   cancellationToken )   {  return  null ;  }
public   static   ExtensionList < RoleMacroExtension >   all ()   {  return  ExtensionList . lookup ( RoleMacroExtension . class ) ;  }
@ Test ( groups   =   """"wso2.is"""" ,  dependsOnMethods   =   """"addUserIntoJDBCUserStore"""" ,  description   =   """"Check count enabled by user stores"""" )  public   void   getCountEnabledUserStores ()   throws  Exception   {  Assert . assertTrue ( userStoreCountServiceClient . getCountableUserStores () . contains ( DOMAIN_ID ) , """"no count enabled user stores"""" ) ;  }
@ Override  public   boolean   hasSuperPermsCompat ()   {  return  rscpAPI . hasSuperPermsCompat () ;  }
public   static   boolean   isAllStopwords ( List < String >   words )   {  for  ( String   word   :  words )   {  if  ( ! isStopword ( word ) )   {  return  false ;  }  }  return  true ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"operation"""" )  @ Valid  public   OperationEnum   getOperation ()   {  return  operation ;  }
default   int   readRegister ( int   register ,  char []   buffer )   {  return  readRegister ( register ,  StandardCharsets . US_ASCII ,  buffer ,  buffer . length ) ;  }
@ Override  public   void   close ()   throws  IOException   {  closeConnection () ;  }
@ Override  public   ItemStack   getResultItem ( RegistryAccess   access )  {  return  ItemStack . EMPTY ;  }
@ Test  public   void   testCheckNotNullGivenNullThrowsException ()   {  assertThrows ( NullPointerException . class ,  ()  ->   Preconditions . checkNotNull ( null ,  """"message"""" ) ) ;  }
public   void   setSeed ( final   long   seed )   {  stateVector   =   new   int [ N ] ;  mag01   =   new   int [ 2 ] ;  mag01 [ 0 ]   =   0x0 ;  mag01 [ 1 ]   =   MATRIX_A ;  stateVector [ 0 ]   =   ( int )   seed ;  for ( mti   =   1 ;   mti   <   N ;   mti ++ )   {  stateVector [ mti ]   =   ( 1812433253   *   ( stateVector [ mti   -   1 ]   ^   ( stateVector [ mti   -   1 ]   >>>   30 ) )   +   mti ) ;  }  }
protected   boolean   editAndRemoveButtonsCanBeEnabled ()   {  return  ! LocalAnalysisScripts . NO_LOCAL_ANALYSIS . equals ( myLocalAnalysisScriptComboBox . getSelectedItem () . toString () ) ;  }
@ Override  public   int   getRenewalThresholdUpdateIntervalMs ()   {  return  renewalThresholdUpdateIntervalMs ;  }
public   static   PrivacyType   getByValue ( int   value )   {  for  ( PrivacyType   type   :  PrivacyType . values () )   {  if  ( type . value   ==   value )   {  return  type ;  }  }  return  null ;  }
@ Override  public   void   doLayout ()  {  layoutDimension   =   new   Dimension ( owner . getContent () ) ;   
@ Override  public   HttpResponse   sendLoginPost ( HttpClient   client ,  String   sessionDataKey )   throws  IOException   {  List < NameValuePair >   urlParameters   =  new   ArrayList <> () ;  urlParameters . add ( new   BasicNameValuePair ( """"username"""" ,  USERNAME ) ) ;  urlParameters . add ( new   BasicNameValuePair ( """"password"""" ,  PASSWORD ) ) ;  urlParameters . add ( new   BasicNameValuePair ( OAuth2Constant . SESSION_DATA_KEY ,  sessionDataKey ) ) ;  return  sendPostRequestWithParameters ( client ,  urlParameters , getTenantQualifiedURL ( COMMON_AUTH_URL ,  super . tenantInfo . getDomain () ) ) ;  }
@ Override  public   Task < Void >   startSmsCodeRetriever ()   {  return  scheduleTask ( ( PendingGoogleApiCall < Void ,  SmsRetrieverApiClient > )   ( client ,  completionSource )  ->   client . startSmsCodeBrowser ( new   StatusCallbackImpl ( completionSource ) ) ) ;  }
public   Intent   buildServerFilesActivity ( ServerShare   share )   {  Intent   intent   =  new   Intent ( context ,  ServerFilesActivity . class ) ;  intent . putExtra ( Extras . SERVER_SHARE ,  share ) ;  return  intent ;  }
public   long   randomDate ( Random   random ,  long   minDate )   {  long   maxDate   =  Math . max ( minDate   +   THIRTY_DAYS ,  simulationEnd ) ;  return  randomDate ( random ,  minDate ,  maxDate ) ;  }
@ Override  public   boolean   destroySession ( final   WebContext   context )   {  final   String   sessionId   =  getSessionIdFromSessionOrRequest ( context ) ;  if  ( sessionId   !=   null )   {  LOGGER . debug ( """"Invalidate session: {}"""" ,  sessionId ) ;  ( ( PlayWebContext )   context ) . setNativeSession ( new   Http . Session ( new   HashMap <> () ) ) ;  context . setRequestAttribute ( Pac4jConstants . SESSION_ID ,  null ) ;  final   String   prefixedSessionKey   =  getPrefixedSessionKey ( sessionId ) ;  store . remove ( prefixedSessionKey ) ;  }  return  true ;  }
public   boolean   getBoolean (  String   path ,  boolean   def )   {  String   value   =  getValue (  path ) ;  return  value   ==   null  ?   def   :  Boolean . valueOf (  value ) ;  }
public   void   testGeneratePayload ()   {  for  ( int   i   =  0 ;   i   <   TestVectors . KEY_ROLLING_PERIOD_MULTIPLE_OF_ID_PERIOD ;   i ++ )   {  byte []   gen   =  CryptoKt . generatePayload ( key ,  key . getRollingStartIntervalNumber ()   +   i ,  TestVectors . get_BLE_METADATA () ) ;  Assert . assertArrayEquals ( gen ,  TestVectors . ADVERTISED_DATA . get ( i ) . get_merged () ) ;  }  }
@ NonNull  @ Override  public   String   getPluginName ()   {  return  """"Others"""" ;  }
private   void   processFrameBinary ( WebSocketImpl   webSocketImpl ,  Framedata   frame )   {  try  {  webSocketImpl . getWebSocketListener ()  . onWebsocketMessage ( webSocketImpl ,  frame . getPayloadData () ) ;  }   catch  ( RuntimeException   e )   {  logRuntimeException ( webSocketImpl ,  e ) ;  }  }
public   void   remove ( String   datasource ,  String   queryId )   {  statementMap . get ( datasource ) . remove ( queryId ) ;  }
@ Test  public   void   testMaybeWithConsumerMiss ()   {  Consumer < JsonValue >   consumer   =  mockConsumer () ;  subject () . maybe ( """"aaa"""" ,  consumer ) ;  verify ( consumer ,  never () ) . accept ( any () ) ;  }
public   ApplyEnum   getApplyRule ()   {  if  ( applyRule   ==   null )   {  throw  new   IllegalStateException ( """"The parameter 'apply' for TransformationRule is missing or invalid"""" ) ;  }  return  applyRule ;  }
@ Override  public   CompilationSubject   createSubject ( FailureMetadata   failureMetadata ,  @ Nullable   Compilation   that )   {  return  new   CompilationSubject ( failureMetadata ,  that ) ;  }
public   AuthorizedAPIResponse   policyId ( String   policyId )   {  this . policyId   =   policyId ;  return  this ;  }
public   void   listResidences ( Player   player )   {  this . listResidences ( player ,  player . getName () ,  1 ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  CategoryRes   categoryRes   =  ( CategoryRes )   o ;  return  Objects . equals ( this . name ,  categoryRes . name )   &&  Objects . equals ( this . connectors ,  categoryRes . connectors ) ;  }
private   int   yToCents ( double   y )   {  return  ( int )   Math . round ( scaler . unscaleY ( y )   /   Quantizer . ROW_HEIGHT   *   100 ) ;  }
public   static   < T >   void   eachIndexed ( final   Iterable < T >   iterable ,  final   BiConsumer < Integer ,  ?   super  T >   func )   {  int   index   =  0 ;  for  ( T   element   :  iterable )   {  func . accept ( index ,  element ) ;  index   +=   1 ;  }  }
public   Directives   strict ( final   int   number )   {  this . all . add ( new   StrictDirective ( number ) ) ;  return  this ;  }
@ Test  public   void   testConvertZipToBinary ()   throws  IOException   {  File   input   =  new   File ( """"src/test/resources/example/readablespec/model0.zip"""" ) ;  File   output   =  new   File ( """"src/test/resources/example/readablespec/model1.gbt"""" ) ;  IndependentTreeModelUtils   utils   =  new   IndependentTreeModelUtils () ;  utils . convertZipSpecToBinary ( input ,  output ) ;  FileInputStream   inputStream   =  new   FileInputStream ( output ) ;  IndependentTreeModel   treeModel   =  IndependentTreeModel . loadFromStream ( inputStream ) ;  Assert . assertTrue ( treeModel   !=   null ) ;  FileUtils . deleteQuietly ( output ) ;  }
public   UserShareWithAllRequestBody   userCriteria ( UserShareRequestBodyUserCriteria   userCriteria )   {  this . userCriteria   =   userCriteria ;  return  this ;  }
@ Override  public   List < Changed >   getChangedElements ()   {  return  Arrays . asList ( description ,  headers ,  content ,  extensions ) ;  }
@ JavascriptInterface  public   final   void   startFido2SignRequest ( String   request )   {  Log . d ( TAG ,  """"JSBridge: startFido2SignRequest"""" ) ;  fidoHandler . startSignRequest ( request ) ;  }
public   int   getPort ()   {  int   port   =  getAddress () . getPort () ;  if  ( port   ==   0   &&   server   !=   null )   {  port   =   server . socket () . getLocalPort () ;  }  return  port ;  }
public   GrantType   displayName ( String   displayName )   {  this . displayName   =   displayName ;  return  this ;  }
private   void   handleNetworkChangeEvent ( Context   context )   {  NetworkUtils   networkUtils   =  new   NetworkUtils ( context ) ;  NetworkInfo   network   =  networkUtils . getNetwork () ;  if  ( networkUtils . isNetworkConnected ( network ) )   {  BusProvider . getBus () . post ( new   NetworkChangedEvent ( network . getType () ) ) ;  startDownloadService ( context ) ;  }  if  ( networkUtils . isUploadAllowed () )   {  startUploadService ( context ) ;  }   else  {  stopUploadService ( context ) ;  }  }
@ Override  public   void   stopAutoManager ( FragmentActivity   lifecycleActivity )   throws  IllegalStateException   {  }
public   boolean   isDatatimePartitionHasHyphen ( String   datasource )   {  String   property   =  environment . getProperty ( """"datetime.partition.has.hyphen.""""   +   datasource ) ;  if  ( property   ==   null )   {  return  false ;  }  return  true ;  }
public   final   void   setHeaderName ( final   String   headerName )   {  this . headerName   =   headerName ;  setProperty ( HEADER_NAME ,  headerName ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  applicationManagementServiceClient . deleteApplication ( applicationName1 ) ;  applicationManagementServiceClient . deleteApplication ( applicationName2 ) ;  applicationManagementServiceClient   =   null ;  }
@ Override  @ Nullable  public   String   getCoverImageUrl ()   {  return  this . coverImageUrl ;  }
private   boolean   isSystemLightTheme ()   {  return  ( this . getResources () . getConfiguration () . uiMode   &   Configuration . UI_MODE_NIGHT_MASK )   !=   Configuration . UI_MODE_NIGHT_YES ;  }
@ DisplayName ( """"SERIAL :: Write/Read Byte Buffer (1)"""" )  @ Order ( 23 )  @ Test  public   void   readByteBuffer1 ()   {  
@ Override  public   void   createContents ( CreateContentsRequest   request ,  IDriveServiceCallbacks   callbacks )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: createContents"""" ) ;  }
@ Test  public   void   testReadFilePartsIntoList ()   throws  IOException   {  List < String >   lines   =  ShifuFileUtils . readFilePartsIntoList ( """"src/test/resources/example/partfile"""" , SourceType . LOCAL ) ;  Assert . assertEquals ( 5 ,  lines . size () ) ;  }
@ Override  public   ValidatorContext   traversableResolver ( final   TraversableResolver   resolver )   {  return  this ;  }
@ Override  public   < T >   T   getAdapter ( Object   adaptableObject ,  Class < T >   adapterType )   {  if  ( ! ILaunchable . class . equals ( adapterType ) )   {  return  null ;  }  IResource   resource   =  Adapters . adapt ( adaptableObject ,  IResource . class ) ;  if   ( new   FirefoxRunDebugLaunchShortcut () . canLaunch ( resource . getLocation () . toFile () ) )   {  return  adapterType . cast ( DUMMY ) ;  }  return  null ;  }
@ SuppressWarnings ( """"unchecked"""" )  @ Override  public   T []   newArray ( int   i )   {  return  ( T [] )   Array . newInstance ( descriptor . tClass ,  i ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( healthCheckUrl ,  statusPageUrl ,  managementPort ) ;  }
default   int   i2cWriteBlockData ( int   handle ,  int   register ,  Charset   charset ,  CharSequence   data ,  int   length ) {  return  i2cWriteBlockData ( handle ,  register ,  charset ,  data ,  0 ,  length ) ;  }
static   String   formatCompact4Digits ( double   value )   {  return  String . format ( Locale . ROOT ,  """"%.4g"""" ,  value ) ;  }
@ Test  public   void   successWithArray ()   {  testSuccess ( new   JSONArray ( """"[1,2,3]"""" ) ) ;  }
@ Override  protected   void   init ()   {  Objects . requireNonNull ( minecraft ) ;  super . init () ;  if  ( minecraft . level   !=   null )   {  CycleButton < Boolean >   previewButton   =  CycleButton . booleanBuilder ( OptionsList . OPTION_ON ,  OptionsList . OPTION_OFF ) . create ( 10 , saveButton . getY () , 85 , 20 , Component . translatable ( """"gui.jade.preview"""" ) , ( button ,  value )  ->  {  Jade . history () . previewOverlay   =   value ;  saver . run () ;  } ) ;  previewButton . setValue ( Jade . history () . previewOverlay ) ;  addRenderableWidget ( previewButton ) ;  }  }
public   Builder   setEnableSplitting ( boolean   enableSplitting )   {  newConfig . enableSplitting   =   enableSplitting ;  return  this ;  }
 <argument pos:start=""""""""356:66"""""""" pos:end=""""""""356:66""""""""><expr pos:start=""""""""356:66"""""""" pos:end=""""""""356:66""""""""><literal type=""""""""number"""""""" pos:start=""""""""356:66"""""""" pos:end=""""""""356:66"""""""">0</literal></expr></argument>
@ Test  void   shouldNotApplyAfterWhenBeforeThrowsWhenCombiningWithAndThen ()   {  final   CheckedFunction < Integer ,  Boolean >   before   =  ignored  ->  {   throw  new   Exception ( """"before"""" ) ;   } ;  final   CheckedFunction < Boolean ,  String >   after   =  ignored  ->  {   throw  new   AssertionError ( """"after called"""" ) ;   } ;  final   CheckedFunction < Integer ,  String >   f   =  before . andThen ( after ) ;  assertEquals ( """"before"""" , assertThrows ( Exception . class ,  ()  ->   f . apply ( null ) ) . getMessage () ) ;  }
static   CloseableHttpClient   auth ( HttpClientBuilder   clientBuilder ,  HttpContext   context ,  HttpRequestBase   requestBase , String   username ,  String   password ,  String   domain )   {  CredentialsProvider   provider   =  new   BasicCredentialsProvider () ;  provider . setCredentials ( new   AuthScope ( requestBase . getURI () . getHost () ,  requestBase . getURI () . getPort () ) , new   NTCredentials ( username ,  password ,  requestBase . getURI () . getHost () ,  domain ) ) ;  clientBuilder . setDefaultCredentialsProvider ( provider ) ;  return  clientBuilder . build () ;  }
@ ReactMethod  public   void   mediaStreamTrackSetVolume ( int   pcId ,  String   id ,  double   volume )   {  ThreadUtils . runOnExecutor ( ()  ->  {  MediaStreamTrack   track   =  getTrack ( pcId ,  id ) ;  if  ( track   ==   null )   {  Log . d ( TAG ,  """"mediaStreamTrackSetVolume() could not find track """"   +   id ) ;  return;  }  if  ( ! ( track   instanceof   AudioTrack ) )   {  Log . d ( TAG ,  """"mediaStreamTrackSetVolume() track is not an AudioTrack!"""" ) ;  return;  }  ( ( AudioTrack )   track ) . setVolume ( volume ) ;  } ) ;  }
@ Override   public   ByteIndexer   get ( long   i ,  byte []   b ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  b [ offset   +   n ]   =   array [ ( int ) index ( i )   +   n ] ;  }  return  this ;  }
private   void   signalObjectError ( WebContext   webContext , String   bucket , String   key , S3ErrorCode   errorCode , String   message )   {  if  ( HttpMethod . HEAD . equals ( webContext . getRequest () . method () ) )   {  webContext . respondWith () . status ( errorCode . getHttpStatusCode () ) ;  }   else  {  errorSynthesizer . synthesiseError ( webContext ,  bucket ,  key ,  errorCode ,  message ) ;  }  log . log ( webContext . getRequest () . method () . name () , message   +   """" - """"   +   webContext . getRequestedURI () , APILog . Result . ERROR , CallContext . getCurrent () . getWatch () ) ;  }
private   Bitmap   extractAlbumArt ( MediaMetadataRetriever   audioMetadataRetriever )   {  byte []   audioAlbumArtBytes   =  audioMetadataRetriever . getEmbeddedPicture () ;  if  ( audioAlbumArtBytes   ==   null )   {  return  null ;  }  return  BitmapFactory . decodeByteArray ( audioAlbumArtBytes ,  0 ,  audioAlbumArtBytes . length ) ;  }
public   Builder   secondActionPlurals ( @ PluralsRes   int   val ,  View . OnClickListener   listener )   {  secondActionPluralsRes   =   val ;  secondActionListener   =   listener ;  return  this ;  }
@ Test  public   void   testBuildWithoutSignature ()   throws  Exception   {  Builder   builder   =  new   Builder () ;  builder . setPackage ( """"test"""" ,  """"1.0"""" ,  """"1"""" ) ;  builder . setBuildHost (  """"localhost""""  ) ;  builder . setLicense (  """"GPL""""  ) ;  builder . setPlatform (  NOARCH ,  LINUX  ) ;  builder . setType (  BINARY  ) ;  builder . build (  new   File (  getTargetDir () ) ) ;  }
@ Override  public   PlayGamesConsistencyTokens   createFromParcel ( Parcel   source )   {  return  new   PlayGamesConsistencyTokens ( source . readString () ,  source . readString () ) ;  }
public   void   stopCarbonServer ( int   portOffset )   throws  Exception   {  manager . stopAllServers () ;  }
@ Test  public   void   testToTdchParam ()   {  String   targetTableName   =  """"db.target"""" ;  TdchParameters   params   =  builder . targetTdTableName ( targetTableName )  . password ( PASSWORD )  . build () ;  List < String >   expected   =  getExpectedTdchParams () ;  assertEqual ( expected ,  Arrays . asList ( params . toTdchParams () ) ) ;  }
@ Override  public   File   call ()   throws  Exception   {  File   file   =  File . createTempFile ( """"tmp"""" ,  """".jar"""" , project . getBuildDir () ) ;  file . delete () ;  Files . copy ( getClass () . getClassLoader ()  . getResourceAsStream ( """"META-INF/loader/spring-boot-thin-wrapper.jar"""" ) , file . toPath () ) ;  return  file ;  }
public   void   setOutFile ( final   String   outFile )   {  this . outFile   =   outFile ;  }
@ Override  public   Connection   getConnection ( final   String   username , final   String   password )   {  return  this . conn ;  }
public   void   setEdgeAreaMax ( double   edgeAreaMax )   {  this . edgeAreaMax   =   edgeAreaMax ;  }
default   int   i2cWriteDevice ( int   handle ,  Charset   charset ,  CharSequence   data ,  int   offset ,  int   length ) {  return  i2cWriteDevice ( handle ,  data . toString () . getBytes ( charset ) ,  offset  , length ) ;  }
@ Override  protected   void   generate ()  {  this . dropSelf ( ModBlocks . WORKBENCH . get () ) ;  }
@ Override  public   SyncthingServiceBinder   onBind ( Intent   intent )   {  return  mBinder ;  }
@ Override  public   String   getGroupSuffix ( String   world ,  String   group )   {  return  API . getGroupInfo ( group ,  """"suffix"""" ) ;  }
private   static   void   test ( final   Schema   failingSchema ,  final   String   expectedPointer , final   Object   input )   {  try  {  failingSchema . validate ( input ) ;  fail ( failingSchema   +   """" did not fail for """"   +   input ) ;  }   catch  ( ValidationException   e )   {  if  ( expectedPointer   !=   null )   {  assertEquals ( expectedPointer ,  e . getPointerToViolation () ) ;  }  throw  e ;  }  }
@ Override  Float   load ( DataMap   dataMap ,  String   key )   {  return  dataMap . getFloat ( key ) ;  }
@ Test  public   void   hadNoteContaining ()   {  assertThat ( compilerWithNote () . compile ( sourceFile ) )  . hadNoteContaining ( """"this is a message"""" )  . inFile ( sourceFile )  . onLine ( 6 )  . atColumn ( 8 ) ;  assertThat ( compilerWithNote () . compile ( sourceFile ) )  . hadNoteContaining ( """"this is a message"""" )  . inFile ( sourceFile )  . onLine ( 7 )  . atColumn ( 29 ) ;  }
private   void   setUpVideoTitle ()   {  getSupportActionBar () . setTitle ( getVideoFile () . getName () ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   void   prepare (  Signature   signature  )   {  if  (  enabled  )   {  headerOnlyRSAEntry   =   (   Entry <  byte [] >   )   signature . addEntry (  RSAHEADER ,  SIGNATURE_SIZE  ) ;  headerAndPayloadPGPEntry   =   (   Entry <  byte [] >   )   signature . addEntry (  LEGACY_PGP ,  SIGNATURE_SIZE  ) ;  }  }
public   void   setFrqStatus ( FrqStatus   status )   {  frqStatus . set ( status . toString () ) ;  }
public   static   void   setHasGottenRootAccess ( boolean   bool )   {  getSharedPreferences ( """"mmm"""" ) . edit () . putBoolean ( """"has_root_access"""" ,  bool ) . apply () ;  }
public   Pet   getPet ( String   name ,  boolean   ignoreNew )   {  name   =   name . toLowerCase () ;  for  ( Pet   pet   :  getPetsInternal () )   {  if  ( ! ignoreNew   ||   ! pet . isNew () )   {  String   compName   =  pet . getName () ;  compName   =   compName . toLowerCase () ;  if  ( compName . equals ( name ) )   {  return  pet ;  }  }  }  return  null ;  }
@ Override  public   Set < String >   getAllCuriePrefixes ()   {  return  newHashSet ( curieUtil . getPrefixes () ) ;  }
@ Override  protected   void   initApplications ()   throws  Exception   {  super . initApplications () ;  applications . get ( OIDCUtilTest . playgroundAppOneAppName ) . setSubjectClaimURI ( OIDCUtilTest . emailClaimUri ) ;  applications . get ( OIDCUtilTest . playgroundAppTwoAppName ) . setSubjectClaimURI ( OIDCUtilTest . lastNameClaimUri ) ;  }
@ Override   public   BooleanIndexer   get ( long []   indices ,  boolean []   b ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  b [ offset   +   n ]   =   array [ ( int ) index ( indices )   +   n ] ;  }  return  this ;  }
public   DistanceMatrixApiRequest   departureTime ( Instant   departureTime )   {  return  param ( """"departure_time"""" ,  Long . toString ( departureTime . toEpochMilli ()   /   1000L ) ) ;  }
private   static   KeyValue   charKey ( String   symbol ,  char   c ,  int   flags )  {  return  new   KeyValue ( symbol ,  Kind . Char ,  c ,  flags ) ;  }
@ Test  public   void   subSchemaIsNull ()   {  assertThrows ( NullPointerException . class ,  ()  ->  {  createSubject () . inContextOfSchema ( null ,  ()  ->  {  } ) ;  } ) ;  }
@ Override  public   Object   invoke ( final   MethodInvocation   invocation )   throws  Throwable   {  CacheableMethodInvocation   cacheableInvocation   =  new   CacheableMethodInvocation ( invocation ) ;  Object   result   =  methodCache . getIfPresent ( cacheableInvocation ) ;  if  ( null   ==   result )   {  result   =   invocation . proceed () ;  methodCache . put ( cacheableInvocation ,  result ) ;  }  return  result ;  }
public   boolean   noPastEvents ()   {  return  filterMode   !=   FilterMode . NO_FILTERING   &&  ! getShowPastEventsWithDefaultColor ()   &&  getEventsEnded ()   ==   EndedSomeTimeAgo . NONE   &&  noTaskSources () ;  }
@ Test  void   shouldRethrowWhenFirstPredicateReturnsFalseAndSecondPredicateFailsUsingOr ()   {  final   CheckedPredicate < Object >   p   =  ignored  ->  {   throw  ERROR ;   } ;  assertThrows ( ERROR . getClass () ,  ()  ->   FALSE . or ( p ) . test ( null ) ) ;  }
public   void   setRepository ( String   repository )   {  this . repository   =   repository ;  }
@ RequiresPermission ( android . Manifest . permission . LOCATION_HARDWARE )  public   void   startBackgroundScan ( ScanSettings   settings ,  ScanListener   listener )   {  startBackgroundScan ( settings ,  listener ,  null ) ;  }
public   static   int   serOpen ( String   sertty ,  int   baud ) {  return  serOpen ( sertty ,  baud ,  0 ) ;  }
@ Override  public   boolean   canChildScrollUp ()   {  if  ( mSwipeableChildren   !=   null   &&   mSwipeableChildren . length   >   0 )   {  
@ Override  protected   void   onSaveInstanceState ( Bundle   outState )   {  super . onSaveInstanceState ( outState ) ;  
 <argument pos:start=""""""""203:77"""""""" pos:end=""""""""203:81""""""""><expr pos:start=""""""""203:77"""""""" pos:end=""""""""203:81""""""""><literal type=""""""""boolean"""""""" pos:start=""""""""203:77"""""""" pos:end=""""""""203:81"""""""">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
public   synchronized   static   Method   loadSenderPlayedBusiness ( ClassLoader   classLoader )   throws  Exception   {  return  UnobfuscatorCache . getInstance () . getMethod ( classLoader ,  ()  ->  {  var   loadSenderPlayed   =  loadSenderPlayed ( classLoader ) ;  var   foundMethod   =  ReflectionUtils . findMethodUsingFilter ( loadSenderPlayed . getDeclaringClass () ,  method  ->   method . getParameterCount ()   >   0   &&   method . getParameterTypes () [ 0 ]   ==   Set . class ) ;  if  ( foundMethod   ==   null )  throw  new   RuntimeException ( """"SenderPlayedBusiness method not found"""" ) ;  return  foundMethod ;  } ) ;  }
@ Override  public   void   init ( FilterConfig   filterConfig )   throws  ServletException   {  }
public   static   void   appendHexString ( StringBuilder   builder ,  ByteBuffer   buffer ,  int   offset ,  int   length )   {  appendHexString ( builder ,  buffer . array () ,  offset ,  length ) ;  }
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( """"class AdditionalClaims {\n"""" ) ;  sb . append ( """"    claim: """" ) . append ( toIndentedString ( claim ) ) . append ( """"\n"""" ) ;  sb . append ( """"    value: """" ) . append ( toIndentedString ( value ) ) . append ( """"\n"""" ) ;  sb . append ( """"}"""" ) ;  return  sb . toString () ;  }
public   void   setChecked ( boolean   checked )   {  setTextViewLabel ( checked ) ;  mSwitch . setChecked ( checked ) ;  }
@ Override  public   void   onPermissionsDenied ( int   requestCode ,  List < String >   perms )   {  if  ( EasyPermissions . somePermissionPermanentlyDenied ( this ,  perms ) )   {  if  ( requestCode   ==   EXTERNAL_STORAGE_PERMISSION )   {  showPermissionSnackBar ( getString ( R . string . share_permission_denied ) ) ;  }  }  }
@ Override  public   void   onOpen ( WebSocket   conn ,  ClientHandshake   handshake )   {  conn . send ( """"hi"""" ) ;  }
@ Test  public   void   testEval ()   throws  IOException   {  Tuple   input   =  TupleFactory . getInstance () . newTuple ( 31 ) ;  for ( int   i   =  0 ;   i   <   31 ;   i ++ )   {  input . set ( i ,  1 ) ;  }  input . set ( 0 ,  """"B"""" ) ;  Assert . assertTrue ( instanceA . exec ( input ) ) ;  Assert . assertTrue ( instanceB . exec ( input ) ) ;  Assert . assertTrue ( instanceC . exec ( input ) ) ;  
private   static   Short   sum ( Short   first ,  Short   second )   {  return  ( short )   ( first   +   second ) ;  }
static   VerifyFailType   fromString ( String   verifyFail )   {  if  ( verifyFail   ==   null )   {  throw  new   FailureException ( """"verifyFail must be either SORT, WARN or STOP. Was: null"""" ) ;  }  if  ( """"SORT"""" . equalsIgnoreCase ( verifyFail ) )   {  return  SORT ;  }  if  ( """"WARN"""" . equalsIgnoreCase ( verifyFail ) )   {  return  WARN ;  }  if  ( """"STOP"""" . equalsIgnoreCase ( verifyFail ) )   {  return  STOP ;  }  throw  new   FailureException ( """"verifyFail must be either SORT, WARN or STOP. Was: """"   +   verifyFail ) ;  }
private   void   initSuggestionCursor ()   {  String []   cols   =  { BaseColumns . _ID ,  COLUMN_NAME_ADDRESS ,  COLUMN_NAME_X ,  COLUMN_NAME_Y } ;  mSuggestionCursor   =   new   MatrixCursor ( cols ) ;  }
@ Test  public   void   objectComplementOf ()   {  Node   parent   =  getNode ( ROOT   +   """"/Parent"""" ) ;  Node   complement   =  getLabeledOtherNode ( parent ,  OwlRelationships . OPERAND ,  OwlLabels . OWL_COMPLEMENT_OF ) ;  assertThat ( complement . getLabels () ,  hasItem ( OwlLabels . OWL_ANONYMOUS ) ) ;  }
@ Before  public   void   setup ()   {  this . mockMvc   =   MockMvcBuilders  . standaloneSetup ( crashController )  
private   UserDefinedAuthenticatorPayload   createUserDefinedAuthenticatorPayloadWithEmptyEndpointConfig ( String   id )   {  UserDefinedAuthenticatorPayload   userDefinedAuthenticatorPayload   =  new   UserDefinedAuthenticatorPayload () ;  userDefinedAuthenticatorPayload . setIsEnabled ( true ) ;  userDefinedAuthenticatorPayload . setAuthenticatorId ( id ) ;  userDefinedAuthenticatorPayload . setDefinedBy ( FederatedAuthenticatorRequest . DefinedByEnum . USER . toString () ) ;  return  userDefinedAuthenticatorPayload ;  }
@ Override  public   void   writeToParcel ( Parcel   dest ,  int   flags )   {  dest . writeString ( name ) ;  dest . writeLong ( offset ) ;  dest . writeInt ( length ) ;  dest . writeString ( path ) ;  }
public   void   playPianoNote ( String   pitch ,  double   volume ,  boolean   alwaysPlay )   {  int   noteNum   =  PitchUtils . pitchToNoteNum ( pitch ) ;  if  ( noteNum   <   24   ||   noteNum   >   107 )   {  return;   
public   Builder   limit ( int   limit )   {  this . limit   =   limit ;   return  this ;  }
public   int []   grab_raw ()   {  if  ( camera . getCameraFrame ( ps3_frame ,  timeout ) )   {  return  ps3_frame ;  }  else   return  null ;  }
public   void   setFirstname ( String   firstname )   {  this . firstname   =   firstname ;  }
public   String   getPercentageString ()   {  float   floatPercentage   =  getPercentageFloat () ;  if  ( Float . compare ( floatPercentage ,  99.995f )   >=   0 )   {  return  roundDownDataFormat . format ( floatPercentage ) ;  }   else  {  return  dataFormat . format ( floatPercentage ) ;  }  }
@ SuppressWarnings ( """"unchecked"""" )  @ Test  void   toJsonFromXml ()   {  final   String   xml   = """"<?xml version=\""""1.0\"""" encoding=\""""UTF-8\""""?>\n<root>\n""""  +   """"  <FirstItem>1</FirstItem>\n  <SecondItem>2</SecondItem>\n</root>"""" ;  assertEquals ( """"{\n  \""""FirstItem\"""": \""""1\"""",\n  \""""SecondItem\"""": \""""2\""""\n}"""" , U . toJson ( ( Map < String ,  Object > )   U . fromXml ( xml ) ) ) ;  }
public   static   FilterMode   fromValue ( String   value )   {  for  ( FilterMode   item   :  FilterMode . values () )   {  if  ( item . value . equals ( value ) )   {  return  item ;  }  }  return  defaultValue ;  }
@ Override  public   void   processQuery ( @ Nonnull   WebContext   webContext , @ Nullable   Bucket   bucket , @ Nullable   String   key , @ Nonnull   String   query )   {  XMLStructuredOutput   xml   =  webContext . respondWith () . xml () ;  xml . beginOutput ( """"GetBucketRequestPaymentOutput"""" ) ;  xml . property ( """"Payer"""" ,  """"BucketOwner"""" ) ;  xml . endOutput () ;  }
@ FXML  void   exportToWav ( ActionEvent   event )   {  if  ( ! tabs . getTabs () . isEmpty () )   {  editors . get ( tabs . getSelectionModel () . getSelectedItem () . getId () ) . exportToWav () ;  }  }
public   HttpRequestBase   createRequestBase ( RequestAction   requestAction )   throws  IOException   {  HttpRequestBase   httpRequestBase   =  doCreateRequestBase ( requestAction ) ;  for  ( HttpRequestNameValuePair   header   :  requestAction . getHeaders () )   {  httpRequestBase . addHeader ( header . getName () ,  header . getValue () ) ;  }  return  httpRequestBase ;  }
@ Override  public   void   checkServerTrusted ( X509Certificate []   chain ,  String   authType )   {  }
@ Override  public   String   getGroupName ( Context   context )   {  return  context . getString ( R . string . self_check_cat_system ) ;  }
@ Before  public   void   setup ()   {  Vertex   v   =  graph . addVertex ( 0 ) ;  v . setProperty ( """"list"""" ,  newArrayList ( """"elt1"""" ,  """"elt2"""" ) ) ;  v . setProperty ( """"array"""" ,  new   String [] { """"elt1"""" ,  """"elt2"""" } ) ;  writer . request   =   mock ( HttpServletRequest . class ) ;  }
@ Override  public   void   setStoreLocation ( String   location ,  Job   job )   throws  IOException   {  shifuStorage . setStoreLocation ( location ,  job ) ;  }
public   void   doHook ()   throws  Exception   {  var   cFragClass   =  XposedHelpers . findClass ( """"com.whatsapp.conversationslist.ConversationsFragment"""" ,  classLoader ) ;  var   homeActivityClass   =  XposedHelpers . findClass ( """"com.whatsapp.HomeActivity"""" ,  classLoader ) ;  if  ( ! prefs . getBoolean ( """"separategroups"""" ,  false ) )   return;  
public   void   adjustForOverlap ( int   distanceToNextNote )   {  double   oldOverlap   =  overlapWidthX . get () ;  double   noteWidthMs   =  scaler . unscaleX ( getWidth () ) ;  if  ( noteWidthMs   >   distanceToNextNote )   {  overlapWidthX . set ( scaler . scaleX ( noteWidthMs   -   distanceToNextNote ) ) ;  }   else  {  overlapWidthX . set ( 0 ) ;  }  
@ Test ( dependsOnMethods   =   """"testAddUser"""" )  public   void   testSetUserClaimValues ()   throws  Exception   {  super . testSetUserClaimValues () ;  }
private   boolean   isInRange ( long   hashcode ,  int   startHashCode ,  int   endHashCode )   {  
 <argument pos:start=""""""""1104:65"""""""" pos:end=""""""""1104:65""""""""><expr pos:start=""""""""1104:65"""""""" pos:end=""""""""1104:65""""""""><literal type=""""""""number"""""""" pos:start=""""""""1104:65"""""""" pos:end=""""""""1104:65"""""""">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   AuthRequest   tokenRequestOptions ( String   tokenRequestOptions )   {  this . tokenRequestOptions   =   tokenRequestOptions ;  return  this ;  }
private   static   void   moveSubtreeBefore ( Node   root ,  Node   ref )  {  ref . getParentNode () . insertBefore ( root ,  ref ) ;  }
public   void   deleteUser ( UserObject   user )   throws  Exception   {  log . info ( """"Deleting User """"   +   user . getUserName () ) ;  scim2RestClient . deleteUser ( userId ) ;  }
protected   void   deleteApplications ()   throws  Exception   {  for  ( Map . Entry < String ,  OIDCApplication >   entry   :  applications . entrySet () )   {  deleteApplication ( entry . getValue () ) ;  }  }
private   long   getFirstStartTime ()   {  PackageManager   pm   =  getPackageManager () ;  long   firstInstallTime   =  0 ;  try  {  firstInstallTime   =   pm . getPackageInfo ( getPackageName () ,  0 ) . firstInstallTime ;  }   catch  ( PackageManager . NameNotFoundException   e )   {  Log . w ( TAG ,  """"This should never happen"""" ,  e ) ;  }  return  firstInstallTime ;  }
private   Optional < CityResponse >   getCity ( InetAddress   ipAddress )   throws  IOException ,  GeoIp2Exception   {  LookupResult < CityResponse >   result   =  this . get ( ipAddress , CityResponse . class , DatabaseType . CITY ) ;  CityResponse   response   =  result . getModel () ;  if  ( response   ==   null )   {  return  Optional . empty () ;  }  return  Optional . of ( new   CityResponse ( response , result . getIpAddress () , result . getNetwork () , locales ) ) ;  }
private   void   alignLineVertically ( LineBox   line )  {  for  ( int   i   =  line . getStart () ;   i   <   line . getEnd () ;   i ++ )   
@ Test  void   nonSecurePortUnderscores ()   {  testNonSecurePortSystemProp ( """"SERVER_PORT"""" ) ;  }
@ Override  public   String   toString ()   {  return  """"Wrapper [id=""""   +   id   +   """", resource=""""   +   resource   +   """", state=""""   +   state   +   """"]"""" ;  }
@ Override  public   final   boolean   isCallback ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$"""" ) ;  }
public   static   void   fractalTriangleWave ( double []   line ,  int   i ,  int   j ,  double   a )   {  fractalTriangleWave ( line ,  i ,  j ,  a ,  - 1 ) ;  }
public   RegisterResponse   getResponse ()   throws  IOException   {  return  HttpFormClient . request ( SERVICE_URL ,  this ,  RegisterResponse . class ) ;  }
public   void   setAutoExposureMeanIntensitySetPoint ( int   value )   {  setOption ( RealSense . RS_OPTION_R200_AUTO_EXPOSURE_MEAN_INTENSITY_SET_POINT ,  value ) ;  }
private   String   getThrottleScript ( String   jobName ,  String   category ,  String   label )   {  return  getThrottleScript ( jobName ,  Collections . singletonList ( category ) ,  label ) ;  }
public   Device   getDevice ( String   deviceId )   {  for  ( Device   d   :  devices )   {  if  ( d . deviceID . equals ( deviceId ) )   {  return  d ;  }  }  return  null ;  }
 <argument pos:start=""""""""226:99"""""""" pos:end=""""""""226:105""""""""><expr pos:start=""""""""226:99"""""""" pos:end=""""""""226:105""""""""><operator pos:start=""""""""226:99"""""""" pos:end=""""""""226:99"""""""">(</operator><name pos:start=""""""""226:100"""""""" pos:end=""""""""226:100"""""""">i</name> <operator pos:start=""""""""226:102"""""""" pos:end=""""""""226:102"""""""">+</operator> <literal type=""""""""number"""""""" pos:start=""""""""226:104"""""""" pos:end=""""""""226:104"""""""">1</literal><operator pos:start=""""""""226:105"""""""" pos:end=""""""""226:105"""""""">)</operator></expr></argument>
private   void   setUpHomeNavigation ()   {  getSupportActionBar () . setHomeButtonEnabled ( true ) ;  }
@ Override  public   void   update ( Chip   button ,  ModuleHolder   moduleHolder )   {  ModuleInfo   moduleInfo   =  moduleHolder . getMainModuleInfo () ;  button . setChipIcon ( button . getContext () . getDrawable ( donateIconForUrl ( moduleInfo . donate ) ) ) ;  button . setText ( R . string . donate ) ;  }
public   String   getFormatPattern ()   {  return  this . getDateFormatPattern ()   +   """" """"  +   hourWheel . getFormatPattern ()   +   """" """"  +   minutesWheel . getFormatPattern ()  +   ampmWheel . getFormatPattern () ;  }
public   OwnerDetailsBuilder   address ( String   address )   {  this . address   =   address ;  return  this ;  }
@ Override  public   < T >   List < Future < T > >   invokeAll ( Collection < ?   extends  Callable < T > >   callables ,  long   l ,  TimeUnit   timeUnit )  throws  InterruptedException   {  return  delegate . invokeAll ( callables ,  l ,  timeUnit ) ;  }
public   static   void   renderModel ( BakedModel   model ,  ItemDisplayContext   display ,  ItemStack   stack ,  PoseStack   poseStack ,  MultiBufferSource   buffer ,  int   light ,  int   overlay )  {  renderModel ( model ,  display ,  null ,  stack ,  ItemStack . EMPTY ,  poseStack ,  buffer ,  light ,  overlay ) ;  }
@ Test  void   testSortXmlCharacter ()   {  XmlProcessorTestUtil . create ()  . testInputAndExpected ( """"src/test/resources/Character_input.xml"""" ,  """"src/test/resources/Character_expected.xml"""" ) ;  }
@ Override  public   Chain < Map < T ,  Integer > >   countBy ()   {  return  new   Chain <> ( Underscore . countBy ( value () ) ) ;  }
@ Override  public   void   processResult ( CuratorFramework   client ,  CuratorEvent   event )   throws  Exception  {  WatchedEvent          fakeEvent   =  new   WatchedEvent ( Watcher . Event . EventType . None ,  curator . getZookeeperClient () . isConnected ()  ?   Watcher . Event . KeeperState . SyncConnected   :  Watcher . Event . KeeperState . Disconnected ,  null ) ;  watcher . process ( fakeEvent ) ;  }
@ JsonIgnore  public   boolean   isCandidate ( boolean   hasCandidate )   {  return  (   hasCandidate    
@ Override  public   Counter   getCounter ( Enum < ? >   name )   {  return  outer . getCounter ( name ) ;  }
@ Override  public   void   updateFullscreenMode ()   {  super . updateFullscreenMode () ;  updateSoftInputWindowLayoutParams () ;  }
public   void   setProperty ( String   aKey ,  int   aValue )   {  properties . setProperty ( aKey ,  String . valueOf ( aValue ) ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   static   < T >   T   fromXmlMakeArrays ( final   String   xml )   {  return  ( T )   Xml . fromXmlMakeArrays ( xml ) ;  }
@ Override  public   int   serRead ( int   handle ,  byte []   buffer ,  int   offset ,  int   length )   {  logger . trace ( """"[SERIAL::READ] -> [{}]; Serial Read [{} bytes]"""" ,  handle ,  length ) ;  validateReady () ;  Objects . checkFromIndexSize ( offset ,  length ,  buffer . length ) ;  validateHandle ( handle ) ;  
public   static   String   okMessage ( String   message )   {  return  String . format ( """"OK:      %s"""" , message ) ;  }
public   String   getValidationFilterExpressions ()   {  return  validationFilterExpressions ;  }
public   boolean   isKeepSandboxWhenFinishedTest ()   {  return  keepSandboxWhenFinishedTest ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  Asset   asset   =  ( Asset )   o ;  if  ( ! Arrays . equals ( data ,  asset . data ) )   return  false ;  if  ( digest   !=   null  ?   ! digest . equals ( asset . digest )   :  asset . digest   !=   null )   return  false ;  if  ( fd   !=   null  ?   ! fd . equals ( asset . fd )   :  asset . fd   !=   null )   return  false ;  return  ! ( uri   !=   null  ?   ! uri . equals ( asset . uri )   :  asset . uri   !=   null ) ;  }
@ Override  public   void   apply ( Wheel   wheel )   {  wheel . updateVisibility () ;  }
@ Override  public   final   Class < ?   extends  DatabaseObject > []   addsTo ()   {  return  addsTo ;  }
public   static   Bitmap   getBitmapFromDrawable ( Resources   res ,  int   resId )   {  return  getBitmapFromDrawable ( getDrawable ( res ,  resId ) ) ;  }
@ Override  public   boolean   isClosing ()   {  return  readyState   ==   ReadyState . CLOSING ;  }
@ BeforeEach  public   void   setUp ()   {  JMeterUtils . setLocale ( Locale . ENGLISH ) ;  keySerializedConfigElementBeanInfo   =   new   KeySerializedConfigElementBeanInfo () ;  }
private   static   MavenSession   mockSession ()   {  MavenSession   session   =  mock ( MavenSession . class ) ;  when ( session . getUserProperties () ) . thenReturn ( new   Properties () ) ;  when ( session . getSystemProperties () ) . thenReturn ( new   Properties () ) ;  return  session ;  }
public   String   addApplication ( int   portOffset ,  ApplicationModel   applicationModel )   throws  JSONException ,  IOException   {  return  applicationManagementRestClients . get ( portOffset ) . createApplication ( applicationModel ) ;  }
public   boolean   equals (  final   CpioHeader   one ,  final   CpioHeader   two )   {  return  one . getName () . equals (  two . getName () ) ;  }
public   UriTemplate   set ( String   variableName ,  Object   value )  {  values . put ( variableName ,  value ) ;  return  this ;  }
private   void   recursiveCollapse ( List < T >   buf ,  int   level )   {  ensureBuffer ( level   +   1 ) ;  List < T >   merged ;  if ( buffer . get ( level   +   1 ) . isEmpty () )   {  merged   =   buffer . get ( level   +   1 ) ;  }   else  {  merged   =   new   ArrayList < T > ( maxElementsPerBuffer ) ;  }  collapse ( buffer . get ( level ) ,  buf ,  merged ) ;  if ( buffer . get ( level   +   1 )   !=   merged )   {  recursiveCollapse ( merged ,  level   +   1 ) ;  }  }
default   boolean   isSchemaRefValue ( PsiElement   psiElement )   {  return  false ;  }
@ Override  public   Iterable < ?   extends  JavaFileObject >   getJavaFileObjectsFromStrings ( Iterable < String >   names )   {  return  fileManager . getJavaFileObjectsFromStrings ( names ) ;  }
public   static   Attachment   writeAttachment ( byte []   attachment ,  String   title ,  String   type )   throws  IOException   {  String   name   =  generateAttachmentName () ;  String   extension   =  getExtensionByMimeType ( type ) ;  String   source   =  name   +   extension ;  File   file   =  new   File ( getResultsDirectory () ,  source ) ;  synchronized  ( ATTACHMENTS_LOCK )   {  if  ( ! file . exists () )   {  try  ( FileOutputStream   fos   =  new   FileOutputStream ( file ) )   {  fos . write ( attachment ) ;  }  }  }  return  new   Attachment () . withTitle ( title ) . withSource ( source ) . withType ( type ) ;  }
 <argument pos:start=""""""""869:64"""""""" pos:end=""""""""869:64""""""""><expr pos:start=""""""""869:64"""""""" pos:end=""""""""869:64""""""""><literal type=""""""""number"""""""" pos:start=""""""""869:64"""""""" pos:end=""""""""869:64"""""""">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ ReactMethod  public   void   dataChannelSend ( int   peerConnectionId ,  String   reactTag ,  String   data ,  String   type )   {  ThreadUtils . runOnExecutor ( ()  ->  {  
@ Override   void   visitConstSchema ( ConstSchema   constSchema )   {  printInJsonObject ( ()  ->  {  writer . key ( """"const"""" ) ;  writer . value ( constSchema . getPermittedValue () ) ;  super . visitConstSchema ( constSchema ) ;  } ) ;  }
public   T   resolveRef ( Components   components ,  T   t ,  String   ref )   {  if  ( ref   !=   null )   {  String   refName   =  getRefName ( ref ) ;  T   result   =  getMap ( components ) . get ( refName ) ;  if  ( result   ==   null )   {  throw  new   IllegalArgumentException ( String . format ( """"ref '%s' doesn't exist."""" ,  ref ) ) ;  }  return  result ;  }  return  t ;  }
@ Test  void   deprecatedSortPluginsFalseMessageShouldWork ()   {  Executable   testMethod   = ()  ->  SortPomImplUtil . create ()  . sortPlugins ( """"false"""" )  . testFiles ( """"/full_unsorted_input.xml"""" ,  """"/full_expected.xml"""" ) ;  var   thrown   =  assertThrows ( FailureException . class ,  testMethod ) ;  assertThat ( thrown . getMessage () , is ( """"The 'false' value in 'sortPlugins' is no longer supported. Please use an empty value '' or omit 'sortPlugins' instead."""" ) ) ;  }
public   HashSet < String >   getUserList ( int   portOffset )   throws  Exception   {  return  userManagementClients . get ( portOffset ) . getUserList () ;  }
@ Test  public   void   testSerialize ()   throws  Exception  {  ObjectMapper   mapper   =  new   ObjectMapper () ;  Dummy   dummy   =  new   Dummy ( """"test"""" ,  """"http:
@ Override  public   boolean   playerAdd ( String   world ,  String   player ,  String   permission )   {  return  false ;  }
public   Set < Integer >   fitExistingModelIn ( FlatNetwork   fromFlatNetwork ,  FlatNetwork   toFlatNetwork , List < Integer >   fixedLayers )   {  return  fitExistingModelIn ( fromFlatNetwork ,  toFlatNetwork ,  fixedLayers ,  true ) ;  }
private   void   setUpAuthenticationToken ()   {  Account   account   =  getAccounts () . get ( 0 ) ;  getAccountManager () . getAuthToken ( account ,  AmahiAccount . TYPE ,  null ,  mActivity ,  this ,  null ) ;  }
@ Test  public   void   test ()   throws  Exception   {  System . out . println ( JettyWrapper . class  . getResource ( """"/org/everit/json/schema/relative-uri/"""" ) . toExternalForm () ) ;  JettyWrapper   jetty   =  new   JettyWrapper ( """"/org/everit/json/schema/relative-uri"""" ) ;  jetty . start () ;  try  {  SchemaLoader . builder ()  . resolutionScope ( """"http:
public   static   void   dumpNode ( Vertex   node )   {  System . out . println ( String . format ( """"%s"""" ,  node . getId () ) ) ;  dumpProperties ( node ) ;  }
@ Cacheable ( before   =   CacheableTest . Bar . class )  public   long   get ()   {  return  CacheableTest . RANDOM . nextLong () ;  }
public   static   Asset   createFromFd ( ParcelFileDescriptor   fd )   {  if  ( fd   ==   null )   {  throw  new   IllegalArgumentException ( """"Asset fd cannot be null"""" ) ;  }  return  new   Asset ( null ,  null ,  fd ,  null ) ;  }
private   Settings   loadSettings ( File   settingsFile )   {  SettingsBuildingRequest   request   =  new   DefaultSettingsBuildingRequest () ;  request . setUserSettingsFile ( settingsFile ) ;  request . setSystemProperties ( System . getProperties () ) ;  try  {  return  new   DefaultSettingsBuilderFactory () . newInstance () . build ( request ) . getEffectiveSettings () ;  }   catch  ( SettingsBuildingException   ex )   {  throw  new   IllegalStateException ( """"Failed to build settings from """"   +   settingsFile ,  ex ) ;  }  }
@ Schema ( example   =   """"smtp.gmail.com"""" ,  description   =   """""""" )  public   String   getSmtpServerHost ()   {  return  smtpServerHost ;  }
default   boolean   childOfSecurityScheme ( PsiElement   psiElement )   {  return  false ;  }
@ Override  public   void   update ( BiasLayer   gradLayer ,  Optimizer   optimizer )   {  this . weight   -=   gradLayer . getwGrad ()   *   optimizer . getLearningRate () ;  }
public   static   String   toBinaryString ( BitSet   set )   {  ByteArrayOutputStream   out   =  new   ByteArrayOutputStream () ;  PrintWriter   writer   =  new   PrintWriter ( out ) ;  final   long []   longs   =  set . toLongArray () ;  for  ( long   aLong   :  longs )   {  writer . write ( Long . toBinaryString ( aLong ) ) ;  }  writer . flush () ;  return  new   String ( out . toByteArray () ,  java . nio . charset . StandardCharsets . UTF_8 ) ;  }
@ Subscribe  public   void   onFileUploadProgressEvent ( ServerFileUploadProgressEvent   event )   {  uploadCallbacks . uploadProgress ( event . getId () ,  event . getProgress () ) ;  }
@ Override  public   boolean   retainAll ( Collection < ? >   c )   {  throw  new   UnsupportedOperationException () ;  }
@ Override  public   void   start ()   throws  Exception   {  if  ( this . device   ==   null )   {  open () ;  }  
static   boolean   readIntEquals ( ByteBuffer   buf ,  int   i ,  int   j )   {  return  buf . getInt ( i )   ==   buf . getInt ( j ) ;  }
public   Builder   environmentVariables ( Map < String , String >   environmentVariables )   {  this . environmentVariables   =   environmentVariables ;  return  this ;  }
@ PublicApi ( exclude   =   true )  @ Nullable  public   String   getModuleId ()   {  return  moduleId ;  }
@ SuppressWarnings ( """"unchecked"""" )  private   T   parseResponse ( GaePendingResult < T ,  R >   request ,  HTTPResponse   response )  throws  IOException ,  ApiException ,  InterruptedException   {  try  {  T   result   =  parseResponseInternal ( request ,  response ) ;  metrics . endRequest ( null ,  response . getResponseCode () ,  retryCounter ) ;  return  result ;  }   catch  ( Exception   e )   {  metrics . endRequest ( e ,  response . getResponseCode () ,  retryCounter ) ;  throw  e ;  }  }
@ Test  public   void   scan_testMulticatchDifferent ()   {  TreeDifference   diff   = TreeDiffer . diffCompilationUnits ( MULTICATCH_1 ,  MULTICATCH_2 ) ;  assertThat ( diff . isEmpty () ) . isFalse () ;  }
private   ConsoleAnnotator < Object >   newInstance ( Object   context ,  long   startLineNo )   {  return  new   ColorConsoleAnnotator ( Jenkins . get () . getDescriptorByType ( AnsiColorBuildWrapper . DescriptorImpl . class ) . getGlobalColorMapName () ,  new   LineIdentifier () ,  startLineNo ) ;  }
@ Test  public   void   testLiteral ()   throws  Exception  {  UriTemplate   template   =  UriTemplate . buildFromTemplate ( """"http:
@ Test  public   void   releaseTrain ()   {  DefaultArtifact   artifact   =  ThinPropertiesModelProcessor  . artifact ( """"com.example:foo:Foo.RELEASE"""" ) ;  assertThat ( artifact . getGroupId () ) . isEqualTo ( """"com.example"""" ) ;  assertThat ( artifact . getArtifactId () ) . isEqualTo ( """"foo"""" ) ;  assertThat ( artifact . getVersion () ) . isEqualTo ( """"Foo.RELEASE"""" ) ;  assertThat ( artifact . getClassifier () ) . isEqualTo ( """""""" ) ;  assertThat ( artifact . getExtension () ) . isEqualTo ( """"jar"""" ) ;  }
private   LanguageServerDefinition   getLanguageServerDefinition ()   {  if  ( languageServerDefinition   ==   null )   {  languageServerDefinition   =   LanguageServersRegistry . getInstance ()  . getDefinition ( preferenceStoreKey . languageServerId ) ;  }  return  languageServerDefinition ;  }
@ Test  public   void   changedButCompatible ()   {  assertSpecChangedButCompatible ( BASE ,  """"bc_response_apiresponse_changed_but_compatible.yaml"""" ) ;  }
public   void   addBlacklistListener ( BlacklistListener   listener )   {  blacklistListeners . add ( listener ) ;  }
@ Override  public   void   process ( AnalogValueChangeEvent   event )   {  Boolean   state   =  null ;  
@ Override  public   void   validate ( final   ProcessingReport   report , final   MessageBundle   bundle ,  final   FullData   data )  throws  ProcessingException  {  final   String   value   =  data . getInstance () . getNode () . textValue () ;  try  {  FORMATTER . parseDateTime ( value ) ;  }   catch  ( IllegalArgumentException   ignored )   {  report . error ( newMsg ( data ,  bundle ,  """"err.format.invalidDate"""" )  . putArgument ( """"value"""" ,  value ) . putArgument ( """"expected"""" ,  FORMATS ) ) ;  }  }
public   static   void   appendSeconds ( ITooltip   tooltip ,  Accessor < ? >   accessor ,  String   tagKey ,  String   translationKey )   {  if  ( accessor . getServerData () . contains ( tagKey ) )   {  tooltip . add ( Component . translatable ( translationKey , IThemeHelper . get () . seconds ( accessor . getServerData () . getInt ( tagKey ) ,  accessor . tickRate () ) ) ) ;  }  }
public   ChangedSchema   setNullable ( final   ChangedNullable   nullable )   {  clearChangedCache () ;  this . nullable   =   nullable ;  return  this ;  }
public   String   getCatalog ()   throws  SQLException   {  return  """"HIBERNATE"""" ;  }
@ Override  public   boolean   isDefinition ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$"""" ) ;  }
public   ChangedSchema   setAddProp ( final   ChangedSchema   addProp )   {  clearChangedCache () ;  this . addProp   =   addProp ;  return  this ;  }
static   File   getPrivateKeyFile ( Context   context )   {  return  new   File ( context . getFilesDir () ,  PRIVATE_KEY_FILE ) ;  }
@ Override  public   Iterator < Map . Entry < String ,  String > >   iterator ()   {  return  this . map . entrySet () . iterator () ;  }
private   void   deleteApplicationRoles ()   throws  Exception   {  log . info ( """"Deleting the application roles used during the testcase."""" ) ;  for  ( int   i   =  1 ;   i   <=   5 ;   i ++ )   {  remoteUSMServiceClient . deleteRole ( ROLE_PREFIX   +   i ) ;  }  }
private   static   String   toPrestoQuery ( String   hiveQuery )   {  return  hiveQuery . replace ( """"get_json_object"""" ,  """"json_extract_scalar"""" )  . replace ( """"lateral view explode"""" ,  """"cross join unnest"""" ) ;  }
@ Override  public   String   getYamlPlaceholderSuffix ( final   int   indentation )   {  return  """": """"   +   CARET ;  }
default   boolean   get ( IToggleableProvider   provider )   {  if  ( provider . isRequired () )   {  return  true ;  }  return  get ( provider . getUid () ) ;  }
@ Test  public   void   testOperationDescriptionChanged ()   {  ChangedOpenApi   changedOpenApi   =  OpenApiCompare . fromLocations ( OPENAPI_DOC1 ,  OPENAPI_DOC2 ) ;  ChangedOperation   changedOperation   = getChangedOperation ( changedOpenApi ,  GET ,  """"/operation/description"""" ) ;  assertThat ( changedOperation ) . isNotNull () ;  assertThat ( changedOperation . isChanged () ) . isEqualTo ( DiffResult . METADATA ) ;  assertThat ( changedOperation . getDescription () . getRight () ) . isEqualTo ( """"changed"""" ) ;  }
public   static   String   categoryForCast ( String   applicationId ,  Collection < String >   namespaces )   {  return  CATEGORY_CAST   +   """"""""   +   applicationId   +   """"/""""   +   TextUtils . join ( """","""" ,  namespaces ) ;  }
protected   static   int   getWordSize ()   {  final   String   archDataModel   =  System . getProperty ( """"sun.arch.data.model"""" ) ;  return  """"64"""" . equals ( archDataModel )  ?   8   :  4 ;  }
public   void   attest ( ISafetyNetCallbacks   callbacks ,  byte []   nonce ,  String   apiKey )   throws  RemoteException   {  getServiceInterface () . attestWithApiKey ( callbacks ,  nonce ,  apiKey ) ;  }
public   boolean   isLandscapeOrientation ()   {  int   screenOrientation   =  getActivity () . getResources () . getConfiguration () . orientation ;  return  screenOrientation   ==   Configuration . ORIENTATION_LANDSCAPE ;  }
@ NonNull  public   Builder   setRequestId ( @ Nullable   Integer   requestId )   {  this . requestId   =   requestId ;  return  this ;  }
public   static   InstanceSettings   restoreWidgetSettings ( Activity   activity ,  JSONObject   json ,  int   targetWidgetId )   {  InstanceSettings   settings   =  WidgetData . fromJson ( json )  . getSettingsForWidget ( activity ,  instances . get ( targetWidgetId ) ,  targetWidgetId ) ;  if  ( settings . hasResults () )   {  settings . clock () . setSnapshotMode ( SnapshotMode . SNAPSHOT_TIME ) ;  }  save ( TAG ,  """"restoreWidgetSettings"""" ,  settings ) ;  return  settings ;  }
void   index ()   {  logger . info ( """"Starting indexing"""" ) ;  List < Long >   ids   =  newArrayList ( idMap . values () ) ;  
@ Test  public   void   resolveMatchQueryWithMultipleMatches ()   {  String   cypher   = """"MATCH (n{iri:'FOO:foo'}) MATCH (m{iri:'FOO:fizz'}) RETURN n,m"""" ;  assertThat ( util . resolveNodeIris ( cypher ) , IsEqual  . equalTo ( """"MATCH (n{iri:'http:
@ Parameterized . Parameters  public   static   Collection < Object [] >   data ()   {  return  Arrays . asList ( new   Object [] { """"a.html"""" ,  """"text/html"""" } , new   Object [] { """"a.jpeg"""" ,  """"image/jpeg"""" } , 
public   Chain < List < T > >   chunkFill ( final   int   size ,  final   int   step ,  final   T   fillValue )   {  return  new   Chain <> ( Underscore . chunkFill ( value () ,  size ,  step ,  fillValue ) ) ;  }
@ Test ( expected   =   IllegalStateException . class )  public   void   createInstanceTest ()   throws  Exception   {  new   AllureFileUtils () ;  }
@ Override   void   visitContainedItemSchema ( Schema   containedItemSchema )   {  if  ( containedItemSchema   ==   null )   {  return;  }  for  ( int   i   =  0 ;   i   <   arraySubject . length () ;   i ++ )   {  Optional < ValidationException >   exception   =  ifFails ( containedItemSchema ,  arraySubject . get ( i ) ) ;  if  ( ! exception . isPresent () )   {  return;  }  }  owner . failure ( """"expected at least one array item to match 'contains' schema"""" ,  """"contains"""" ) ;  }
@ Override  public   < T   extends  Provider >   Map < String ,  T >   all ( IOType   ioType )   throws  ProviderNotFoundException   {  return  providers . all ( ioType ) ;  }
public   void   launchAppInfo ( Context   context ,  String   packageName )   {  Intent   intent   =  new   Intent ( Settings . ACTION_APPLICATION_DETAILS_SETTINGS ) ;  intent . addCategory ( Intent . CATEGORY_DEFAULT ) ;  intent . setData ( Uri . parse ( """"package:""""   +   packageName ) ) ;  context . startActivity ( intent ) ;  }
@ Subscribe  public   void   onFilesLoaded ( ServerFilesLoadedEvent   event )   {  mServerFileList   =   sortFiles ( event . getServerFiles () ) ;  for  ( int   i   =  0 ;   i   <   mServerFileList . size () ;   i ++ )  mAdapter . add ( mServerFileList . get ( i ) ) ;  setAdapter ( mAdapter ) ;  }
@ NonNull  public   static   Builder   builder ( @ NonNull   StreetViewPanoramaCamera   camera )   {  return  new   Builder ( camera ) ;  }
@ Override   public   ShortIndexer   put ( long   i ,  short   s )   {  array [ ( int ) index ( i ) ]   =   s ;  return  this ;  }
@ ApiModelProperty ( example   =   """"The user defined custom local authenticator."""" ,  value   =   """""""" )  @ JsonProperty ( """"description"""" )  @ Valid  public   String   getDescription ()   {  return  description ;  }
@ Override  public   int   hashCode ()   {  return  (   this . nameIdentifiers   !=   null   &&   this . nameIdentifiers . length   >   0   )  ?  this . nameIdentifiers [ this . nameIdentifiers . length   -   1 ] . hashCode ()   :  0 ;  }
@ Override  public   void   setGroupInfoDouble ( String   world ,  String   groupName ,  String   node ,  double   value )   {  setGroupInfo ( world ,  groupName ,  node ,  value ) ;  }
@ Test  public   void   testQueryExpression ()   throws  Exception  {  UriTemplate   template   =  UriTemplate . buildFromTemplate ( BASE_URI ) . query ( """"foo"""" ) . build () ;  Assert . assertEquals ( """"http:
public   Object   remove ( String   key )   {  types . remove ( key ) ;  return  data . remove ( key ) ;  }
public   ApiConfig   fieldNamingPolicy ( FieldNamingPolicy   fieldNamingPolicy )   {  this . fieldNamingPolicy   =   fieldNamingPolicy ;  return  this ;  }
public   void   testRenameLocalParameterDeclaration ()   {  testRename ( """"newName"""" , """"rename_parameter_ref_declaration.json"""" , """"rename_parameter_ref_declaration_after.json"""" ) ;  }
public   int   compareTo ( PlaceZOrder   obj )   {  return  zValue . compareTo ( obj . zValue ) ;  }
@ Override  public   void   run ()   {  if  ( conditions . contains ( condition )   &&   condition . isEvaluated () )   {  addConditionToView ( condition ) ;  }  }
public   void   setKeyPasswd ( final   String   aPasswd )   {  setKeyPasswd ( aPasswd   ==   null  ?   null   :  aPasswd . toCharArray () ) ;  }
@ Override  public   HierarchyRootWrapper   createFromRootElement ( Element   rootElement )   {  return  new   HierarchyRootWrapper ( new   AlphabeticalSortedWrapper ( rootElement ) ) ;  }
private   List < SparseInput >   getWideInputs ( Data   data )   {  List < SparseInput >   wideInputs   =  new   ArrayList < SparseInput > () ;  for ( Integer   columnId :  this . wnd . getWideColumnIds () )   {  wideInputs . add ( data . getCategoricalValues () [ this . inputIndexMap . get ( columnId ) ] ) ;  }  return  wideInputs ;  }
@ Test  public   void   testCaseInsensitiveValues ()   {  JsonFormat . Value   empty   =  JsonFormat . Value . empty () ;  assertNull ( empty . getFeature ( Feature . ACCEPT_CASE_INSENSITIVE_VALUES ) ) ;  JsonFormat . Value   insensitive   =  empty . withFeature ( Feature . ACCEPT_CASE_INSENSITIVE_VALUES ) ;  assertTrue ( insensitive . getFeature ( Feature . ACCEPT_CASE_INSENSITIVE_VALUES ) ) ;  JsonFormat . Value   sensitive   =  empty . withoutFeature ( Feature . ACCEPT_CASE_INSENSITIVE_VALUES ) ;  assertFalse ( sensitive . getFeature ( Feature . ACCEPT_CASE_INSENSITIVE_VALUES ) ) ;  }
public   void   generateFrqs ( Iterator < LyricConfigData >   dataIterator )   {  while  ( dataIterator . hasNext () )   {  LyricConfigData   data   =  dataIterator . next () ;  if  ( data   ==   null )   {  continue;  }  data . setFrqStatus ( FrqStatus . LOADING ) ;  if  ( generateFrq ( data . getPathToFile () ) )   {  data . setFrqStatus ( FrqStatus . VALID ) ;  }   else  {  data . setFrqStatus ( FrqStatus . INVALID ) ;  }  }  }
@ Override  public   Iterator < T >   iterator ()   {  return  new   DataBufferIterator ( this ) ;  }
protected   Path   getReportDirectoryPath ()   {  return  Paths . get ( getReportDirectory () ) ;  }
public   void   setAndroidAttestationServiceCredentials ( Object   androidAttestationServiceCredentials )   {  this . androidAttestationServiceCredentials   =   androidAttestationServiceCredentials ;  }
@ Nullable  public   static   List < ViewGroup < ItemStack > >   storageGroup ( Object   storage , Accessor < ? >   accessor , Function < Accessor < ? > ,  Object >   storageFinder )   {  try  {  
@ Override  public   int   readNBytes ( byte []   b ,  int   off ,  int   len )   {  Objects . checkFromIndexSize ( off ,  len ,  b . length ) ;  return  t . read ( b ,  off ,  len ) ;  }
private   Item   createEgg ()   {  Map < String ,  Integer >   properties   =  new   TreeMap <> () ;  properties . put ( """"health"""" ,  2 ) ;  properties . put ( """"weight"""" ,  1 ) ;  properties . put ( """"value"""" ,  3 ) ;  Item   item   =  new   Item ( """"fegg1"""" ,  """"food"""" ,  """"egg"""" ,  """"A nice egg"""" ,  1 ,  properties ) ;  return  item ;  }
private   static   final   File   toFile ( IPath   locationPath )   {  return  locationPath   !=   null  ?   locationPath . toFile ()   :  null ;  }
@ Test  public   void   test_insert_constraintException ()   {  final   Schedule   schedule1   =  new   Schedule . Builder ()  . withId ( 1 )  . build () ;  final   Schedule   schedule2   =  new   Schedule . Builder ()  . withId ( 1 )  . build () ;  try  {  scheduleDao . insert ( schedule1 ,  schedule2 ) ;  fail ( """"No exception thrown"""" ) ;  }   catch  ( SQLException   e )   { }  assertThat ( """"count"""" ,  scheduleDao . count () ,  is ( 0L ) ) ;  }
private   static   void   threadTest ( final   Reader   reader )  throws  InterruptedException ,  ExecutionException   {  Callable < Map >   task   =  ()  ->   reader . get ( InetAddress . getByName ( """"::1.1.1.0"""" ) ,  Map . class ) ;  MultiThreadedTest . runThreads ( task ) ;  }
@ Override  protected   void   runStatsPig ( Map < String ,  String >   paramsMap )   throws  Exception   {  log . info ( """"Run MunroPat to stats ... """" ) ;  PigExecutor . getExecutor () . submitJob ( modelConfig ,  pathFinder . getScriptPath ( """"scripts/Stats.pig"""" ) ,  paramsMap , modelConfig . getDataSet () . getSource () ,  super . pathFinder ) ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"logoutMethod"""" )  @ Valid  public   LOGOUTMETHODEnum   getLogoutMethod ()   {  return  logoutMethod ;  }
@ SuppressWarnings ( """"restriction"""" )  static   String   findFirefoxLocation ( ILaunchConfiguration   configuration )   {  List < IBrowserDescriptor >   runtimes   =  BrowserManager . getInstance () . getWebBrowsers () . stream () . filter ( FirefoxRunDABDebugDelegate :: isFirefox ) . toList () ;  for  ( IBrowserDescriptor   browser   :  runtimes )   {  if  ( browser . getLocation ()   !=   null )   {  String   location   =  browser . getLocation () ;  File   executable   =  new   File ( location ) ;  if  ( executable . isAbsolute ()   &&   executable . canExecute () )   {  return  location ;  }  }  }  return  null ;  }
public   static   < E >   E   first ( final   Iterable < E >   iterable )   {  return  iterable . iterator () . next () ;  }
private   static   double   melTransform ( double   freqInHz )   {  return  1127.0   *   Math . log ( 1   +   ( freqInHz   /   700.0 ) ) ;   
public   ApplicationModel   description ( String   description )   {  this . description   =   description ;  return  this ;  }
public   void   setMaxElementsInStatusReplicationPool ( int   maxElementsInStatusReplicationPool )   {  this . maxElementsInStatusReplicationPool   =   maxElementsInStatusReplicationPool ;  }
@ Override  public   void   fill ()   {  SwaggerValues . mimeTypes () . forEach ( this :: addValue ) ;  }
public   void   setPitchbends ( PitchbendData   pitchbends )   {  this . pbs   =   pitchbends . getPBS () ;  this . pbw   =   pitchbends . getPBW () ;  this . pby   =   pitchbends . getPBY () ;  this . pbm   =   pitchbends . getPBM () ;  this . vibrato   =   pitchbends . getVibrato () ;  }
@ Test  void   testGreenOnWhite ()   throws  IOException   {  assertThat ( annotate ( """"\033[47;32mhello world"""" ) , is ( """"<span style=\""""background-color: #E5E5E5;\""""><span style=\""""color: #00CD00;\"""">hello world</span></span>"""" ) ) ;  }
public   Builder   formatValidator ( final   FormatValidator   formatValidator )   {  this . formatValidator   =   requireNonNull ( formatValidator ,  """"formatValidator cannot be null"""" ) ;  return  this ;  }
public   void   resetUpdateModule ()   {  modulesHaveUpdates   =   false ;  updateModuleCount   =   0 ;  updateModules   =   new   ArrayList <> () ;  }
public   APIResourceResponse   description ( String   description )   {  this . description   =   description ;  return  this ;  }
public   KeyValue   modifyKey ( KeyValue   k ,  Pointers . Modifiers   mods )  {  return  KeyModifier . modify ( k ,  mods ) ;  }
private   String   listEndpoints ( List < Endpoint >   endpoints ,  String   title ,  OutputStreamWriter   outputStreamWriter )   {  if  ( null   ==   endpoints   ||   endpoints . isEmpty () )   {  return  """""""" ;  }  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( title ( title ) ) ;  for  ( Endpoint   endpoint   :  endpoints )   {  sb . append ( itemEndpoint ( endpoint . getMethod () . toString () ,  endpoint . getPathUrl () ,  endpoint . getSummary () ) ) ;  }  return  sb . append ( System . lineSeparator () ) . toString () ;  }
@ ColorInt  public   int   getTextColor ()   {  return  mSelectorWheelPaint . getColor () ;  }
@ Test  public   void   shouldFindVets ()   {  Collection < Vet >   vets   =  this . vets . findAll () ;  Vet   vet   =  EntityUtils . getById ( vets ,  Vet . class ,  3 ) ;  assertThat ( vet . getLastName () ) . isEqualTo ( """"Douglas"""" ) ;  assertThat ( vet . getNrOfSpecialties () ) . isEqualTo ( 2 ) ;  assertThat ( vet . getSpecialties () . get ( 0 ) . getName () ) . isEqualTo ( """"dentistry"""" ) ;  assertThat ( vet . getSpecialties () . get ( 1 ) . getName () ) . isEqualTo ( """"surgery"""" ) ;  }
@ Override  @ SuppressWarnings ( """"unchecked"""" )  protected   void   afterHookedMethod ( MethodHookParam   param )   throws  Throwable   {  var   map   =  ( Map )   param . getResult () ;  PinnedLinkedHashMap < Object >   pinnedMod ;  if  ( ! ( map   instanceof   PinnedLinkedHashMap ) )   {  pinnedMod   =   new   PinnedLinkedHashMap <> () ;  pinnedMod . putAll ( map ) ;  param . setResult ( pinnedMod ) ;  }   else  {  pinnedMod   =   ( PinnedLinkedHashMap < Object > )   map ;  }  pinnedMod . setLimit ( prefs . getBoolean ( """"pinnedlimit"""" ,  false )  ?   60   :  3 ) ;  }
private   long   addDefinedBy ( Long   node )   {  long   ontologyNode   =  graph . getNode ( definingOntology ) . get () ;  return  graph . createRelationship ( node ,  ontologyNode ,  OwlRelationships . RDFS_IS_DEFINED_BY ) ;  }
public   Builder   readTimeout ( long   timeout ,  TimeUnit   unit )   {  builder . readTimeout ( timeout ,  unit ) ;  return  this ;  }
public   static   Map < Integer ,  InstanceSettings >   getInstances ( Context   context )   {  ensureLoadedFromFiles ( context ,  false ) ;  return  instances ;  }
@ ApiModelProperty ( example   =   """"http:
@ Test  void   flushShouldNotBeSupported ()   {  assertThrows ( UnsupportedOperationException . class ,  writer :: flush ) ;  }
public   void   rollback ()   throws  SQLException   {  final   Connection   conn   =  this . connection . get () ;  if  ( conn   ==   null )   {  throw  new   IllegalStateException ( """"Connection is not open, can't rollback"""" ) ;  }  conn . rollback () ;  this . disconnect () ;  }
private   void   applyWhiteSpace ()  {  text   =   applyTransformations ( collapseWhitespaces ( node . getNodeValue () ) ) ;  textStart   =   0 ;  textEnd   =   text . length () ;  isempty   =   ( textEnd   ==   0 ) ;  }
protected   void   loadCaptionStyle ()  {  if  ( caption   !=   null )  {  CSSProperty . CaptionSide   side   =  caption . getStyle () . getProperty ( """"caption-side"""" ) ;  captionbottom   =   ( side   ==   CSSProperty . CaptionSide . BOTTOM ) ;  }  else  captionbottom   =   false ;  }
@ Test  public   void   thatExampleRefValueIsSuggested ()   {  getCaretCompletions ( """"example_ref"""" ) . assertContains ( """"#/components/examples/Example"""" ) . isOfSize ( 1 ) ;  }
@ Override  public   boolean   hasNext ()   {  return  testSuiteResultFiles . hasNext () ;  }
private   void   process ( double   dval ,  double   frequency )   {  LinkNode < HistogramUnit >   node   =  new   LinkNode < HistogramUnit > ( new   HistogramUnit ( dval ,  frequency ) ) ;  if ( this . tail   ==   null   &&   this . maxHistogramUnitCnt   >   1 )   {  this . header   =   node ;  this . tail   =   node ;  this . currentHistogramUnitCnt   =   1 ;  }   else  {  insertWithTrim ( node ) ;  }  }
public   int   getHighestRow ()   {  int   highest   =  0 ;  for  ( Note   note   :  highlighted )   {  if  ( note . getRow ()   >   highest )   {  highest   =   note . getRow () ;  }  }  return  highest ;  }
public   void   setPatternSteadySize ( double   patternSteadySize )   {  this . patternSteadySize   =   patternSteadySize ;  }
@ Override  public   void   putLong ( String   key ,  long   value )   {  mSharedPreferences . edit () . putLong ( key ,  value ) . apply () ;  }
public   Item   removeItem ( ItemStack   item )   {  return  removeItem ( item ,  1 ) ;  }
private   Schema   performLookup ( String   pointerToRef )   {  ReferenceSchema   ref   =  obtainReferenceSchema ( pointerToRef ) ;  return  ref . getReferredSchema () ;  }
@ Override  public   CloseHandshakeType   getCloseHandshakeType ()   {  return  CloseHandshakeType . TWOWAY ;  }
@ Override  public   Object   invoke ( MethodInvocation   invocation )   throws  Throwable   {  Object   result   =  invocation . proceed () ;  if  ( result   instanceof   Graph )   {  addCuries ( ( Graph ) result ) ;  }  return  result ;  }
@ Override  public   void   setIncludeInGlobalSearch ( SetIncludeInGlobalSearchRequest   request ,  IGlobalSearchAdminCallbacks   callbacks )   throws  RemoteException   {  Log . d ( TAG ,  """"setIncludeInGlobalSearch: """"   +   request ) ;  callbacks . onSetIncludeInGlobalSearchResponse ( new   SetIncludeInGlobalSearchResponse ( Status . SUCCESS ) ) ;  }
@ Override  public   void   stopApplication ( String   sessionId )   {  try  {  this . chromecast . stopSession ( sessionId ) ;  }   catch  ( IOException   e )   {  Log . w ( TAG ,  """"Error sending cast message: """"   +   e . getMessage () ) ;  return;  }  this . sessionId   =   null ;  }
@ Test  public   void   combinedSchemaLoading ()   {  CombinedSchema   actual   =  ( CombinedSchema )   SchemaLoader . load ( get ( """"combinedSchema"""" ) ) ;  assertNotNull ( actual ) ;  }
@ Test  public   void   testWrappedExploder ()   throws  Exception  {  Map < String ,  Object >   values   =  new   HashMap < String ,  Object > () ;  values . put ( """"address"""" ,  new   JsonVarExploder ( JSON ) ) ;  String   result   =  UriTemplate . expand ( EXPLODE_TEMPLATE ,  values ) ;  Assert . assertEquals ( """"/mapper?city=Boston&country=USA&state=MA&street=4%20Yawkey%20Way&zipcode=02215-3496"""" ,  result ) ;  }
public   static   android . view . accessibility . AccessibilityManager   getInstance ( Context   context ) {  android . view . accessibility . AccessibilityManager   accessibilityManager   = ( android . view . accessibility . AccessibilityManager )   context . getSystemService ( Context . ACCESSIBILITY_SERVICE ) ;  return  accessibilityManager ;  }
public   boolean   generatedKeyAlwaysReturned ()   throws  SQLException   {  return  false ;  }
@ Override  protected   int   getPointerColor ( float   currentPos )   {  float   solidColorLightness   =  observableColor . getLightness () ;  float   posLightness   =  1   +   currentPos   *   ( solidColorLightness   -   1 ) ;  return  posLightness   >   0.5f  ?   0xff000000   :  0xffffffff ;  }
private   void   shouldUseJenkinsBranchInfoWhenAvailableHelperAndAssertBranch ( boolean   useNativeGit ,  Map < String ,  String >   env ,  String   expectedBranchName )   throws  Exception   {  
protected   List < ?   extends  BaseCountry >   getByCapital ( String   capital ,  List < ?   extends  BaseCountry >   countries )   {  List < BaseCountry >   result   =  new   ArrayList <> () ;  for ( BaseCountry   country   :  countries )   {  if ( normalize ( country . getCapital () . toLowerCase () ) . contains ( normalize ( capital . toLowerCase () ) ) )   {  result . add ( country ) ;  }  }  return  result ;  }
private   void   drawAction ( Canvas   canvas ,  Bitmap   icon ,  Rect   rect , float   radius )   {  boolean   pressed   =  rect   ==   highlightedAction ;  Paint   circlePaint   =  null ;  if  ( radius   >   0 )   {  circlePaint   =   pressed  ?   paintPressed   :  paintDropZone ;  }   else if  ( pressed )   {  radius   =   actionSize ;  circlePaint   =   paintPressed ;  }  if  ( circlePaint   !=   null )   {  canvas . drawCircle ( rect . centerX () ,  rect . centerY () , radius ,  circlePaint ) ;  }  canvas . drawBitmap ( icon ,  null ,  rect ,  paintAction ) ;  }
public   void   setTrainCount ( double   trainCount )   {  this . trainCount   =   trainCount ;  }
@ Nullable  protected   List < EntityResult >   findEntitiesOnPath ( Vec3   startVec ,  Vec3   endVec )  {  List < EntityResult >   hitEntities   =  new   ArrayList <> () ;  List < Entity >   entities   =  this . level . getEntities ( this ,  this . getBoundingBox () . expandTowards ( this . getDeltaMovement () ) . inflate ( 1.0 ) ,  PROJECTILE_TARGETS ) ;  for ( Entity   entity   :  entities )  {  if ( ! entity . equals ( this . shooter ) )  {  EntityResult   result   =  this . getHitResult ( entity ,  startVec ,  endVec ) ;  if ( result   ==   null )  continue;  hitEntities . add ( result ) ;  }  }  return  hitEntities ;  }
protected   Session   getSession ( final   boolean   createSession )   {  try  {  final   Session   session   =  SecurityUtils . getSubject () . getSession ( createSession ) ;  LOGGER . debug ( """"createSession: {}, retrieved session: {}"""" ,  createSession ,  session ) ;  return  session ;  }   catch  ( final   DisabledSessionException   e )   {  return  null ;  }  }
@ Override  public   boolean   readLsbFirstUserProvided ()   {  return  this . readLsbFirstUserProvided ;  }
public   void   signature ( String   signature )   {  this . signature   =   signature ;  }
public   APIResourceResponse   requiresAuthorization ( Boolean   requiresAuthorization )   {  this . requiresAuthorization   =   requiresAuthorization ;  return  this ;  }
public   String   getClassLabel ( int   id )   {  return  tagClassLabel . get ( id ) ;  }
private   void   addIconInteractively ( AppMenu . Icon   appIcon )   {  if  ( appIcon   ==   null )   {  return;  }  if  ( listListener   !=   null )   {  listListener . onHideList () ;  }  fadeList . fadeOut () ;  neverDropped   =   true ;  editIcon ( appIcon ) ;  resetScrollWithoutAnimation () ;  invalidate () ;  }
public   void   setWeightedKs ( Double   weightedKs )   {  this . weightedKs   =   weightedKs ;  }
@ Override  public   void   onResult ( Status   status ,  List < TemporaryExposureKey >   result )   {  if  ( status . isSuccess () )   {  completionSource . setResult ( result ) ;  }   else  {  completionSource . setException ( new   ApiException ( status ) ) ;  }  }
private   OlTag   ol_missingEndpoint ( List < Endpoint >   endpoints )   {  if  ( null   ==   endpoints )   return  ol () ;  OlTag   ol   =  ol () ;  for  ( Endpoint   endpoint   :  endpoints )   {  ol . with ( li_missingEndpoint ( endpoint . getMethod () . toString () ,  endpoint . getPathUrl () ,  endpoint . getSummary () ) ) ;  }  return  ol ;  }
 <argument pos:start=""""""""972:68"""""""" pos:end=""""""""972:72""""""""><expr pos:start=""""""""972:68"""""""" pos:end=""""""""972:72""""""""><name pos:start=""""""""972:68"""""""" pos:end=""""""""972:72""""""""><name pos:start=""""""""972:68"""""""" pos:end=""""""""972:69"""""""">pr</name><operator pos:start=""""""""972:70"""""""" pos:end=""""""""972:70"""""""">.</operator><name pos:start=""""""""972:71"""""""" pos:end=""""""""972:72"""""""">pr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ ApiModelProperty ( value   =   """"Specifies if the claim is read-only in given profile."""" )  @ JsonProperty ( """"readOnly"""" )  public   Boolean   getReadOnly ()   {  return  readOnly ;  }
private   boolean   selectFromEnvelopeList ( int   index )   {  if  ( envelopeList   ==   null   ||   envelopeList . getItems () . size ()   <=   index )   {  return  false ;  }  EnvelopeData   newData   =  envelopeList . getItems () . get ( index ) ;  if  ( newData   ==   null )   {  return  false ;  }  currentEnvelope   =   envelopeFactory . createEnvelopeEditor ( editorWidth . get () ,  editorHeight . get () ,  newData ,  scaler , false ) ;  envelopeGroup . getChildren () . set ( 1 ,  currentEnvelope . redraw () ) ;  return  true ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  ChangedOAuthFlow   that   =  ( ChangedOAuthFlow )   o ;  return  authorizationUrl   ==   that . authorizationUrl  &&   tokenUrl   ==   that . tokenUrl  &&   refreshUrl   ==   that . refreshUrl  &&   Objects . equals ( oldOAuthFlow ,  that . oldOAuthFlow )  &&   Objects . equals ( newOAuthFlow ,  that . newOAuthFlow )  &&   Objects . equals ( extensions ,  that . extensions ) ;  }
@ Test  public   void   doIconDotSvgShouldReturnCorrectResponseForNullJob ()   throws  Exception   {  try  ( JenkinsRule . WebClient   webClient   =  j . createWebClient () )   {  String   url   =  j . getURL () . toString ()   +   """"buildStatus/icon.svg"""" ;  JenkinsRule . JSONWebResponse   json   =  webClient . getJSON ( url ) ;  String   result   =  json . getContentAsString () ;  
@ After  @ SuppressWarnings ( """"CatchAndPrintStackTrace"""" )  public   void   Teardown ()   {  try  {  server . shutdown () ;  }   catch  ( IOException   e )   {  e . printStackTrace () ;  }  }
@ ApiModelProperty ()  @ JsonProperty ( """"outboundProvisioningRoles"""" )  @ Valid  public   List < String >   getOutboundProvisioningRoles ()   {  return  outboundProvisioningRoles ;  }
private   double []   readDoubleArray ( DataInput   in )   throws  IOException   {  int   size   =  in . readInt () ;  double []   array   =  new   double [ size ] ;  for ( int   i   =  0 ;   i   <   size ;   i ++ )   {  array [ i ]   =   in . readDouble () ;  }  return  array ;  }
@ Test  public   void   testEncodeFrameBelowThreshold ()   {  PerMessageDeflateExtension   deflateExtension   =  new   PerMessageDeflateExtension () ;  deflateExtension . setThreshold ( 11 ) ;  String   str   =  """"Hello World"""" ;  byte []   message   =  str . getBytes () ;  TextFrame   frame   =  new   TextFrame () ;  frame . setPayload ( ByteBuffer . wrap ( message ) ) ;  deflateExtension . encodeFrame ( frame ) ;  
private   int   getInt ( Object   aVal ,  int   aDefVal )   {  if  ( aVal   instanceof   Number )   {  return  ( ( Number )   aVal ) . intValue () ;  }  return  aDefVal ;  }
public   static   List < BasicML >   loadBasicModels ( ModelConfig   modelConfig ,  EvalConfig   evalConfig ,  SourceType   sourceType , boolean   gbtConvertToProb )   throws  IOException   {  return  loadBasicModels ( modelConfig ,  evalConfig ,  sourceType ,  gbtConvertToProb ,  null ) ;  }
private   void   mergeNodeStats ( NodeStats   resultNodeStats ,  NodeStats   nodeStats )   {  Map < Integer ,  double [] >   featureStatistics   =  resultNodeStats . getFeatureStatistics () ;  for ( Entry < Integer ,  double [] >   entry :  nodeStats . getFeatureStatistics () . entrySet () )   {  double []   statistics   =  featureStatistics . get ( entry . getKey () ) ;  for ( int   i   =  0 ;   i   <   statistics . length ;   i ++ )   {  statistics [ i ]   +=   entry . getValue () [ i ] ;  }  }  }
@ SuppressWarnings ( """"unchecked"""" )  @ Test  void   toJsonFromXml27 ()   {  final   String   xml   =  """"<root>\n  <element/>\n</root>"""" ;  final   String   json   = """"{\n""""  +   """"  \""""root\"""": {\n""""  +   """"    \""""element\"""": {\n""""  +   """"      \""""-self-closing\"""": \""""true\""""\n""""  +   """"    }\n""""  +   """"  },\n""""  +   """"  \""""#omit-xml-declaration\"""": \""""yes\""""\n""""  +   """"}"""" ;  assertEquals ( json ,  U . toJson ( ( Map < String ,  Object > )   U . fromXml ( xml ,  Xml . FromType . FOR_FORMAT ) ) ) ;  assertEquals ( xml ,  U . toXml ( ( Map < String ,  Object > )   U . fromJson ( json ) ) ) ;  }
@ Override  @ NonNull  public   Map < String ,  AssetPackState >   packStates ()   {  return  packStates ;  }
public   static   < T ,  E >   E   inject ( final   Iterable < T >   iterable ,  final   BiFunction < E ,  T ,  E >   func ,  final   E   zeroElem )   {  return  reduce ( iterable ,  func ,  zeroElem ) ;  }
@ Override  public   String   toString ()   {  final   StringBuilder   sb   =  new   StringBuilder ( """"EurekaProperties{"""" ) ;  sb . append ( """"environment='"""" ) . append ( environment ) . append ( '\'' ) ;  sb . append ( """", datacenter="""" ) . append ( datacenter ) ;  sb . append ( '}' ) ;  return  sb . toString () ;  }
private   JSONObject   responseObject ( List < NameValuePair >   postParameters )   throws  Exception   {  HttpPost   httpPost   =  new   HttpPost ( getTenantQualifiedURL ( OAuth2Constant . ACCESS_TOKEN_ENDPOINT ,  tenantInfo . getDomain () ) ) ;  
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Check is add profile enabled"""" )  public   void   testIsAddProfileEnabledForDomain ()   throws  Exception   {  boolean   isAddProfileEnabledForDomain   =  userProfileMgtClient . isAddProfileEnabledForDomain ( """"carbon.super"""" ) ;  Assert . assertFalse ( isAddProfileEnabledForDomain ,  """"Getting is add profile enabled for domain has failed."""" ) ;  }
@ Test  void   renameRoot ()   {  assertEquals ( """"<?xml version=\""""1.0\"""" encoding=\""""UTF-8\""""?>\n<json></json>"""" , U . jsonToXml ( """"{}"""" ,  """"json"""" ) ) ;  assertEquals ( """"<?xml version=\""""1.0\"""" encoding=\""""UTF-8\""""?>\n<json>\n""""  +   """"  <a>b</a>\n""""  +   """"  <c>d</c>\n""""  +   """"</json>"""" , U . jsonToXml ( """"{\""""a\"""": \""""b\"""", \""""c\"""": \""""d\""""}"""" ,  """"json"""" ) ) ;  assertEquals ( """"<?xml version=\""""1.0\"""" encoding=\""""UTF-8\""""?>\n<json a=\""""b\"""" c=\""""d\""""></json>"""" , U . jsonToXml ( """"{\""""a\"""": \""""b\"""", \""""c\"""": \""""d\""""}"""" , U . JsonToXmlMode . FORCE_ATTRIBUTE_USAGE , """"json"""" ) ) ;  }
@ ApiModelProperty ( example   =   """"before"""" ,  value   =   """""""" )  @ JsonProperty ( """"rel"""" )  @ Valid  public   String   getRel ()   {  return  rel ;  }
private   boolean   isStunGrenade ( ResourceLocation   loc )  {  return  loc . toString () . equals ( Reference . MOD_ID   +   """":grenade_stun_explosion"""" ) ;  }
public   final   String   a ( final   byte []   array )   {  Log . d ( TAG ,  """"a[?](""""   +   array   +   """")"""" ) ;  return  new   String ( FallbackCreator . create ( new   HashMap <> () ,  array ,  """""""" ,  context ,  null ) ) ;  }
private   boolean   post ( Runnable   runnable )   {  int   callingUid   =  Binder . getCallingUid () ;  if  ( callingUid   !=   knownGoodUid )   {  
public   GrantTypeMetaData   addOptionsItem ( GrantType   optionsItem )   {  if  ( this . options   ==   null )   {  this . options   =   new   ArrayList <> () ;  }  this . options . add ( optionsItem ) ;  return  this ;  }
public   static   void   initializeModuleV1 ( Context   context )   {  initializeModuleV2 ( context ,  """"com.google.android.gms"""" . equals ( context . getPackageName () ) ) ;  }
public   void   hideFrom ( View   view )   {  try  {  imm . hideSoftInputFromWindow ( view . getWindowToken () ,  0 ) ;  }   catch  ( Exception   e )   {  
public   AccessTokenConfiguration   revokeTokensWhenIDPSessionTerminated ( Boolean   revokeTokensWhenIDPSessionTerminated )   {  this . revokeTokensWhenIDPSessionTerminated   =   revokeTokensWhenIDPSessionTerminated ;  return  this ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( oldHeaders ,  newHeaders ,  context ,  increased ,  missing ,  changed ) ;  }
public   SMSSender   secret ( String   secret )   {  this . secret   =   secret ;  return  this ;  }
@ Override  public   AnalogOutputConfig   stepValue ( Integer   value )   {  return  null ;  }
private   void   disable_defEmojis ()   throws  Exception   {  var   defEmojiClass   =  Unobfuscator . loadDefEmojiClass ( classLoader ) ;  XposedBridge . hookMethod ( defEmojiClass ,  XC_MethodReplacement . returnConstant ( null ) ) ;  }
public   static   void   sendValueChangedEvent ( Picker   picker ,  int   newValue )   {  AccessibilityEvent   event   =  buildEvent ( picker . getView () ,  AccessibilityEvent . TYPE_WINDOW_STATE_CHANGED ) ;  String   message   =  pickerValueToDisplayedValue ( picker ,  newValue ) ;  event . getText () . add ( message ) ;  sendEvent ( event ) ;  }
@ Override   public   ULongIndexer   put ( long   i ,  long   j ,  long   k ,  BigInteger   l )   {  buffer . put ( ( int ) index ( i ,  j ,  k ) ,  fromBigInteger ( l ) ) ;  return  this ;  }
public   MirrorSelector   getMirrorSelector ()   {  return  this . mirrorSelector ;  }
@ DataProvider ( name   =   """"organizationLimitValidationDataProvider"""" )  public   Object [] []   organizationLimitValidationDataProvider ()   {  return  new   Object [] []   { { 10 } , { 20 } , { 25 } ,} ;  }
public   void   tearDownCallbacks ()   {  BusProvider . getBus () . unregister ( this ) ;  if  ( isOfflineMode () )   {  LocalBroadcastManager . getInstance ( context ) . unregisterReceiver ( mDownloadReceiver ) ;  }  }
@ Bean  public   MappingJackson2HttpMessageConverter   mappingJacksonHttpMessageConverter ()   {  return  EurekaHttpClientUtils . mappingJacksonHttpMessageConverter () ;  }
public   float   totalWidth ()  {  return  emargin . left   +   border . left   +   padding . left   +   content . width   +  padding . right   +   border . right   +   emargin . right ;  }
@ EventHandler ( priority   =   EventPriority . MONITOR )  public   void   onPluginEnable ( PluginEnableEvent   event )   {  if  ( chat . chat   ==   null )   {  Plugin   perms   =  event . getPlugin () ;  if  ( perms . getDescription () . getName () . equals ( """"PermissionsEx"""" ) )   {  if  ( perms . isEnabled () )   {  chat . chat   =   ( PermissionsEx )   perms ;  log . info ( String . format ( """"[%s][Chat] %s hooked."""" ,  plugin . getDescription () . getName () ,  chat . name ) ) ;  }  }  }  }
public   void   applyCameraUpdateAnimated ( CameraUpdate   cameraUpdate ,  int   durationMs )   {  cameraUpdate . applyAnimated ( mapView . map () ,  durationMs ) ;  }
private   void   showIntroductoryOverlay ()   {  if  ( mIntroductoryOverlay   !=   null )   {  mIntroductoryOverlay . remove () ;  }  if  ( ( mediaRouteMenuItem   !=   null )   &&   mediaRouteMenuItem . isVisible () )   {  new   Handler () . post ( ()  ->  {  mIntroductoryOverlay   =   new   IntroductoryOverlay  . Builder ( this ,  mediaRouteMenuItem )  . setTitleText ( """"Introducing Cast"""" )  . setSingleTime ()  . setOnOverlayDismissedListener ( ()  ->   mIntroductoryOverlay   =   null )  . build () ;  mIntroductoryOverlay . show () ;  } ) ;  }  }
@ Override   public   int   get ( long   i ,  long   j ,  long   k )   {  return  array [ ( int ) index ( i ,  j ,  k ) ] ;  }
@ Override  public   void   onCreate ()   {  Log . v ( TAG ,  """"onCreate"""" ) ;  super . onCreate () ;  ( ( SyncthingApp )   getApplication () ) . component () . inject ( this ) ;  mHandler   =   new   Handler () ;    mStoragePermissionGranted   =   PermissionUtil . haveStoragePermission ( this ) ;  if  ( mNotificationHandler   !=   null )   {  mNotificationHandler . setAppShutdownInProgress ( false ) ;  }  }
@ NonNull  @ Override  public   Task < Location >   getLastLocation ( @ NonNull   LastLocationRequest   request )   {  return  null ;  }
public   ConnectorsPatchReq   properties ( List < PropertyReq >   properties )   {  this . properties   =   properties ;  return  this ;  }
@ Override  public   final   void   setAsText ( final   String   text )   throws  IllegalArgumentException   {  throw  new   UnsupportedOperationException ( """"Operation not Supported:""""   +   text ) ;  }
@ Test  void   fetchGetWithTimeouts ()   {  U . FetchResponse   result   = U . fetch ( """"https:
static   LineBias   fromInt ( int   val )   {  for  ( LineBias   dir   :  LineBias . values () )   {  if  ( dir . val   ==   val )  return  dir ;  }  throw  new   IllegalStateException ( """"Unexpected LINE_BIAS value: """"   +   val ) ;  }
private   JWTClaimsSet   extractJwtClaims ( String   jwtToken )   throws  ParseException   {  SignedJWT   signedJWT   =  SignedJWT . parse ( jwtToken ) ;  return  signedJWT . getJWTClaimsSet () ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   testConclude ()   throws  Exception   {  action1   =   null ;  action2   =   null ;  testActionId2   =   null ;  super . conclude () ;  }
public   static   UShortIndexer   create ( ShortBuffer   buffer ,  long ...   sizes )   {  return  new   UShortBufferIndexer ( buffer ,  sizes ) ;  }
private   boolean   checkIfLogicalType ( final   Schema   innerSchema )   {  return  Objects . nonNull ( innerSchema . getLogicalType () ) ;  }
@ SuppressWarnings ( """"rawtypes"""" )  public   void   initGrads ()   {  for ( Layer   layer :  hiddenLayers )   {  if ( layer   instanceof   DenseLayer )   {  ( ( DenseLayer )   layer ) . initGrads () ;  }  }  this . finalLayer . initGrads () ;  this . ecl . initGrads () ;  this . wl . initGrads () ;  }
@ Test  public   void   getAffinityReturnsValidValue ()   {  final   BitSet   affinity   =  getImpl () . getAffinity () ;  assertTrue ( """"Affinity mask """"   +   Utilities . toBinaryString ( affinity )   +   """" must be non-empty"""" , ! affinity . isEmpty () ) ;  final   int   allCoresMask   =  ( 1   <<   CORES )   -   1 ;  assertTrue ( """"Affinity mask """"   +   Utilities . toBinaryString ( affinity )   +   """" must be <=(2^""""   +   CORES   +   """"-1 = """"   +   allCoresMask   +   """")"""" , affinity . length ()   <=   CORES_MASK . length () ) ;  }
public   boolean   isPlayerSet ( String   player ,  String   flag )   {  Map < String ,  Boolean >   flags   =  this . getPlayerFlags ( player ,  false ) ;  if  ( flags   ==   null )  return  false ;  return  flags . containsKey ( flag ) ;  }
private   void   tearDownAudioPlayerRemote ()   {  AudioManager   audioManager   =  ( AudioManager )   getSystemService ( Context . AUDIO_SERVICE ) ;  if  ( audioManager   !=   null )   {  audioManager . abandonAudioFocus ( this ) ;  }  mediaSession . release () ;  }
@ Override  public   int   run ()   throws  Exception   {  setUp ( ModelStep . INIT ) ;  switch  ( action )   {  case  SHOW :  printCurrentWorker () ;  break;  case  SAVE :  saveModel ( this . modelName ) ;  break;  case  SWITCH :  switchModel ( this . modelName ) ;  break;  case  DELETE :  deleteModel () ;  break;  case  LIST :  listModels () ;  break;  default:  break;  }  syncDataToHdfs ( modelConfig . getDataSet () . getSource () ) ;  return  0 ;  }
public   void   reason ( OWLOntologyManager   manager ,  OWLOntology   ont ,  OntologySetup   config )  throws  Exception   {  if  ( config . isSkipImports ()   ==   false   &&   config . getReasonerConfiguration () . isPresent () )   {  String   origThreadName   =  Thread . currentThread () . getName () ;  Thread . currentThread () . setName ( """"reasoning - """"   +   config ) ;  ReasonerUtil   util   =  new   ReasonerUtil ( config . getReasonerConfiguration () . get () ,  manager ,  ont ) ;  util . reason () ;  Thread . currentThread () . setName ( origThreadName ) ;  }  }
 <argument pos:start=""""""""92:35"""""""" pos:end=""""""""92:38""""""""><expr pos:start=""""""""92:35"""""""" pos:end=""""""""92:38""""""""><literal type=""""""""null"""""""" pos:start=""""""""92:35"""""""" pos:end=""""""""92:38"""""""">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   static   < T >   List < T >   drop ( final   Iterable < T >   iterable ,  final   Integer   n )   {  return  rest ( newArrayList ( iterable ) ,  n ) ;  }
@ Override  public   String   getGroupInfoString ( String   world ,  String   groupName ,  String   node ,  String   defaultValue )   {  if  ( ! groupManager . doesGroupExist ( groupName ) )   {  return  defaultValue ;  }  PermissionGroup   group   =  overPerms . getGroupManager () . getGroup ( groupName ) ;  if  ( world   ==   null )   {   
private   void   addCheckedAction ( List < GuidedAction >   actions ,  int   iconResId ,  Context   context , String   title ,  String   desc ,  boolean   checked )   {  GuidedAction   guidedAction   =  new   GuidedAction . Builder ( context )  . title ( title )  . description ( desc )  . checkSetId ( OPTION_CHECK_SET_ID )  . icon ( iconResId )  . build () ;  guidedAction . setChecked ( checked ) ;  actions . add ( guidedAction ) ;  }
@ Test  public   void   nonUsableAddedRelationshipProperties_areIgnored ()   {  long   a   =  graph . createNode ( """"a"""" ) ;  long   relationship   =  graph . createRelationship ( a ,  a ,  TYPE ) ;  graph . addRelationshipProperty ( relationship ,  """"foo"""" ,  """"the"""" ) ;  assertThat ( graph . getRelationshipProperty ( relationship ,  """"foo"""" ,  String . class ) . isPresent () ,  is ( false ) ) ;  }
@ Override  public   void   setPlayerInfoString ( String   world ,  String   player ,  String   node ,  String   value )   {  throw  new   UnsupportedOperationException ( """"bPermissions does not support altering info nodes"""" ) ;  }
public   void   set ( Fragment   fragment ,  int   fragmentContainerId )   {  if  ( isSet ( fragmentContainerId ) )   {  return;  }  fragmentManager  . beginTransaction ()  . add ( fragmentContainerId ,  fragment )  . commit () ;  }
private   static   void   printKeyErrorMessage ( NodeTuple   nodeTuple )   {  System . out . println ( """"Unkown USTX field: """"  +   UtsuFileUtils . getYamlStringValue ( nodeTuple . getKeyNode () ,  """"UNKNOWN"""" ) ) ;  }
public   static   String   pad ( String   data ,  String   pad ,  int   length )   {  return  create ( pad ,  length )   +   data   +   create ( pad ,  length ) ;  }
@ Override  public   Cap   createFromParcel ( Parcel   parcel )   {  Cap   item   =  super . createFromParcel ( parcel ) ;  switch  ( item . type )   {  case  0 :  return  new   ButtCap () ;  case  1 :  return  new   SquareCap () ;  case  2 :  return  new   RoundCap () ;  case  3 :  if  ( item . refWidth   !=   null )   {  return  new   CustomCap ( item . bitmapDescriptor ,  item . refWidth ) ;  }   else  {  return  new   CustomCap ( item . bitmapDescriptor ) ;  }  default:  return  item ;  }  }
@ Override  public   String   getLauncherClassName ()   {  return  """"org.springframework.boot.loader.wrapper.ThinJarWrapper"""" ;  }
@ Test  public   void   getNameLongMethodNameAndParametersTest ()   throws  Exception   {  String   name   =  getName ( METHOD_NAME ,  new   Object [] { TOO_LONG_NAME } ) ;  assertThat ( """"Invalid method name short cut"""" ,  name , equalTo ( """"getSomethingNew[this name pattern is too long, over 150 symbols! Guys, what are you """"   +  """"thinking for when you made so long t...]"""" ) ) ;  }
boolean   isIdleModeSupported ()   {  return  Build . VERSION . SDK_INT   >=   23 ;  }
@ Override  void   visitFormat ( FormatValidator   formatValidator )   {  Optional < String >   failure   =  formatValidator . validate ( stringSubject ) ;  if  ( failure . isPresent () )   {  owner . failure ( failure . get () ,  """"format"""" ) ;  }  }
 \""""""""(""""""""</literal> <operator pos:start=""""""""3440:137"""""""" pos:end=""""""""3440:137"""""""">+</operator>
public   TestCaseStatusChangeEvent   withThrowable ( Throwable   value )   {  setThrowable ( value ) ;  return  this ;  }
private   static   List < String >   getViewList ( File   viewFolder )   {  if  ( ! viewFolder . exists () )  throw  new   RuntimeException ( """"The folder """"   +   viewFolder . getAbsolutePath ()  +   """" does not exists."""" ) ;  else if  ( ! viewFolder . isDirectory () )  throw  new   RuntimeException ( viewFolder . getAbsolutePath ()   +   """" is not a folder!."""" ) ;  else if  ( ! viewFolder . canRead () )  throw  new   RuntimeException ( """"The folder """"   +   viewFolder . getAbsolutePath ()  +   """" cannot be read."""" ) ;  return  Arrays . asList ( viewFolder . list ( new   SimpleFileFilter ( """".java"""" ) ) ) ;  }
private   static   String   toJobName ( String   queryId ,  String   userName )   {  if  ( userName   ==   null )   {  return  YANAGISHIAM_HIVE_JOB_PREFIX   +   queryId ;  }  return  YANAGISHIAM_HIVE_JOB_PREFIX   +   userName   +   """"-""""   +   queryId ;  }
private   void   assertExampleCompletions ( final   AssertableList   completions )   {  completions  . assertContains ( """"$ref"""" ,  """"summary"""" ,  """"description"""" ,  """"value"""" ,  """"externalValue"""" )  . isOfSize ( 5 ) ;  }
@ Override  public   final   double   derivativeFunction ( final   double   b ,  final   double   a )   {  if  (  b   >   0  )   {  return  ( 1.0   -   a   *   a ) ;  }   else  {  
private   void   setCastState ( int   castState )   {  this . castState   =   castState ;  this . onCastStateChanged () ;  }
public   OpenIDConnectConfiguration   clientId ( String   clientId )   {  this . clientId   =   clientId ;  return  this ;  }
public   AuthenticationType   type ( TypeEnum   type )   {  this . type   =   type ;  return  this ;  }
@ Override  public   Integer   writeLsbFirst ()   {  return  this . writeLsbFirst ;  }
@ Override  public   String   toString ()   {  return  String . format ( """"XSET %s"""" ,  this . expr ) ;  }
public   void   setScores ( List < Double >   scores )   {  this . scores   =   scores ;  }
public   void   launchSelectedAppFromList ()   {  if  ( selectedApp   <   0   ||   isEmpty () )   {  return;  }  PieLauncherApp . appMenu . launchApp ( getContext () ,  appList . get ( clamp ( selectedApp ,  0 ,  getIconCount ()   -   1 ) ) ) ;  }
@ Override  public   String   toString ()   {  return  """"DetectedActivity [type=""""   +   typeToString ( getType () )   +   """", confidence=""""   +   getConfidence ()   +   """"]"""" ;  }
@ Nullable  private   Settings   getModuleSettings ( Module   module )   {  return  ModuleSettings . getInstance ( module ) . getState () ;  }
public   static   SpiMode   getByNumber ( int   modeNumber ) {  for ( var   item   :  SpiMode . values () ) {  if ( item . getMode ()   ==   modeNumber ) {  return  item ;  }  }  return  null ;  }
private   static   void   setupIndex ( AutoIndexer < ? >   index ,  Collection < String >   properties )   {  for  ( String   property   :  properties )   {  index . startAutoIndexingProperty ( property ) ;  }  index . setEnabled ( true ) ;  }
public   PermissionGroup   getGroup ( String   player ,  String   world )   {  return  groups . get ( this . getGroupNameByPlayer ( player ,  world ) ) ;  }
private   void   updateCommand ( String   command )   {  mArguments . putString ( """"command"""" ,  command ) ;  }
public   static   Chain < String >   of ( final   String   item )   {  return  new   U . Chain <> ( item ) ;  }
public   boolean   ownInsertsAreVisible ( int   type )   throws  SQLException   {  return  false ;  }
public   void   importCertToStore ( CertificateRequest   certificateRequest )   throws  IOException   {  String   jsonRequest   =  toJSONString ( certificateRequest ) ;  String   endPointUrl   =  serverUrl   +   ISIntegrationTest . getTenantedRelativePath ( KEYSTORE_BASE_PATH ,  tenantDomain ) ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpPost ( endPointUrl ,  jsonRequest ,  getHeaders () ) )   {  Assert . assertEquals ( response . getStatusLine () . getStatusCode () ,  HttpServletResponse . SC_CREATED , """"Certificate upload failed"""" ) ;  }  }
@ Override  public   Set < ?   extends  Class < ? > >   getRequiredContext ()   {  return  Collections . singleton ( Run . class ) ;  }
public   final   String   getFieldType ()   {  return  getPropertyAsString ( FIELD_TYPE ) ;  }
@ Override  public   MiningSchema   build ( BasicML   basicML )   {  MiningSchema   miningSchema   =  new   MiningSchema () ;  for ( ColumnConfig   columnConfig :  columnConfigList )   {  if ( columnConfig . isFinalSelect ()   ||   columnConfig . isTarget () )   {  MiningField   miningField   =  new   MiningField () ;  
@ Test  public   void   discriminatorChanged ()   {  BackwardIncompatibleProp   prop   =  SCHEMA_DISCRIMINATOR_CHANGED ;  assertSpecIncompatible ( BASE ,  """"bc_schema_discriminator_changed.yaml"""" ,  prop ) ;  }
public   void   setCheckered ( boolean   checkered )   {  firePropertyChange ( """"checkered"""" ,  this . checkered ,  this . checkered   =   checkered ) ;  }
@ Test  public   void   thatCallbackDefinitionKeysAreSuggested ()   {  getCaretCompletions ( """"component_callback"""" )  . assertContains ( """"$ref"""" , """"description"""" , """"summary"""" , """"get"""" , """"put"""" , """"post"""" , """"delete"""" , """"options"""" , """"head"""" , """"patch"""" , """"trace"""" , """"servers"""" , """"parameters"""" )  . isOfSize ( 13 ) ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"hybridFlow"""" )  @ Valid  public   HybridFlowConfiguration   getHybridFlow ()   {  return  hybridFlow ;  }
public   void   setAudioAlbum ( String   audioAlbum )   {  this . audioAlbum   =   audioAlbum ;  }
public   SchemaLoaderBuilder   addFormatValidator ( FormatValidator   formatValidator )   {  formatValidators . put ( formatValidator . formatName () ,  formatValidator ) ;  return  this ;  }
@ Test  void   toXml ()   {  XmlBuilder   xmlBuilder   =  XmlBuilder . parse ( XML ) ;  assertEquals ( XML ,  xmlBuilder . toXml () ) ;  }
@ Override  public   void   setConfigCategoryOverride ( ResourceLocation   key ,  Component   override )   {  Preconditions . checkArgument ( ! JadeIds . isAccess ( key ) ,  """"Cannot override option from access category"""" ) ;  Preconditions . checkArgument ( IPluginConfig . isPrimaryKey ( key ) ,  """"Only primary config key can be overridden"""" ) ;  Preconditions . checkArgument ( hasConfig ( key ) ,  """"Unknown config key: %s"""" ,  key ) ;  configCategoryOverrides . put ( key ,  override ) ;  }
static   AnalogOutputBinding   newInstance ( AnalogOutput   ...   output ) {  return  new   DefaultAnalogBinding ( output ) ;  }
public   void   setWgtCntRatio ( double   wgtCntRatio )   {  this . wgtCntRatio   =   wgtCntRatio ;  }
public   void   accept ( final   ResolvedRef   resolvedRef )   {  if  ( resolvedRef . isValid () )   {  node . set ( index ,  resolvedRef . getJsonNode () ) ;  }   else if  ( resolvedRef . isCircular () )   {  node . set ( index ,  mapper . createObjectNode () . put ( SwaggerConstants . REF_KEY ,  CIRCULAR_REFERENCE ) ) ;  }  }
@ Override  public   String   getCompleteJson ( final   int   indentation )   {  final   String   indentationPadding   =  StringUtils . repeat ( """" """" ,  indentation ) ;  return  indentationPadding   +   """"\""""""""   +   getName ()   +   """"\""""""""   +   getJsonPlaceholderSuffix ( indentation ) ;  }
@ Override  protected   void   configure ()   {  bind ( PortamentoFactory . class ) . asEagerSingleton () ;  bind ( SongManager . class ) . asEagerSingleton () ;  bind ( VoicebankManager . class ) . asEagerSingleton () ;  }
public   synchronized   void   setChip ( String   chipName )   {  if  ( this . gpioChip   !=   null )   {  logger . warn ( """"GpioD context already initialized with chip: {}.  Ignoring new chip request."""" ,  this . gpioChip . getName () ) ;  return;  }  this . desiredChipName   =   chipName ;  logger . debug ( """"GpioD chip name set to: {}"""" ,  ( chipName   ==   null   ||   chipName . isEmpty () )  ?   """"[default]""""   :  chipName ) ;  }
@ Override  public   MutableComponent   title ( Object   componentOrString )   {  Component   component ;  if  ( componentOrString   instanceof   MutableComponent )   {  component   =   ( MutableComponent )   componentOrString ;  }   else  {  component   =   Component . literal ( Objects . toString ( componentOrString ) ) ;  }  return  color ( DisplayHelper . INSTANCE . stripColor ( component ) ,  theme () . text . colors () . title () ) ;  }
@ Override  public   String   toString ()   {  return  """"class Email {\n""""   +  """"    type: """"   +   toIndentedString ( type )   +   """"\n""""   +  """"    value: """"   +   toIndentedString ( value )   +   """"\n""""   +  """"}"""" ;  }
private   ServerFilesAdapter   getFilesAdapter ()   {  return  ( ServerFilesAdapter )   getListAdapter () ;  }
public   AssertableList   assertNotContains ( Iterable < String >   badElements )   {  for  ( String   nextBad   :  badElements )   {  assertThat ( myActualList ,  IsNot . not ( IsCollectionContaining . hasItem ( nextBad ) ) ) ;  }  return  this ;  }
public   OrderedEventSource   getFirstActiveEventSource ()   {  for ( OrderedEventSource   orderedSource :  getSettings () . getActiveEventSources () )   {  return  orderedSource ;  }  return  OrderedEventSource . EMPTY ;  }
@ Test  public   void   testIsServerNoContextTakeover ()   {  PerMessageDeflateExtension   deflateExtension   =  new   PerMessageDeflateExtension () ;  assertTrue ( deflateExtension . isServerNoContextTakeover () ) ;  }
public   void   sendGcmMessage ( Bundle   extras )   {  Intent   intent   =  new   Intent ( ACTION_GCM_SEND ) ;  intent . setPackage ( GMS_PACKAGE_NAME ) ;  intent . putExtras ( extras ) ;  intent . putExtra ( EXTRA_APP ,  getSelfAuthIntent () ) ;  context . sendOrderedBroadcast ( intent ,  PERMISSION_GTALK ) ;  }
@ Test ( dependsOnMethods   =   """"testGetUser"""" )  public   void   testFilterUser ()   throws  Exception   {  validateFilteredUser ( USER_NAME_ATTRIBUTE ,  EQUAL ,  USERNAME ) ;  validateFilteredUser ( USER_NAME_ATTRIBUTE ,  CONTAINS ,  USERNAME . substring ( 2 ,  4 ) ) ;  validateFilteredUser ( USER_NAME_ATTRIBUTE ,  STARTWITH ,  USERNAME . substring ( 0 ,  3 ) ) ;  validateFilteredUser ( USER_NAME_ATTRIBUTE ,  ENDWITH ,  USERNAME . substring ( 4 ,  USERNAME . length () ) ) ;  }
public   Chain < T >   tap ( final   Consumer < T >   func )   {  Underscore . each ( list ,  func ) ;  return  new   Chain <> ( list ) ;  }
public   void   deleteApplication ( String   appId )   throws  IOException   {  String   endpointUrl   =  applicationManagementApiBasePath   +   PATH_SEPARATOR   +   appId ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpDelete ( endpointUrl ,  getHeaders () ) )   {  Assert . assertEquals ( response . getStatusLine () . getStatusCode () ,  HttpServletResponse . SC_NO_CONTENT , """"Application deletion failed"""" ) ;  }  }
default   int   readRegister ( int   register ,  char []   buffer ,  int   length )   {  return  readRegister ( register ,  StandardCharsets . US_ASCII ,  buffer ,  length ) ;  }
public   Builder   append ( int   arrayIndex )   {  this . refTokens . add ( String . valueOf ( arrayIndex ) ) ;  return  this ;  }
public   PetDetails   build ()   {  return  new   PetDetails ( id ,  name ,  birthDate ,  type ,  visits ) ;  }
private   JSONObject   createSampleApplicationObject ()   throws  JSONException   {  JSONObject   application   =  new   JSONObject () ;  application . put ( """"name"""" ,  """"sample application"""" ) ;  application . put ( """"description"""" ,  """"This is the sample application."""" ) ;  application . put ( """"imageUrl"""" ,  """"https:
private   int   getParallelNumByDataVolume ()   throws  IOException   {  long   fileSize   =  ShifuFileUtils . getFileOrDirectorySize ( modelConfig . getDataSet () . getDataPath () , modelConfig . getDataSet () . getSource () ) ;  log . info ( """"File Size is - {}, for {}"""" ,  fileSize ,  modelConfig . getDataSet () . getDataPath () ) ;  if ( ShifuFileUtils . isCompressedFileOrDirectory ( modelConfig . getDataSet () . getDataPath () , modelConfig . getDataSet () . getSource () ) )   {  log . info ( """"File is compressed, for {}"""" ,  modelConfig . getDataSet () . getDataPath () ) ;  fileSize   =   fileSize   *   3 ;   
static   void   setInstance ( ApplicationInfoManager   infoManager )   throws  IllegalAccessException   {  Field   instance   =  ReflectionUtils . findField ( ApplicationInfoManager . class ,  """"instance"""" ) ;  ReflectionUtils . makeAccessible ( instance ) ;  instance . set ( null ,  infoManager ) ;  }
public   static   ColumnConfig   findTargetColumn ( List < ColumnConfig >   columnConfigList )   {  for ( ColumnConfig   columnConfig :  columnConfigList )   {  if ( columnConfig . isTarget () )   {  return  columnConfig ;  }  }  return  null ;  }
public   static   Multimap < String ,  Object >   multivaluedMapToMultimap ( MultivaluedMap < String ,  String >   map ,  Optional < Character >   separator )   {  Multimap < String ,  Object >   merged   =  ArrayListMultimap . create () ;  for  ( Entry < String ,  List < String > >   entry :  map . entrySet () )   {  for  ( String   value :  entry . getValue () )   {  if  ( separator . isPresent () )   {  merged . putAll ( entry . getKey () ,  Splitter . on ( separator . get () ) . split ( value ) ) ;  }   else  {  merged . put ( entry . getKey () ,  value ) ;  }  }  }  return  merged ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  super . init ( TestUserMode . SUPER_TENANT_USER ) ;  }
public   boolean   isSeverityAnnotationPresent ()   {  return  isAnnotationPresent ( Severity . class ) ;  }
static   MockDigitalInputProvider   newInstance ()   {  return  new   MockDigitalInputProviderImpl () ;  }
public   static   boolean   filter ( int   targetColumnNum ,  List < String >   posTags ,  List < String >   negTags ,  String []   fields , double   sampleRate ,  boolean   sampleNegOnly )   {  String   tag   =  CommonUtils . trimTag ( fields [ targetColumnNum ] ) ;  return  isNotSampled ( posTags ,  negTags ,  sampleRate ,  sampleNegOnly ,  tag ) ;  }
@ CanIgnoreReturnValue  Builder   addExtraActualNode ( TreePath   extraNode )   {  return  addExtraActualNode ( extraNode ,  """""""" ) ;  }
public   boolean   completeDiscriminatorKey ()   {  return  pathResolver . childOfDiscriminator ( psiElement ) ;  }
static   TestSpiProvider   newInstance ( String   id ,  String   name ) {  return  new   TestSpiProviderImpl ( id ,  name ) ;  }
@ Override  public   boolean   groupHas ( String   world ,  String   group ,  String   permission )   {  GroupSet   set   =  perms . getGroupManager () . getWorldSet ( Bukkit . getWorld ( world ) ) ;  if  ( set . hasGroup ( group ) )   {  Group   g   =  set . getGroup ( group ) ;  return  g . hasPermission ( permission ,  true ) ;  }   else  {  return  false ;  }  }
private   static   boolean   shouldHasUniqueValues ( List < Field >   dataFields )   {  Set < String >   dataValues   =  new   HashSet <> () ;  for  ( Field   field   :  dataFields )   {  String   value   =  field . getAnnotation ( Plugin . Data . class ) . value () ;  if  ( dataValues . contains ( value ) )   {  return  false ;  }  dataValues . add ( value ) ;  }  return  true ;  }
public   void   fire ( StepEvent   event )   {  Step   step   =  stepStorage . getLast () ;  event . process ( step ) ;  notifier . fire ( event ) ;  }
@ Override  public   void   setGroupSuffix ( String   world ,  String   group ,  String   suffix )   {  setGroupInfoString ( world ,  group ,  """"prefix"""" ,  suffix ) ;  }
@ Override  protected   void   checkKoKo ( final   ProcessingReport   report )  throws  ProcessingException  {  verify ( report ,  times ( 2 ) ) . error ( anyMessage () ) ;  }
private   void   stopActiveTrack () {  if ( currentTrackId   !=   TRACK_ID_NO_TRACK ) {  
private   Properties   loadThinProperties ( Properties   props ,  Archive   archive ,  String   name ,  String []   list )   {  List < String >   profiles   =  new   ArrayList <> ( Arrays . asList ( list ) ) ;  if  ( ! profiles . contains ( """""""" ) )   {  profiles . add ( 0 ,  """""""" ) ;  }  for  ( String   profile   :  profiles )   {  String   path   =  name   +   ( """""""" . equals ( profile )  ?   """"""""   :  """"-"""" )   +   profile   +   """".properties"""" ;  loadProperties ( props ,  archive ,  path ) ;  }  return  props ;  }
@ Override  public   boolean   useViewLifecycleWhenInFragment ()   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: useViewLifecycleWhenInFragment"""" ) ;  return  false ;  }
@ Override  public   void   removeListener ( PiGpioStateChangeListener   listener ) {  
public   APIResourcePatchModel   removedAuthorizationDetailsTypes ( List < String >   removedAuthorizationDetailsTypes )   {  this . removedAuthorizationDetailsTypes   =   removedAuthorizationDetailsTypes ;  return  this ;  }
public   void   deleteV2Role ( String   roleId )   throws  IOException   {  String   endpointUrl   =  roleV2ApiBasePath   +   PATH_SEPARATOR   +   roleId ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpDelete ( endpointUrl ,  getHeaders () ) )   {  Assert . assertEquals ( response . getStatusLine () . getStatusCode () ,  HttpServletResponse . SC_NO_CONTENT , """"Application deletion failed"""" ) ;  }  }
@ Override  public   void   onFrameResolutionChanged ( int   videoWidth ,  int   videoHeight ,  int   rotation )   {  WebRTCView . this . onFrameResolutionChanged ( videoWidth ,  videoHeight ,  rotation ) ;  }
@ Test  public   void   succeeded_failureReportsWarnings ()   {  expectFailure  . whenTesting ()  . about ( compilations () )  . that ( compilerWithWarning () . compile ( HELLO_WORLD_BROKEN ) )  . succeeded () ;  AssertionError   expected   =  expectFailure . getFailure () ;  assertThat ( expected . getMessage () )  . startsWith ( """"Compilation produced the following diagnostics:\n"""" ) ;  assertThat ( expected . getMessage () ) . contains ( """"No files were generated."""" ) ;  
public   SingleLogoutProfile   idpInitiatedSingleLogout ( IdpInitiatedSingleLogout   idpInitiatedSingleLogout )   {  this . idpInitiatedSingleLogout   =   idpInitiatedSingleLogout ;  return  this ;  }
private   long   getFilePosition ()   throws  IOException   {  long   retVal ;  if ( isCompressedInput   &&   null   !=   filePosition )   {  retVal   =   filePosition . getPos () ;  }   else  {  retVal   =   pos ;  }  return  retVal ;  }
public   static   ModuleSettings   getInstance ( Module   module )   {  return  module . getService ( ModuleSettings . class ) ;  }
private   List < RecentFile >   getRecentFilesList ()   {  RecentFileRepository   repository   =  new   RecentFileRepository ( this ) ;  return  repository . getAllRecentFiles () ;  }
public   static   QueryRow   fromCursor ( Cursor   cursor )   {  QueryRow   row   =  new   QueryRow () ;  if  ( cursor   !=   null   &&   ! cursor . isClosed () )   {  for  ( int   ind   =  0 ;   ind   <   cursor . getColumnCount () ;   ind ++ )   {  row . mRow . put ( cursor . getColumnName ( ind ) ,  new   TypedValue ( cursor ,  ind ) ) ;  }  }  return  row ;  }
public   void   onApplicationConnectionSuccess ( ApplicationMetadata   applicationMetadata ,  String   applicationStatus ,  String   sessionId ,  boolean   wasLaunched )   {  if  ( this . listener   !=   null )   {  try  {  this . listener . onApplicationConnectionSuccess ( applicationMetadata ,  applicationStatus ,  sessionId ,  wasLaunched ) ;  }   catch  ( RemoteException   ex )   {  Log . e ( TAG ,  """"Error calling onApplicationConnectionSuccess: """"   +   ex . getMessage () ) ;  }  }  }
public   RelationDirection   inverse ()   {  return  this   ==   IN  ?   OUT   :  this   ==   OUT  ?   IN   :  this ;  }
default   boolean   childOfEncoding ( PsiElement   psiElement )   {  return  false ;  }
@ Override  protected   void   validate ( Map < ResourceLocation ,  LootTable >   map ,  ValidationContext   context )   { }
@ Override  public   boolean   process ( String   option ,  List < String >   arguments )   {  System . err . println ( """"add -link option with args : """"   +   arguments . get ( 0 ) ) ;  addApiDocRoots ( arguments . get ( 0 ) ) ;  return  true ;  }
@ ParameterizedTest  @ MethodSource ( """"permittedTypes"""" )  void   permittedTypeSuccess ( Object   subject )   {  new   ValidatingVisitor ( subject ,  reporter ,  ReadWriteValidator . NONE ,  null ,  STRICT ) ;  }
@ Before  public   void   setUp ()   throws  Exception   {  testSuite   =   mock ( TestSuiteResult . class ) ;  }
private   void   setCodecs ( WebClient . Builder   builder )   {  ObjectMapper   objectMapper   =  objectMapper () ;  builder . codecs ( configurer  ->  {  ClientCodecConfigurer . ClientDefaultCodecs   defaults   =  configurer . defaultCodecs () ;  defaults . jackson2JsonEncoder ( new   Jackson2JsonEncoder ( objectMapper ,  MediaType . APPLICATION_JSON ) ) ;  defaults . jackson2JsonDecoder ( new   Jackson2JsonDecoder ( objectMapper ,  MediaType . APPLICATION_JSON ) ) ;  } ) ;  }
public   void   reset ()  {  _mods   =   Pointers . Modifiers . EMPTY ;  _pointers . clear () ;  requestLayout () ;  invalidate () ;  }
public   LatLong   add ( double   deltaLat ,  double   deltaLon )   {  return  new   LatLong ( lat   +   deltaLat ,  lon   +   deltaLon ) ;  }
@ Override  public   void   onClose ( int   code ,  String   reason ,  boolean   remote )   {  countDownLatch0 . countDown () ;  }
@ Override  public   void   onClick ( final   View   view )   {  mOnClickListener . onBasemapItemClicked ( position ) ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init ( TestUserMode . SUPER_TENANT_ADMIN ) ;  changeISConfiguration ( SKIP_CONSENT_ENABLED_TOML ) ;  
@ Override  public   float   modifyProjectileSpread ( float   spread )  {  return  spread   *   0.25F ;  }
@ Override  @ Deprecated  public   void   enableConnection ( IWearableCallbacks   callbacks )   throws  RemoteException   {  postMain ( callbacks ,  ()  ->  {  ConnectionConfiguration []   configurations   =  wearable . getConfigurations () ;  if  ( configurations . length   >   0 )   {  enableConfig ( callbacks ,  configurations [ 0 ] . name ) ;  }  } ) ;  }
@ Deprecated  Builder   baseUrlForTesting ( String   baseUrl )   {  return  baseUrlOverride ( baseUrl ) ;  }
public   static   RegulationLevel   to ( Object   obj )   {  if ( obj   ==   null )   {  return  NONE ;  }  for ( RegulationLevel   rl :  RegulationLevel . values () )   {  if ( rl . toString () . equalsIgnoreCase ( obj . toString () ) )   {  return  rl ;  }  }  return  NONE ;  }
protected   boolean   addConnection ( WebSocket   ws )   {  if  ( ! isclosed . get () )   {  synchronized  ( connections )   {  return  this . connections . add ( ws ) ;  }  }   else  {  
 <argument pos:start=""""""""465:81"""""""" pos:end=""""""""465:86""""""""><expr pos:start=""""""""465:81"""""""" pos:end=""""""""465:86""""""""><name pos:start=""""""""465:81"""""""" pos:end=""""""""465:86"""""""">isLeft</name></expr></argument>
public   int   getFillColor ()   {  try  {  return  this . delegate . getFillColor () ;  }   catch  ( RemoteException   e )   {  throw  new   RuntimeRemoteException ( e ) ;  }  }
public   static   int   runEvalSet ( boolean   isDryRun )   throws  Exception   {  EvalModelProcessor   p   =  new   EvalModelProcessor ( EvalStep . RUN ) ;  return  p . run () ;  }
protected   Object   readResolve ()   {  if  ( customHeaders   ==   null )   {  customHeaders   =   DescriptorImpl . customHeaders ;  }  if  ( formData   ==   null )   {  formData   =   DescriptorImpl . formData ;  }  if  ( validResponseCodes   ==   null   ||   validResponseCodes . trim () . isEmpty () )   {  validResponseCodes   =   DescriptorImpl . validResponseCodes ;  }  if  ( ignoreSslErrors   ==   null )   {  
@ SuppressWarnings ( """"unchecked"""" )  private   static   Object   replaceMinusWithAtValue ( Object   value )   {  final   Object   result ;  if  ( value   instanceof   List )   {  List < Object >   values   =  new   ArrayList <> () ;  for  ( Object   item   :  ( List )   value )   {  values . add ( item   instanceof   Map  ?   replaceMinusWithAt ( ( Map )   item )   :  item ) ;  }  result   =   values ;  }   else if  ( value   instanceof   Map )   {  result   =   replaceMinusWithAt ( ( Map )   value ) ;  }   else  {  result   =   value ;  }  return  result ;  }
private   HttpResponse   sendSAMLRequest ( String   samlMsgValue )   throws  IOException   {  List < NameValuePair >   urlParameters   =  new   ArrayList <> () ;  HttpPost   post   =  new   HttpPost ( SAML_SSO_URL ) ;  post . setHeader ( """"User-Agent"""" ,  USER_AGENT ) ;  urlParameters . add ( new   BasicNameValuePair ( CommonConstants . SAML_REQUEST_PARAM ,  samlMsgValue ) ) ;  post . setEntity ( new   UrlEncodedFormEntity ( urlParameters ) ) ;  return  client . execute ( post ) ;  }
public   boolean   isEnableSelfPreservation ()   {  return  enableSelfPreservation ;  }
public   Builder   containsItemSchema ( Schema   contained )   {  this . containedItemSchema   =   contained ;  return  this ;  }
private   Optional < DomainResponse >   getDomain ( InetAddress   ipAddress )   throws  IOException ,  GeoIp2Exception   {  LookupResult < DomainResponse >   result   =  this . get ( ipAddress , DomainResponse . class , DatabaseType . DOMAIN ) ;  DomainResponse   response   =  result . getModel () ;  if  ( response   ==   null )   {  return  Optional . empty () ;  }  return  Optional . of ( new   DomainResponse ( response , result . getIpAddress () , result . getNetwork () ) ) ;  }
@ Override  public   CountryResponse   country ( InetAddress   ipAddress )   throws  IOException , GeoIp2Exception   {  Optional < CountryResponse >   r   =  getCountry ( ipAddress ) ;  if  ( r . isEmpty () )   {  throw  new   AddressNotFoundException ( """"The address """"  +   ipAddress . getHostAddress ()   +   """" is not in the database."""" ) ;  }  return  r . get () ;  }
@ Override  public   void   ngccProgressEnd ( Object   o )   {  logMessage ( new   MessageParams ( MessageType . Info ,  o . toString () ) ) ;  }
@ Override  protected   void   internalSet ( final   K   key ,  final   O   value )   {  final   Element   e   =  new   Element ( computeKey ( key ) ,  value ) ;  
public   RoleRequestObject   schemas ( List < String >   schemas )   {  this . schemas   =   schemas ;  return  this ;  }
@ Override  public   MLData   call ()   {  MLData   finalOutput   =  network . compute ( networkPair . getInput () ) ;  if ( fnlOutputHiddenLayerIndex   ==   0 )   {  return  finalOutput ;  }  
@ Test  public   void   runJar ()   throws  Exception   {  ProcessBuilder   builder   =  new   ProcessBuilder ( Utils . javaCommand () ,  """"-Xmx128m"""" , """"-noverify"""" ,  """"-XX:TieredStopAtLevel=1"""" , """"-Djava.security.egd=file:/dev/./urandom"""" ,  """"-jar"""" , """"../petclinic/target/petclinic-thin-0.0.1-SNAPSHOT.jar"""" , """"--server.port=0"""" ) ;  builder . redirectErrorStream ( true ) ;  started   =   builder . start () ;  String   output   =  output ( started . getInputStream () ,  """"Started PetClinicApplication"""" ) ;  assertThat ( output ) . contains ( """"Started PetClinicApplication"""" ) ;  }
public   void   setUpDownloadReceiver ()   {  if  ( isOfflineMode () )   {  IntentFilter   intentFilter   =  new   IntentFilter () ;  intentFilter . addAction ( """"DownloadProgress"""" ) ;  intentFilter . addAction ( """"DownloadFinished"""" ) ;  intentFilter . addAction ( """"DownloadStarted"""" ) ;  LocalBroadcastManager . getInstance ( context ) . registerReceiver ( mDownloadReceiver ,  intentFilter ) ;  }  }
@ NonNull  @ Override  public   String   toString ()   {  return  ToStringHelper . name ( """"LaunchOptions"""" )  . field ( """"relaunchIfRunning"""" ,  relaunchIfRunning )  . field ( """"language"""" ,  language )  . field ( """"androidReceiverCompatible"""" ,  androidReceiverCompatible )  . end () ;  }
@ Override  public   void   run ()   {  try  {  if  ( ! SIGNATURE . equals ( urlSigner . getSignature ( MESSAGE ) ) )   {  fails . add ( true ) ;  }  }   catch  ( Exception   e )   {  fails . add ( true ) ;  }  }
@ Test  public   void   testLocalRepository ()   throws  Exception   {  System . setProperty ( """"user.home"""" ,  """"src/test/resources/settings/local"""" ) ;  DependencyResolver . close () ;  DependencyResolver   resolver   =  DependencyResolver . instance () ;  ProjectBuildingRequest   request   =  getProjectBuildingRequest ( resolver ) ;  assertThat ( request . getLocalRepository () . getUrl () )  . contains ( """"target/thin/test/repository"""" ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   static   < T >   T   fromXmlWithoutAttributes ( final   String   xml )   {  return  ( T )   Xml . fromXmlWithoutAttributes ( xml ) ;  }
public   File   getPropertiesFile ()   {  return  new   File ( file . getParentFile () ,  """"$""""   +   file . getName ()   +   """".properties"""" ) ;  }
@ Test  void   revertTokensInOrderShouldWork ()   {  var   xml   =  """"abc<?sortpom token='0'?>cbaabc<?sortpom token='1'?>cba"""" ;  ignoredSections . add ( """"<?sortpom ignore?>def1<?sortpom resume?>"""" ) ;  ignoredSections . add ( """"<?SORTPOM Ignore?>def2<?sortPom reSUME?>"""" ) ;  var   replaced   =  ignoredSectionsStore . revertIgnoredSections ( xml ) ;  assertThat ( replaced , is ( """"abc<?sortpom ignore?>def1<?sortpom resume?>cbaabc<?SORTPOM Ignore?>def2<?sortPom reSUME?>cba"""" ) ) ;  }
@ Override  protected   void   doHealthCheck ( Health . Builder   builder )   {  builder . status ( """"fatal"""" ) ;  }
public   void   initialize ( long   postId ,  long   creationDate ,  long   deletionDate ,  PersonSummary   author ,  long   forumId , String   content ,  List < Integer >   tags ,  int   countryId ,  IP   ipAddress ,  int   browserId ,  int   language , boolean   isExplicitlyDeleted )   {  super . initialize ( postId ,  creationDate ,  deletionDate ,  author ,  forumId ,  content ,  tags ,  countryId ,  ipAddress ,  browserId , isExplicitlyDeleted ) ;  this . language   =   language ;  }
public   Directives   append ( final   Iterable < Directive >   dirs )   {  this . all . addAll ( Directives . toCollection ( dirs ) ) ;  return  this ;  }
public   ImmutableSet < String >   getSuffixes ( SuffixType   suffixType )   {  if  ( readonlyConfig . suffixes . containsKey ( suffixType ) )   {  return  ImmutableSet . copyOf ( readonlyConfig . suffixes . get ( suffixType ) ) ;  }  return  ImmutableSet . of () ;  }
GraphDatabaseService   getGraphDB ()   {  graphDb   =   new   GraphDatabaseFactory () . newEmbeddedDatabase ( new   File ( path ) ) ;  return  graphDb ;  }
public   ExposureConfigurationBuilder   setDaysSinceLastExposureScores ( int ...   daysSinceLastExposureScores )   {  this . daysSinceLastExposureScores   =   Arrays . copyOf ( daysSinceLastExposureScores ,  daysSinceLastExposureScores . length ) ;  return  this ;  }
@ Override  public   void   loadState ( @ NotNull   SonarConsoleSettings   state )   {  XmlSerializerUtil . copyBean ( state , this ) ;  }
@ Override  public   List < RenderType >   getRenderTypes ( ItemStack   itemStack ,  boolean   fabulous )  {  return  List . of ( RenderType . entityTranslucent ( InventoryMenu . BLOCK_ATLAS ) ) ;  }
@ Override  public   int   gpioGetPWMdutycycle ( int   pin )   {  logger . trace ( """"[PWM::GET] -> PIN: {}"""" ,  pin ) ;  validateReady () ;  validateUserPin ( pin ) ;  PiGpioPacket   result   =  sendCommand ( GDC ,  pin ) ;  var   dutyCycle   =  result . result () ;  logger . trace ( """"[PWM::GET] <- PIN: {}; DUTY-CYCLE={}; SUCCESS={}"""" ,   pin ,  dutyCycle ,  result . success () ) ;  validateResult ( result ) ;    
@ Override  public   String   toString ()   {  String   s   =  """"<"""" ;  for  ( Map . Entry < String ,  Type >   e   :  entrySet () )   {  if  ( s . length ()   >   1 )   {  s   +=   """","""" ;  }  Type   t   =  e . getValue () ;  s   +=   t   !=   null  ?   t . cppName   :  e . getKey () ;  }  if  ( s . endsWith ( """">"""" ) )   {  s   +=   """" """" ;  }  return  s   +   """">"""" ;  }
public   void   setClientSecret ( String   clientSecret )   {  this . clientSecret   =   clientSecret ;  }
private   void   assertFailure ( String   input )   {  ValidatorTestSupport . assertFailure ( input ,  subject ,  format ( """"[%s] is not a valid JSON pointer"""" ,  input ) ) ;  }
public   boolean   isAddInferredEquivalences ()   {  return  addInferredEquivalences ;  }
@ Test ( alwaysRun   =   true ,  description   =   """"Add template test"""" )  public   void   testAddTemplate ()   {  String   templateName   =  """"Template1"""" ;  String   description   =  """"This is a template created by Alex"""" ;  String   templateScript   =  """"sample template script"""" ;  JSONObject   response   =  addTemplate ( templateName ,  description ,  templateScript ) ;  }
private   String   formatPigNS ( String   name )   {  return  name . replaceAll ( """"-"""" ,  """"_"""" ) ;  }
@ Override  protected   void   afterHookedMethod ( MethodHookParam   param )   throws  Throwable   {  var   activity   =  ( Activity )   param . thisObject ;  if  ( ContextCompat . checkSelfPermission ( activity ,  Manifest . permission . READ_MEDIA_IMAGES )   ==   PackageManager . PERMISSION_GRANTED   ||   ContextCompat . checkSelfPermission ( activity ,  Manifest . permission . READ_EXTERNAL_STORAGE )   ==   PackageManager . PERMISSION_GRANTED )   {  injectWallpaper ( activity . findViewById ( android . R . id . content ) ) ;  }  }
public   TasksWithoutDates   getTaskWithoutDates ()   {  return  taskWithoutDates ;  }
public   Account   getAccount ()   {  return  new   Account ( accountName ,  accountType ) ;  }
public   String   setProperty ( String   key ,  String   value )   {  List < String >   values   =  get ( key ) ;  String   oldValue   =  values . isEmpty ()  ?   null   :  values . get ( 0 ) ;  values . clear () ;  addAll ( key ,  value ) ;  return  oldValue ;  }
 <argument pos:start=""""""""1177:112"""""""" pos:end=""""""""1177:117""""""""><expr pos:start=""""""""1177:112"""""""" pos:end=""""""""1177:117""""""""><literal type=""""""""string"""""""" pos:start=""""""""1177:112"""""""" pos:end=""""""""1177:117"""""""">""""""""lst4""""""""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   static   final   Uri   trackPointsUri ( long   trackId )   {  return  Uri . withAppendedPath ( ContentUris . withAppendedId ( CONTENT_URI_TRACK ,  trackId ) , Schema . TBL_TRACKPOINT   +   """"s""""  ) ;  }
private   SettingsDecrypter   createSettingsDecrypter ()   {  SettingsDecrypter   settingsDecrypter   =  new   DefaultSettingsDecrypter () ;  setField ( DefaultSettingsDecrypter . class ,  """"securityDispatcher"""" ,  settingsDecrypter , new   SpringBootSecDispatcher () ) ;  return  settingsDecrypter ;  }
public   static   @ NonNull   AmbiguousSidsAdminMonitor   get ()   {  return  ExtensionList . lookupSingleton ( AmbiguousSidsAdminMonitor . class ) ;  }
private   void   dismissLoadingDialog ()   {  Util . dismissDialogSafe ( mLoadingDialog ,  this ) ;  mLoadingDialog   =   null ;  }
private   StandardCredentials   getCertificateCredentialSimple ()   throws  IOException   {  if  ( p12simple   ==   null )   {  
public   boolean   deletesAreDetected ( int   type )   throws  SQLException   {  return  false ;  }
private   String   getFileTypeFromRefValue ( final   String   refValue , final   OpenApiFileType   singleDefinitionInFile , final   OpenApiFileType   multipleDefinitionsInFile )   {  return  refValue . contains ( OpenApiConstants . HASH   +   OpenApiConstants . SLASH ) ?   multipleDefinitionsInFile . toString ()  :  singleDefinitionInFile . toString () ;  }
@ Override  public   boolean   lessEqual ( Long   val1 ,  Long   val2 )   {  return  val1 + offset   <=   val2 ;  }
@ JsonProperty ( """"quartz"""" )  public   Map < String ,  String >   getQuartzConfiguration ()   {  return  Collections . emptyMap () ;  }
public   Double   getBaseMSE ()   {  if ( baseMSE   ==   null )   {  LOG . error ( """"baseMSE is not available. Run train() First!"""" ) ;  return  null ;  }  return  baseMSE ;  }
@ Test  public   void   testGetStart ()   {  assertEquals ( - 5 ,  group1 . getStart () ) ;  group1 . add ( annot3 ) ;  assertEquals ( - 5 ,  group1 . getStart () ) ;  }
@ Override  public   void   preApplication ( MasterContext < DTMasterParams ,  DTWorkerParams >   context )   {  init ( context ) ;  }
@ Override   public   Bfloat16Indexer   put ( long   i ,  long   j ,  long   k ,  float   h )   {  array [ ( int ) index ( i ,  j ,  k ) ]   =   ( short ) fromFloat ( h ) ;  return  this ;  }
protected   ModelConfig   loadSubModelConfig ( String   subFolder )   throws  IOException   {  return  CommonUtils . loadModelConfig ( subFolder   +   File . separator   +   Constants . MODEL_CONFIG_JSON_FILE_NAME ,  SourceType . LOCAL ) ;  }
public   String   addUserStore ( UserStoreReq   userStoreReq )   throws  IOException   {  String   jsonRequest   =  toJSONString ( userStoreReq ) ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpPost ( userStoreBasePath ,  jsonRequest ,  getHeaders () ) )   {  String []   locationElements   =  response . getHeaders ( LOCATION_HEADER ) [ 0 ] . toString () . split ( PATH_SEPARATOR ) ;  return  locationElements [ locationElements . length   -   1 ] ;  }  }
@ Bean  MeterRegistryCustomizer < MeterRegistry >   metricsCommonTags ()   {  return  registry  ->   registry . config () . commonTags ( """"application"""" ,  """"petclinic"""" ) ;  }
private   static   String   ifValid ( final   String   val )   throws  XmlContentException   {  for  ( final   char   chr   :  val . toCharArray () )   {  Arg . legal ( chr ) ;  }  return  val ;  }
@ Test  public   void   error_thrown_on_no_description ()   {  String []   lines   =  { """"* Tue Feb 24 2015 George Washington"""" , """"* Tue Feb 10 2015 George Washington"""" ,} ;  try  {  changelogs   =   parser . parse ( lines ) ;  Assert . fail ( """"error thrown on no description"""" ) ;  }   catch  ( ChangelogParseException   e )   {  Assert . assertTrue ( e   instanceof   IncompleteChangelogEntryException ) ;  Assert . assertEquals ( """"error thrown on no description"""" ,  INCOMPLETE_ENTRY ,  e . getMessage () ) ;  }  }
@ Override   public   IplImage   getTemplateImage ()   {  return  getTemplateImage ( true ) ;  }
public   static   String   stringAscii ( byte []   bytes )   {  return  stringAscii ( bytes ,  0 ,  bytes . length ) ;  }
public   static   < T >   String   join ( final   Iterable < T >   iterable ,  final   String   separator )   {  final   StringBuilder   sb   =  new   StringBuilder () ;  int   index   =  0 ;  for  ( final   T   item   :  iterable )   {  if  ( index   >   0 )   {  sb . append ( separator ) ;  }  sb . append ( item . toString () ) ;  index   +=   1 ;  }  return  sb . toString () ;  }
private   boolean   isInActiveGroupWithoutIncludes ( ITestNGMethod   method ,  List < String >   excludeGroups )   {  if  ( method . getGroups ()   !=   null )   {  for  ( String   group   :  method . getGroups () )   {  if  ( excludeGroups . contains ( group ) )   {  return  false ;   
private   static   DateTimeZone   dateTimeZoneFromJson ( JSONObject   json )   {  String   zoneId   =  DateUtil . validatedTimeZoneId ( json . optString ( KEY_TIME_ZONE_ID ) ) ;  return  DateTimeZone . forID ( TextUtils . isEmpty ( zoneId )  ?   """"UTC""""   :  zoneId ) ;  }
@ Override  public   void   beforeEach ( ExtensionContext   context )   throws  Exception   {  closeIntro () ;  enableLogging () ;  clearProjects () ;  }
public   void   setCategoricalValues ( SparseInput []   categoricalValues )   {  this . categoricalValues   =   categoricalValues ;  }
@ Override  public   float   getOverlayPosY ()   {  return  Mth . clamp ( overlayPosY ,  0.0F ,  1.0F ) ;  }
public   < T   extends  Type >   void   typeTree ( TypeTree < T >   typeTree )   {  this . typeTree   =   Objects . requireNonNull ( typeTree ) ;  }
public   void   setNewOriginalValues ( ArrayList   newList )  {  originalValues   =   new   ArrayList < AppInfo > ( newList ) ;  }
public   static   void   setRefreshPeriodMinutes ( Context   context ,  int   value )   {  setString ( context ,  PREF_REFRESH_PERIOD_MINUTES ,  Integer . toString ( value   >   0 ?   value  :  PREF_REFRESH_PERIOD_MINUTES_DEFAULT ) ) ;  }
@ Override  public   IMapFragmentDelegate   newMapFragmentDelegate ( IObjectWrapper   activity )   {  return  new   MapFragmentImpl ( ObjectWrapper . unwrapTyped ( activity ,  Activity . class ) ) ;  }
@ Test  void   boardCodesMustBeUnique ()   {  var   codes   =  BoardModel . getAllBoardCodes () ;  for  ( String   code   :  codes )   {  assertDoesNotThrow ( ()  ->  {  BoardModel . getByBoardCode ( code ) ;  } ) ;  }  }
public   DistanceMatrixApiRequest   units ( Unit   unit )   {  return  param ( """"units"""" ,  unit ) ;  }
public   Builder   updatingCredential ( Credential   updatingCredential )   {  this . updatingCredential   =   updatingCredential ;  return  this ;  }
public   Ratio   getLineCoverage ()   {  int   covered   =  0 ;  for  ( CoveragePaintDetails   d   :  lines . values ( EMPTY ) )   {  if  ( d . hitCount   >   0 )   {  covered ++ ;  }  }  return  Ratio . create ( covered ,  lines . size () ) ;  }
@ Test  public   void   testAddUserStoreNegativeCase ()   throws  Exception   {  String   body   =  readResource ( """"add-secondary-user-store-negative.json"""" ) ;  Response   response   =  getResponseOfPost ( USER_STORE_PATH_COMPONENT ,  body ) ;  validateErrorResponse ( response ,  HttpStatus . SC_BAD_REQUEST ,  """"SUS-60015"""" ) ;  }
public   void   getVersion ( GetVersionParams   params )   throws  RemoteException   {  getServiceInterface () . getVersion ( params ) ;  }
@ Override  public   void   onCreate ( SQLiteDatabase   db )   {  db . execSQL ( """"drop table if exists """"   +   TrackContentProvider . Schema . TBL_TRACKPOINT ) ;  db . execSQL ( SQL_CREATE_TABLE_TRACKPOINT ) ;  db . execSQL ( SQL_CREATE_IDX_TRACKPOINT_TRACK ) ;  db . execSQL ( """"drop table if exists """"   +   TrackContentProvider . Schema . TBL_WAYPOINT ) ;  db . execSQL ( SQL_CREATE_TABLE_WAYPOINT ) ;  db . execSQL ( SQL_CREATE_IDX_WAYPOINT_TRACK ) ;  db . execSQL ( """"drop table if exists """"   +   TrackContentProvider . Schema . TBL_TRACK ) ;  db . execSQL ( SQL_CREATE_TABLE_TRACK ) ;  }
public   void   setUpGenerator ( final   String   schema ,  final   List < FieldValueMapping >   fieldExprMappings )   {  final   Schema . Parser   parser   =  new   Schema . Parser () ;  this . avroSchemaProcessor . processSchema ( SchemaTypeEnum . AVRO ,  parser . parse ( schema ) , new   BaseSchemaMetadata <> ( ConfluentSchemaMetadata . parse ( new   SchemaMetadata ( 1 ,  1 , schema ) ) ) , fieldExprMappings ) ;  }
public   SerializedFile   read ()   throws  IOException   {  this . serialized   =   new   SerializedFile () ;  
public   void   setStepSize ( double   stepSize )   {  this . stepSize   =   stepSize ;  }
public   final   List < String >   getSchemaNameList ( final   String   schema )   {  return  List . of ( new   ProtobufSchema ( schema ) . name () ) ;  }
@ Override  public   void   onHandle ( Status   status ,  RecaptchaHandle   handle )   throws  RemoteException   {  if  ( status . isSuccess () )   {  completionSource . trySetResult ( handle ) ;  }   else  {  completionSource . trySetException ( new   RuntimeException ( status . getStatusMessage () ) ) ;  }  }
@ Override  public   int   getMaxThreadsForPeerReplication ()   {  return  maxThreadsForPeerReplication ;  }
@ Override  public   Pane   createNoteColumn ( int   colNum )   {  return  createNoteColumnInternal ( colNum ) ;  }
static   < T >   Set < T >   getPropertiesAsSet ( Object   value ,  Class < T >   type )   {  Set < T >   set   =  new   HashSet <> () ;  if  ( value . getClass () . isArray () )   {  List < Object >   objects   =  new   ArrayList <> () ;  for  ( int   i   =  0 ;   i   <   Array . getLength ( value ) ;   i ++ )   {  objects . add ( Array . get ( value ,  i ) ) ;  }  for  ( Object   o   :  objects )   {  set . add ( type . cast ( o ) ) ;  }  }   else  {  set . add ( type . cast ( value ) ) ;  }  return  set ;  }
@ TypeConverter  public   static   Mode   toMode ( String   name )   {  return  Mode . valueOf ( name ) ;  }
public   static   Method   getDeclaredSetterWithNull ( String   name ,  Class < ? >   clazz )   {  return  getFirstMethodWithName ( """"set""""   +   StringUtils . capitalize ( name ) ,  clazz ) ;  }
@ Test  void   healthCheckUrlPathAndManagementPortAndContextPath ()   {  TestPropertyValues  . of ( """"server.port=8989"""" ,  """"management.server.port=9999"""" ,  """"management.server.servlet.context-path=/manage"""" , """"eureka.instance.health-check-url-path=/myHealthCheck"""" )  . applyTo ( this . context ) ;  setupContext ( RefreshAutoConfiguration . class ) ;  EurekaInstanceConfigBean   instance   =  this . context . getBean ( EurekaInstanceConfigBean . class ) ;  assertThat ( instance . getHealthCheckUrl () . endsWith ( """":9999/manage/myHealthCheck"""" ) )  . as ( """"Wrong health check: """"   +   instance . getHealthCheckUrl () )  . isTrue () ;  }
public   MarkerOptions   visible ( boolean   visible )   {  this . visible   =   visible ;  return  this ;  }
@ Test  public   void   testUpdateUserStoreByIdNegativeCase ()   throws  IOException   {  String   body   =  readResource ( """"user-store-add-secondary-user-store.json"""" ) ;  Response   response   =  getResponseOfPut ( USER_STORE_PATH_COMPONENT   +   PATH_SEPARATOR   +  INCORRECT_DOMAIN_ID ,  body ) ;  validateErrorResponse ( response ,  HttpStatus . SC_NOT_FOUND ,  """"SUS-60001"""" ) ;  }
@ Test  public   void   testWrapChannel ()   throws  IOException ,  NoSuchAlgorithmException   {  SSLParametersWebSocketServerFactory   webSocketServerFactory   =  new   SSLParametersWebSocketServerFactory ( SSLContext . getDefault () ,  new   SSLParameters () ) ;  SocketChannel   channel   =  SocketChannel . open () ;  try  {  ByteChannel   result   =  webSocketServerFactory . wrapChannel ( channel ,  null ) ;  }   catch  ( NotYetConnectedException   e )   {  
private   NotificationCompat . Builder   getNotificationBuilder ( NotificationChannel   channel )   {  if  ( Build . VERSION . SDK_INT   >=   Build . VERSION_CODES . O )   {  return  new   NotificationCompat . Builder ( mContext ,  channel . getId () ) ;  }   else  {  
@ Setup ( Level . Iteration )  public   void   setup ()   {  ACL . as ( User . getById ( testUser ,  true ) ) ;  }
private   static   void   setPointer ( PointF   pointer ,  float   hue ,  float   sat ,  float   radiusPx )   {  final   float   r   =  radiusPx   -   1 ;   
@ NonNull  public   AuthResponse   requestAuthWithBackgroundResolution ( boolean   legacy )   throws  IOException   {  try  {  return  requestAuth ( legacy ) ;  }   catch  ( NotOkayException   e )   {  if  ( e . getMessage ()   !=   null )   {  Resolution   errorResolution   =  ErrorResolverKt . resolveAuthErrorMessage ( context ,  e . getMessage () ) ;  if  ( errorResolution   !=   null )   {  AuthResponse   response   =  ErrorResolverKt . initiateFromBackgroundBlocking ( errorResolution , context , getAccount () , 
@ SuppressWarnings ( """"unused"""" )  private   void   initMemoryDataSet ()   {  this . trainingData   =   new   BasicFloatMLDataSet () ;  this . validationData   =   new   BasicFloatMLDataSet () ;  }
public   void   markEnd ( Positionable   p )   throws  IOException   {  DataBlock . this . endOffset ( p . position () ) ;  }
public   DirectionsApiRequest   trafficModel ( TrafficModel   trafficModel )   {  return  param ( """"traffic_model"""" ,  trafficModel ) ;  }
private   void   initializeAttributes () {  setTitle ( getResources () . getString ( R . string . prefs_ui_buttons_layout ) ) ;  setContentView ( R . layout . buttons_presets ) ;  listener   =   new   CheckBoxChangedListener () ;  prefs   =   PreferenceManager . getDefaultSharedPreferences ( this ) ;  layoutsFileNames   =   new   Hashtable < String ,  String > () ;  storageDir   =   File . separator   +   OSMTracker . Preferences . VAL_STORAGE_DIR ;  }
@ DataBoundSetter  public   void   setUnstableTotalCritical ( Integer   unstableTotalCritical )   {  this . unstableTotalCritical   =   unstableTotalCritical ;  }
public   static   List < Integer >   range ( int   start ,  int   stop ,  int   step )   {  List < Integer >   list   =  new   ArrayList <> () ;  if  ( step   ==   0 )   {  return  list ;  }  if  ( start   <   stop )   {  for  ( int   value   =  start ;   value   <   stop ;   value   +=   step )   {  list . add ( value ) ;  }  }   else  {  for  ( int   value   =  start ;   value   >   stop ;   value   +=   step )   {  list . add ( value ) ;  }  }  return  list ;  }
public   void   updateFunctionLibrary ( String   oldFunctionLibraryName ,  FunctionLibrary   functionLibrary )  throws  AxisFault   {  try  {  stub . updateFunctionLibrary ( oldFunctionLibraryName ,  functionLibrary ) ;  }   catch  ( RemoteException  |  FunctionLibraryManagementAdminServiceFunctionLibraryManagementException   e )   {  handleException ( e ) ;  }  }
@ Override  public   void   onClick ( View   v )   {  requestLocationPermission () ;  }
static   KeyValue   key_by_name_or_str ( String   str )  {  KeyValue   k   =  KeyValue . getSpecialKeyByName ( str ) ;  if  ( k   !=   null )  return  k ;  return  KeyValue . makeStringKey ( str ) ;  }
public   static   Entity   getPartEntity ( Entity   parent ,  int   index )   {  if  ( parent   ==   null )   {  return  null ;  }  if  ( index   <   0 )   {  return  parent ;  }  if  ( parent   instanceof   EnderDragon   dragon )   {  EnderDragonPart []   parts   =  dragon . getSubEntities () ;  if  ( index   <   parts . length )   {  return  parts [ index ] ;  }  }  return  parent ;  }
public   void   setUserClaimValue ( String   userName ,  String   claimURI ,  String   claimValue , String   profileName )  throws  RemoteUserStoreManagerServiceUserStoreExceptionException ,  RemoteException   {  remoteUserStoreManagerServiceStub . setUserClaimValue ( userName ,  claimURI ,  claimValue ,  profileName ) ;  }
@ Test  public   void   addItems ()   {  ItemRepository   itemRepo   =  new   ItemRepository () ;  itemRepo . addItem ( createMilk () ) ;  itemRepo . addItem ( createEgg () ) ;  Item   eggItem   =  itemRepo . getItem ( """"egg-1"""" ) ;  assertEquals ( """"A nice egg"""" ,  eggItem . getDescription () ) ;  Item   milkItem   =  itemRepo . getItem ( """"milk-bottle"""" ) ;  assertEquals ( """"Milk in a bottle"""" ,  milkItem . getDescription () ) ;  }
private   void   addRole ( RoleType   roleType ,  Role   role )   {  getRoleMap ( roleType ) . addRole ( role ) ;  }
private   void   removeFilesAffectedByReportFromIndex ( SonarReport   sonarReport , IssuesByFileIndexProjectService   indexService )   {  if  ( sonarReport . getComponents ()   !=   null )   {  for  ( Component   component   :  sonarReport . getComponents () )   {  removeComponentFromIndex ( indexService ,  component ) ;  }  }  }
private   static   WritableArray   bytesToRnArray ( byte []   bytes )   {  return  appendBytesToRnArray ( Arguments . createArray () ,  bytes ) ;  }
@ Override  protected   DatabaseObject   snapshotObject ( DatabaseObject   example ,  DatabaseSnapshot   snapshot )   throws  DatabaseException ,  InvalidExampleException   {  return  example ;  }
@ Override  public   void   onClick ( DialogInterface   dialog ,  int   which )   {  if  ( which   ==   0 )   {  startCamera () ;  }   else if  ( which   ==   1 )   {  startGallery () ;  }  dialog . dismiss () ;  }
@ Override  public   Optional < FieldCompletion >   from ( OpenApiCompletionHelper   openApiCompletionHelper ,  CompletionResultSet   completionResultSet )   {  if  ( openApiCompletionHelper . hasPath ( """"$.info"""" ) )   {  return  Optional . of ( new   InfoCompletion ( openApiCompletionHelper ,  completionResultSet ) ) ;  }   else  {  return  Optional . empty () ;  }  }
public   static   List < Field >   xml ()   {  return  ImmutableList . of ( new   StringField ( """"name"""" ) , new   StringField ( """"namespace"""" ) , new   StringField ( """"prefix"""" ) , new   StringField ( """"attribute"""" ) , new   StringField ( """"wrapped"""" ) ) ;  }
private   static   void   write ( FileObject   file ,  String   contents )   throws  IOException   {  try  ( Writer   writer   =  file . openWriter () )   {  writer . write ( contents ) ;  }  }
@ Override  public   Boolean   exec ( Tuple   input )   throws  IOException   {  Integer   columnNum   =  ( Integer )   input . get ( 0 ) ;  if ( columnNum   ==   null )   {  return  false ;  }  ColumnConfig   columnConfig   =  columnConfigList . get ( columnNum ) ;  boolean   isPositive   =  ( Boolean )   input . get ( 2 ) ;  if ( isValidRecord ( modelConfig . isRegression () ,  isPositive ,  columnConfig ) )   {  return  true ;  }  return  false ;  }
public   Stopwatch   stop ()   {  long   tick   =  ticker . read () ;  checkState ( isRunning ,  """"This stopwatch is already stopped."""" ) ;  isRunning   =   false ;  elapsedNanos   +=   tick   -   startTick ;  return  this ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   static   < T >   T []   concat ( final   T []   first ,  final   T [] ...   other )   {  int   length   =  0 ;  for  ( T []   otherItem   :  other )   {  length   +=   otherItem . length ;  }  final   T []   result   =  Arrays . copyOf ( first ,  first . length   +   length ) ;  int   index   =  0 ;  for  ( T []   otherItem   :  other )   {  System . arraycopy ( otherItem ,  0 ,  result ,  first . length   +   index ,  otherItem . length ) ;  index   +=   otherItem . length ;  }  return  result ;  }
@ Override  protected   void   setup ( Context   context )   throws  IOException ,  InterruptedException   {  loadConfigFiles ( context ) ;  loadTagWeightNum () ;  this . dataPurifier   =   new   DataPurifier ( this . modelConfig ,  false ) ;  this . outputKey   =   new   IntWritable () ;  this . outputValue   =   new   DoubleWritable () ;  this . tags   =   new   HashSet < String > ( modelConfig . getFlattenTags () ) ;  this . headers   =   CommonUtils . getFinalHeaders ( modelConfig ) ;  this . initFeatureStats () ;  }
@ Test  public   void   shouldFindAnnotatedTagWithTagsOptionNotGiven ()   throws  Exception   {  
private   static   boolean   existsInstanceName ( int   widgetId ,  String   name )   {  for  ( InstanceSettings   settings   :  instances . values () )   {  if  ( settings . getWidgetId ()   !=   widgetId   &&   settings . getWidgetInstanceName () . equals ( name ) )   {  return  true ;  }  }  return  false ;  }
public   static   List < Path [] >   getPathParameters ( Path   dir )   throws  IOException   {  return  Files . walk ( dir )  . filter ( Files :: isRegularFile )  . map ( file  ->   new   Path []   { file } )  . collect ( Collectors . toList () ) ;  }
public   XmlProcessorTestUtil   predefinedSortOrder ( String   predefinedSortOrder )   {  this . predefinedSortOrder   =   predefinedSortOrder ;  return  this ;  }
@ Override  public   boolean   dispatchTrackballEvent ( MotionEvent   event )   {  final   int   action   =  event . getActionMasked () ;  switch  ( action )   {  case  MotionEvent . ACTION_CANCEL :  case  MotionEvent . ACTION_UP :  removeAllCallbacks () ;  break;  }  return  super . dispatchTrackballEvent ( event ) ;  }
@ Test  public   void   tokenUrlChanged ()   {  BackwardIncompatibleProp   prop   =  SECURITY_SCHEME_OAUTH2_TOKEN_URL_CHANGED ;  assertSpecIncompatible ( BASE ,  """"bc_oauthflow_token_url_changed.yaml"""" ,  prop ) ;  }
@ Test  void   rejectsContentWithInvalidXmlCharacters ()   {  Assertions . assertThrows ( SyntaxException . class , ()  ->   new   Directives ( """"ADD 'alpha'; SET 'illegal: &#27;&#00;&#03;';"""" ) , """"Invalid XML characters are not detected"""" ) ;  }
@ Test ( dependsOnMethods   =   { """"testGetAuthorizedAppById"""" ,  """"testListAuthorizedApps"""" } )  public   void   testDeleteAuthorizedAppById ()   throws  Exception   {  getResponseOfDelete ( this . userAuthorizedAppsEndpointUri   +   appId1 )  . then ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT )  . log () . ifValidationFails () ;  }
@ SuppressLint ( """"SetTextI18n"""" )  @ Override  protected   void   afterHookedMethod ( MethodHookParam   param )   throws  Throwable   {  var   method   =  ReflectionUtils . findMethodUsingFilter ( param . thisObject . getClass () ,  m  ->   m . getReturnType () . equals ( Date . class ) ) ;  var   date   =  ( Date )   method . invoke ( param . thisObject ) ;  mDateExpiration   =   new   SimpleDateFormat ( """"dd/MM/yyyy"""" ,  Locale . getDefault () ) . format ( Objects . requireNonNull ( date ) ) ;  }
@ Test  public   void   isAtLeastTrue ()   {  Assertions . assertTrue ( DRAFT_7 . isAtLeast ( DRAFT_6 ) ) ;  }
public   String   getPSIInfoPath ()   {  return  this . getPSIInfoPath ( modelConfig . getDataSet () . getSource () ) ;  }
protected   String   responses ( ChangedApiResponse   changedApiResponse )   {  StringBuilder   sb   =  new   StringBuilder ( """"\n"""" ) ;  sb . append ( listResponse ( """"New response"""" ,  changedApiResponse . getIncreased () ) ) ;  sb . append ( listResponse ( """"Deleted response"""" ,  changedApiResponse . getMissing () ) ) ;  changedApiResponse . getChanged () . entrySet () . stream ()  . map ( e  ->   this . itemResponse ( e . getKey () ,  e . getValue () ) )  . forEach ( sb :: append ) ;  return  sb . toString () ;  }
@ Override   public   ByteIndexer   reindex ( Index   index )   {  return  new   ByteArrayIndexer ( array ,  index ) ;  }
@ Override  protected   void   runSerializedFile ( Path   file ,  SerializedFile   serialized )   {  TypeTree < ?   extends  Type >   typeTree   =  serialized . metadata () . typeTree () ;  switch  ( outputFormat . get () )   {  case  JSON :  printJson ( file ,  typeTree ) ;  break;  default:  printText ( file ,  typeTree ) ;  }  }
public   static   File   getFile ( ISelection   selection ,  Predicate < File >   condition )   {  if  ( selection   instanceof   IStructuredSelection   structuredSelection )   {  Object   firstElement   =  structuredSelection . getFirstElement () ;  IResource   resource   =  Adapters . adapt ( firstElement ,  IResource . class ) ;  if  ( resource   !=   null )   {  File   file   =  resource . getLocation () . toFile () ;  if  ( condition   ==   null   ||   condition . test ( file ) )   {  return  file ;  }  }  }  if  ( selection   instanceof   TextSelection )   {  
@ Override  protected   void   onCreate ( Bundle   savedInstanceState )   {  super . onCreate ( savedInstanceState ) ;  try  {  setContentView ( R . layout . activity_main ) ;  }   catch  ( Exception   e )   {  Log . w ( """"onCreate"""" ,  """"Failed to find layout"""" ,  e ) ;  finish () ;  return;  }  listView   =   findViewById ( android . R . id . list ) ;  checkPermissions () ;  if  ( openThisActivity () )   {  updateScreen () ;  }  }
public   static   void   assertEquals ( int   expected ,  int   actual )   {  assertEquals ( null ,  expected ,  actual ) ;  }
private   void   assertForLoginPage ( HttpResponse   response )   {  String   locationValue   =  getLocationHeaderValue ( response ) ;  Assert . assertTrue ( locationValue . contains ( """"sessionDataKey="""" ) ) ;  Assert . assertFalse ( locationValue . contains ( """"error=invalid_request"""" ) ) ;  }
private   static   String   readCarbonXML ()   throws  Exception   {  String   carbonHome   =  System . getProperty ( """"carbon.home"""" ) ;  String   carbonXMLFilePath   =  carbonHome   +   """"/repository/conf/carbon.xml"""" ;  Path   filePath   =  Paths . get ( carbonXMLFilePath ) ;  return  new   String ( Files . readAllBytes ( filePath ) ) ;  }
@ Override  public   final   void   remove ()   {  throw  new   RuntimeException ( """"Remove is not supported."""" ) ;  }
@ Override  public   int   i2cOpen ( int   bus ,  int   device ,  int   flags )   {  logger . trace ( """"[I2C::OPEN] -> Open I2C Bus [{}] and Device [{}]; FLAGS=[{}]"""" ,  bus ,  device ,  flags ) ;  validateReady () ;  validateI2cBus ( bus ) ;  validateI2cDeviceAddress ( device ) ;  int   handle   =  PIGPIO . i2cOpen ( bus ,  device ,  flags ) ;  boolean   success   =  ( handle >= 0 ) ;  logger . trace ( """"[I2C::OPEN] <- HANDLE={}; SUCCESS={}"""" ,   handle ,  success ) ;  validateResult ( handle ,  false ) ;  
@ Override  public   ResourceLocation   getUid ()   {  return  JadeIds . MC_REDSTONE ;  }
@ Test ( priority   =   5 ,  groups   =   """"wso2.is"""" ,  description   =   """"Test isReadOnly operation"""" )  public   void   testIsReadOnly ()  throws  RemoteUserStoreManagerServiceUserStoreExceptionException ,  RemoteException   {  Assert . assertFalse ( remoteUserStoreManagerClient . isReadOnly () ,  """"User store in read only mode"""" ) ;  }
public   Map < String ,  String >   getNewMapping ()   {  return  this . newMapping ;  }
@ Override  public   void   onCreatePreferences ( @ Nullable   Bundle   savedInstanceState ,  @ Nullable   String   rootKey )   {  super . onCreatePreferences ( savedInstanceState ,  rootKey ) ;  setPreferencesFromResource ( R . xml . fragment_media ,  rootKey ) ;  }
@ Test  public   void   testExtends ()   {  TextFrame   frame   =  new   TextFrame () ;  assertInstanceOf ( DataFrame . class ,  frame ,  """"Frame must extend dataframe"""" ) ;  }
@ JavascriptInterface  public   int   getNavigationBarHeight ()   {  return  this . activity . getNavigationBarHeight () ;  }
@ Test  void   shouldThrowNPEWhenPassingNullToStaticNot ()   {  assertEquals ( """"that is null"""" , assertThrows ( NullPointerException . class ,  ()  ->   CheckedPredicate . not ( null ) ) . getMessage () ) ;  }
@ NonNull  public   Builder   setRequestJson ( @ NonNull   String   requestJson )   {  this . requestJson   =   requestJson ;  return  this ;  }
@ Test  public   void   scan_testActualNullIterableTree ()   {  TreeDifference   diff   = TreeDiffer . diffCompilationUnits ( NEW_ARRAY_STATIC_INITIALIZER ,  NEW_ARRAY_SIZE_FOUR ) ;  assertThat ( diff . isEmpty () ) . isFalse () ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( inboundProvisioning ,  outboundProvisioningIdps ) ;  }
@ Deprecated  @ NonNull  public   LocationRequest   setNumUpdates ( int   maxUpdates )   throws  IllegalArgumentException   {  if  ( maxUpdates   <=   0 )   throw  new   IllegalArgumentException ( """"invalid numUpdates: """"   +   maxUpdates ) ;  this . maxUpdates   =   maxUpdates ;  return  this ;  }
public   static   long   downloadUrl ( final   String   url ,  final   String   fileName )  throws  IOException ,  URISyntaxException   {  final   URL   website   =  new   URI ( url ) . toURL () ;  try  ( ReadableByteChannel   rbc   =  Channels . newChannel ( website . openStream () ) ; final   FileOutputStream   fos   =  new   FileOutputStream ( fileName ) )   {  return  fos . getChannel () . transferFrom ( rbc ,  0 ,  Long . MAX_VALUE ) ;  }  }
 <argument pos:start=""""""""439:78"""""""" pos:end=""""""""439:84""""""""><expr pos:start=""""""""439:78"""""""" pos:end=""""""""439:84""""""""><literal type=""""""""string"""""""" pos:start=""""""""439:78"""""""" pos:end=""""""""439:84"""""""">""""""""false""""""""</literal></expr></argument>
@ Override  public   void   onClick ( View   view )   {  switch  ( view . getId () )   {  case  R . id . map_item_linearlayout  :  
public   void   setOwners ( List < OwnerResponse >   owners )   {  this . owners   =   owners ;  }
private   RoleWithAudience   createRoleWithAudience ( String   roleName ,  String   display ,  String   type )   {  RoleWithAudienceAudience   audience   =  new   RoleWithAudienceAudience () ;  audience . setDisplay ( display ) ;  audience . setType ( type ) ;  RoleWithAudience   roleWithAudience   =  new   RoleWithAudience () ;  roleWithAudience . setDisplayName ( roleName ) ;  roleWithAudience . setAudience ( audience ) ;  return  roleWithAudience ;  }
public   void   set_compose_pending ( boolean   pending )  {  set_fake_ptr_latched ( _compose_key ,  _compose_kv ,  pending ,  false ) ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testStart ()   throws  Exception   {  super . testInit ( API_VERSION ,  swaggerDefinition ,  tenant ) ;  super . testStart () ;  }
public   String   formatDate ( long   date )   {  return  gmtDateFormatter . format ( Instant . ofEpochMilli ( date ) ) ;  }
@ Test  public   void   getByCodeList ()   throws  Exception   {  List < Country >   countries   =  CountryService . getInstance () . getByCodeList ( """"CO;NOR;EE"""" ) ;  Assert . assertNotNull ( countries ) ;  Assert . assertFalse ( countries . isEmpty () ) ;  Assert . assertEquals ( 3 ,  countries . size () ) ;  for  ( Country   country   :  countries )   {  Assert . assertTrue ( country . getAlpha2Code () . equals ( """"CO"""" )   ||   country . getAlpha2Code () . equals ( """"NO"""" )   ||   country . getAlpha2Code () . equals ( """"EE"""" ) ) ;  }  }
private   static   void   throwIfNull ( WidgetEntryPosition   entryPosition ,  DateTime   entryDate )   {  if  ( entryDate   ==   null )   {  throw  new   IllegalArgumentException ( """"Invalid entry date: """"   +   entryDate   +   """" at position """"   +   entryPosition ) ;  }  }
@ AfterClass ( alwaysRun   =   true )  public   void   restoreServer ()   throws  Exception   {  remoteUserStoreManagerClient . deleteUser ( USERNAME ) ;  remoteUserStoreManagerClient . deleteRole ( ROLE_NAME ) ;  
@ Override  protected   void   succeeded ()   {  super . succeeded () ;  if  ( getValue () )   {  iconManager . setPauseIcon ( playPauseIcon ) ;  statusBar . setText ( """"Render complete."""" ) ;  }   else  {  statusBar . setText ( """"Render produced no output."""" ) ;  }  playPauseIcon . setDisable ( false ) ;  }
public   APIResourceResponse   properties ( List < Property >   properties )   {  this . properties   =   properties ;  return  this ;  }
@ JsonIgnore  public   boolean   isLocalRunMode ()   {  return  RunMode . LOCAL . equals ( basic . getRunMode () ) ;  }
@ Restricted ( NoExternalUse . class )   // jelly only  public   String   getGitHubText ()   {  Jenkins   j   =  Jenkins . get () ;  SecurityRealm   r   =  j . getSecurityRealm () ;  if  ( r   instanceof   GithubSecurityRealm )   {  GithubSecurityRealm   ghsr   =  ( GithubSecurityRealm )   r ;  return  ( ghsr . getDescriptor () . getDefaultGithubWebUri () . equals ( ghsr . getGithubWebUri () ) ) ?   """"GitHub""""   :  """"GitHub Enterprise"""" ;  }  
public   Long   exec ( Tuple   input )   throws  ExecException   {  if  ( input   ==   null )   {  return  null ;  }  Date   date ;  try  {  date   =   sdf . parse ( input . get ( 0 ) . toString () ) ;  }   catch  ( ParseException   e )   {  e . printStackTrace () ;  return  0L ;  }  return  TimeUnit . MILLISECONDS . toSeconds ( date . getTime () ) ;  }
@ DataBoundSetter  public   void   setMergeFeaturesWithRetest ( boolean   mergeFeaturesWithRetest )   {  this . mergeFeaturesWithRetest   =   mergeFeaturesWithRetest ;  }
public   static   String   getServerName ( Context   context )   {  return  context . getSharedPreferences ( Constants . preference ,  MODE_PRIVATE ) . getString ( context . getString ( R . string . pref_server_select_key ) ,  null ) ;  }
public   ElementBox   getRootBox ()  {  if  ( viewport   ==   null )  return  null ;  else  return  viewport . getRootBox () ;  }
@ Override  public   int   getPriority ( Class < ?   extends  DatabaseObject >   objectType ,  Database   database )   {  if  ( Column . class . isAssignableFrom ( objectType ) )   {  return  PRIORITY_ADDITIONAL ;  }  return  PRIORITY_NONE ;  }
@ Bean  public   RestClientTransportClientFactories   forceRestClientTransportClientFactories ( RestClientDiscoveryClientOptionalArgs   discoveryClientOptionalArgs )   {  return  new   RestClientTransportClientFactories ( discoveryClientOptionalArgs ) ;  }
public   boolean   isFeaturesAnnotationPresent ()   {  return  isAnnotationPresent ( Features . class ) ;  }
@ Test  public   void   testFailEarlyMode ()   {  Validator   actual   =  Validator . builder () . failEarly () . build () ;  try  {  actual . performValidation ( ObjectSchemaTest . MULTIPLE_VIOLATIONS_SCHEMA , ResourceLoader . DEFAULT . readObj ( """"objecttestcases.json"""" ) . get ( """"multipleViolations"""" ) ) ;  fail ( """"did not throw exception"""" ) ;  }   catch  ( ValidationException   e )   {  assertEquals ( """"#: required key [boolProp] not found"""" ,  e . getMessage () ) ;  assertTrue ( e . getCausingExceptions () . isEmpty () , """"no causing exceptions"""" ) ;  }  }
@ Override  public   boolean   playerAdd ( String   worldName ,  String   playerName ,  String   permission )   {  this . perms . addUserPermission ( worldName ,  playerName ,  permission ) ;  return  true ;  }
public   ValidationConfigurationBuilder   setValidationMessages ( final   MessageBundle   validationMessages )  {  BUNDLE . checkNotNull ( validationMessages ,  """"nullMessageBundle"""" ) ;  this . validationMessages   =   validationMessages ;  return  this ;  }
private   String   getAccessToken ( String   authorizationCode )   throws  IOException ,  JSONException   {  HttpResponse   response   =  sendAccessTokenRequest ( authorizationCode ) ;  return  getAccessTokenFromResponse ( response ) ;  }
public   void   setUpSampleWeight ( Double   upSampleWeight )   {  this . upSampleWeight   =   upSampleWeight ;  }
@ Test  public   void   testGetGitHubText_gh ()   {  try  ( MockedStatic < Jenkins >   mockedJenkins   =  Mockito . mockStatic ( Jenkins . class ) )   {  mockJenkins ( mockedJenkins ) ;  mockGithubSecurityRealmWebUriFor ( """"https:
private   void   copyModelToLocal ( String   modelName ,  Path   modelPath ,  SourceType   sourceType )   throws  IOException   {  if ( ! this . isDryTrain () )   {  ShifuFileUtils . getFileSystemBySourceType ( sourceType ) . copyToLocalFile ( modelPath , StringUtils . isBlank ( modelName )  ?   new   Path ( super . getPathFinder () . getModelsPath ( SourceType . LOCAL ) )  :  new   Path ( super . getPathFinder () . getModelsPath ( SourceType . LOCAL ) ,  modelName ) ) ;  }  }
private   Dialog   createDeleteDialog () {  return  Util . getAlertDialogBuilder ( this )  . setMessage ( R . string . remove_device_confirm )  . setPositiveButton ( android . R . string . yes ,  ( dialogInterface ,  i )  ->  {  getApi () . removeDevice ( mDevice . deviceID ) ;  finish () ;  } )  . setNegativeButton ( android . R . string . no ,  null )  . create () ;  }
public   static   boolean   isDefault ( Theme   theme )   {  return  theme . getId () . equals ( DEFAULT_LIGHT_THEME )  ||   theme . getId () . equals ( DEFAULT_DARK_THEME ) ;  }
public   String   getBaggingModelPath ( SourceType   sourceType )   {  return  getPathBySourceType ( new   Path ( """"onebaggingmodel"""" ) ,  sourceType ) ;  }
@ SubscribeEvent  public   static   void   onServerTick ( TickEvent . ServerTickEvent   event )  {  if ( event . phase   !=   TickEvent . Phase . START )  {  MinecraftServer   server   =  ( MinecraftServer )   LogicalSidedProvider . WORKQUEUE . get ( LogicalSide . SERVER ) ;  Iterator < Impl >   it   =  tasks . iterator () ;  while ( it . hasNext () )  {  Impl   impl   =  it . next () ;  if ( impl . executionTick   <=   server . getTickCount () )  {  impl . runnable . run () ;  it . remove () ;  }  }  }  }
@ Override  public   void   removeProfiles ()   {  super . removeProfiles () ;  SecurityUtils . getSubject () . logout () ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  userMgtClient . deleteUser ( userId1 ) ;  logManger   =   null ;  log . info ( """"Replacing identity.xml with default configurations"""" ) ;  serverConfigurationManager . restoreToLastConfiguration ( false ) ;  }
 <argument pos:start=""""""""180:70"""""""" pos:end=""""""""180:70""""""""><expr pos:start=""""""""180:70"""""""" pos:end=""""""""180:70""""""""><name pos:start=""""""""180:70"""""""" pos:end=""""""""180:70"""""""">i</name></expr></argument>
public   ChangedMediaType   setSchema ( final   ChangedSchema   schema )   {  this . schema   =   schema ;  return  this ;  }
@ Override  public   String   getPrimaryGroup ( String   world ,  String   player )   {  return  rscpAPI . getPrimaryGroup ( world ,  player ) ;  }
protected   CuboidArea   getAreaByLoc ( Location   loc )   {  for  ( CuboidArea   thisarea   :  areas . values () )   {  if  ( thisarea . containsLoc ( loc ) )   {  return  thisarea ;  }  }  return  null ;  }
public   static   < TResult >   Task < List < TResult > >   whenAllSuccess ( Collection < ?   extends  Task < ?   extends  TResult > >   tasks )   {  if  ( tasks   ==   null   ||   tasks . isEmpty () )   {  return  forResult ( Collections . emptyList () ) ;  }  return  whenAll ( tasks ) . continueWithTask ( TaskExecutors . MAIN_THREAD ,  allTask  ->  {  List < TResult >   results   =  new   ArrayList <> ( tasks . size () ) ;  for  ( Task < ?   extends  TResult >   task   :  tasks )   {  results . add ( task . getResult () ) ;  }  return  forResult ( results ) ;  } ) ;  }
private   void   setupDrawer ()   {  mDrawerLayout   =   findViewById ( R . id . maps_app_activity_drawer_layout ) ;  
@ Override  public   void   onCameraDisconnected ()   {  Log . d ( TAG ,  """"CameraEventsHandler.onCameraDisconnected"""" ) ;  }
@ Override  public   JavaSourcesSubject   withCompilerOptions ( String ...   options )   {  return  delegate . withCompilerOptions ( options ) ;  }
public   PolygonOptions   visible ( boolean   visible )   {  this . visible   =   visible ;  return  this ;  }
private   void   log ( final   String   text )   {  if  (  output   ==   null ) {  LOGGER . info ( text ) ;  } else {  output . println ( text ) ;  }  }
public   void   onStop ()   {  if  ( delegate   !=   null )   {  delegate . onStop () ;  }   else  {  removePendingStateOperations ( State . STARTED ) ;  }  }
private   List < ValidationProperty >   getNonMatchingValidationProperties ()   {  return  getListValidationProperty ( """"name"""" ,  """"value"""" ,  """"thisIsNotMatchingToValue"""" ) ;  }
public   static   < T >   java . util . concurrent . ScheduledFuture < T >   setTimeout ( final   Supplier < T >   function ,  final   int   delayMilliseconds )   {  return  delay ( function ,  delayMilliseconds ) ;  }
@ Nullable  @ Override  public   Settings   getState ()   {  if  ( settings   !=   null )   {  if  ( StringUtil . isEmpty ( settings . getServerName () ) )  settings . setServerName ( SonarServers . PROJECT ) ;  if  ( StringUtil . isEmpty ( settings . getLocalAnalysisScripName () ) )  settings . setLocalAnalysisScripName ( LocalAnalysisScripts . PROJECT ) ;  }  return  settings ;  }
@ Override   public   double   get ( long   i )   {  return  array [ ( int ) index ( i ) ] ;  }
public   boolean   isNamespaceSupported ( String   namespace )   {  return  namespaces . contains ( namespace ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  PropertyRes   propertyRes   =  ( PropertyRes )   o ;  return  Objects . equals ( this . name ,  propertyRes . name )   &&  Objects . equals ( this . value ,  propertyRes . value )   &&  Objects . equals ( this . displayName ,  propertyRes . displayName )   &&  Objects . equals ( this . description ,  propertyRes . description ) ;  }
@ Test  public   void   overrideExistingRepository ()   throws  Exception   {  deleteRecursively ( new   File ( """"target/thin/test/repository/org/springframework/spring-core"""" ) ) ;  String []   args   =  new   String []   {  """"--thin.root=target/thin/test"""" , """"--thin.dryrun=true"""" , """"--thin.archive=src/test/resources/apps/repositories"""" ,  """"--debug""""  } ;  ThinJarLauncher . main ( args ) ;  assertThat ( new   File ( """"target/thin/test/repository"""" ) . exists () ) . isTrue () ;  assertThat ( new   File ( """"target/thin/test/repository/org/springframework/spring-core"""" )  . exists () ) . isTrue () ;  }
@ Test  void   shouldNotHaveDiscoveryClientWhenDiscoveryDisabled ()   {  contextRunner . withPropertyValues ( """"spring.cloud.discovery.enabled=false"""" ) . run ( context  ->  {  assertThat ( context ) . doesNotHaveBean ( ReactiveDiscoveryClient . class ) ;  assertThat ( context ) . doesNotHaveBean ( ReactiveDiscoveryClientHealthIndicator . class ) ;  } ) ;  }
public   FormValidation   doCheckCpus ( @ QueryParameter   String   cpus )   {  try  {  if  ( Double . valueOf ( cpus )   >   0.0 )   {  return  FormValidation . ok () ;  }   else  {  return  FormValidation . error ( cpus   +   """" must be a positive floating-point-number."""" ) ;  }  }   catch  ( NumberFormatException   e )   {  return  FormValidation . error ( cpus   +   """" must be a positive floating-point-number."""" ) ;  }  }
public   LineDirection   getDirection ()   {  return  GpioD . lineGetDirection ( getCPointer () ) ;  }
public   List < OfflineFile >   getAllOfflineFiles ()   {  return  mOfflineFileDao . getAllOfflineFiles () ;  }
@ Test  public   void   testThinRootOverride ()   throws  Exception   {  System . setProperty ( """"thin.root"""" ,  """"target"""" ) ;  ThinJarWrapper   wrapper   =  new   ThinJarWrapper () ;  assertThat ( wrapper . thinRootRepository () ) . isEqualTo ( """"target/repository"""" ) ;  }
@ Override  public   boolean   isWrapperFor ( final   Class < ? >   iface )   {  throw  new   UnsupportedOperationException ( """"#isWrapperFor()"""" ) ;  }
public   static   ByteBuffer   inLittleEndianOrder ( ByteBuffer   buf )   {  if  ( buf . order () . equals ( ByteOrder . LITTLE_ENDIAN ) )   {  return  buf ;  }   else  {  return  buf . duplicate () . order ( ByteOrder . LITTLE_ENDIAN ) ;  }  }
@ Override  public   int   gpioGetPWMrange ( int   pin )   {  logger . trace ( """"[PWM-RANGE::GET] -> PIN: {}"""" ,  pin ) ;  validateReady () ;  validateUserPin ( pin ) ;  int   result   =  PIGPIO . gpioGetPWMrange ( pin ) ;  logger . trace ( """"[PWM-RANGE::GET] <- PIN: {}; RANGE={}; SUCCESS={}"""" ,   pin ,  result ,  ( result >= 0 ) ) ;  validateResult ( result ) ;    
public   static   Intent   constructIntentSingle ( String   title ,  File   file )  {  String   ext   =  file . getName () . substring ( file . getName () . lastIndexOf ( """"."""" )   +   1 ) . toLowerCase ( Locale . ENGLISH ) ;  Intent   intent   =  new   Intent () ;  intent . setAction ( Intent . ACTION_SEND ) ;  intent . setType ( getMimeType ( ext ) ) ;  intent . putExtra ( Intent . EXTRA_STREAM ,  Uri . fromFile ( file ) ) ;  return  Intent . createChooser ( intent ,  title ) ;  }
@ Test  public   void   getNode_nothingReturnedForFakeLabel ()   {  Optional < Node >   node   =  graphApi . getNode ( """"a"""" ,  Optional . of ( """"fakeLabel"""" ) ) ;  assertThat ( node . isPresent () ,  is ( false ) ) ;  }
private   void   saveInput ()   {  schemaKey   =   schemaKeyText . getText () ;  globPattern   =   globPatternText . getText () ;  }
public   static   void   clear ( @ NonNull   Integer   widgetId )   {  instances . remove ( widgetId ) ;  }
public   String   getRegExMatchString ()  {  if  ( regexMatchString   ==   null )  {  initRegExMatchString () ;  }  return  regexMatchString ;  }
@ Override  public   COSEAlgorithmIdentifier   createFromParcel ( Parcel   in )   {  try  {  return  fromCoseValue ( in . readInt () ) ;  }   catch  ( UnsupportedAlgorithmIdentifierException   e )   {  throw  new   RuntimeException ( e ) ;  }  }
public   void   initWeights ()   {  InitMethod   defaultMode   =  InitMethod . ZERO_ONE_RANGE_RANDOM ;  initWeight ( defaultMode ) ;  LOG . error ( """"Init weight be called with mode:""""   +   defaultMode . name () ) ;  }
private   void   startFileDownloading ( RecentFile   recentFile )   {  showFileDownloadingFragment ( prepareServerFile ( recentFile ) ) ;  }
private   static   KeyValue   apply_dead_char ( KeyValue   k ,  char   dead_char )  {  switch  ( k . getKind () )  {  case  Char :  char   c   =  k . getChar () ;  char   modified   =  ( char ) KeyCharacterMap . getDeadChar ( dead_char ,  c ) ;  if  ( modified   !=   0   &&   modified   !=   c )  return  KeyValue . makeStringKey ( String . valueOf ( modified ) ) ;  }  return  k ;  }
public   void   removeGeofences ( PendingIntent   pendingIntent ,  IGeofencerCallbacks   callbacks )   throws  RemoteException   {  getServiceInterface () . removeGeofencesByIntent ( pendingIntent ,  callbacks ,  getContext () . getPackageName () ) ;  }
@ Test  public   void   scan_testAnnotatedType ()   {  TreeDifference   diff   = TreeDiffer . diffCompilationUnits ( ANNOTATED_TYPE_1 ,  ANNOTATED_TYPE_1 ) ;  assertThat ( diff . getDiffReport () ) . isEmpty () ;  }
public   void   setVideoDisposition ( int   videoDisposition )   {  this . videoDisposition   =   videoDisposition ;  }
@ Override  public   String   getDefaultSchemaName ()   {  return  DEFAULT_SCHEMA ;  }
public   static   void   scanFile ( File   file )   {  MediaScannerConnection . scanFile ( Utils . getApplication () , new   String [] { file . getAbsolutePath () } , new   String [] { MimeTypeUtils . getMimeTypeFromExtension ( file . getAbsolutePath () ) } , ( s ,  uri )  ->  {  } ) ;  }
@ Test  void   catalogLoads ()   {  @ SuppressWarnings ( """"rawtypes"""" )  ResponseEntity < Map >   entity   =  new   TestRestTemplate ()  . getForEntity ( """"http:
@ Override  public   void   onPostExecute ( ResultHolder < List < Schedule > >   resultHolder )   {  final   Scheduler   scheduler   =  activityReference . get () ;  if ( scheduler   !=   null   &&   ! scheduler . isFinishing () )   {  resultHolder . getError () . ifPresent ( error  ->  {  final   String   message   =  String . format ( """"Unable to migrate schedules to database: %s"""" , error . toString () ) ;  Log . e ( TAG ,  message ) ;  Toast . makeText ( scheduler ,  message ,  Toast . LENGTH_LONG ) . show () ;  } ) ;  resultHolder . getObject () . ifPresent ( scheduler :: populateViews ) ;  }  }
public   void   clearExcludeRepeatsSuffixes ()   {  newConfig . excludeRepeatsSuffixes . clear () ;  }
@ Override  public   void   validate ( final   Processor < FullData ,  FullData >   processor , final   ProcessingReport   report ,  final   MessageBundle   bundle , final   FullData   data )  throws  ProcessingException  {  if  ( additionalOK )  return;  final   int   size   =  data . getInstance () . getNode () . size () ;  if  ( size   >   itemsSize )  report . error ( newMsg ( data ,  bundle , """"err.common.additionalItems.notAllowed"""" )  . putArgument ( """"allowed"""" ,  itemsSize ) . putArgument ( """"found"""" ,  size ) ) ;  }
default   < T   extends  DigitalInput >   T   create ( Integer   address ,  String   id ,  String   name ,  String   description )   {  var   config   =  DigitalInput . newConfigBuilder ( context () )  . address ( address )  . id ( id )  . name ( name )  . description ( description )  . build () ;  return  ( T ) create ( config ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( shareWithAllChildren ,  sharedOrganizations ) ;  }
public   boolean   supportsCatalogsInTableDefinitions ()   throws  SQLException   {  return  false ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  InboundProtocols   inboundProtocols   =  ( InboundProtocols )   o ;  return  Objects . equals ( this . saml ,  inboundProtocols . saml )   &&  Objects . equals ( this . oidc ,  inboundProtocols . oidc )   &&  Objects . equals ( this . passiveSts ,  inboundProtocols . passiveSts )   &&  Objects . equals ( this . wsTrust ,  inboundProtocols . wsTrust )   &&  Objects . equals ( this . custom ,  inboundProtocols . custom ) ;  }
default   Pwm   on ( Number   dutyCycle ,  int   frequency )   throws  IOException {  if ( dutyCycle . floatValue ()   >   0   &&   frequency    >   0 )   {  setDutyCycle ( dutyCycle . floatValue () ) ;  setFrequency ( frequency ) ;  return  on () ;  }  else {  return  off () ;  }  }
public   static   void   save ()   {  try  {  new   SaveThread ( gson . toJson ( CODEC . encodeStart ( JsonOps . INSTANCE ,  map ) . getOrThrow () ) ) . start () ;  }   catch  ( Exception   e )   {  Jade . LOGGER . error ( """"Failed to save username cache to file!"""" ,  e ) ;  }  }
@ Override  public   void   setup ( Context   context )   {  this . shuffleSize   =   context . getConfiguration () . getInt ( Constants . SHIFU_NORM_SHUFFLE_SIZE ,  100 ) ;  this . rd   =   new   Random ( System . currentTimeMillis () ) ;  }
public   ValidateResult   checkMeta ( ModelConfig   modelConfig )   throws  Exception   {  return  MetaFactory . validate ( modelConfig ) ;  }
private   void   unregisterReceivers ()   {  if  ( installLogUpdateRec   !=   null )  unregisterReceiver ( installLogUpdateRec ) ;  if  ( installFinishedRec   !=   null )  unregisterReceiver ( installFinishedRec ) ;  }
public   Item   getRandomArmour ( int   level )   {  return  getRandomItem ( """"a"""" ,  level ) ;  }
public   void   setmControlsView ( View   mControlsView )   {  this . mControlsView   =   mControlsView ;  }
public   boolean   hasExtraParam ( String   key )   {  return  extraParams . containsKey ( extraParamKey ( key ) ) ;  }
public   DistanceMatrixApiRequest   origins ( String ...   origins )   {  return  param ( """"origins"""" ,  join ( '|' ,  origins ) ) ;  }
static   String   padLeftWithZerosToLength ( String   s ,  int   length )   {  if  ( s . length ()   <   length )   {  int   count   =  length   -   s . length () ;  StringBuilder   b   =  new   StringBuilder () ;  for  ( int   i   =  0 ;   i   <   count ;   i ++ )  b . append ( '0' ) ;  b . append ( s ) ;  return  b . toString () ;  }   else  return  s ;  }
private   OIDCTokens   makeJWTBearerGrantRequest ()  throws  java . text . ParseException ,  URISyntaxException ,  IOException ,  ParseException   {  SignedJWT   signedJWT   =  SignedJWT . parse ( jwtAssertion ) ;  AuthorizationGrant   jwtGrant   =  new   JWTBearerGrant ( signedJWT ) ;  return  makeTokenRequest ( jwtGrant ) ;  }
private   HttpResponse   sendCreateRoleRequest ( JSONObject   body )   throws  IOException   {  HttpPost   request   =  new   HttpPost ( getPath () ) ;  request . addHeader ( HttpHeaders . AUTHORIZATION ,  getAuthzHeader () ) ;  request . addHeader ( HttpHeaders . CONTENT_TYPE ,  """"application/json"""" ) ;  StringEntity   entity   =  new   StringEntity ( body . toString () ) ;  request . setEntity ( entity ) ;  return  client . execute ( request ) ;  }
@ Override   public   long   get ( long ...   indices )   {  return  array [ ( int ) index ( indices ) ] ;  }
@ Override  public   void   onRecaptchaResult ( Status   status ,  RecaptchaResultData   recaptchaResultData )   throws  RemoteException   {  }
@ ApiModelProperty ( example   =   """"kim"""" ,  value   =   """"Last name of the owner."""" )  @ JsonProperty ( """"lastname"""" )  @ Valid  public   String   getLastname ()   {  return  lastname ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hashCode ( line ,  message ,  severity ,  isNew ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  PhoneNumbers   email   =  ( PhoneNumbers )   o ;  return  Objects . equals ( this . type ,  email . type )   &&  Objects . equals ( this . value ,  email . value ) ;  }
public   int   getCostOfRent ( String   landName )  {  return  rentableLand . containsKey ( landName )  ?   rentableLand . get ( landName ) . cost   :  0 ;  }
@ Override   public   void   record ( Frame   frame )   throws  Exception   {  record ( frame ,  frame   !=   null   &&   frame . opaque   instanceof   AVFrame  ?   ( ( AVFrame ) frame . opaque ) . format ()   :  AV_PIX_FMT_NONE ) ;  }
public   static   FlagPermissions   parseFromConfigNode ( String   name ,  ConfigurationSection   node )   {  FlagPermissions   list   =  new   FlagPermissions () ;  Set < String >   keys   =  node . getConfigurationSection ( name ) . getKeys ( false ) ;  if  ( keys   !=   null )   {  for  ( String   key   :  keys )   {  boolean   state   =  node . getBoolean ( name   +   """".""""   +   key ,  false ) ;  key   =   key . toLowerCase () ;  if  ( state )   {  list . setFlag ( key ,  FlagState . TRUE ) ;  }   else  {  list . setFlag ( key ,  FlagState . FALSE ) ;  }  }  }  return  list ;  }
void   visitEmptySchema ( EmptySchema   emptySchema )   {  visitSchema ( emptySchema ) ;  }
public   Track   getTrackByStartDate ( Date   startDate )   {  return  TrackMocks . getMockTrackForGPX () ;  }
@ Override  public   boolean   onCreateOptionsMenu ( Menu   menu )   {  MenuInflater   inflater   =  getMenuInflater () ;  inflater . inflate ( R . menu . tracklogger_menu ,  menu ) ;  return  true ;  }
@ Test  public   void   testResponseHeadersExplodeChanges ()   {  ChangedOpenApi   changedOpenApi   =  OpenApiCompare . fromLocations ( OPENAPI_DOC1 ,  OPENAPI_DOC2 ) ;  ChangedHeaders   changedResponseHeaders   = getChangedResponseHeaders ( changedOpenApi ,  GET ,  """"/response/headers/explode"""" ,  """"200"""" ) ;  assertThat ( changedResponseHeaders ) . isNotNull () ;  Map < String ,  ChangedHeader >   changedHeaders   =  changedResponseHeaders . getChanged () ;  assertThat ( changedHeaders ) . containsKey ( """"x-header-explode-changed"""" ) ;  }
@ Override   public   int   getAudioCodec ()   {  return  audio_c   ==   null  ?   super . getAudioCodec ()   :  audio_c . codec_id () ;  }
default   int   read ( Charset   charset ,  CharBuffer   buffer ,  int   length )   {  
@ Override  public   Iterable < ?   extends  JavaFileObject >   getJavaFileObjectsFromFiles ( Iterable < ?   extends  File >   files )   {  return  fileManager . getJavaFileObjectsFromFiles ( files ) ;  }
@ Override  public   String   toString ()   {  return  """"ChangedNullable [left=""""   +   left   +   """", right=""""   +   right   +   """"]"""" ;  }
public   String   getVarSelectMSEOutputPath ( SourceType   sourceType )   {  String   varSelectStatsPath   =  getPreferPath ( modelConfig . getTrain () . getCustomPaths () , Constants . KEY_VARSLECT_STATS_PATH ) ;  if ( StringUtils . isBlank ( varSelectStatsPath ) )   {  return  getPathBySourceType ( new   Path ( Constants . TMP ,  """"varselectStats"""" ) ,  sourceType ) ;  }   else  {  return  new   Path ( varSelectStatsPath ) . toString () ;  }  }
private   String   getPath ()   {  if  ( tenant . equals ( MultitenantConstants . SUPER_TENANT_DOMAIN_NAME ) )   {  return  SERVER_URL   +   SCIM2_ME_ENDPOINT ;  }   else  {  return  SERVER_URL   +   """"/t/""""   +   tenant   +   SCIM2_ME_ENDPOINT ;  }  }
public   void   setInFile ( final   String   inFile )   {  this . inFile   =   inFile ;  }
public   long   nextLong ()   {  return  ( ( long )   next ( 32 )   <<   32 )   +   next ( 32 ) ;  }
public   void   removeProperty ( String   path ,  String   propName )  throws  RemoteException ,  PropertiesAdminServiceRegistryExceptionException   {  stub . removeProperty ( path ,  propName ) ;  }
@ Override  public   SpiConfig   build ()   {  SpiConfig   config   =  new   DefaultSpiConfig ( this . properties ) ;  return  config ;  }
private   WinNT . HANDLE   handle ( int   pid )   {  return  new   WinNT . HANDLE ( new   Pointer ( pid ) ) ;  }
public   void   add ( UploadFile   uploadFile )   {  uploadFiles . add ( uploadFile ) ;  }
private   Intent   createScheduleIntent ()   {  if  ( ! packageExists ( GMS_PACKAGE_NAME ) )   return  null ;  Intent   scheduleIntent   =  new   Intent ( ACTION_SCHEDULE ) ;  scheduleIntent . setPackage ( GMS_PACKAGE_NAME ) ;  scheduleIntent . putExtra ( """"app"""" ,  PendingIntent . getBroadcast ( context ,  0 ,  new   Intent () ,  0 ) ) ;  return  scheduleIntent ;  }
@ NonNull  public   DataType   getDataType ()   {  return  dataSource . getDataType () ;  }
public   Directives   xset ( final   Object   text )   {  try  {  this . all . add ( new   XsetDirective ( text . toString () ) ) ;  }   catch  ( final   XmlContentException   ex )   {  throw  new   IllegalArgumentException ( String . format ( """"Failed to understand XML content, XSET(%s)"""" , text ) , ex ) ;  }  return  this ;  }
public   static   int   readInt ( int []   buf ,  int   off )   {  return  buf [ off ] ;  }
private   void   setOPTION_NAMES ()   {  OPTION_NAMES . add ( getString ( R . string . pref_theme_light ) ) ;  OPTION_NAMES . add ( getString ( R . string . pref_theme_dark ) ) ;  }
public   static   void   main ( String []   args )   throws  Exception   {  LogUtils . setLogLevel ( Level . OFF ) ;  new   ThinJarLauncher ( args ) . launch ( args ) ;  }
public   Song   getSong ( File   location )   {  File   normalized   =  normalize ( location ) ;  return  songs . get ( normalized ) ;  }
@ Override  public   void   run ()   {  childLast [ 0 ]   =   stepStorage . getLast () ;  }
private   ClientRequest   verifyAndGetRequest ()   {  ClientRequest   request   =  captor . getValue () ;  verify ( exchangeFunction ) . exchange ( request ) ;  verifyNoMoreInteractions ( exchangeFunction ) ;  return  request ;  }
private   static   String   getDeclarativeThrottleScript ( String   jobName ,  List < String >   categories ,  String   label )   {  List < String >   quoted   =  new   ArrayList <> () ;  for  ( String   c   :  categories )   {  quoted . add ( """"'""""   +   c   +   """"'"""" ) ;  }  return  """"pipeline {\n""""  +   """"agent none\n""""  +   """"stages {""""  +   """"stage('throttle') {\n""""  +   """"agent { label '""""  +   label  +   """"'}\n""""  +   """"options { throttle([""""  +   StringUtils . join ( quoted ,  """", """" )  +   """"]) }\n""""  +   """"steps {\n""""  +   """"  semaphore 'wait-""""  +   jobName  +   """"-job'\n""""  +   """"}\n""""  +   """"}\n""""  +   """"}\n""""  +   """"}\n"""" ;  }
public   static   void   main ( final   String []   args )   {  javax . swing . SwingUtilities . invokeLater ( AutoCompletion :: createAndShowGUI ) ;  }
protected   Response   getResponseOfFormPost ( String   endpointUri ,  Map < String ,  String >   formParams ,  Map < String ,  String >  headers )   {  return  given ()  . headers ( headers )  . formParams ( formParams )  . when ()  . post ( endpointUri ) ;  }
private   static   void   loadWarningSymbol ()   {  if  ( warningSymbol   ==   null )   {  warningSymbol   =   getSymbol ( """"warning"""" ,  """"icon-md rsp-table__icon-alert"""" ) ;  }  }
static   LineActiveState   fromInt ( int   val )   {  for  ( LineActiveState   dir   :  LineActiveState . values () )   {  if  ( dir . val   ==   val )  return  dir ;  }  throw  new   IllegalStateException ( """"Unexpected LINE_ACTIVE_STATE value: """"   +   val ) ;  }
public   List < Dependency >   dependencies ( Resource   resource )   {  return  dependencies ( resource ,  new   Properties () ) ;  }
@ Override  public   Class < JsonInclude >   valueFor ()   {  return  JsonInclude . class ;  }
@ SetEnvironment ( executionEnvironments   =   { ExecutionEnvironment . STANDALONE } )  @ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Check role addition"""" ,  dependsOnMethods   =   """"testGetAllRoleNames"""" )  public   void   testAddRole ()   throws  Exception   {  userMgtClient . addRole ( """"umRole2"""" ,  null ,  new   String [] { """"login"""" } ,  false ) ;  Assert . assertFalse ( nameExists ( userMgtClient . listRoles ( """"umRole2"""" ,  100 ) ,  """"umRole2"""" ) ,  """"User should not be added when """"   +  """"user store is read only"""" ) ;  }
public   static   Compression   fromIndex ( int   index )   {  switch  ( index )   {  case  0 :  return  NONE ;  case  2 :  return  ALWAYS ;  default:  return  METADATA ;  }  }
public   ChangedSecurityScheme   setChangedOpenIdConnectUrl ( final   boolean   changedOpenIdConnectUrl )   {  this . changedOpenIdConnectUrl   =   changedOpenIdConnectUrl ;  return  this ;  }
public   QueryRow   setDisplayColor ( Object   obj )   {  return  setColumn ( CalendarContract . Instances . DISPLAY_COLOR ,  obj ) ;  }
@ Override   public   Bfloat16Indexer   put ( long []   indices ,  float []   h ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  putRaw ( index ( indices )   +   n ,  h [ offset   +   n ] ) ;  }  return  this ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  client . close () ;  }
@ Test  public   void   substituteMultipleRelationships ()   {  Multimap < String ,  Object >   valueMap   =  HashMultimap . create () ;  valueMap . put ( """"node_id"""" ,  """"HP_123"""" ) ;  valueMap . put ( """"rel_id"""" ,  """"RO_1"""" ) ;  valueMap . put ( """"rel_id"""" ,  """"RO_2"""" ) ;  String   actual   =  util . substituteRelationships ( """"({node_id})-[:${rel_id}!]-(end)"""" ,  valueMap ) ;  
public   void   checkUpdateCompat ()   {  compatDataId . clear () ;  try  {  Files . write ( compatFile ,  new   byte [ 0 ] ) ;  }   catch  ( IOException   e )   {  Timber . e ( e ) ;  }  
@ Test  public   void   thatFileIsNotExcludedIfIndexIsNotReady ()   {  final   VirtualFile   fakeVirtualFile   =  mock ( VirtualFile . class ) ;  final   Project   fakeProject   =  mock ( Project . class ) ;  when ( fakeProjectManager . getOpenProjects () ) . thenReturn ( new   Project []   { fakeProject } ) ;  when ( fakeIndexFacade . isIndexReady ( fakeProject ) ) . thenReturn ( false ) ;  final   boolean   result   =  exclusion . isExcluded ( fakeVirtualFile ) ;  assertFalse ( result ) ;  }
default   < T   extends  AnalogOutput >   T   create ( Integer   address ,  String   id ,  String   name ,  String   description )   {  var   builder   =  AnalogOutputConfigBuilder . newInstance ( context () ) ;  builder . id ( id ) . address ( address ) . id ( id ) . name ( name ) . description ( description ) ;  return  ( T ) create ( builder . build () ) ;  }
private   Object   getArrayEnumOrGenerate ( final   Descriptors . EnumDescriptor   descriptor ,  final   String   fieldType ,  final   int   arraySize ,  final   List < String >   parameterList )   {  final   List < Object >   value   =  new   ArrayList <> ( arraySize ) ;  for  ( int   i   =  0 ;   i   <   arraySize ;   i ++ )   {  value . add ( getEnumOrGenerate ( descriptor ,  fieldType ,  parameterList ) ) ;  }  return  value ;  }
@ Test  public   void   testGetAddress ()   throws   InterruptedException   {  int   port   =  SocketUtil . getAvailablePort () ;  InetSocketAddress   inetSocketAddress   =  new   InetSocketAddress ( port ) ;  MyWebSocketServer   server   =  new   MyWebSocketServer ( port ) ;  assertEquals ( inetSocketAddress ,  server . getAddress () ) ;  }
public   void   setAdjustSumX ( double []   adjustSumX )   {  this . adjustSumX   =   adjustSumX ;  }
@ Override  public   void   onRestoreInstanceState ( Parcelable   state )   {  SavedState   ss   =  ( SavedState )   state ;  super . onRestoreInstanceState ( ss . getSuperState () ) ;  mSwitch . setCheckedInternal ( ss . checked ) ;  setTextViewLabel ( ss . checked ) ;  setVisibility ( ss . visible  ?   View . VISIBLE   :  View . GONE ) ;  mSwitch . setOnCheckedChangeListener ( ss . visible  ?   this   :  null ) ;  requestLayout () ;  }
@ Override  public   Optional < ValueCompletion >   from ( SwaggerCompletionHelper   swaggerCompletionHelper ,  CompletionResultSet   completionResultSet )   {  if  ( swaggerCompletionHelper . hasPath ( """"$.info.x-audience"""" ) )   {  return  Optional . of ( new   AudienceValueCompletion ( swaggerCompletionHelper ,  completionResultSet ) ) ;  }   else  {  return  Optional . empty () ;  }  }
@ Override  public   void   onExceededDatabaseQuota ( String   url ,  String   databaseIdentifier ,  long   currentQuota ,  long   estimatedSize , long   totalUsedQuota ,  WebStorage . QuotaUpdater   quotaUpdater )  {  LOG . d ( LOG_TAG ,  """"onExceededDatabaseQuota estimatedSize: %d  currentQuota: %d  totalUsedQuota: %d"""" ,  estimatedSize ,  currentQuota ,  totalUsedQuota ) ;  quotaUpdater . updateQuota ( MAX_QUOTA ) ;  }
public   String   getDisplayName ()   {  return  ( TextUtils . isEmpty ( name ) ) ?   deviceID . substring ( 0 ,  7 )  :  name ;  }
static   TestAnalogInputProvider   newInstance ( String   id ,  String   name ) {  return  new   TestAnalogInputProviderImpl ( id ,  name ) ;  }
@ Override  public   List < ViewGroup < ProgressView . Data > >   getGroups ( Accessor < ? >   accessor )   {  Level   world   =  accessor . getLevel () ;  float   period   =  40 ;  var   progress1   =  new   ProgressView . Data ( ( ( world . getGameTime ()   %   period )   +   1 )   /   period ) ;  period   =   200 ;  var   progress2   =  new   ProgressView . Data ( ( ( world . getGameTime ()   %   period )   +   1 )   /   period ) ;  var   group   =  new   ViewGroup <> ( List . of ( progress1 ,  progress2 ) ) ;  return  List . of ( group ) ;  }
@ Override  public   Builder   serverData ( CompoundTag   serverData )   {  this . serverData   =   serverData ;  return  this ;  }
private   double   derivedFunction ( double   result )   {  return  result   *   ( 1d   -   result ) ;  }
@ Override  public   int   hashCode ()  {  final   int   prime   =  31 ;  int   result   =  1 ;  result   =   prime   *   result   +   ( ( family   ==   null )  ?   0   :  family . toLowerCase () . hashCode () ) ;  result   =   prime   *   result   +   ( ( style   ==   null )  ?   0   :  style . hashCode () ) ;  result   =   prime   *   result   +   ( ( weight   ==   null )  ?   0   :  weight . hashCode () ) ;  return  result ;  }
public   String   getUser ( String   datasource )   {  String   user   =  environment . getProperty ( """"user.""""   +   datasource ) ;  return  firstNonNull ( user ,  """"yanagishima"""" ) ;  }
protected   void   onCreate ( Bundle   icicle )   {  super . onCreate ( icicle ) ;  mAccountAuthenticatorResponse   =  getIntent () . getParcelableExtra ( AccountManager . KEY_ACCOUNT_AUTHENTICATOR_RESPONSE ) ;  if  ( mAccountAuthenticatorResponse   !=   null )   {  mAccountAuthenticatorResponse . onRequestContinued () ;  }  }
@ Override  public   IStreetViewPanoramaViewDelegate   newStreetViewPanoramaViewDelegate ( IObjectWrapper   context ,  StreetViewPanoramaOptions   options )   {  return  new   StreetViewPanoramaViewImpl ( ObjectWrapper . unwrapTyped ( context ,  Context . class ) ) ;  }
public   ScopeUpdateRequest   claims ( List < String >   claims )   {  this . claims   =   claims ;  return  this ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   init ()   throws  Exception   {  super . init () ;  userStoreConfigAdminServiceClient   =   new   UserStoreConfigAdminServiceClient ( backendURL ,  sessionCookie ) ;  userStoreCountServiceClient   =   new   UserStoreCountServiceClient ( backendURL ,  sessionCookie ) ;  }
@ Override  protected   void   succeeded ()   {  super . succeeded () ;  onSongChange . run () ;  }
public   static   < E >   Supplier < E >   constant ( final   E   value )   {  return  ()  ->   value ;  }
static   void   parseError ( String   msg ,  Matcher   m ,  int   i )   throws  ParseError  {  StringBuilder   msg_   =  new   StringBuilder ( """"Syntax error"""" ) ;  try {  msg_ . append ( """" at token '"""" ) . append ( m . group ( 0 ) ) . append ( """"'"""" ) ;  }   catch  ( IllegalStateException   _e )   { }  msg_ . append ( """" at position """" ) ;  msg_ . append ( i ) ;  msg_ . append ( """": """" ) ;  msg_ . append ( msg ) ;  throw  new   ParseError ( msg_ . toString () ) ;  }
private   void   stopDownloading ( long   downloadId )   {  DownloadManager   dm   =  ( DownloadManager )   getContext () . getSystemService ( Context . DOWNLOAD_SERVICE ) ;  if  ( dm   !=   null )   {  dm . remove ( downloadId ) ;  BusProvider . getBus () . post ( new   OfflineCanceledEvent ( downloadId ) ) ;  }  }
@ Test  void   testCustomInitialStatus ()   {  TestPropertyValues . of ( """"eureka.instance.initial-status:STARTING"""" ) . applyTo ( this . context ) ;  setupContext () ;  assertThat ( getInstanceConfig () . getInitialStatus () ) . as ( """"initialStatus wrong"""" ) . isEqualTo ( InstanceStatus . STARTING ) ;  }
public   static   < T >   void   put ( Bundle   bundle ,  @ NonNull   SliceKey < T >   key ,  String   packName ,  String   sliceId ,  T   value )   {  key . put ( bundle ,  sliceKey ( packName ,  sliceId ,  key . baseKey () ) ,  value ) ;  }
@ Override  public   void   tick ()   {  if  ( expectedWidth   <  width   &&   ++ ticksSinceWidthChanged  >   10 )   {  width   =   expectedWidth ;  ticksSinceWidthChanged   =   0 ;  }  }
public   void   deleteUserClaimValue ( String   userName ,  String   claimUri ,  String   profileName )  throws  RemoteUserStoreManagerServiceUserStoreExceptionException ,  RemoteException   {  remoteUserStoreManagerServiceStub . deleteUserClaimValue ( userName ,  claimUri ,  profileName ) ;  }
public   < F >   Chain < Map < F ,  Integer > >   countBy ( final   Function < T ,  F >   func )   {  return  new   Chain <> ( Underscore . countBy ( list ,  func ) ) ;  }
private   Socket   enableTLSOnSocket ( Socket   socket )   {  if ( socket   !=   null   &&   ( socket   instanceof   SSLSocket ) )   {  ( ( SSLSocket ) socket ) . setEnabledProtocols ( new   String []   { """"TLSv1"""" ,  """"TLSv1.1"""" ,  """"TLSv1.2"""" } ) ;  }  return  socket ;  }
private   JSONObject   get ( String   objectName )   {  return  OBJECTS . getJSONObject ( objectName ) ;  }
public   static   boolean   isEmptyElement ( IElement   element )   {  return  element   ==   null   ||   element   ==   ItemStackElement . EMPTY ;  }
@ Test  public   void   testUDFNull ()   throws  Exception   {  Tuple   tuple   =  TupleFactory . getInstance () . newTuple ( 0 ) ;  Assert . assertNull ( instance . exec ( tuple ) ) ;  }
public   static   void   registerAdditional ( ModelEvent . RegisterAdditional   event )  {  event . register ( new   ResourceLocation ( Reference . MOD_ID ,  """"special/test"""" ) ) ;  }
@ Override  public   String   toString ()   {  return  TAG   +   """":""""   +   results ;  }
public   static   ServerPluginConfig   instance ()   {  return  INSTANCE . get () ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( success ,  outputMessage ,  errorMessage ) ;  }
public   static   int   i2cWriteI2CBlockData ( int   handle ,  int   i2cReg ,  byte []   buf ,  int   count ) {  return  i2cWriteI2CBlockData ( handle ,  i2cReg ,  buf ,  0 ,  count ) ;  }
public   void   setSharedType ( String   sharedType )   {  this . sharedType   =   sharedType ;  }
@ Override  void   storeList ( DataMap   dataMap ,  String   key ,  ArrayList < DataMap >   valueList )   {  dataMap . putDataMapArrayList ( key ,  valueList ) ;  }
@ Override   public   float   get ( long   i ,  long   j )   {  return  getRaw ( index ( i ,  j ) ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  UserSharedOrganizationsResponseLinks   userSharedOrganizationsResponseLinks   =  ( UserSharedOrganizationsResponseLinks )   o ;  return  Objects . equals ( this . href ,  userSharedOrganizationsResponseLinks . href )   &&  Objects . equals ( this . rel ,  userSharedOrganizationsResponseLinks . rel ) ;  }
@ Override  public   IObjectWrapper   getTestingHelper ()   throws  RemoteException   {  return  null ;  }
private   EurekaInstanceConfigBean   getInstanceConfig ()   {  return  this . context . getBean ( EurekaInstanceConfigBean . class ) ;  }
@ Test  public   void   testGetEvalPath ()   {  Assert . assertEquals ( pathFinder . getEvalFilePath ( """"EvalA"""" ,  """"EvalTester"""" ,  SourceType . LOCAL ) , """"evals/EvalA/EvalTester"""" ) ;  Assert . assertTrue ( pathFinder . getEvalFilePath ( """"EvalA"""" ,  """"EvalTester"""" ,  SourceType . HDFS ) . contains ( """"ModelSets/cancer-judgement/evals/EvalA/EvalTester"""" ) ) ;  }
 <argument pos:start=""""""""461:112"""""""" pos:end=""""""""461:117""""""""><expr pos:start=""""""""461:112"""""""" pos:end=""""""""461:117""""""""><literal type=""""""""string"""""""" pos:start=""""""""461:112"""""""" pos:end=""""""""461:117"""""""">""""""""lst6""""""""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ SuppressWarnings ( """"unchecked"""" )  public   static   < E ,  F   extends  Comparable >   E   max ( final   Collection < E >   collection ,  final   Function < E ,  F >   func )   {  return  Collections . max ( collection ,  ( o1 ,  o2 )  ->   func . apply ( o1 ) . compareTo ( func . apply ( o2 ) ) ) ;  }
public   static   boolean   localeUsesAmPm ( Locale   locale ) {  DateFormat   df   =  DateFormat . getTimeInstance ( DateFormat . FULL ,  locale ) ;  return  df   instanceof   SimpleDateFormat   &&   ( ( SimpleDateFormat )   df ) . toPattern () . contains ( """"a"""" ) ;  }
public   Map < Integer ,  List < Double > >   getNumerWgtWoes ()   {  return  numerWgtWoes ;  }
 <argument pos:start=""""""""262:63"""""""" pos:end=""""""""262:74""""""""><expr pos:start=""""""""262:63"""""""" pos:end=""""""""262:74""""""""><name pos:start=""""""""262:63"""""""" pos:end=""""""""262:74"""""""">subPixelSize</name></expr></argument>
@ Override  public   String   getMessage ()   {  return  mStatus . getStatusMessage () ;  }
private   boolean   checkAgentUserPermission ( @ NonNull   Permission   permission )   {  return  permission . equals ( Hudson . READ )  ||   permission . equals ( Computer . CREATE )  ||   permission . equals ( Computer . CONNECT )  ||   permission . equals ( Computer . CONFIGURE ) ;  }
public   Key   scaleWidth ( float   s )  {  return  new   Key ( keys ,  anticircle ,  keysflags ,  width   *   s ,  shift ,  indication ) ;  }
private   KeyboardData   refresh_special_layout ( EditorInfo   info )  {  switch  ( info . inputType   &   InputType . TYPE_MASK_CLASS )  {  case  InputType . TYPE_CLASS_NUMBER :  case  InputType . TYPE_CLASS_PHONE :  case  InputType . TYPE_CLASS_DATETIME :  if  ( _config . pin_entry_enabled )  return  loadPinentry ( R . xml . pin ) ;  else  return  loadNumpad ( R . xml . numeric ) ;  default:  break;  }  return  null ;  }
 <parameter pos:start=""""""""121:76"""""""" pos:end=""""""""121:80""""""""><decl pos:start=""""""""121:76"""""""" pos:end=""""""""121:80""""""""><name pos:start=""""""""121:76"""""""" pos:end=""""""""121:80"""""""">which</name></decl></parameter>)</parameter_list> -&gt; <block pos:start=""""""""121:86"""""""" pos:end=""""""""143:13"""""""">{<block_content pos:start=""""""""123:17"""""""" pos:end=""""""""142:24"""""""">
default   int   writeRegister ( int   register ,  InputStream   stream )   throws  IOException {  return  writeRegister ( register ,  stream . readAllBytes () ) ;  }
@ Test  void   repeat ()   {  assertEquals ( """"***"""" ,  U . repeat ( """"*"""" ,  3 ) ) ;  assertEquals ( """"***"""" ,  new   U < String > ( """"*"""" ) . repeat ( 3 ) ) ;  assertEquals ( """"***"""" ,  U . chain ( """"*"""" ) . repeat ( 3 ) . item () ) ;  assertEquals ( """"abcabc"""" ,  U . repeat ( """"abc"""" ,  2 ) ) ;  assertEquals ( """""""" ,  U . repeat ( """"abc"""" ,  0 ) ) ;  assertEquals ( """""""" ,  U . repeat ( null ,  1 ) ) ;  }
@ Test  public   void   testProcessCreationFormSuccess ()   throws  Exception   {  mockMvc . perform ( post ( """"/owners/new"""" )  . param ( """"firstName"""" ,  """"Joe"""" )  . param ( """"lastName"""" ,  """"Bloggs"""" )  . param ( """"address"""" ,  """"123 Caramel Street"""" )  . param ( """"city"""" ,  """"London"""" )  . param ( """"telephone"""" ,  """"01316761638"""" ) )  . andExpect ( status () . is3xxRedirection () ) ;  }
public   LaunchCommandBuilder   withAgentCommandStyle ( Optional < AgentCommandStyle >   maybeStyle )   {  maybeStyle . ifPresent ( style  ->   this . agentCommandStyle   =   style ) ;  return  this ;  }
private   LiTag   li_changedSecurityRequirement ( ChangedSecurityRequirement   changedSecurityRequirement )   {  return  li () . withText ( String . format ( """"Changed security requirement : """" ) )  . with ( span ( ( null   ==   changedSecurityRequirement . getNewSecurityRequirement ()  ||   null  ==   changedSecurityRequirement . getNewSecurityRequirement () . toString () ) ?   """"""""  :  ( changedSecurityRequirement . getNewSecurityRequirement () . toString () ) ) ) ;  }
public   static   void   expectFailure ( final   Schema   failingSchema ,  final   String   expectedPointer , final   Object   input )   {  expectFailure ( failingSchema ,  failingSchema ,  expectedPointer ,  input ) ;  }
@ Before  public   void   setUp ()   throws  Exception   {  stepStorage   =   new   StepStorage () ;  }
@ Test  public   void   doesNotRequireExplicitArray ()   {  ArraySchema . builder ()  . requiresArray ( false )  . uniqueItems ( true )  . build () . validate ( ARRAYS . get ( """"doesNotRequireExplicitArray"""" ) ) ;  }
public   ServiceProvider   registerApplicationAudienceServiceProvider ( OAuthConsumerAppDTO   appDTO , AssociatedRolesConfig   associatedRolesConfig )  throws  Exception   {  ServiceProvider   serviceProvider   =  generateServiceProviderWithRoles ( appDTO ,  associatedRolesConfig ) ;  return  getServiceProvider ( serviceProvider ) ;  }
@ Override  protected   void   typeCheck ( long []   values )   {  for  (  @ SuppressWarnings ( """"unused"""" )   long   c   :  values )   {  }  }
@ Test  public   void   curiePrefixes ()   {  assertThat ( util . getPrefixes () ,  hasItems ( """"A"""" ,  """"B"""" ) ) ;  }
@ Override  public   ProviderGroup < SerialProvider >   serial ()   {  return  providers . serial () ;  }
@ Override  public   DenseLayer   combine ( DenseLayer   from )   {  float [] []   fromWGrads   =  from . getwGrads () ;  for ( int   i   =  0 ;   i   <   this . in ;   i ++ )   {  for ( int   j   =  0 ;   j   <   this . out ;   j ++ )   {  wGrads [ i ] [ j ]   +=   fromWGrads [ i ] [ j ] ;  }  }  float []   fromBGrads   =  from . getbGrads () ;  for ( int   i   =  0 ;   i   <   this . out ;   i ++ )   {  bGrads [ i ]   +=   fromBGrads [ i ] ;  }  return  this ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( id ,  name ,  description ,  identifier ,  type ,  requiresAuthorization ,  scopes ,  subscribedApplications ,  properties ,  self ) ;  }
public   static   String   cleanUpPath ( final   FieldValueMapping   fieldValueMapping ,  final   int   level )   {  return  SchemaProcessorUtils . cleanUpPathStr ( fieldValueMapping . getFieldName () ,  level ) ;  }
private   static   boolean   isVersionOption ( String   arg )   {  return  arg . equalsIgnoreCase ( """"v"""" )   ||   arg . equalsIgnoreCase ( """"version"""" )   ||   arg . equalsIgnoreCase ( """"-version"""" )  ||   arg . equalsIgnoreCase ( """"-v"""" ) ;  }
private   void   deleteFile ()   {  if  ( ! isOfflineFragment () )   {  deleteFilePosition   =   getListAdapter () . getSelectedPosition () ;  showDeleteConfirmationDialog () ;  }   else  {  BusProvider . getBus () . post ( new   OfflineFileDeleteEvent ( getCheckedFile () ) ) ;  }  }
@ BeforeEach  void   setUp ()   {  final   File   file   =  new   File ( """"src/test/resources"""" ) ;  final   String   absolutePath   =  file . getAbsolutePath () ;  JMeterUtils . loadJMeterProperties ( absolutePath   +   """"/kloadgen.properties"""" ) ;  final   JMeterContext   jmcx   =  JMeterContextService . getContext () ;  jmcx . setVariables ( new   JMeterVariables () ) ;  JMeterUtils . setLocale ( Locale . ENGLISH ) ;  jmeterHelperMockedStatic   =   Mockito . mockStatic ( JMeterHelper . class ) ;  jmeterContextServiceMockedStatic   =   Mockito . mockStatic ( JMeterContextService . class ,  Answers . RETURNS_DEEP_STUBS ) ;  }
public   boolean   isClickable ()   {  throw  new   UnsupportedOperationException () ;  }
@ NonNull  public   String   getValidResponseCodes ()   {  return  validResponseCodes ;  }
private   boolean   checkZombies ( boolean   testOnly )   {  Map < Long ,  Thread >   newMap   =  getThreadMap () ;  int   zombies   =  0 ;  for  ( Thread   t   :  newMap . values () )   {  Thread   prev   =  map . get ( t . getId () ) ;  if  ( prev   ==   null )   {  zombies ++ ;  if  ( testOnly )   {  return  true ;  }  StringBuilder   b   =  new   StringBuilder ( 4096 ) ;  appendStack ( t ,  b . append ( """"\n"""" ) . append ( t . getName () ) ) ;  System . err . println ( b ) ;  }  }  if  ( zombies   >   0   &&   ! testOnly )   {  fail ( """"Found """"   +   zombies   +   """" zombie thread(s) """" ) ;  }  return  zombies   >   0 ;  }
public   ORRule   condition ( ConditionEnum   condition )   {  this . condition   =   condition ;  return  this ;  }
public   static   Thread   findLastThreadByName ( String   name )   {  ThreadGroup   currentThreadGroup   =  Thread . currentThread () . getThreadGroup () ;  Thread []   threads   =  new   Thread [ 1000 ] ;  currentThreadGroup . enumerate ( threads ) ;  Thread   delayThread   =  null ;  for  ( Thread   thread   :  threads )   {  if  ( thread   ==   null )   break;  if  ( thread . getName () . equals ( name ) )   {  delayThread   =   thread ;  }  }  return  delayThread ;  }
private   boolean   containsAll ( String []   actualElements ,  String []   expectedElements )   {  for  ( String   expectedElement   :  expectedElements )   {  boolean   found   =  false ;  for  ( String   actualElement   :  actualElements )   {  if  ( actualElement . equals ( expectedElement ) )   {  found   =   true ;  break;  }  }  if  ( ! found )   {  return  false ;  }  }  return  true ;  }
public   void   readFields ( DataInput   in ,  int   version )   throws  IOException   {  this . readFieldsWithoutFeatures ( in ,  version ) ;  int   len   =  in . readInt () ;  this . features   =   new   ArrayList < Integer > () ;  for ( int   i   =  0 ;   i   <   len ;   i ++ )   {  this . features . add ( in . readInt () ) ;  }  }
private   CpsFlowDefinition   getJobFlow ( String   jobName ,  List < String >   categories ,  String   label )   throws  Exception   {  return  new   CpsFlowDefinition ( getThrottleScript ( jobName ,  categories ,  label ) ,  true ) ;  }
@ Override  public   void   onLayoutChange ( View   v ,  int   left ,  int   top ,  int   right , int   bottom ,  int   oldLeft ,  int   oldTop ,  int   oldRight ,  int   oldBottom )   {  if  ( left   !=   oldLeft   ||   top   !=   oldTop   ||   right   !=   oldRight   ||   bottom   !=   oldBottom )   {  layoutChangeHandler . removeCallbacks ( mRunnable ) ;  layoutChangeHandler . post ( mRunnable ) ;  }  }
@ Test ( dependsOnMethods   =   { """"testUpdateSecretType"""" } )  public   void   testDeleteSecretType ()   throws  IOException   {  if  ( ! StringUtils . equals ( MultitenantConstants . SUPER_TENANT_DOMAIN_NAME ,  tenant ) )   {  Response   response   = getResponseOfDelete ( SECRET_TYPE_API_BASE_PATH   +   PATH_SEPARATOR   +   secretTypeName ) ;  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT ) ;  }  }
protected   String   itemContent ( String   title ,  String   mediaType )   {  return  format ( """"%s : `%s`\n\n"""" ,  title ,  mediaType ) ;  }
public   void   setColorEnableAutoExposure ( int   value )   {  setOption ( RealSense . RS_OPTION_COLOR_ENABLE_AUTO_EXPOSURE ,  value ) ;  }
public   void   removePropertyChangeListener ( PropertyChangeListener   listener )   {  pcSupport . removePropertyChangeListener ( listener ) ;  for  ( Object   s   :  toArray () )   {  if  ( s   instanceof   BaseChildSettings )   {  ( ( BaseChildSettings ) s ) . removePropertyChangeListener ( listener ) ;  }   else if  ( s   instanceof   BaseSettings )   {  ( ( BaseSettings ) s ) . addPropertyChangeListener ( listener ) ;  }  }  }
public   ConnectorRes   category ( String   category )   {  this . category   =   category ;  return  this ;  }
protected   void   onReceiveActionTogglePlayback ( Session   currentSession )   {  if  ( ! ( currentSession   instanceof   CastSession ) )   return;  
@ Override  public   String   getJsonPlaceholderSuffix ( final   int   indentation )   {  return  """": \""""""""   +   CARET   +   """"\"""""""" ;  }
default   Descriptor   describe ()   {  return  Descriptor . create ()  . id ( this . id () )  . name ( this . name () )  . category ( """"EXTENSION"""" )  . description ( this . description () ) . type ( this . getClass () ) ;  }
@ Override  public   void   writeData ( String   path ,  byte []   data ,  int   expectedVersion )   throws  KeeperException ,  InterruptedException  {  writeDataReturnStat ( path ,  data ,  expectedVersion ) ;  }
public   void   testAuthenticateWithIDUserId ()   throws  Exception   {  AuthenticationResultDTO   authenticationResultDTO   =  userMgtClient  . authenticateWithIDUserId ( userId ,  """"PRIMARY"""" ,  credential1 ) ;  Assert . assertNotNull ( authenticationResultDTO ) ;  Assert . assertEquals ( authenticationResultDTO . getAuthenticationStatus () ,  """"SUCCESS"""" ) ;  }
NoteNode   removeNote ( int   deltaToRemove )   {  NoteNode   toRemove ;  if  ( head . isEmpty () )   {  
public   CLImage2d   getTransformedImageCL ()   {  if  ( residualUpdateNeeded )   {  doRoi () ;  doResidual () ;  }  return  transformedCL [ pyramidLevel ] ;  }
public   OpenIDConnectConfiguration   addScopeValidatorsItem ( String   scopeValidatorsItem )   {  if  ( this . scopeValidators   ==   null )   {  this . scopeValidators   =   new   ArrayList <> () ;  }  this . scopeValidators . add ( scopeValidatorsItem ) ;  return  this ;  }
protected   String   getBundleJavaOptsArgument ()   {  return  PROPERTIES . getBundleJavaOpts () ;  }
private   byte []   getByteArray ( int   length )   {  return  Decoder . getByteArray ( this . buffer ,  length ) ;  }
@ Override  public   Rectangle   redraw ( double   offsetX )   {  Rectangle   box   =  new   Rectangle () ;  box . xProperty () . bind ( startX . subtract ( offsetX ) ) ;  box . yProperty () . bind ( startY ) ;  box . widthProperty () . bind ( width ) ;  box . heightProperty () . bind ( height ) ;  box . getStyleClass () . setAll ( """"select-box"""" ) ;  box . setMouseTransparent ( true ) ;  return  box ;  }
@ Override   public   BigInteger   get ( long   i ,  long   j )   {  return  getRaw ( index ( i ,  j ) ) ;  }
public   void   setLastUpdate ( int   lastUpdate )   {  this . lastUpdate   =   lastUpdate ;  }
@ Override  public   ClockProvider   getClockProvider ()   {  return  new   FakeClockProvider () ;  }
@ Override   public   HalfIndexer   put ( long   i ,  long   j ,  long   k ,  float   h )   {  putRaw ( index ( i ,  j ,  k ) ,  h ) ;  return  this ;  }
@ Override  public   ProblemDescriptor []   checkFile ( @ NotNull   PsiFile   file ,  @ NotNull   InspectionManager   manager ,  boolean   isOnTheFly )   {  if  ( canLint ( file )   &&   ! isOnTheFly )   {  return  lint ( file ) . map ( response  ->   createProblems ( manager ,  response ,  file ) ) . orElse ( null ) ;  }  return  null ;  }
@ ReactProp ( name   =   """"streamURL"""" )  public   void   setStreamURL ( WebRTCView   view ,  String   streamURL )   {  view . setStreamURL ( streamURL ) ;  }
public   int   getTenantId ()  throws  RemoteUserStoreManagerServiceUserStoreExceptionException ,  RemoteException   {  return  remoteUserStoreManagerServiceStub . getTenantId () ;  }
@ Test  public   void   smokeConstructor ()   {  new   RefineService ( vocabulary ,  metadata ) ;  }
private   static   Instant   getTimestampMillisValueOrRandom ( final   List < String >   fieldValueList )   {  return  getRandomLocalDateTime ( fieldValueList ) . toInstant ( ZoneOffset . UTC ) ;  }
@ Override  public   void   onTaskUpdate ( Task < TResult >   task )   {  if  ( task . isSuccessful () )   {  execute ( ()  ->  {  try  {  continuation . then ( task . getResult () ) . addOnCompleteListener ( this ,  ( subTask )  ->  {  if  ( subTask . isSuccessful () )   {  completionSource . setResult ( subTask . getResult () ) ;  }   else  {  completionSource . setException ( subTask . getException () ) ;  }  } ) ;  }   catch  ( Exception   e )   {  completionSource . setException ( e ) ;  }  } ) ;  }   else  {  completionSource . setException ( task . getException () ) ;  }  }
public   static   void   installOrUpgradeAppBin ( Context   context )   {  if  ( versionFile . exists () )   {  if  ( getCurrentVersionCode ( context )   >   readVersionFile () )   {  LilDebiAction . log . append ( """"Upgrading '""""   +   app_bin   +   """"'\n"""" ) ;  
@ Override  public   void   readFields ( DataInput   in )   throws  IOException   {  this . out   =   in . readInt () ;  }
public   synchronized   boolean   hasError ()   {  return  state   ==   ConnectionState . ERROR ;  }
public   String   getSelectedIconPackageName ()   {  return  selectedPack   !=   null  ?   selectedPack . packageName   :  null ;  }
public   void   getResponseAsync ( HttpFormClient . Callback < RegisterResponse >   callback )   {  HttpFormClient . requestAsync ( SERVICE_URL ,  this ,  RegisterResponse . class ,  callback ) ;  }
public   Map < Integer ,  Map < String ,  Double > >   getWgtCateWoeMap ()   {  return  cateWgtWoeMap ;  }
@ Test  void   spaceInPreservedXmlShouldNotBeTrimmed ()   {  SortPomImplUtil . create ()  . lineSeparator ( """"\r\n"""" )  . testFiles ( """"/PreserveContent_input.xml"""" ,  """"/PreserveContent_output.xml"""" ) ;  }
public   void   addIncreased ( String   key ,  List < String >   scopes )   {  if  ( increased   ==   null )   {  increased   =   new   SecurityRequirement () ;  }  increased . put ( key ,  scopes ) ;  }
public   static   String   byteCount ( Object   v )   {  if  ( ! ( v   instanceof   Number ) )   {  return  String . valueOf ( v ) ;  }  long   bytes   =  ( ( Number )   v ) . longValue () ;  int   unit   =  1024 ;  if  ( bytes   <   unit )   {  return  bytes   +   """" B"""" ;  }  int   exp   =  ( int )   ( Math . log ( bytes )   /   Math . log ( unit ) ) ;  String   pre   =  """"KMGTPE"""" . charAt ( exp   -   1 )   +   """"i"""" ;  return  String . format ( """"%.2f %sB"""" ,  bytes   /   Math . pow ( unit ,  exp ) ,  pre ) ;  }
private   String   getSafeNumberAsString ( final   Number   exclusiveMaximum )   {  String   result   =  null ;  if  ( Objects . nonNull ( exclusiveMaximum ) )   {  result   =   exclusiveMaximum . toString () ;  }  return  result ;  }
@ Test  void   shouldNotHaveDiscoveryClientWhenEurekaClientDisabled ()   {  contextRunner . withPropertyValues ( """"eureka.client.enabled=false"""" ) . run ( context  ->  {  assertThat ( context ) . doesNotHaveBean ( ReactiveDiscoveryClient . class ) ;  assertThat ( context ) . doesNotHaveBean ( ReactiveDiscoveryClientHealthIndicator . class ) ;  } ) ;  }
@ Override  public   void   localize ( ResourceBundle   bundle )   {  languageLabel . setText ( bundle . getString ( """"preferences.editor.language"""" ) ) ;  colorSchemeLabel . setText ( bundle . getString ( """"preferences.colorScheme"""" ) ) ;  themeManager . renameDefaultThemes ( bundle . getString ( """"preferences.colorScheme.defaultLight"""" ) , bundle . getString ( """"preferences.colorScheme.defaultDark"""" ) ) ;  
@ Test  public   void   dependenciesWithParentOverride ()   throws  Exception   {  Resource   resource   =  new   ClassPathResource ( """"apps/parent-properties-override/pom.xml"""" ) ;  List < Dependency >   dependencies   =  resolver . dependencies ( resource ) ;  assertThat ( dependencies . size () ) . isGreaterThan ( 10 ) ;  assertThat ( dependencies ) . filteredOn ( """"artifact.artifactId"""" ,  """"spring-core"""" ) . first ()  . is ( version ( """"4.3.5.RELEASE"""" ) ) ;  }
public   Chain < T >   shuffle ()   {  return  new   Chain <> ( Underscore . shuffle ( list ) ) ;  }
@ Override  public   void   setGroupInfoString ( String   world ,  String   groupName ,  String   node ,  String   value )   {  PermissionGroup   group   =  PermissionsEx . getPermissionManager () . getGroup ( groupName ) ;  if  ( group   ==   null )   {  return;  }   else  {  group . setOption ( node ,  world ,  value ) ;  }  }
private   char   curr ()   {  if  ( pos   ==   input . length () )   {  return  EOF ;  }  return  input . charAt ( pos ) ;  }
public   void   setLocalTimestampFormat ( boolean   newPref )  {  localTimestampFormat   =   newPref ;  }
public   void   setTrees ( List < List < TreeNode > >   trees )   {  this . trees   =   trees ;  }
public   void   replaceIdentityXml ()   throws  IOException ,  AutomationUtilException   {  log . info ( """"Replacing default deployment.toml file."""" ) ;  serverConfigurationManager . restoreToLastConfiguration ( false ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( id ,  name ,  self ,  connectors ) ;  }
@ Override  public   Void   visit ( OWLClass   desc )   {  String   iri   =  getIri ( desc ) ;  getOrCreateNode ( iri ,  OwlLabels . OWL_CLASS ) ;  return  null ;  }
@ Override  public   List < ItemStack >   getCurativeItems ()  {  return  Collections . emptyList () ;  }
public   void   setNetwork ( BasicNetwork   network )   {  this . network   =   network ;  }
public   static   CharIndexer   create ( CharBuffer   buffer ,  long []   sizes ,  long []   strides )   {  return  new   CharBufferIndexer ( buffer ,  sizes ,  strides ) ;  }
@ Test  public   void   thatStringHasNoSpacesInRow ()   {  assertEquals ( 0 ,  StringUtils . getNumberOfSpacesInRowStartingFromEnd ( """"text"""" ) ) ;  }
private   void   postBeginSoftInputOnLongPressCommand ()   {  if  ( mBeginSoftInputOnLongPressCommand   ==   null )   {  mBeginSoftInputOnLongPressCommand   =   new   BeginSoftInputOnLongPressCommand () ;  }   else  {  removeCallbacks ( mBeginSoftInputOnLongPressCommand ) ;  }  postDelayed ( mBeginSoftInputOnLongPressCommand ,  ViewConfiguration . getLongPressTimeout () ) ;  }
public   final   MLData   compute ( final   MLData   input ,  boolean   cacheInputOutput ,  int   resetInputIndex )   {  try  {  final   MLData   result   =  new   BasicMLData ( this . network . getStructure () . getFlat () . getOutputCount () ) ;  compute ( input . getData () ,  result . getData () ,  cacheInputOutput ,  resetInputIndex ) ;  return  result ;  }   catch  ( final   ArrayIndexOutOfBoundsException   ex )   {  throw  new   NeuralNetworkError ( """"Index exception: there was likely a mismatch between layer sizes, or the size of the input presented to the network."""" , ex ) ;  }  }
public   static   void   addProcessor ( String   name ,  VideoFrameProcessorFactoryInterface   videoFrameProcessorFactoryInterface )   {  if  ( name   !=   null   &&   videoFrameProcessorFactoryInterface   !=   null )   {  methodMap . put ( name ,  videoFrameProcessorFactoryInterface ) ;  }   else  {  throw  new   NullPointerException ( """"Name or VideoFrameProcessorFactry can not be null"""" ) ;  }  }
private   boolean   wifiWhitelistConditionMet ( boolean   prefWifiWhitelistEnabled , Set < String >   whitelistedWifiSsids )   {  if  ( ! prefWifiWhitelistEnabled )   {  Log . v ( TAG ,  """"handleWifiWhitelist: !prefWifiWhitelistEnabled"""" ) ;  return  true ;  }  if  ( isWifiConnectionWhitelisted ( whitelistedWifiSsids ) )   {  Log . v ( TAG ,  """"handleWifiWhitelist: isWifiConnectionWhitelisted"""" ) ;  return  true ;  }  return  false ;  }
public   static   File   getHttpsKeyFile ( Context   context )   {  return  new   File ( context . getFilesDir () ,  HTTPS_KEY_FILE ) ;  }
@ Override  public   void   onClick ( long   trackId )   {  Intent   i ;  if  ( trackId   ==   currentTrackId )   {  
@ Test  public   void   testGetImpersonationConfigs ()   throws  Exception   {  Response   response   =  getResponseOfGet ( IMPERSONATION_CONFIGS_API_BASE_PATH ) ;  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_OK )  . body ( """"enableEmailNotification"""" ,  equalTo ( true ) ) ;  }
public   static   int   readIntLE ( byte []   buf ,  int   i )   {  return  ( buf [ i ]   &   0xFF )   |   ( ( buf [ i + 1 ]   &   0xFF )   <<   8 )   |   ( ( buf [ i + 2 ]   &   0xFF )   <<   16 )   |   ( ( buf [ i + 3 ]   &   0xFF )   <<   24 ) ;  }
private   boolean   testBuildPermission ( @ NonNull   Permission   permission )   {  String   id   =  permission . getId () ;  return  id . equals ( """"hudson.model.Hudson.Build"""" )  ||   id . equals ( """"hudson.model.Item.Build"""" ) ;  }
public   float   getIntrinsicHeight ()  {  if  ( getImage ()   !=   null )  return  getImage () . getHeight () ;  else  return  DEFAULT_IMAGE_HEIGHT ;  }
public   static   < E >   List < E >   filter ( final   List < E >   list ,  final   Predicate < E >   pred )   {  final   List < E >   filtered   =  new   ArrayList <> () ;  for  ( E   element   :  list )   {  if  ( pred . test ( element ) )   {  filtered . add ( element ) ;  }  }  return  filtered ;  }
public   void   sendMessageReceived ( String   packageName ,  MessageEventParcelable   messageEvent )   {  Log . d ( TAG ,  """"onMessageReceived: """"   +   messageEvent ) ;  Intent   intent   =  new   Intent ( """"com.google.android.gms.wearable.MESSAGE_RECEIVED"""" ) ;  intent . setPackage ( packageName ) ;  intent . setData ( Uri . parse ( """"wear:
@ Override   public   long   getLong ( long   i )   {  return  buffer . getLong ( ( int ) i ) ;  }
private   void   waitForProcessEnd ( Process   process )   {  try  {  process . waitFor () ;  }   catch  ( InterruptedException   e )   {  sonarConsole . info ( """"Unexpected end of process.\n"""" +   Throwables . getStackTraceAsString ( e ) ) ;  }  }
public   DirectionsApiRequest   departureTimeNow ()   {  return  param ( """"departure_time"""" ,  """"now"""" ) ;  }
@ Test ( priority   =   7 ,  groups   =   """"wso2.is"""" ,  description   =   """"Test deleteUserClaimValue operation"""" )  public   void   testDeleteUserClaimValue ()  throws  RemoteUserStoreManagerServiceUserStoreExceptionException ,  RemoteException   {  
public   static   String   toHexString ( int   byt ) {  return  String . format ( """"%02X"""" ,  ( byte ) byt ) ;  }
@ Test  public   void   simpleQuery ()   {  String   query   =  util . resolveRelationships ( """"(a)-[r]-(b)"""" ) ;  assertThat ( query ,  is ( """"(a)-[r]-(b)"""" ) ) ;  }
@ Override  public   boolean   visible ()   {  return  state . getMode ()   ==   Mode . datetime ;  }
protected   void   initTestClass ( String   tenantDomain )   throws  IOException   {  super . testInit ( API_VERSION ,  swaggerDefinition ,  tenantDomain ) ;  }
protected   Response   getResponseOfPatch ( String   endpointURI ,  String   body )   {  return  given () . auth () . preemptive () . basic ( authenticatingUserName ,  authenticatingCredential )  . config ( RestAssured . config () . encoderConfig ( encoderconfig  . appendDefaultContentCharsetToContentTypeIfUndefined ( false ) ) )  . contentType ( ContentType . JSON )  . header ( HttpHeaders . ACCEPT ,  ContentType . JSON )  . body ( body )  . log () . ifValidationFails ()  . filter ( validationFilter )  . log () . ifValidationFails ()  . when ()  . log () . ifValidationFails ()  . patch ( endpointURI ) ;  }
public   void   setRecurring ( boolean   recurring )   {  this . recurring   =   recurring ;  }
@ Override  public   void   addSilence ( double   duration , double   expectedDelta , File   inputFile , File   outputFile , boolean   triggerSynthesis )   {  
@ Override   public   FloatIndexer   get ( long   i ,  long   j ,  float []   f ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  f [ offset   +   n ]   =   buffer . get ( ( int ) index ( i ,  j )   +   n ) ;  }  return  this ;  }
public   int   get_current_layout ()  {  return  ( orientation_landscape ) ?   current_layout_landscape   :  current_layout_portrait ;  }
public   Value   withAllowSetters ()   {  return  _allowSetters  ?   this   : construct ( _ignored ,  _ignoreUnknown ,  _allowGetters ,  true ,  _merge ) ;  }
public   void   setAuthentication ( AuthenticationType   authentication )   {  this . authentication   =   authentication ;  }
public   void   setMergeEnabled ( Boolean   mergeEnabled )   {  this . mergeEnabled   =   mergeEnabled ;  }
@ Override  public   void   process ( TestSuiteResult   testSuite )   {  testSuite . setStop ( System . currentTimeMillis () ) ;  }
@ Before  public   void   setUp ()   throws  Exception   {  testCase   =   spy ( new   TestCaseResult () ) ;  }
public   static   PiGpioCmd   from ( Number   value ) {  for ( PiGpioCmd   c   :  PiGpioCmd . values () ) {  if ( c . value ()   ==   value . intValue () )   return  c ;  }  return  UNKNOWN ;  }
private   CalendarEntry   getSundayEntryAt ( CalendarEvent   event ,  DateTime   currentDateTime )   {  provider . clear () ;  provider . setExecutedAt ( currentDateTime ) ;  provider . addRow ( event ) ;  playResults ( TAG ) ;  CalendarEntry   sundayEntry   =  null ;  for  ( WidgetEntry   item   :  getFactory () . getWidgetEntries () )   {  if  ( item   instanceof   CalendarEntry )   {  CalendarEntry   entry   =  ( CalendarEntry )   item ;  if  ( entry . entryDate . getDayOfMonth ()   ==   20 )   {  assertNull ( sundayEntry ) ;  sundayEntry   =   entry ;  }  }  }  assertNotNull ( sundayEntry ) ;  return  sundayEntry ;  }
@ Override  public   boolean   check ( List < String >   vals )   {  for ( String   value   :  vals )   {  if ( values . contains ( value ) )   return  false ;  values . add ( value ) ;  }  return  true ;  }
@ RequestMapping ( value   =   """"/owners/{ownerId}/pets/{petId}/visits/new"""" ,  method   =   RequestMethod . POST )  public   String   processNewVisitForm ( @ Valid   Visit   visit ,  BindingResult   result )   {  if  ( result . hasErrors () )   {  return  """"pets/createOrUpdateVisitForm"""" ;  }   else  {  this . visits . save ( visit ) ;  return  """"redirect:/owners/{ownerId}"""" ;  }  }
@ Override  public   boolean   equals ( Object   obj )   {  if  ( obj   ==   null )   {  return  false ;  }  if  ( getClass ()   !=   obj . getClass () )   {  return  false ;  }  final   Node < ? >   other   =  ( Node < ? > )   obj ;  if  ( ! Objects . equals ( this . data ,  other . data ) )   {  return  false ;  }  if  ( ! Objects . equals ( this . children ,  other . children ) )   {  return  false ;  }  return  true ;  }
@ Override  public   void   doJob ( JobExecutionContext   context )   throws  JobExecutionException   {  latch . countDown () ;  }
@ Override  public   void   createFieldEditors ()   {  addField ( new   BooleanFieldEditor ( LESS_PREFERENCES_HOVER_DOCUMENTATION , Messages . LESSHoverPreferencePage_hover_documentation ,  getFieldEditorParent () ) ) ;  addField ( new   BooleanFieldEditor ( LESS_PREFERENCES_HOVER_REFERENCES , Messages . LESSHoverPreferencePage_hover_references ,  getFieldEditorParent () ) ) ;  }
 <argument pos:start=""""""""789:112"""""""" pos:end=""""""""789:117""""""""><expr pos:start=""""""""789:112"""""""" pos:end=""""""""789:117""""""""><literal type=""""""""string"""""""" pos:start=""""""""789:112"""""""" pos:end=""""""""789:117"""""""">""""""""lst4""""""""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   UserSharedOrganizationsResponse   addLinksItem ( UserSharedOrganizationsResponseLinks   linksItem )   {  if  ( this . links   ==   null )   {  this . links   =   new   ArrayList <> () ;  }  this . links . add ( linksItem ) ;  return  this ;  }
@ DataBoundSetter  @ Deprecated  public   void   setAssignments ( Collection < String >   assignments )   {  LOGGER . log ( Level . WARNING ,  """"Loading ambiguous role assignments via via configuration-as-code support"""" ) ;  if  ( assignments   !=   null )   {  SortedSet < RoleDefinitionEntry >   entries   =  new   TreeSet <> () ;  for  ( String   assignment   :  assignments )   {  final   RoleDefinitionEntry   rde   =  new   RoleDefinitionEntry () ;  rde . setEither ( assignment ) ;  entries . add ( rde ) ;  }  this . entries   =   entries ;  }  }
@ Test  public   void   invalidType ()   {  Assertions . assertThrows ( SchemaException . class ,  ()  ->  {  SchemaLoader . load ( get ( """"invalidType"""" ) ) ;  } ) ;  }
@ Override  public   StreamCodec < RegistryFriendlyByteBuf ,  String >   streamCodec ()   {  return  ByteBufCodecs . STRING_UTF8 . cast () ;  }
 <argument pos:start=""""""""153:72"""""""" pos:end=""""""""153:72""""""""><expr pos:start=""""""""153:72"""""""" pos:end=""""""""153:72""""""""><literal type=""""""""number"""""""" pos:start=""""""""153:72"""""""" pos:end=""""""""153:72"""""""">8</literal></expr></argument>
public   void   testSuiteStarted ( Description   description )   {  String   uid   =  generateSuiteUid ( description . getClassName () ) ;  TestSuiteStartedEvent   event   =  new   TestSuiteStartedEvent ( uid ,  description . getClassName () ) ;  AnnotationManager   am   =  new   AnnotationManager ( description . getAnnotations () ) ;  am . update ( event ) ;  event . withLabels ( AllureModelUtils . createTestFrameworkLabel ( """"JUnit"""" ) ) ;  getLifecycle () . fire ( event ) ;  }
@ Override  public   int   compare ( Pair   o1 ,  Pair   o2 )   {  return  Double . valueOf ( o1 . value ) . compareTo ( Double . valueOf ( o2 . value ) ) ;  }
private   void   logToConsole ( Throwable   e )   {  String   errorLine   =  getCaughtLocation () ;  System . out . print ( String . format ( """"%s:%n%s"""" ,  errorLine ,  getStackTrace ( e ) ) ) ;  }
@ Override   public   ByteIndexer   put ( long   i ,  byte []   b ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  putRaw ( index ( i )   +   n ,  b [ offset   +   n ] ) ;  }  return  this ;  }
public   void   setPsiColumnName ( String   psiColumnName )   {  this . psiColumnName   =   psiColumnName ;  }
@ Override  public   void   setApplicationContext ( ApplicationContext   applicationContext )   throws  BeansException   {  this . applicationContext   =   applicationContext ;  }
@ Override  protected   void   onSaveInstanceState ( @ NonNull   Bundle   outState )   {  super . onSaveInstanceState ( outState ) ;  if  ( textView   !=   null   &&   scrollView   !=   null )   {  outState . putInt ( SCROLL_POSITION_EXTRA ,  textView . getLayout () . getLineStart ( textView . getLayout () . getLineForVertical ( scrollView . getScrollY () ) ) ) ;  }  }
public   static   void   randomize ( int   seed ,  double []   weights )   {  NguyenWidrowRandomizer   randomizer   =  new   NguyenWidrowRandomizer ( - 1 ,  1 ) ;  randomizer . randomize ( weights ) ;  }
private   OutputFormat   createPrettyFormat ()   {  var   outputFormat   =  new   OutputFormat ( indentCharacters ) ;  outputFormat . setNewlines ( true ) ;  outputFormat . setExpandEmptyElements ( expandEmptyElements ) ;  outputFormat . setNewLineAfterDeclaration ( false ) ;  outputFormat . setEncoding ( encoding ) ;  return  outputFormat ;  }
public   CLImage2d   getProjectorImageCL ( int   pyramidLevel )   {  return  projectorImageCL [ pyramidLevel ] ;  }
@ Override  public   boolean   isToCheckMember ( @ NotNull   PsiElement   element ,  @ NotNull   String   id )   {  return  false ;  }
@ Test ( priority   =   8 ,  groups   =   """"wso2.is"""" ,  description   =   """"Test deleteUser operation"""" )  public   void   testDeleteUser ()  throws  RemoteUserStoreManagerServiceUserStoreExceptionException ,  RemoteException   {  
public   static   Collection < LocationRequestInternal >   readLocationRequestList ( DataMap   dataMap ,  Context   context )   {  if  ( ! dataMap . containsKey ( """"REQUEST_LIST"""" ) )   {  Log . w ( TAG ,  """"malformed DataMap: missing key REQUEST_LIST"""" ) ;  return  Collections . emptyList () ;  }  List < DataMap >   requestMapList   =  dataMap . getDataMapArrayList ( """"REQUEST_LIST"""" ) ;  List < LocationRequestInternal >   locationRequests   =  new   ArrayList < LocationRequestInternal > () ;  for  ( DataMap   map   :  requestMapList )   {  locationRequests . add ( readLocationRequest ( map ,  context ) ) ;  }  return  locationRequests ;  }
public   static   double []   normalize ( double []   xu ,  CvMat   K )   {  double []   xn   =  xu . clone () ;  double   fx   =  K . get ( 0 ) / K . get ( 8 ) ;  double   fy   =  K . get ( 4 ) / K . get ( 8 ) ;  double   dx   =  K . get ( 2 ) / K . get ( 8 ) ;  double   dy   =  K . get ( 5 ) / K . get ( 8 ) ;  double   s    =  K . get ( 1 ) / K . get ( 8 ) ;  for  ( int   i   =  0 ;   i   <   xu . length / 2 ;   i ++ )   {  xn [ i * 2     ]   =   ( xu [ i * 2     ]   -   dx ) / fx   -   s * ( xu [ i * 2   +   1 ]   +   dy ) / ( fx * fy ) ;  xn [ i * 2   +   1 ]   =   ( xu [ i * 2   +   1 ]   -   dy ) / fy ;  }  return  xn ;  }
private   Resource   getResource ( SCIMClient   scimClient ,  String   scim_url )   {  SCIMResponseHandler   responseHandler   =  new   SCIMResponseHandler () ;  responseHandler . setSCIMClient ( scimClient ) ;  
public   static   String   getPublicDir ( String   type )   {  return  Environment . getExternalStoragePublicDirectory ( type ) . getAbsolutePath () ;  }
@ Test  @ Timeout ( 5000 )  public   void   testHandshakeRejectionTestCase11 ()   throws  Exception   {  testHandshakeRejection ( 11 ) ;  }
@ Test  public   void   testAnswerChallengesWhenAlreadyAnswered ()   throws  IOException   {  String   body   =  readResource ( """"challenge-answers-array-correct-1.json"""" ) ;  getResponseOfPost ( this . userChallengeAnswersEndpointURI ,  body ) ;  Response   response   =  getResponseOfPost ( this . userChallengeAnswersEndpointURI ,  body ) ;  validateErrorResponse ( response ,  HttpStatus . SC_CONFLICT ,  """"CQM-10012"""" ,  this . tenant ) ;  getResponseOfDelete ( this . userChallengeAnswersEndpointURI ) ;  }
public   void   resetAllFinalSelect ()   throws  IOException   {  log . info ( """"!!! Reset all variables finalSelect = false"""" ) ;  for ( ColumnConfig   columnConfig :  this . columnConfigList )   {  columnConfig . setFinalSelect ( false ) ;  columnConfig . setColumnFlag ( null ) ;  }  saveColumnConfigList () ;  }
public   void   getInput ()   {  Scanner   input ;  try  {  input   =   new   Scanner ( System . in ) ;  String   userInput   =  input . nextLine () ;  out . writeUTF ( userInput ) ;  }   catch  ( IOException   e )   {  e . printStackTrace () ;  }  }
private   int   getPrimaryIndex ( MotionEvent   event )   {  int   count   =  event . getPointerCount () ;  int   id   =  - 1 ;  for  ( int   i   =  0 ;   i   <   count ;   ++ i )   {  id   =   event . getPointerId ( i ) ;  if  ( id   ==   primaryId )   {  return  i ;  }  }  
@ Override  public   void   remove ()   {  throw  new   UnsupportedOperationException ( """"Remove is not supported."""" ) ;  }
static   int   commonBytesBackward ( byte []   b ,  int   o1 ,  int   o2 ,  int   l1 ,  int   l2 )   {  int   count   =  0 ;  while  ( o1   >   l1   &&   o2   >   l2   &&   b [ -- o1 ]   ==   b [ -- o2 ] )   {  ++ count ;  }  return  count ;  }
@ Override  protected   ProcessBuilder   createProcessBuilder ()   {  ProcessBuilder   builder   =  super . createProcessBuilder () ;  builder . environment () . put ( """"VUE_NONPOLLING_WATCHER"""" ,  Boolean . toString ( true ) ) ;  return  builder ;  }
public   boolean   trySetResult ( TResult   result )   {  try  {  setResult ( result ) ;  return  true ;  }   catch  ( DuplicateTaskCompletionException   ignored )   {  return  false ;  }  }
@ Override  public   void   onClick ( View   v )   {  activity . requestStillImage () ;  }
void   dataChannelDispose ( String   reactTag )   {  DataChannelWrapper   dcw   =  dataChannels . get ( reactTag ) ;  if  ( dcw   ==   null )   {  Log . d ( TAG ,  """"dataChannelDispose() dataChannel is null"""" ) ;  return;  }  DataChannel   dataChannel   =  dcw . getDataChannel () ;  dataChannel . unregisterObserver () ;  dataChannels . remove ( reactTag ) ;  }
public   static   String   getTypeScriptVersion ()   {  IPreferenceStore   store   =  Activator . getDefault () . getPreferenceStore () ;  return  store . getString ( TYPESCRIPT_PREFERENCES_TSSERVER_TYPESCRIPT_VERSION ) ;  }
@ Override  public   MultipleClassification   deserialize ( JsonParser   jp ,  DeserializationContext   ctxt )   throws  IOException , JsonProcessingException   {  ObjectCodec   oc   =  jp . getCodec () ;  JsonNode   node   =  oc . readTree ( jp ) ;  for ( MultipleClassification   value :  MultipleClassification . values () )   {  if ( value . name () . equalsIgnoreCase ( node . textValue () ) )   {  return  value ;  }  }  return  null ;  }
@ Test  public   void   typeFailure ()   {  TestSupport . failureOf ( StringSchema . builder () )  . expectedKeyword ( """"type"""" )  . input ( null )  . expect () ;  }
public   String   sanitizeTrackName ( String   trackName ) {  String   first   =  trackName . trim () . replace ( ':' ,  ';' ) ;  String   second   =  FILENAME_CHARS_BLACKLIST_PATTERN . matcher ( first ) . replaceAll ( """"_"""" ) ;  return  second ;  }
public   void   testUnusedParameterMainFile ()   {  doTest ( """"unused_parameter/json/unused_parameter_main_file.json"""" ) ;  }
@ Override  public   void   setOnCircleClickListener ( IOnCircleClickListener   listener )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: setCircleClickListener"""" ) ;  }
 <argument pos:start=""""""""122:48"""""""" pos:end=""""""""122:52""""""""><expr pos:start=""""""""122:48"""""""" pos:end=""""""""122:52""""""""><operator pos:start=""""""""122:48"""""""" pos:end=""""""""122:48"""""""">-</operator><literal type=""""""""number"""""""" pos:start=""""""""122:49"""""""" pos:end=""""""""122:52"""""""">9.41</literal></expr></argument>)</argument_list></call>
private   TokenRequest   createTokenRequest ()   {  return  new   TokenRequest . Builder ()  . grantType ( PASSWORD_GRANT_TYPE )  . scopes ( requestedScopes )  . clientId ( clientId )  . build () ;  }
public   void   setEnvironment ( String   environment )   {  this . environment   =   environment ;  }
public   void   listResidences ( Player   player ,  String   targetplayer ,  int   page ,  boolean   showhidden )   {  this . listResidences ( player ,  targetplayer ,  page ,  showhidden ,  false ) ;  }
@ Test  public   void   testFactories ()   throws  Exception  {  JsonSetter . Value   v   =  JsonSetter . Value . forContentNulls ( Nulls . SET ) ;  assertEquals ( Nulls . DEFAULT ,  v . getValueNulls () ) ;  assertEquals ( Nulls . SET ,  v . getContentNulls () ) ;  assertEquals ( Nulls . SET ,  v . nonDefaultContentNulls () ) ;  JsonSetter . Value   skip   =  JsonSetter . Value . forValueNulls ( Nulls . SKIP ) ;  assertEquals ( Nulls . SKIP ,  skip . getValueNulls () ) ;  assertEquals ( Nulls . DEFAULT ,  skip . getContentNulls () ) ;  assertEquals ( Nulls . SKIP ,  skip . nonDefaultValueNulls () ) ;  }
@ Test  public   void   testAddEmailSenderWithNonExistingEventPublisherName ()   throws  IOException   {  String   body   =  readResource ( """"add-email-sender-2.json"""" ) ;  Response   response   = getResponseOfPost ( NOTIFICATION_SENDER_API_BASE_PATH   +   PATH_SEPARATOR   +   EMAIL_SENDERS_PATH ,  body ) ;  if  ( ! StringUtils . equals ( MultitenantConstants . SUPER_TENANT_DOMAIN_NAME ,  tenant ) )   {  validateErrorResponse ( response ,  HttpStatus . SC_NOT_FOUND ,  """"NSM-60001"""" ) ;  }   else  {  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_METHOD_NOT_ALLOWED ) ;  }  }
 <argument pos:start=""""""""589:73"""""""" pos:end=""""""""589:90""""""""><expr pos:start=""""""""589:73"""""""" pos:end=""""""""589:90""""""""><name pos:start=""""""""589:73"""""""" pos:end=""""""""589:90""""""""><name pos:start=""""""""589:73"""""""" pos:end=""""""""589:78"""""""">result</name><operator pos:start=""""""""589:79"""""""" pos:end=""""""""589:79"""""""">.</operator><name pos:start=""""""""589:80"""""""" pos:end=""""""""589:90"""""""">weightedRoc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Override  public   void   onStorageInfoResponse ( StorageInfoResponse   response )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: onStorageInfoResponse"""" ) ;  }
private   static   int   runEvalConfMat ( String   evalSetNames )   throws  Exception   {  EvalModelProcessor   p   =  new   EvalModelProcessor ( EvalStep . CONFMAT ,  evalSetNames ) ;  return  p . run () ;  }
@ Test  public   void   testRawCoordinate ()   {  Coordinate   coordinate   =  new   Coordinate ( """"1,1,0"""" ) ;  assertEquals ( 1 ,  coordinate . getX () ) ;  assertEquals ( 1 ,  coordinate . getY () ) ;  assertEquals ( 0 ,  coordinate . getZ () ) ;  }
 <argument pos:start=""""""""105:133"""""""" pos:end=""""""""105:136""""""""><expr pos:start=""""""""105:133"""""""" pos:end=""""""""105:136""""""""><name pos:start=""""""""105:133"""""""" pos:end=""""""""105:136"""""""">eyes</name></expr></argument>
@ Test  public   void   illegalCharFailure ()   {  assertFailure ( """"\\\\WINDOWS\\fileshare"""" ,  subject ,  """"[\\\\WINDOWS\\fileshare] is not a valid URI reference"""" ) ;  }
public   Chain < Boolean >   startsWith ( final   String   target )   {  return  new   Chain <> ( U . startsWith ( ( String )   item () ,  target ) ) ;  }
@ Override   public   DoubleIndexer   put ( long   i ,  double []   d ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  buffer . put ( ( int ) index ( i )   +   n ,  d [ offset   +   n ] ) ;  }  return  this ;  }
public   CronScheduleBuilder   parse ( String   cronExpression )   {  int   i   =  cronExpression . indexOf ( """"["""" ) ;  int   j   =  cronExpression . indexOf ( """"]"""" ) ;  TimeZone   timezone   =  defaultTimezone ;  if  ( i   >   - 1   &&   j   >   - 1 )   {  timezone   =   TimeZone . getTimeZone ( cronExpression . substring ( i   +   1 ,  j ) ) ;  cronExpression   =   cronExpression . substring ( 0 ,  i ) . trim () ;  }  return  CronScheduleBuilder . cronSchedule ( cronExpression ) . inTimeZone ( timezone ) ;  }
private   PermissionUser   getUser ( String   playerName )   {  return  PermissionsEx . getPermissionManager () . getUser ( playerName ) ;  }
 <argument pos:start=""""""""679:54"""""""" pos:end=""""""""679:62""""""""><expr pos:start=""""""""679:54"""""""" pos:end=""""""""679:62""""""""><literal type=""""""""string"""""""" pos:start=""""""""679:54"""""""" pos:end=""""""""679:62"""""""">""""""""#3465A4""""""""</literal></expr></argument>
@ EventHandler ( priority   =   EventPriority . LOWEST )  public   void   onEntityInteract ( EntityInteractEvent   event ) {  Block   block   =  event . getBlock () ;  Material   mat   =  block . getType () ;  Entity   entity   =  event . getEntity () ;  FlagPermissions   perms   =  Residence . getPermsByLoc ( block . getLocation () ) ;  boolean   hastrample   =  perms . has ( """"trample"""" ,  perms . has ( """"hasbuild"""" ,  true ) ) ;  if ( ! hastrample   &&   ! ( entity . getType ()   ==   EntityType . FALLING_BLOCK )   &&   ( mat   ==   Material . SOIL   ||   mat   ==   Material . SOUL_SAND ) ) {  event . setCancelled ( true ) ;  }  }
@ Test  void   refreshScopeNotIncluded ()   {  new   ApplicationContextRunner () . withUserConfiguration ( Beans . class ) . run ( c  ->  {  assertThat ( c ) . doesNotHaveBean ( """"foo"""" ) ;  assertThat ( c . getBean ( """"bar"""" ) ) . isEqualTo ( """"bar"""" ) ;  } ) ;  new   ApplicationContextRunner () . withUserConfiguration ( Beans . class )  . withPropertyValues ( """"eureka.client.refresh.enable=false"""" )  . run ( c  ->  {  assertThat ( c ) . doesNotHaveBean ( """"foo"""" ) ;  assertThat ( c . getBean ( """"bar"""" ) ) . isEqualTo ( """"bar"""" ) ;  } ) ;  }
public   InvitationRequest   userstore ( String   userstore )   {  this . userstore   =   userstore ;  return  this ;  }
int   compareDescriptors ( ByteBuffer   d1 ,  ByteBuffer   d2 ,  int   best )   {  int   totalCost   =  0 ;  assert  d1 . limit ()   -   d1 . position ()   ==   d2 . limit ()   -   d2 . position () ;  while  ( d1 . position ()   <   d1 . limit () )   {  totalCost   +=   bits [ ( d1 . get ()   ^   d2 . get () )   &   0xFF ] ;  if  ( totalCost   >   best )  break;  }  return  totalCost ;  }
@ Override  public   PsiElement   getSearchablePsiElement ( final   PsiElement   psiElement )   {  return  psiElement . getParent () ;  }
public   void   setScimSchemaExtensionSystem ( ScimSchemaExtensionSystem   scimSchemaExtensionSystem )   {  this . scimSchemaExtensionSystem   =   scimSchemaExtensionSystem ;  }
 <argument pos:start=""""""""423:99"""""""" pos:end=""""""""423:106""""""""><expr pos:start=""""""""423:99"""""""" pos:end=""""""""423:106""""""""><name pos:start=""""""""423:99"""""""" pos:end=""""""""423:106"""""""">normType</name></expr></argument>
public   InstanceSettings   setTaskWithoutDates ( TasksWithoutDates   taskWithoutDates )   {  this . taskWithoutDates   =   taskWithoutDates ;  return  this ;  }
@ Override  public   void   setTTSMode ( TTSMode   ttsMode )   {  this . ttsMode   =   ttsMode ;  }
@ Exported  public   float   getRatio ()   {  return  ratio . getPercentageFloat () ;  }
public   JSONObject   searchSubOrgUser ( String   userSearchReq ,  String   switchedM2MToken )   throws  Exception   {  String   endPointUrl   =  getSubOrgUsersPath ()   +   SCIM2_SEARCH_PATH ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpPost ( endPointUrl ,  userSearchReq , getHeadersWithBearerToken ( switchedM2MToken ) ) )   {  Assert . assertEquals ( response . getStatusLine () . getStatusCode () ,  HttpServletResponse . SC_OK , """"User search failed"""" ) ;  return  getJSONObject ( EntityUtils . toString ( response . getEntity () ) ) ;  }  }
@ Override  public   float   getZIndex ()   throws  RemoteException   {  return  0 ;  }
@ Override   public   void   release ()   {  commandQueue . putUnmapMemory ( pinnedBuffer ,  getByteBuffer () ) ;  pinnedBuffer . release () ;  cvReleaseImageHeader ( this ) ;  }
public   static   boolean   isMonetEnabled ()   {  return  Build . VERSION . SDK_INT   >=   Build . VERSION_CODES . S   &&   getSharedPreferences ( """"mmm"""" ) . getBoolean ( """"pref_enable_monet"""" ,  true ) ;  }
@ Override  public   Map < String ,  String >   getProjectProperties ()   {  return  Collections . emptyMap () ;  }
@ Override  public   void   onOpenChannelResponse ( OpenChannelResponse   response )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: onOpenChannelResponse"""" ) ;  }
public   void   assertSessionUpdateEvent ( Event   sessionEvent )   {  Object []   sessionObjects   =  sessionEvent . getPayloadData () ;  Assert . assertEquals ( sessionObjects [ 4 ] ,  2 ) ;  Assert . assertEquals ( sessionObjects [ 5 ] ,  """"samlAnalyticsuser1"""" ) ;  Assert . assertEquals ( sessionObjects [ 6 ] ,  """"PRIMARY"""" ) ;  }
@ AfterMethod ( alwaysRun   =   true )  public   void   endTest ()   throws  Exception   {  RestAssured . basePath   =   StringUtils . EMPTY ;  }
@ SuppressLint ( """"ApplySharedPref"""" )  @ Override  public   void   onActivityResumed ( @ NonNull   Activity   activity )   {  WppCore . mCurrentActivity   =   activity ;  WppCore . activities . add ( activity ) ;  triggerActivityState ( activity ,  WppCore . ActivityChangeState . ChangeType . RESUMED ) ;  }
private   void   showPermissionSnackBar ( String   message )   {  Snackbar . make ( getView () ,  message ,  Snackbar . LENGTH_LONG )  . setAction ( R . string . menu_settings ,  v  ->   new   AppSettingsDialog . Builder ( UploadSettingsFragment . this ) . build () . show () )  . show () ;  }
public   Info   getFirst ( String   cppName )   {  return  getFirst ( cppName ,  true ) ;  }
private   List < Account >   getAccounts ()   {  return  Arrays . asList ( getAccountManager () . getAccountsByType ( AmahiAccount . TYPE ) ) ;  }
public   static   < E >   E   firstOrNull ( final   Iterable < E >   iterable )   {  final   Iterator < E >   iterator   =  iterable . iterator () ;  return  iterator . hasNext ()  ?   iterator . next ()   :  null ;  }
public   static   Geofence   createCircle ( double   latitude ,  double   longitude ,  float   radius )   {  return  new   Geofence ( latitude ,  longitude ,  radius ) ;  }
@ Test  public   void   booleanDependency ()   {  ObjectSchema   actual   =  ( ObjectSchema )   TestSupport . loadAsV6 ( get ( """"booleanDependencies"""" ) ) ;  assertEquals ( actual . getSchemaDependencies () . get ( """"foo"""" ) ,  TrueSchema . builder () . build () ) ;  }
@ Override  public   LocationAvailability   getLocationAvailability ( GoogleApiClient   client )   {  try  {  return  LocationClientImpl . get ( client ) . getLocationAvailability () ;  }   catch  ( RemoteException   e )   {  Log . w ( TAG ,  e ) ;  return  null ;  }  }
@ Nullable  public   static   String   getAbsolutePathFromSAFUri ( Context   context ,  @ Nullable   final   Uri   safResultUri )   {  Uri   treeUri   =  DocumentsContract . buildDocumentUriUsingTree ( safResultUri , DocumentsContract . getTreeDocumentId ( safResultUri ) ) ;  return  getAbsolutePathFromTreeUri ( context ,  treeUri ) ;  }
@ Override  public   Uri   getBannerImageLandscapeUri ()   {  return  bannerImageLandscapeUri ;  }
public   void   addStuff ( String   thing )  {  this . getStuff () . add ( thing ) ;  }
@ Nls  @ NotNull  @ Override  public   String   getDisplayName ()   {  return  """"SonarQube Issue"""" ;  }
@ Override  public   boolean   playerHas ( String   world ,  String   player ,  String   permission )   {  return  perms . getXplayer () . hasPerm ( world ,  player ,  permission ) ;  }
public   String   genFieldSelector ()   {  List < String >   fields   =  new   ArrayList < String > () ;  for ( String   var :  selectedVars )   {  if ( this . varsMapping . containsKey ( var ) )   {  fields . add ( var   +   """" as """"   +   this . varsMapping . get ( var ) ) ;  }   else  {  fields . add ( var   +   """" as """"   +   var ) ;  }  }  return  StringUtils . join ( fields ,  """","""" ) ;  }
public   void   resetCounter ( String   key ,  int   value )  {  put ( key ,  value ) ;  }
@ Override   public   IntIndexer   put ( long   i ,  int   n )   {  return  putRaw ( index ( i ) ,  n ) ;  }
@ Override  @ NonNull  public   byte []   getChallenge ()   {  return  delegate . getChallenge () ;  }
public   static   List < NameValuePair >   extractConsentRequiredClaimsFromConsentPage ( String   redirectUrl )   throws  Exception   {  List < NameValuePair >   urlParameters   =  new   ArrayList <> () ;  List < String >   fetchedClaims   =  fetchClaimsfromConsentPage ( redirectUrl ) ;  for  ( String   claimConsent   :  fetchedClaims )   {  urlParameters . add ( new   BasicNameValuePair ( claimConsent ,  """"on"""" ) ) ;  }  return  urlParameters ;  }
@ Override  public   boolean   mayPlace ( ItemStack   stack )  {  return  stack . getItem ()   instanceof   DyeItem ;  }
public   int   read (  ReadableByteChannel   in )   throws  IOException   {  ByteBuffer   header   =  Util . fill (  in ,  HEADER_HEADER_SIZE ) ;  int   magic   =  header . getInt () ;  
@ Override  public   boolean   equals ( Object   object ) {  if ( object   instanceof   GithubSecurityRealm )   {  GithubSecurityRealm   obj   =  ( GithubSecurityRealm )   object ;  return  this . getGithubWebUri () . equals ( obj . getGithubWebUri () )   &&  this . getGithubApiUri () . equals ( obj . getGithubApiUri () )   &&  this . getClientID () . equals ( obj . getClientID () )   &&  this . getClientSecret () . equals ( obj . getClientSecret () )   &&  this . getOauthScopes () . equals ( obj . getOauthScopes () ) ;  }   else  {  return  false ;  }  }
private   String   genGroupByClauses ( List < String >   relations ,  String   uidColumnName )   {  List < String >   groupByClauses   =  new   ArrayList < String > () ;  for ( String   relation :  relations )   {  groupByClauses . add ( relation   +   """" by """"   +   uidColumnName ) ;  }  return  StringUtils . join ( groupByClauses ,  """","""" ) ;  }
@ JsonIgnore  public   List < Set < String > >   getSetTags ()   {  return  getSetTags ( dataSet . getPosTags () ,  dataSet . getNegTags () ) ;  }
public   static   double   getModifiedAimDownSightSpeed ( ItemStack   weapon ,  double   speed )  {  for ( int   i   =  0 ;   i   <   IAttachment . Type . values () . length ;   i ++ )  {  IGunModifier []   modifiers   =  getModifiers ( weapon ,  IAttachment . Type . values () [ i ] ) ;  for ( IGunModifier   modifier   :  modifiers )  {  speed   =   modifier . modifyAimDownSightSpeed ( speed ) ;  }  }  return  Mth . clamp ( speed ,  0.01 ,  Double . MAX_VALUE ) ;  }
public   File   getResamplerPath ()   {  if  ( resamplerPath   !=   null )   {  return  resamplerPath ;  }  return  preferencesManager . getResampler () ;  }
public   static   boolean   isUnchanged ( Changed   changed )   {  return  changed   ==   null   ||   changed . isUnchanged () ;  }
@ Override  public   @ Nullable   Void   visitVariable ( VariableTree   variable ,  @ Nullable   Void   p )   {  patternVariableNames . add ( variable . getName () . toString () ) ;  return  null ;  }
default   byte []   readRegisterNBytes ( int   register ,  int   length )   {  return  readRegisterNBytes ( register ,  0 ,  length ) ;  }
@ NotNull  public   AssertableList   getCompletions ( @ NotNull   String   caretFileNoExt ,  @ NotNull   Format   fileKind )   {  String   fullName   =  fileKind . getFileNameWithExtension ( caretFileNoExt ) ;  return  getCompletions ( fullName ) ;  }
public   void   applyWeaponScale ( ItemStack   heldItem ,  PoseStack   stack )  {  if ( heldItem . getTag ()   !=   null )  {  CompoundTag   compound   =  heldItem . getTag () ;  if ( compound . contains ( """"Scale"""" ,  Tag . TAG_FLOAT ) )  {  float   scale   =  compound . getFloat ( """"Scale"""" ) ;  stack . scale ( scale ,  scale ,  scale ) ;  }  }  }
@ Override  public   void   error ( String   content )   {  infoLogger . add ( """"[ERROR] """"   +   content ) ;  }
@ Override  protected   Void   call ()   {  songReader   =   songReaderManager . getSongReader ( file ) ;  
@ Override  public   void   onMoreOptionClick ( View   view ,  int   position )   {  setItemSelected ( position ) ;  if  ( getListAdapter () . getAdapterMode ()   !=   FilesFilterAdapter . AdapterMode . OFFLINE )   {  Fragments . Builder . buildFileOptionsDialogFragment ( getContext () ,  getCheckedFile () )  . show ( getChildFragmentManager () ,  """"file_options_dialog"""" ) ;  }   else  {  Fragments . Builder . buildOfflineFileOptionsDialogFragment ( getCheckedFile () )  . show ( getChildFragmentManager () ,  """"file_options_dialog"""" ) ;  }  }
public   static   boolean   isPermissionRequired ()   {  return  Build . VERSION . SDK_INT   >=   Build . VERSION_CODES . M ;  }
@ Override  public   @ Nullable   ComponentPath   nextFocusPath ( FocusNavigationEvent   event )   {  if  ( event   instanceof   FocusNavigationEvent . ArrowNavigation   arrow   &&   arrow . direction () . getAxis ()   ==   ScreenAxis . HORIZONTAL )   {  return  null ;  }  if  ( event   instanceof   FocusNavigationEvent . InitialFocus )   {  return  null ;  }  return  super . nextFocusPath ( event ) ;  }
String   mavenLocal ()   {  String   repo   =  getProperty ( MAVEN_REPO_LOCAL ) ;  if  ( repo   !=   null )   {  return  repo ;  }  return  mavenLocal ( null ) ;  }
@ Test  public   void   nonPresentKeywordDoesNotTriggerBuild ()  throws  ProcessingException  {  final   ObjectNode   node   =  FACTORY . objectNode () ;  node . put ( K1 ,  K1 ) ;  final   SchemaTree   schemaTree  =  new   CanonicalSchemaTree ( SchemaKey . anonymousKey () ,  node ) ;  final   SchemaContext   context  =  new   SchemaContext ( schemaTree ,  NodeType . NULL ) ;  final   ProcessingReport   report   =  mock ( ProcessingReport . class ) ;  schemaDigester . process ( report ,  context ) ;  verify ( digester1 ) . digest ( node ) ;  verify ( digester2 ,  never () ) . digest ( any ( JsonNode . class ) ) ;  }
@ Nullable  public   Entry   getEntryAt ( double   x ,  double   y )   {  return  getEntryAtPosition ( x ,  y ) ;  }
public   ValidatorBuilder   readWriteContext ( ReadWriteContext   readWriteContext )   {  this . readWriteContext   =   readWriteContext ;  return  this ;  }
protected   JsonObject   getJsonObjectFromFile ( String   filename )   throws  Exception   {  String   jsonString   =  readResource ( filename ) ;  JsonElement   jsonElement   =  JsonParser . parseString ( jsonString ) ;  if  ( jsonElement . isJsonObject () )   {  return  jsonElement . getAsJsonObject () ;  }   else  {  throw  new   Exception ( """"The JSON file does not contain a valid JSON object: """"   +   filename ) ;  }  }
 <argument pos:start=""""""""1110:62"""""""" pos:end=""""""""1110:68""""""""><expr pos:start=""""""""1110:62"""""""" pos:end=""""""""1110:68""""""""><literal type=""""""""string"""""""" pos:start=""""""""1110:62"""""""" pos:end=""""""""1110:68"""""""">""""""""false""""""""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   boolean   doActionLong ( Chip   button ,  ModuleHolder   moduleHolder )   {  return  false ;  }
public   String   getModelConfigPath ()   {  return  getPathBySourceType ( Constants . LOCAL_MODEL_CONFIG_JSON ,  SourceType . LOCAL ) ;  }
@ Override  public   void   onError ( WebSocket   conn ,  Exception   ex )   {  fail ( """"There should be no exception!"""" ) ;  }
public   void   setThresholdHigh ( double   thresholdHigh )   {  this . thresholdHigh   =   thresholdHigh ;  }
public   static   String   guessJpPrefix ( String   lyric ,  VoicebankData   voicebankData )   {  for  ( String   prefix   :  voicebankData . getPresampConfig () . getPrefixes () )   {  if  ( lyric . startsWith ( prefix ) )   {  return  prefix ;  }  }  return  """""""" ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  InboundProtocolListItem   inboundProtocolItem   =  ( InboundProtocolListItem )   o ;  return  Objects . equals ( this . type ,  inboundProtocolItem . type )   &&  Objects . equals ( this . name ,  inboundProtocolItem . name )   &&  Objects . equals ( this . self ,  inboundProtocolItem . self ) ;  }
@ Override  protected   void   setup ( Context   context )   throws  IOException ,  InterruptedException   {  this . outputValue   =   new   Text () ;  }
@ Test ( dependsOnMethods   =   """"shareB2BApplication"""" )  public   void   unShareB2BApplication ()   throws  JSONException   {  if  ( ! SUPER_TENANT_DOMAIN . equals ( tenant ) )   {  return;  }  String   shareApplicationUrl   =  ORGANIZATION_MANAGEMENT_API_BASE_PATH   +   """"/""""   +   SUPER_ORGANIZATION_ID  +   """"/applications/""""   +   b2bApplicationID   +   """"/share"""" ;  org . json . JSONObject   shareAppObject   =  new   org . json . JSONObject () ;  shareAppObject . put ( """"shareWithAllChildren"""" ,  false ) ;  getResponseOfPost ( shareApplicationUrl ,  shareAppObject . toString () ) ;  }
protected   String   getBundleJarPath ()   throws  MalformedURLException   {  Path   path   =  PROPERTIES . getAllureHome () . resolve ( """"app/allure-bundle.jar"""" ) . toAbsolutePath () ;  if  ( Files . notExists ( path ) )   {  throw  new   AllureCommandException ( String . format ( """"Bundle not found by path <%s>"""" ,  path ) ) ;  }  return  path . toUri () . toURL () . toString () ;  }
@ Override  protected   void   beforeHookedMethod ( MethodHookParam   param )   throws  Throwable   {  var   pairs   =  ReflectionUtils . findArrayOfType ( param . args ,  List . class ) ;  for  ( var   pair   :  pairs )   {  param . args [ pair . first ]   =   new   ArrayList <> () ;  }  }
@ Override  public   byte []   decrypt ( byte []   encryptedBytes )   {  if  ( encryptedBytes   ==   null )   {  return  null ;  }   else  {  return  aesCipherService . decrypt ( encryptedBytes ,  key ) . getBytes () ;  }  }
@ Override  public   void   onEnabled ( Context   context )   {  Log . d ( TAG ,  """"onEnabled, context:""""   +   context ) ;  super . onEnabled ( context ) ;  }
public   HybridFlowConfiguration   enable ( Boolean   enable )   {  this . enable   =   enable ;  return  this ;  }
public   static   boolean   isNotSampled ( List < String >   posTags ,  List < String >   negTags ,  double   sampleRate , boolean   sampleNegOnly ,  String   tag )   {  if ( tag   ==   null )   {  log . error ( """"Tag is null."""" ) ;  return  true ;  }  if ( ! ( posTags . contains ( tag )   ||   negTags . contains ( tag ) ) )   {  log . error ( """"Invalid target column value - """"   +   tag ) ;  return  true ;  }  if ( sampleNegOnly )   {  return  ( negTags . contains ( tag )   &&   rd . nextDouble ()   >   sampleRate ) ;  }   else  {  return  ( rd . nextDouble ()   >   sampleRate ) ;  }  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  PropertyDTO   propertyDTO   =  ( PropertyDTO )   o ;  return  Objects . equals ( this . key ,  propertyDTO . key )   &&  Objects . equals ( this . value ,  propertyDTO . value ) ;  }
@ Override  protected   void   afterHookedMethod ( MethodHookParam   param )   throws  Throwable   {  super . afterHookedMethod ( param ) ;  var   colors   =  IColors . colors ;  var   activity   =  ( Activity )   param . thisObject ;  var   view   =  activity . findViewById ( android . R . id . content ) . getRootView () ;  replaceColors ( view ,  colors ) ;  }
@ Override  public   MutateResponse   standardizeNotes ( int   firstPos ,  int   lastPos )   {  
@ Test  void   withoutUserInfo ()   {  EurekaHttpClient   eurekaHttpClient   =  transportClientFactory  . newClient ( new   DefaultEndpoint ( """"http:
@ Test  public   void   hasContents_failure ()   {  expectFailure  . whenTesting ()  . about ( javaFileObjects () )  . that ( CLASS_WITH_FIELD )  . hasContents ( JavaFileObjects . asByteSource ( DIFFERENT_NAME ) ) ;  AssertionError   expected   =  expectFailure . getFailure () ;  assertThat ( expected . getMessage () ) . contains ( CLASS_WITH_FIELD . getName () ) ;  }
public   void   stopTracking ( long   trackId )   {  Uri   trackUri   =  ContentUris . withAppendedId ( TrackContentProvider . CONTENT_URI_TRACK ,  trackId ) ;  ContentValues   values   =  new   ContentValues () ;  values . put ( TrackContentProvider . Schema . COL_ACTIVE ,  TrackContentProvider . Schema . VAL_TRACK_INACTIVE ) ;  contentResolver . update ( trackUri ,  values ,  null ,  null ) ;  }
private   Drawable   getServerBubble ( ArrayList < String >   serverList ,  int   position )   {  
private   static   String []   getMapEntryValue ( final   List < String >   fieldValueList )   {  return  fieldValueList . get ( RandomUtils . nextInt ( 0 ,  fieldValueList . size () ) ) . trim () . split ( """":"""" ) ;  }
@ Override  public   List < IServerDataProvider < EntityAccessor > >   shouldRequestData ( EntityAccessor   accessor )   {  List < IServerDataProvider < EntityAccessor > >   providers   =  WailaCommonRegistration . instance ()  . getEntityNBTProviders ( accessor . getEntity () ) ;  if  ( providers . isEmpty () )   {  return  List . of () ;  }  return  providers . stream () . filter ( provider  ->   provider . shouldRequestData ( accessor ) ) . toList () ;  }
@ Override  public   void   sendFrame ( Framedata   framedata )   {  engine . sendFrame ( framedata ) ;  }
public   EmailSenderUpdateRequest   userName ( String   userName )   {  this . userName   =   userName ;  return  this ;  }
@ Override  public   List < InputSplit >   getSplits ( JobContext   job )   throws  IOException   {  List < InputSplit >   newSplits   =  super . getSplits ( job ) ;  String   testDirs   =  job . getConfiguration () . get ( """"shifu.crossValidation.dir"""" ,  """""""" ) ;  LOG . info ( """"Validation dir is {};"""" ,  testDirs ) ;  if ( org . apache . commons . lang . StringUtils . isNotBlank ( testDirs ) )   {  this . addCrossValidationDataset ( newSplits ,  job ) ;  }  return  newSplits ;  }
@ Test  public   void   thatResponseContentKeysAreSuggested ()   {  getCaretCompletions ( """"response_content"""" ) . assertContainsOne ( """"application/json"""" ) . isOfSize ( 77 ) ;  }
public   int   getZSize ()   {  return  ( highPoints . getBlockZ ()   -   lowPoints . getBlockZ () )   +   1 ;  }
public   static   < T >   List < T >   checkNotNullElements ( List < T >   references )   {  if  ( references   ==   null )   {  throw  new   NullPointerException () ;  }  for  ( T   reference   :  references )   {  checkNotNull ( reference ) ;  }  return  references ;  }
@ Override  public   final   void   reset ()   {  this . globalError   =   0 ;  this . setSize   =   0 ;  }
public   boolean   completeSchemaItemsKey ()   {  return  pathResolver . childOfSchemaItems ( psiElement ) ;  }
@ Override  public   Connection   getConnection ( final   String   username , final   String   password )   {  throw  new   UnsupportedOperationException ( """"#getConnection()"""" ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( oldRequestBody ,  newRequestBody ,  context ,  changeRequired ,  description ,  content ,  extensions ) ;  }
public   Builder   addScope ( Scope   scope )   {  scopes . add ( scope . getScopeUri () ) ;  return  this ;  }
public   Value   withoutAllowSetters ()   {  return  ! _allowSetters  ?   this   : construct ( _ignored ,  _ignoreUnknown ,  _allowGetters ,  false ,  _merge ) ;  }
@ Override  public   Void   run ()   throws  Exception   {  runCopyTdToHdfs () ;  return  null ;  }
@ Override  public   void   read ( DataReader   in )   throws  IOException   {  in . readBytes ( hash ) ;  }
public   Node   applyQuietly ( final   Node   dom )   {  try  {  return  this . apply ( dom ) ;  }   catch  ( final   ImpossibleModificationException   ex )   {  throw  new   IllegalArgumentException ( String . format ( """"Failed to apply to DOM quietly: %s"""" , this . directives ) , ex ) ;  }  }
@ SuppressWarnings ( """"ApplySharedPref"""" )  public   void   saveMethod ( String   key ,  Method   method )   {  String   value   =  method . getDeclaringClass () . getName ()   +   """":""""   +   method . getName () ;  if  ( method . getParameterTypes () . length   >   0 )   {  value   +=   """":""""   +   Arrays . stream ( method . getParameterTypes () ) . map ( Class :: getName ) . collect ( Collectors . joining ( """","""" ) ) ;  }  sPrefsCacheHooks . edit () . putString ( key ,  value ) . commit () ;  }
private   static   void   setC4TmpDirPath ()   {  synchronized  ( LOCK )   {   C4Base . setTempDir ( tmpDirPath ) ;   }  }
public   static   void   assertNotNull ( String   message ,  Object   object )   {  assertTrue ( message ,  object   !=   null ) ;  }
@ Override  public   boolean   isValidValue ( Object   value )   {  return  value . getClass ()   ==   defaultValue () . getClass () ;  }
private   void   assertCallbackCompletions ( final   AssertableList   completions )   {  completions  . assertContains ( """"$ref"""" , """"description"""" , """"summary"""" , """"get"""" , """"put"""" , """"post"""" , """"delete"""" , """"options"""" , """"head"""" , """"patch"""" , """"trace"""" , """"servers"""" , """"parameters"""" )  . isOfSize ( 13 ) ;  }
@ Override  public   void   onClick ( View   v )  {  getContext () . startActivity ( new   Intent ( getContext () ,  FileBrowser . class ) ) ;  }
public   void   addDependencyMore (  final   CharSequence   name ,  final   CharSequence   version )   {  addDependency (  name ,  version ,  GREATER   |   EQUAL ) ;  }
public   void   updateUserListOfRole ( String   roleName ,  String []   deleteUsers ,  String []   newUsers )  throws  RemoteUserStoreManagerServiceUserStoreExceptionException ,  RemoteException   {  remoteUserStoreManagerServiceStub . updateUserListOfRole ( roleName ,  deleteUsers ,  newUsers ) ;  }
public   static   void   main ( String []   args )   {  File   outFolder   =  new   File ( docFolder ) ;  if  ( ! outFolder . exists () )  outFolder . mkdirs () ;  String []   options   =  new   String []   {  """"-docletpath"""" ,  """"build"""" ,  """"-private"""" ,  """"--d"""" ,  docFolder , """"-sourcepath"""" ,  sourcesFolder ,  """"-subpackages"""" ,  """"gr.spinellis""""  } ;  runDoclet ( options ) ;  }
@ Hide  public   static   TokenBindingStatus   fromString ( String   str )   throws  UnsupportedTokenBindingStatusException   {  for  ( TokenBindingStatus   value   :  values () )   {  if  ( value . value . equals ( str ) )   return  value ;  }  throw  new   UnsupportedTokenBindingStatusException ( """"TokenBindingStatus """"   +   str   +   """" not supported"""" ) ;  }
private   List < Object >   createFinalArray ( final   SchemaProcessorPOJO   pojo )   {  return  ( ArrayList )   AVRO_GENERATOR_TOOL . generateArray ( pojo . getFieldNameSubEntity () ,  SchemaProcessorUtils . getOneDimensionValueType ( pojo . getValueType () ) ,  pojo . getValueLength () , pojo . getFieldValuesList () ,  pojo . getFieldSize () ,  Collections . emptyMap () ) ;  }
private   static   String   binaryToRoman ( int   binary )  {  if  ( binary   <=   0   ||   binary   >=   4000 )  throw  new   NumberFormatException ( """"Value outside roman numeral range."""" ) ;  String   roman   =  """""""" ;   
@ RequirePOST  @ Restricted ( NoExternalUse . class )  public   FormValidation   doCheckPattern ( @ QueryParameter   String   value )   {  try  {  Pattern . compile ( value ) ;  }   catch  ( PatternSyntaxException   pse )   {  return  FormValidation . error ( pse . getMessage () ) ;  }  return  FormValidation . ok () ;  }
JSONWriter   object ()   throws  JSONException   {  if  ( this . mode   ==   'i' )   {  this . mode   =   'o' ;  }  if  ( this . mode   ==   'o'   ||   this . mode   ==   'a' )   {  this . append ( """"{"""" ) ;  this . push ( new   JSONObject () ) ;  this . comma   =   false ;  return  this ;  }  throw  new   JSONException ( """"Misplaced object."""" ) ;  }
@ Override   public   IntIndexer   get ( long   i ,  long   j ,  int []   m ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  m [ offset   +   n ]   =   array [ ( int ) index ( i ,  j )   +   n ] ;  }  return  this ;  }
@ Override  public   final   Object   generateRecord ()   {  return  entity . get ( """"root"""" ) ;  }
private   static   boolean   areAssertionsEnabled ()   {  boolean   debug   =  false ;  assert  debug   =   true ;  return  debug ;  }
private   static   < T   extends  Block >   RegistryObject < T >   register ( String   id ,  Supplier < T >   blockSupplier ,  @ Nullable   Function < T ,  BlockItem >   supplier )  {  RegistryObject < T >   registryObject   =  REGISTER . register ( id ,  blockSupplier ) ;  if ( supplier   !=   null )  {  ModItems . REGISTER . register ( id ,  ()  ->   supplier . apply ( registryObject . get () ) ) ;  }  return  registryObject ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  userMgtClient . deleteUser ( userId1 ) ;  }
private   String   calculateDigest ( byte []   data )   {  try  {  return  Base64 . encodeToString ( MessageDigest . getInstance ( """"SHA1"""" ) . digest ( data ) ,  Base64 . NO_WRAP   |   Base64 . NO_PADDING   |   Base64 . URL_SAFE ) ;  }   catch  ( NoSuchAlgorithmException   e )   {  throw  new   RuntimeException ( e ) ;  }  }
private   void   inflateRow ( TableLayout   layout )   throws  XmlPullParserException ,  IOException   {  TableRow   tblRow   =  new   TableRow ( layout . getContext () ) ;  tblRow . setLayoutParams ( new   TableLayout . LayoutParams ( TableLayout . LayoutParams . FILL_PARENT , TableLayout . LayoutParams . FILL_PARENT ,  1 ) ) ;  String   currentTagName   =  null ;  
@ Test  void   attributeCalledXmlnsShouldNotBePrinted ()   {  var   document   =  createXmlFragment () ;  document . getRootElement () . setAttributes ( singletonList ( new   DefaultAttribute ( """"xmlns"""" ,  """"value"""" ) ) ) ;  var   xmlOutputGenerator   =  new   XmlOutputGenerator () ;  xmlOutputGenerator . setup ( PluginParameters . builder () . setFormatting ( """"\n"""" ,  true ,  true ,  false ,  true ) . build () ) ;  var   sortedXml   =  xmlOutputGenerator . getSortedXml ( document ) ;  assertThat ( sortedXml ,  is ( equalTo ( """"<?xml version=\""""1.0\"""" encoding=\""""UTF-8\""""?>\n<Gurka></Gurka>\n"""" ) ) ) ;  }
@ Override  public   void   execute ()   throws  MojoFailureException   {  var   mavenLogger   =  new   MavenLogger ( getLog () ,  quiet ) ;  if  ( skip )   {  mavenLogger . info ( """"Skipping Sortpom"""" ) ;  }   else  {  setup ( mavenLogger ) ;  sortPom () ;  }  }
public   static   TextShading   fromName ( String   themeName ,  TextShading   defaultShading )   {  try  {  return  TextShading . valueOf ( themeName ) ;  }   catch  ( Exception   e )   {  return  defaultShading ;  }  }
@ Test  public   void   singleRelationshipProperty_returnsSingleValuedList ()   {  long   node   =  graph . createNode ( """"foo"""" ) ;  long   relationship   =  graph . createRelationship ( node ,  node ,  TYPE ) ;  graph . setRelationshipProperty ( relationship ,  """"bar"""" ,  """"baz"""" ) ;  assertThat ( graph . getRelationshipProperties ( relationship ,  """"bar"""" ,  String . class ) ,  contains ( """"baz"""" ) ) ;  }
private   void   sync ( boolean   state )   throws  IOException   {  members . forEach ( m -> {  try  {  if  ( state )  m . on () ;  else  m . off () ;  }  catch  ( IOException   e ) {  logger . error ( e . getMessage () ,  e ) ;  }  } ) ;  }
public   Map < String ,  Object >   save ()   {  Map < String ,  Object >   root   =  new   LinkedHashMap <> () ;  root . put ( """"LastKnownPlayerNames"""" ,  cachedPlayerNameUUIDs ) ;  root . put ( """"PlayerFlags"""" ,  playerFlags ) ;  root . put ( """"GroupFlags"""" ,  groupFlags ) ;  root . put ( """"AreaFlags"""" ,  cuboidFlags ) ;  return  root ;  }
@ Override  public   Player   createFromParcel ( Parcel   source )   {  return  PlayerEntity . CREATOR . createFromParcel ( source ) ;  }
@ Override  public   boolean   playerAddGroup ( String   world ,  String   player ,  String   group )   {  Group   g   =  privs . getGroupManager () . setGroup ( player ,  group ) ;  return  g   !=   null ;  }
private   static   void   addTestString ( Map < String ,  byte [] >   tests ,  byte []   ctrl , String   str )   {  byte []   sb   =  str . getBytes ( StandardCharsets . UTF_8 ) ;  byte []   bytes   =  new   byte [ ctrl . length   +   sb . length ] ;  System . arraycopy ( ctrl ,  0 ,  bytes ,  0 ,  ctrl . length ) ;  System . arraycopy ( sb ,  0 ,  bytes ,  ctrl . length ,  sb . length ) ;  tests . put ( str ,  bytes ) ;  }
public   static   Boolean   getBoolean ( Map < ? ,  ? >   params ,  String   key ,  Boolean   defval )   {  Boolean   val   =  defval ;  if ( MapUtils . isNotEmpty ( params )   &&   params . containsKey ( key ) )   {  Object   obj   =  params . get ( key ) ;  if ( obj   !=   null )   {  try  {  val   =   Boolean . valueOf ( StringUtils . trimToEmpty ( obj . toString () ) ) ;  }   catch  ( Exception   e )   {  LOG . warn ( """"Export boolean value for {} in params, but got {}"""" ,  key ,  obj ,  e ) ;  }  }  }  return  val ;  }
@ Test  public   void   toStringWithNullableFalseTest ()   {  JSONObject   rawSchemaJson   =  ResourceLoader . DEFAULT . readObj ( """"tostring/stringschema.json"""" ) ;  rawSchemaJson . put ( """"nullable"""" ,  false ) ;  String   actual   =  loadWithNullableSupport ( rawSchemaJson ) . toString () ;  assertThat ( new   JSONObject ( actual ) ,  sameJsonAs ( rawSchemaJson ) ) ;  }
@ Override  public   List < Component >   getDescriptionOnShift ()   {  if  ( id   ==   null )   {  return  List . of () ;  }  return  List . of ( Component . literal ( id . toString () ) . withStyle ( ChatFormatting . GRAY ) ) ;  }
private   void   getComboItemValues ( final   Class < ? >   targetClass )   {  final   Reflections   reflections   =  new   Reflections ( new   ConfigurationBuilder ()  . addUrls ( ClasspathHelper . forClass ( targetClass ) )  . setScanners ( Scanners . SubTypes ) ) ;  ReflectionUtils . extractSerializers ( nameStrategyComboBox ,  reflections ,  targetClass ) ;  }
@ Inject ( method   =   """"accept"""" ,  at   =   @ At ( value   =   """"INVOKE"""" ,  target   =   """"Lnet/minecraft/network/chat/Style;isObfuscated()Z"""" ) ,  cancellable   =   true )  private   void   jade$accept ( int   i ,  Style   style ,  int   j ,  CallbackInfoReturnable < Boolean >   cir ,  @ Local   GlyphInfo   glyphInfo )   {  if  ( this$0 . getClass ()   ==   JadeFont . class   &&   JadeFont . isTooLarge ( glyphInfo ,  this$0 . lineHeight ) )   {  cir . setReturnValue ( false ) ;  }  }
@ Override   public   ReferenceSchema . Builder   title ( String   title )   {  if  ( retval   !=   null )   {  retval . title   =   title ;  }  super . title ( title ) ;  return  this ;  }
public   static   List < Field >   operation ()   {  return  ImmutableList . of ( new   ArrayField ( """"tags"""" ) , new   StringField ( """"summary"""" ) , new   StringField ( """"description"""" ) , new   ExternalDocsField () , new   StringField ( """"operationId"""" ) , new   ArrayField ( """"parameters"""" ) , new   ObjectField ( """"requestBody"""" ) , new   ObjectField ( """"responses"""" ,  true ) , new   ObjectField ( """"callbacks"""" ) , new   StringField ( """"deprecated"""" ) , new   ArrayField ( """"security"""" ) , new   ArrayField ( """"servers"""" ) ) ;  }
public   String   exportApplication ( String   spName ,  boolean   exportSecret )   throws  Exception   {  try  {  if  ( debugEnabled )   {  log . debug ( """"Exporting Service Provider """"   +   spName ) ;  }  return  stub . exportApplication ( spName ,  exportSecret ) ;  }   catch  ( RemoteException  |  IdentityApplicationManagementServiceIdentityApplicationManagementException   e )   {  log . error ( e . getMessage () ,  e ) ;  throw  new   Exception ( e . getMessage () ) ;  }  }
protected   boolean   fileFilter ( Path   file )   {  return  Files . isRegularFile ( file ) ;  }
protected   Optional < InetAddress >   asInetAddress ( final   String   subject )   {  if  ( subject   ==   null )  return  Optional . empty () ;  try  {  return  Optional . of ( InetAddress . getByName ( subject ) ) ;  }   catch  ( UnknownHostException   e )   {  return  Optional . empty () ;  }  }
private   void   addUser ()   throws  Exception   {  UserObject   userInfo   =  new   UserObject () ;  userInfo . setUserName ( TEST_USER ) ;  userInfo . setPassword ( ADMIN_WSO2 ) ;  userInfo . setName ( new   Name () . givenName ( TEST_USER_GIVEN ) ) ;  userInfo . addEmail ( new   Email () . value ( TEST_USER_GMAIL_COM ) ) ;  userId   =   scim2RestClient . createUser ( userInfo ) ;  }
@ Override  public   boolean   groupHas ( String   worldName ,  String   groupName ,  String   permission )   {  if  ( ! groupManager . doesGroupExist ( groupName ) )   {  return  false ;  }  return  groupManager . getGroup ( groupName ) . getPermission ( permission ,  worldName ) ;  }
 &amp;count) == KERN_SUCCESS) {""""""""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   MenuItem   displayMenu ( List < MenuItem >   m )   {  int   i   =  1 ;  for  ( MenuItem   menuItem :  m )   {  commandMap . put ( String . valueOf ( i ) ,  menuItem ) ;  commandMap . put ( menuItem . getKey () ,  menuItem ) ;  for  ( String   command :  menuItem . getAltCommands () )   {  commandMap . put ( command . toLowerCase () ,  menuItem ) ;  }  i   ++ ;  }  MenuItem   selectedItem   =  selectMenu ( m ) ;  return  selectedItem ;  }
@ Override  public   float []   forward ( float []   inputs )   {  this . lastInput   =   inputs ;  float []   outputs   =  new   float [ inputs . length ] ;  for ( int   i   =  0 ;   i   <   inputs . length ;   i ++ )   {  outputs [ i ]   =   Math . max ( 0 ,  inputs [ i ] ) ;  }  return  outputs ;  }
@ Override  public   Builder   connectTimeout ( long   timeout ,  TimeUnit   unit )   {  throw  new   RuntimeException ( """"connectTimeout not implemented for Google App Engine"""" ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( id ,  name ,  displayName ,  isEnabled ,  definedBy ,  type ,  image ,  description ,  tags ,  self ) ;  }
@ DataProvider  public   Iterator < Object [] >   supported ()  {  return  SampleNodeProvider . getSamples ( SUPPORTED ) ;  }
@ Test  public   void   testEmpty ()  {  assertEquals ( Nulls . DEFAULT ,  EMPTY . getValueNulls () ) ;  assertEquals ( Nulls . DEFAULT ,  EMPTY . getContentNulls () ) ;  assertEquals ( JsonSetter . class ,  EMPTY . valueFor () ) ;  assertNull ( EMPTY . nonDefaultValueNulls () ) ;  assertNull ( EMPTY . nonDefaultContentNulls () ) ;  }
public   void   setValuesFromSonarConsoleSettings ( SonarConsoleSettings   settings )   {  if  ( null   ==   settings )   return;  myShowSonarQubeToolWindowCheckBox . setSelected ( settings . isShowSonarConsoleOnAnalysis () ) ;  }
protected   JCommander   addSubCommand ( String   commandName ,  Command   commandObj )   {  commander . addCommand ( commandName ,  commandObj ) ;  JCommander   subCommander   =  commander . getCommands () . get ( commandName ) ;  commandObj . init ( subCommander ,  out ) ;  return  subCommander ;  }
@ Override  public   Api . Client   build ( Cast . CastOptions   options ,  Context   context ,  Looper   looper ,  ApiClientSettings   clientSettings ,  ConnectionCallbacks   callbacks ,  OnConnectionFailedListener   connectionFailedListener )   {  return  new   CastClientImpl ( context ,  options ,  callbacks ,  connectionFailedListener ) ;  }
@ Test  public   void   thatHeaderRefValueIsSuggested ()   {  getCaretCompletions ( """"header_ref"""" ) . assertContains ( """"#/components/headers/Header"""" ) . isOfSize ( 1 ) ;  }
public   PendingIntent   getErrorResolutionPendingIntent ( Context   context ,  int   errorCode ,  int   requestCode )   {  
@ Override  public   void   setGroupInfoDouble ( String   world ,  String   group ,  String   node ,  double   defaultValue )   {  throw  new   UnsupportedOperationException ( """"rscPermissions does not support info nodes"""" ) ;  }
@ DataBoundSetter  public   void   setFailUnhealthy ( boolean   failUnhealthy )   {  this . failUnhealthy   =   failUnhealthy ;  }
@ Test  public   void   testBuildGPXFilenameUsingOnlyTrackName ()   {  String   trackNameInDatabase   =  """"MyTrack"""" ;  Date   trackStartDate   =  createDateFrom ( 2000 ,  1 ,  2 ,  3 ,  4 ,  5 ) ;  String   preferenceSetting   =  Preferences . VAL_OUTPUT_FILENAME_NAME ;  String   expectedFilename   =  """"MyTrack"""" ;  if ( ! ( Preferences . VAL_OUTPUT_FILENAME_LABEL . equals ( """""""" ) ) ) expectedFilename   +=   """"_"""" ;  expectedFilename   +=   Preferences . VAL_OUTPUT_FILENAME_LABEL + """".gpx"""" ;  doTestBuildGPXFilename ( trackNameInDatabase ,  preferenceSetting ,  trackStartDate . getTime () ,  expectedFilename ) ;  }
protected   void   setupLocalRepository ()   throws  Exception   {  localRepositoryGit   =  Git . cloneRepository ()  . setURI ( remoteRepository . toFile () . toURI () . toString () )  . setDirectory ( localRepository . toFile () )  . setBranch ( """"master"""" )  . call () ;  StoredConfig   config   =  localRepositoryGit . getRepository () . getConfig () ;  config . setString ( ConfigConstants . CONFIG_BRANCH_SECTION ,  """"master"""" ,  """"remote"""" ,  """"origin"""" ) ;  config . setString ( ConfigConstants . CONFIG_BRANCH_SECTION ,  """"master"""" ,  """"merge"""" ,  """"refs/heads/master"""" ) ;  config . save () ;  }
private   static   Map < Direction ,  Map < Parity ,  String > >   createNeighbours ()   {  Map < Direction ,  Map < Parity ,  String > >   m   =  createDirectionParityMap () ;  m . get ( Direction . RIGHT ) . put ( Parity . EVEN ,  """"bc01fg45238967deuvhjyznpkmstqrwx"""" ) ;  m . get ( Direction . LEFT ) . put ( Parity . EVEN ,  """"238967debc01fg45kmstqrwxuvhjyznp"""" ) ;  m . get ( Direction . TOP ) . put ( Parity . EVEN ,  """"p0r21436x8zb9dcf5h7kjnmqesgutwvy"""" ) ;  m . get ( Direction . BOTTOM ) . put ( Parity . EVEN ,  """"14365h7k9dcfesgujnmqp0r2twvyx8zb"""" ) ;  addOddParityEntries ( m ) ;  return  m ;  }
@ Override  public   void   createFieldEditors ()   {  addField ( new   BooleanFieldEditor ( CSS_PREFERENCES_HOVER_DOCUMENTATION , Messages . CSSHoverPreferencePage_hover_documentation ,  getFieldEditorParent () ) ) ;  addField ( new   BooleanFieldEditor ( CSS_PREFERENCES_HOVER_REFERENCES , Messages . CSSHoverPreferencePage_hover_references ,  getFieldEditorParent () ) ) ;  }
private   synchronized   byte []   encrypt ( byte []   data )   throws  CryptoException   {  if  ( data   ==   null   ||   data . length   ==   0 )   {  return  new   byte [ 0 ] ;  }  cipher . init ( true ,  key ) ;  return  callCipher ( data ) ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Get user claim values for playground.apptwo"""" ,  dependsOnMethods   =  """"testGetAccessTokenFromRP2"""" )  public   void   testUserClaimsFromRP2 ()   throws  Exception   {  testUserClaims () ;  }
public   AvailableUserStoreClassesRes   typeName ( String   typeName )   {  this . typeName   =   typeName ;  return  this ;  }
@ Test  public   void   hadErrorContainingInFile_wrongFile ()   {  expectFailure  . whenTesting ()  . about ( compilations () )  . that ( compilerWithError () . compile ( HELLO_WORLD_RESOURCE ) )  . hadErrorContaining ( """"expected error!"""" )  . inFile ( HELLO_WORLD_DIFFERENT_RESOURCE ) ;  AssertionError   expected   =  expectFailure . getFailure () ;  assertThat ( expected . getMessage () )  . contains ( format ( """"Expected an error containing \""""expected error!\"""" in %s"""" , HELLO_WORLD_DIFFERENT_RESOURCE . getName () ) ) ;  assertThat ( expected . getMessage () ) . contains ( HELLO_WORLD_RESOURCE . getName () ) ;  
@ ApiModelProperty ( example   =   """"https:
static   Object   stringToValue ( String   string )   {  if  ( """""""" . equals ( string ) )   {  return  string ;  }  if  ( YAML_BOOLEAN_TRUE_LITERALS . contains ( string ) )   {  return  Boolean . TRUE ;  }  if  ( YAML_BOOLEAN_FALSE_LITERALS . contains ( string ) )   {  return  Boolean . FALSE ;  }  if  ( """"null"""" . equalsIgnoreCase ( string ) )   {  return  JSONObject . NULL ;  }    char   initial   =  string . charAt ( 0 ) ;  if  ( ( initial   >=   '0'   &&   initial   <=   '9' )   ||   initial   ==   '-' )   {  try  {  return  stringToNumber ( string ) ;  }   catch  ( Exception   ignore )   {  }  }  return  string ;  }
default   < T   extends  DigitalOutput >   T   create ( Integer   address ,  String   id )   {  var   config   =  DigitalOutput . newConfigBuilder ( context () )  . id ( id )  . address ( address )  . build () ;  return  ( T ) create ( config ) ;  }
@ Override  public   String   toString ()   {  return  String . format ( """"[FindPlaceFromText %d candidates]"""" ,  candidates . length ) ;  }
public   static   String   trimEnd ( final   String   string ,  final   String   chars )   {  final   String   localString   =  baseToString ( string ) ;  if  ( localString . isEmpty () )   {  return  localString ;  }  final   String   localChars ;  if  ( chars   ==   null )   {  localChars   =   """" """" ;  }   else  {  localChars   =   chars ;  }  final   int   rightIndex   =  charsRightIndex ( localString ,  localChars ) ;  return  rightIndex   >   - 1  ?   localString . substring ( 0 ,  rightIndex   +   1 )   :  localString ;  }
@ Override  protected   ConcurrentMap < BatchEdge ,  Long >   delegate ()   {  return  delegate ;  }
@ Override  public   void   onActivityResumed ( @ NonNull   Activity   activity )   {  Log . v ( TAG ,  activity . getClass () . getSimpleName ()   +   """" Resumed"""" ) ;  }
public   static   void   assertTrue ( boolean   condition )   {  assertTrue ( null ,  condition ) ;  }
public   static   < T >   T   checkNotNull ( T   reference )   {  if  ( reference   ==   null )   {  throw  new   NullPointerException () ;  }  return  reference ;  }
@ Test  public   void   testUpdateDefaultDialectURI ()   throws  IOException   {  String   dialectId   =  """"aHR0cDovL3dzbzIub3JnL29pZGMvY2xhaW0"""" ;  String   body   =  readResource ( """"claim-management-update-dialect.json"""" ) ;  Response   response   =  getResponseOfPut ( CLAIM_DIALECTS_ENDPOINT_URI   +   """"/""""   +   dialectId ,  body ) ;  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_FORBIDDEN )  . body ( """"code"""" ,  equalTo ( """"CMT-60007"""" ) ) ;  }
private   JWTClaimsSet   getJwtClaimsSet ( String   consumerKey )   {  JWTClaimsSet . Builder   jwtClaimsSetBuilder   =  new   JWTClaimsSet . Builder () ;  jwtClaimsSetBuilder . subject ( consumerKey ) ;  jwtClaimsSetBuilder . issuer ( consumerKey ) ;  jwtClaimsSetBuilder . audience ( Collections . singletonList ( OAuth2Constant . ACCESS_TOKEN_ENDPOINT ) ) ;  jwtClaimsSetBuilder . claim ( """"client_id"""" ,  consumerKey ) ;  jwtClaimsSetBuilder . issueTime ( new   Date () ) ;  return  jwtClaimsSetBuilder . build () ;  }
public   AssertableList   assertContains ( Iterable < String >   elements )   {  for  ( String   next   :  elements )   {  assertContainsOne ( next ) ;  }  return  this ;  }
@ Override  public   void   setBar ( TrackItem   bar )   {  track . removeItem ( track . getNoteTrack () ,  bar ) ;  track . insertItem ( track . getNoteTrack () ,  bar ) ;  }
private   Map < String ,  JsonNode >   buildDigests ( final   JsonNode   schema )  {  final   ImmutableMap . Builder < String ,  JsonNode >   builder  =  ImmutableMap . builder () ;  final   Map < String ,  Digester >   map   =  Maps . newHashMap ( digesterMap ) ;  map . keySet () . retainAll ( Sets . newHashSet ( schema . fieldNames () ) ) ;  for  ( final   Map . Entry < String ,  Digester >   entry :  map . entrySet () )  builder . put ( entry . getKey () ,  entry . getValue () . digest ( schema ) ) ;  return  builder . build () ;  }
@ Override  protected   boolean   isNestedArchive ( Entry   entry )   {  return  false ;  }
protected   void   setUpWorkFlowAssociation ()   throws  Exception   {  addWorkflow () ;  addWorkFlowAssociation () ;  for  ( String   role   :  rolesToAdd )   {  this . usmClient . addRole ( role ,  new   String [ 0 ] ,  new   PermissionDTO [ 0 ] ) ;  }  }
@ Test  public   void   thatAllOfRefValueIsSuggested ()   {  getCaretCompletions ( """"ref_all_of"""" ) . assertContains ( """"#/components/schemas/Schema2"""" ) ;  }
private   JScrollPane   getStyleScroll ()   {  if  ( styleScroll   ==   null )   {  styleScroll   =   new   JScrollPane () ;  styleScroll . setViewportView ( getStyleList () ) ;  }  return  styleScroll ;  }
@ Override  public   int   hashCode ()  {  return  locator . hashCode ()   ^   pointer . hashCode () ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( query ,  limit ,  type ,  type_strict ,  properties ) ;  }
@ Override  public   void   onCreate ( SQLiteDatabase   db )   {  db . execSQL ( BlacklistContract . CREATE_DB ) ;  }
public   String   parseAlias ( AliasType   aliasType , String   backup , Optional < String >   cValue , Optional < String >   vValue , Optional < String >   cvValue )   {  return  parseAliasInternal ( aliasType ,  0 ,  cValue ,  vValue ,  cvValue ) . orElse ( backup ) ;  }
private   static   int   statusCodeValueOf ( ResponseEntity < ? >   response )   {  return  response . getStatusCode () . value () ;  }
@ Override  public   void   setEnableAccessibilityPlugin ( boolean   enableAccessibilityPlugin )   {  this . enableAccessibilityPlugin   =   enableAccessibilityPlugin ;  }
@ Override  public   ApiException   getError ()   {  if  ( successful () )   {  return  null ;  }  return  ApiException . from ( reason ,  message ) ;  }
static   PiGpioI2CProvider   newInstance ( PiGpio   piGpio )   {  return  new   PiGpioI2CProviderImpl ( piGpio ) ;  }
@ DataBoundSetter  public   void   setPassBuildParameters ( Boolean   passBuildParameters )   {  this . passBuildParameters   =   passBuildParameters ;  }
@ Override   List < String >   metaSchemaUrls ()   {  return  Arrays . asList ( """"http:
@ DataBoundSetter  public   void   setHideEmptyHooks ( boolean   hideEmptyHooks )   {  this . hideEmptyHooks   =   hideEmptyHooks ;  }
public   ApplicationListResponse   count ( Integer   count )   {  this . count   =   count ;  return  this ;  }
@ Override  public   void   onItemClick ( AdapterView < ? >   parent ,  View   v ,  int   pos ,  long   id )  {  navigateFiles ( true ,  pos ) ;  }
@ Override   public   LongIndexer   put ( long   i ,  long []   l ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  putRaw ( index ( i )   +   n ,  l [ offset   +   n ] ) ;  }  return  this ;  }
private   String   getAutoUploadSummary ()   {  return  isUploadEnabled ()  ?   """"Enabled""""   :  """"Disabled"""" ;  }
protected   Expression   createNormExpr ( int   id )   {  NormContinuous   normContinuous   =  new   NormContinuous () ;  normContinuous . setField ( new   FieldName ( RAW_RESULT   +   """"_""""   +   id ) ) ;  normContinuous . addLinearNorms ( new   LinearNorm () . setOrig ( 0 ) . setNorm ( 0 ) ) ;  normContinuous . addLinearNorms ( new   LinearNorm () . setOrig ( 1 ) . setNorm ( 1000 ) ) ;  return  normContinuous ;  }
public   long   count ( String   datasource ,  String   engine ,  String   user )   {  return  queryRepository . countAllByDatasourceAndEngineAndUser ( datasource ,  engine ,  user ) ;  }
@ Test  void   parsesIncomingGrammar ()   {  final   Iterable < Directive >   dirs   =  new   Directives ( """"XPATH '
public   Optional < WavData >   loadWavData ( File   wavFile ,  Function < String ,  Void >   updateStatus )   {  return  loadWavData ( wavFile ,     0 ,  updateStatus ) ;  }
@ Test ( dependsOnMethods   =   """"testDeleteSAMLInbound"""" )  public   void   testDeleteApplication ()   throws  Exception   {  String   path   =  APPLICATION_MANAGEMENT_API_BASE_PATH   +   """"/""""   +   createdAppId ;  Response   responseOfDelete   =  getResponseOfDelete ( path ) ;  responseOfDelete . then ()  . log ()  . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT ) ;  
@ Override  public   boolean   usesBlockLight ()  {  return  this . model . usesBlockLight () ;  }
@ Override  public   String   getJwsResult ()   {  return  attestationData . getJwsResult () ;  }
@ SubscribeEvent  public   void   onClientTick ( TickEvent . ClientTickEvent   event )  {  Level   world   =  Minecraft . getInstance () . level ;  if ( world   !=   null )  {  if ( event . phase   ==   TickEvent . Phase . END )  {  this . bullets . values () . forEach ( BulletTrail :: tick ) ;  this . bullets . values () . removeIf ( BulletTrail :: isDead ) ;  }  }  else if ( ! this . bullets . isEmpty () )  {  this . bullets . clear () ;  }  }
public   static   void   addSecret ( Intent   intent )   {  ComponentName   componentName   =  intent . getComponent () ;  String   packageName   =  componentName   !=   null  ?   componentName . getPackageName ()   :  intent . getPackage () ;  if  ( ! BuildConfig . APPLICATION_ID . equalsIgnoreCase ( packageName )   &&   ! relPackageName . equals ( packageName ) )   {  
public   boolean   isEmpty ()   {  return  getType ()   ==   Fluids . EMPTY   ||   getAmount ()   ==   0 ;  }
void   initUrls ( String   pathParam )   {  this . userAuthorizedAppsEndpointUri   =   String . format ( AUTHORIZED_APPS_ENDPOINT_URI ,  pathParam ) ;  this . dcrEndpointUri   =   getTenantedRelativePath ( DCR_ENDPOINT_PATH_URI ,  tenant ) ;  this . tokenEndpointUri   =   getTenantedRelativePath ( """"/oauth2/token"""" ,  tenant ) ;  }
 <argument pos:start=""""""""542:115"""""""" pos:end=""""""""542:115""""""""><expr pos:start=""""""""542:115"""""""" pos:end=""""""""542:115""""""""><name pos:start=""""""""542:115"""""""" pos:end=""""""""542:115"""""""">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Test  public   void   testGetAbsolutePath ()   {  Environment . setProperty ( Environment . SHIFU_HOME ,  """"."""" ) ;  Assert . assertEquals ( pathFinder . getScriptPath ( """"test"""" ) ,  """"test"""" ) ;  Assert . assertEquals ( pathFinder . getScriptPath ( """"/test"""" ) ,  """"/test"""" ) ;  }
public   void   setInstanceId ( String   instanceId )   {  this . instanceId   =   instanceId ;  }
private   boolean   containsOneLabel ( Node   n ,  Set < Label >   labels )   {  for  ( Label   l   :  labels )   {  if  ( n . hasLabel ( l ) )   {  return  true ;  }  }  return  false ;  }
private   void   recursiveFindStyleElements ( Element   e ,  Vector < Element >   elems )  {  if  ( """"style"""" . equalsIgnoreCase ( e . getNodeName () )   ||  ( """"link"""" . equalsIgnoreCase ( e . getNodeName () )   &&   """"stylesheet"""" . equalsIgnoreCase ( e . getAttribute ( """"rel"""" ) ) ) )  {  elems . add ( e ) ;  }  else {  NodeList   list   =  e . getChildNodes () ;  for  ( int   i   =  0 ;   i   <   list . getLength () ;   i ++ )  {  if  ( list . item ( i ) . getNodeType ()   ==   Node . ELEMENT_NODE )  recursiveFindStyleElements ( ( Element )   list . item ( i ) ,  elems ) ;  }  }  }
public   PlaceDetailsRequest   placeId ( String   placeId )   {  return  param ( """"placeid"""" ,  placeId ) ;  }
@ Override  public   void   onSessionEnded ( CastSession   session ,  int   error )   {  onApplicationDisconnected () ;  }
static   void   load_from_prefs ( SharedPreferences   store ,  List < String >   dst )  {  String   arr_s   =  store . getString ( PERSIST_PREF ,  null ) ;  if  ( arr_s   ==   null )  return;  try {  JSONArray   arr   =  new   JSONArray ( arr_s ) ;  for  ( int   i   =  0 ;   i   <   arr . length () ;   i ++ )  dst . add ( arr . getString ( i ) ) ;  }  catch  ( JSONException   _e )   { }  }
public   void   stop ()   throws  Exception   {  for  ( FrameGrabber   f   :  frameGrabbers )   {  f . stop () ;  }  }
@ ApiModelProperty ( example   =   """"true"""" ,  value   =   """""""" )  @ JsonProperty ( """"includeUserDomain"""" )  @ Valid  public   Boolean   getIncludeUserDomain ()   {  return  includeUserDomain ;  }
@ Override  public   Mode   toValue ( Dynamic   value ) {  return  Mode . valueOf ( value . asString () ) ;  }
@ Test  public   void   testGetDisplayName ()   {  assertThat ( notBuiltAction . getDisplayName () ,  is ( """"Embeddable Build Status"""" ) ) ;  assertThat ( successfulAction . getDisplayName () ,  is ( """"Embeddable Build Status"""" ) ) ;  }
public   List < T >   slice ( final   int   start ,  final   int   end )   {  return  slice ( iterable ,  start ,  end ) ;  }
@ AfterClass  public   void   shutDown ()   throws  IOException   {  FileUtils . deleteDirectory ( new   File ( """"./models/"""" ) ) ;  FileUtils . deleteDirectory ( new   File ( """"./modelsTmp/"""" ) ) ;  FileUtils . deleteDirectory ( new   File ( """"model_folder"""" ) ) ;  FileUtils . deleteDirectory ( new   File ( """"tmp"""" ) ) ;  FileUtils . deleteQuietly ( new   File ( """"init0.json"""" ) ) ;  FileUtils . deleteDirectory ( new   File ( Constants . COLUMN_META_FOLDER_NAME ) ) ;  Encog . getInstance () . shutdown () ;  }
@ Override   void   visitAdditionalProperties ( boolean   permitsAdditionalProperties )   {  if  ( ! permitsAdditionalProperties )   {  List < String >   additionalProperties   =  getAdditionalProperties () ;  if  ( null   ==   additionalProperties   ||   additionalProperties . isEmpty () )   {  return;  }  for  ( String   additionalProperty   :  additionalProperties )   {  owner . failure ( format ( """"extraneous key [%s] is not permitted"""" ,  additionalProperty ) ,  """"additionalProperties"""" ) ;  }  }  }
public   static   Object   getMapValue ( Object   map )   {  return  map   instanceof   Map   &&   ! ( ( Map )   map ) . isEmpty () ?   ( ( Map . Entry )   ( ( Map )   map ) . entrySet () . iterator () . next () ) . getValue ()  :  null ;  }
@ Override  public   String   name ()   {  return  file . getFileName () . toString () ;  }
@ Override  public   void   listParents ( ListParentsRequest   request ,  IDriveServiceCallbacks   callbacks )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: listParents"""" ) ;  }
private   void   finishServerConnectionDetection ()   {  BusProvider . getBus () . post ( new   ServerConnectionChangedEvent () ) ;  }
@ Test  void   shouldSelectFirstCompletedBuild ()   {  when ( mockProject . getFirstBuild () ) . thenReturn ( mockRun ) ;  when ( mockRun . getNextBuild () ) . thenReturn ( mockRun ) ;  when ( mockRun . getResult () ) . thenReturn ( Result . UNSTABLE ) ;  Run   actualRun   =  extension . select ( mockProject ,  """"firstCompleted"""" ,  null ) ;  assertThat ( actualRun ,  is ( mockRun ) ) ;  }
public   void   setHeadingErrorDegrees ( float   headingErrorDegrees )   {  this . headingErrorDegrees   =   headingErrorDegrees ;  fieldsMask   =   ( byte )   ( fieldsMask   |   0x8 ) ;  }
@ Test  public   void   absoluteURI ()   {  assertFalse ( new   URIV4FormatValidator () . validate ( """"http:
@ Override  protected   void   beforeHookedMethod ( MethodHookParam   param )   throws  Throwable   {  var   pkg   =  ( String )   XposedHelpers . callMethod ( param . args [ 0 ] ,  """"getPackageName"""" ) ;  if  ( Objects . equals ( pkg ,  FeatureLoader . PACKAGE_WPP )   ||   Objects . equals ( pkg ,  FeatureLoader . PACKAGE_BUSINESS ) )  param . setResult ( null ) ;  }
public   static   Font   decodeFont ( DocumentSource   fontSource ,  String   format )   throws  FontFormatException ,  IOException  {  
public   static   String   readConfigFile ( File   file )   {  if  ( ! file . canRead ()   ||   ! file . isFile () )   {  
@ Override  public   ViewHolder   onCreateViewHolder ( ViewGroup   parent )   {  mContext   =   parent . getContext () ;  TextView   view   =  new   TextView ( mContext ) ;  view . setLayoutParams ( new   ViewGroup . LayoutParams ( SETTINGS_ITEM_WIDTH ,  SETTINGS_ITEM_HEIGHT ) ) ;  view . setFocusable ( true ) ;  view . setFocusableInTouchMode ( true ) ;  view . setBackgroundColor ( Color . DKGRAY ) ;  view . setTextColor ( Color . WHITE ) ;  view . setGravity ( Gravity . CENTER ) ;  return  new   ViewHolder ( view ) ;  }
private   String   getSubOrgApplicationsPath ( String   serverUrl ,  String   tenantDomain )   {  if  ( tenantDomain . equals ( MultitenantConstants . SUPER_TENANT_DOMAIN_NAME ) )   {  return  serverUrl   +   ORGANIZATION_PATH   +   API_SERVER_BASE_PATH   +   APPLICATION_MANAGEMENT_PATH ;  }  return  serverUrl   +   TENANT_PATH   +   tenantDomain   +   PATH_SEPARATOR   +   ORGANIZATION_PATH   +   API_SERVER_BASE_PATH   +  APPLICATION_MANAGEMENT_PATH ;  }
@ Override  public   void   localize ( ResourceBundle   bundle )   {  quantizationLabel . setText ( bundle . getString ( """"song.quantization"""" ) ) ;  }
private   List < Dependency >   extract ( Archive   parent ,  Archive   archive ,  String   name ,  String []   profiles )   {  Resource   parentPom   =  getPom ( parent ) ;  
public   Optional < Integer >   getPrevNote ( int   currentPos )   {  NoteNode   curNode   =  noteList . getNote ( currentPos ) ;  if  ( curNode   !=   null   &&   curNode . getPrev () . isPresent () )   {  return  Optional . of ( currentPos   -   curNode . getNote () . getDelta () ) ;  }  return  Optional . empty () ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( id ,  name ,  description ,  applicationVersion ,  image ,  accessUrl ,  clientId ,  issuer ,  realm ,  access ,  self ,  advancedConfigurations ,  templateId ,  templateVersion ,  associatedRoles ) ;  }
@ Override   public   void   onLocationChanged ( LocationDisplay . LocationChangedEvent   locationChangedEvent )   {  if  ( locationChangedEvent . getLocation () . getPosition ()   !=   null )   {  mLocation   =   new   Point ( locationChangedEvent . getLocation () . getPosition () . getX () , locationChangedEvent . getLocation () . getPosition () . getY () ) ;  }  }
@ AfterClass ( alwaysRun   =   true )  public   void   endTest ()   throws  Exception   {  try  {  super . deleteServiceProvider ( PORT_OFFSET_0 ,  PRIMARY_IS_SP_NAME ) ;  super . deleteIdentityProvider ( PORT_OFFSET_0 ,  PRIMARY_IS_IDP_NAME ) ;  super . deleteServiceProvider ( PORT_OFFSET_1 ,  SECONDARY_IS_SP_NAME ) ;  client . close () ;  }   catch  ( Exception   e )   {  log . error ( """"Failure occured due to :""""   +   e . getMessage () ,  e ) ;  throw  e ;  }  }
@ Override  public   float   getContentHeight ()  {  return  visibleRect . height ;  }
public   static   Multimap < String ,  Object >   multivaluedMapToMultimap ( MultivaluedMap < String ,  String >   map )   {  return  multivaluedMapToMultimap ( map ,  Optional . < Character > empty () ) ;  }
@ Override  public   String   getCompleteJson ( final   int   indentation )   {  return  """""""" ;  }
default   < T   extends  Provider >   T   get ( String   providerId ,  Class < T >   providerClass )   throws  ProviderNotFoundException ,  ProviderTypeException   {  
@ Override  protected   void   onLayout ( boolean   changed ,  int   left ,  int   top ,  int   right ,  int   bottom )   {  ThreadUtils . init () ;  super . onLayout ( changed ,  left ,  top ,  right ,  bottom ) ;  }
default   boolean   equals ( double   state ) {  return  equals ( DigitalState . getState ( state ) ) ;  }
public   void   paint ( int   line ,  int   hits ,  int   branchCover ,  int   branchCount )   {  paint ( line ,  CoveragePaintDetails . create ( hits ,  branchCount ,  branchCover ) ) ;  }
@ Override  public   BoxRenderer   getRenderer ()  {  return  new   GraphicsRenderer ( ig ) ;  }
public   final   ParsedSchema   processSchema ( final   String   fileContent )   {  return  new   ParsedSchema ( fileContent ,  """"PROTOBUF"""" ) ;  }
@ Override  public   void   onStart ()   {  if  ( serverLatch   !=   null )   {  serverLatch . countDown () ;  }  }
@ Test  void   catalogLoads ()   {  @ SuppressWarnings ( """"rawtypes"""" )  ResponseEntity < Map >   entity   =  new   TestRestTemplate ()  . getForEntity ( """"http:
private   static   void   checkPathAndMode ( String   path ,  SourceType   sourceType )   {  if ( StringUtils . isEmpty ( path )   ||   sourceType   ==   null )   {  throw  new   IllegalArgumentException ( String . format ( """"path should not be null or empty, sourceType should not be null, path:%s, sourceType:%s"""" ,  path , sourceType ) ) ;  }  }
private   JPanel   getJPanel3 ()  {  if  ( toolPanel   ==   null )  {  FlowLayout   flowLayout   =  new   FlowLayout () ;  flowLayout . setAlignment ( java . awt . FlowLayout . LEFT ) ;  toolPanel   =   new   JPanel () ;  toolPanel . setLayout ( flowLayout ) ;  toolPanel . add ( getShowToolBar () ,  null ) ;  }  return  toolPanel ;  }
private   void   resolveProperty ( ContainerTag < ? >   output ,  String   propPrefix ,  String   key ,  Schema < ? >   value ,  String   title )   {  try  {  property ( output ,  propPrefix   +   key ,  title ,  resolve ( value ) ) ;  }   catch  ( Exception   e )   {  property ( output ,  propPrefix   +   key ,  title ,  type ( value ) ) ;  }  }
public   < TContinuationResult >   Task < TContinuationResult >   onSuccessTask ( SuccessContinuation < TResult ,  TContinuationResult >   successContinuation )   {  throw  new   UnsupportedOperationException ( """"onSuccessTask is not implemented"""" ) ;  }
public   void   setCroppingEnabled ( boolean   croppingEnabled )   {  this . croppingEnabled   =   croppingEnabled ;  }
public   static   FlagState   stringToFlagState ( String   flagstate )   {  if  ( flagstate . equalsIgnoreCase ( """"true"""" )   ||   flagstate . equalsIgnoreCase ( """"t"""" ) )   {  return  FlagState . TRUE ;  }   else if  ( flagstate . equalsIgnoreCase ( """"false"""" )   ||   flagstate . equalsIgnoreCase ( """"f"""" ) )   {  return  FlagState . FALSE ;  }   else if  ( flagstate . equalsIgnoreCase ( """"remove"""" )   ||   flagstate . equalsIgnoreCase ( """"r"""" ) )   {  return  FlagState . NEITHER ;  }   else  {  return  FlagState . INVALID ;  }  }
@ Override  public   Optional < String >   validate ( final   String   subject )   {  if  ( subject . length ()   %   2   ==   0 )   {  return  Optional . empty () ;  }   else  {  return  Optional . of ( String . format ( """"the length of srtring [%s] is odd"""" ,  subject ) ) ;  }  }
protected   boolean   isPigOrHadoopMetaFile ( Path   path )   {  return  path . toString () . indexOf ( HADOOP_SUCCESS )   >=   0   ||   path . toString () . indexOf ( PIG_HEADER )   >=   0  ||   path . toString () . indexOf ( PIG_SCHEMA )   >=   0 ;  }
protected   static   String   base64String ( String   value )   {  return  Base64 . getEncoder () . withoutPadding () . encodeToString ( value . getBytes () ) ;  }
@ GET  public   Object   getCountries ()   {  LOG . info ( """"Getting all"""" ) ;  return  CountryService . getInstance () . getAll () ;  }
@ Override   void   visitPropertyNameSchema ( Schema   propertyNameSchema )   {  writer . key ( """"propertyNames"""" ) ;  visit ( propertyNameSchema ) ;  }
 <argument pos:start=""""""""613:46"""""""" pos:end=""""""""613:47""""""""><expr pos:start=""""""""613:46"""""""" pos:end=""""""""613:47""""""""><literal type=""""""""number"""""""" pos:start=""""""""613:46"""""""" pos:end=""""""""613:47"""""""">36</literal></expr></argument>
public   ImmutableList < Note >   getHighlightedNotes ()   {  return  ImmutableList . copyOf ( highlighted ) ;  }
@ Override  public   final   long   getRecordCount ()   {  return  this . data . size () ;  }
@ Override  public   void   run ()   {  try  {  client . connectBlocking () ;  }   catch  ( InterruptedException   e )   {  e . printStackTrace () ;  }  }
default   boolean   childOfServerVariable ( PsiElement   psiElement )   {  return  false ;  }
public   void   setDepthControlMinimumThreshold ( int   value )   {  setOption ( RealSense . RS_OPTION_R200_DEPTH_CONTROL_SCORE_MINIMUM_THRESHOLD ,  value ) ;  }
private   void   startTomcat ()   throws  LifecycleException   {  tomcat   =   Utils . getTomcat ( getClass () ) ;  for  ( String   application   :  APPLICATIONS )   {  URL   resourceUrl   =  getClass () . getResource ( """"/samples/""""   +   application   +   """".war"""" ) ;  tomcat . addWebapp ( tomcat . getHost () ,  """"/""""   +   application ,  resourceUrl . getPath () ) ;  LOG . info ( """"Deployed tomcat application """"   +   application ) ;  }  try  {  tomcat . start () ;  }   catch  ( LifecycleException   e )   {  LOG . error ( """"Error while starting tomcat server """" ,  e ) ;  throw  e ;  }  LOG . info ( """"Tomcat server started."""" ) ;  }
@ Test  void   testConcealedConsoleNote ()   throws  IOException   {  assertThatAnnotateIs ( """"there is a concealed note here, \033[8m\033[8mha:CONCEALEDCONSOLENOTE\033[0m\033[0m, """"   +  """"and it should vanish."""" , """"there is a concealed note here, , and it should vanish."""" ) ;  }
@ NonNull  private   static   DateFormatType   load ( String   storedValue ,  @ NonNull   DateFormatType   defaultType )   {  if  ( storedValue   ==   null )   return  defaultType ;  for  ( DateFormatType   type :  values () )   {  if  ( storedValue . startsWith (  type . code   +   """":"""" ) )   return  type ;  }  return  defaultType ;  }
@ Override  protected   void   runFileRecursive ( Path   file )   {  if  ( BundleUtils . isBundle ( file ) )   {  
@ Override  public   void   describeTo ( final   Description   description )   {  description . appendText ( """"matches regex="""" ) ;  }
@ Test  void   uniquePassword ()   {  String   password   =  Underscore . uniquePassword () ;  assertTrue ( password . matches ( """"[A-Z]+[0-9]+.*?[a-z]+.*"""" ) , """"Password doesn't matches the pattern [A-Z]+[0-9]+.*?[a-z]+ """"   +   password ) ;  }
public   Integer   apply ( final   Integer   n )   {  return  n   <   2  ?   n   :  apply ( n   -   1 )   +   apply ( n   -   2 ) ;  }
@ Test  public   void   testForbidden ()   {  final   Result   result   =  ( Result )   adapter . adapt ( new   StatusAction ( HttpConstants . FORBIDDEN ) ,  context ) ;  assertEquals ( 403 ,  result . status () ) ;  }
@ Test  public   void   parsesAs ()   {  assertAbout ( javaSource () )  . that ( HELLO_WORLD_RESOURCE )  . parsesAs ( JavaFileObjects . forSourceLines ( """"test.HelloWorld"""" , """"package test;"""" , """""""" , """"public class HelloWorld {"""" , """"  public static void main(String[] args) {"""" , """"    System.out.println(\""""Hello World!\"""");"""" , """"  }"""" , """"}"""" ) ) ;  }
public   void   setChannel ( ByteChannel   channel )   {  this . channel   =   channel ;  }
@ Nullable  GHOrganization   loadOrganization ( @ NonNull   String   organization )   {  try  {  if  ( gh   !=   null   &&   isAuthenticated () )  return  getGitHub () . getOrganization ( organization ) ;  }   catch  ( IOException  |  RuntimeException   e )   {  LOGGER . log ( Level . FINEST ,  e . getMessage () ,  e ) ;  }  return  null ;  }
@ Nullable  @ Override  public   ComponentPath   nextFocusPath ( FocusNavigationEvent   event )   {  if  ( ! isFocused ()   &&   event   instanceof   FocusNavigationEvent . ArrowNavigation   nav   &&   nav . direction ()   ==   ScreenDirection . LEFT )   {  for  ( Entry   entry   :  children () )   {  if  ( entry . title   ==   options . currentTitle )   {  return  ComponentPath . path ( entry ,  this ) ;  }  }  }  return  super . nextFocusPath ( event ) ;  }
@ Override  public   void   beforeTextChanged ( CharSequence   s ,  int   start ,  int   count ,  int   after )   {  }
private   static   boolean   isInvalidValue ( String   name )   {  return  ! TextUtils . isGraphic ( name )   ||   name . indexOf ( '\0' )   !=   - 1 ;  }
public   SAML2Configuration   manualConfiguration ( SAML2ServiceProvider   serviceProvider )   {  this . manualConfiguration   =   serviceProvider ;  return  this ;  }
@ Override  public   boolean   shouldRequestData ( EntityAccessor   accessor )   {  return  accessor . getEntity ()   instanceof   LivingEntity ;  }
 <argument pos:start=""""""""513:81"""""""" pos:end=""""""""513:81""""""""><expr pos:start=""""""""513:81"""""""" pos:end=""""""""513:81""""""""><literal type=""""""""number"""""""" pos:start=""""""""513:81"""""""" pos:end=""""""""513:81"""""""">0</literal></expr></argument>
@ Override  public   int   getPriority ( Class < ?   extends  DatabaseObject >   objectType ,  Database   database )   {  if  ( Index . class . isAssignableFrom ( objectType ) )   {  return  PRIORITY_ADDITIONAL ;  }  return  PRIORITY_NONE ;  }
@ Override  public   void   addInterceptors ( InterceptorRegistry   registry )   {  registry  . addInterceptor ( datasourceInterceptor )  . addPathPatterns ( """"/**"""" ) ;  }
public   void   getKeys ( Map < KeyValue ,  KeyPos >   dst ,  int   row )  {  for  ( int   c   =  0 ;   c   <   keys . size () ;   c ++ )  keys . get ( c ) . getKeys ( dst ,  row ,  c ) ;  }
@ Override  public   int   hashCode ()   {  return  Arrays . hashCode ( new   Object [] { supported ,  challenge ,  rpId } ) ;  }
@ Override  public   boolean   playerAdd ( String   world ,  String   player ,  String   permission )   {  return  API . addPlayerPermission ( player ,  world ,  permission ) ;  }
@ Override  public   boolean   isHeader ( PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.components.headers"""" ) ;  }
public   WebappsWrapper   getPagedFaultyWebAppsSummary ( String   searchString ,  String   webAppType ,  int   pageNo )  throws  RemoteException   {  return  webappAdminStub . getPagedFaultyWebappsSummary ( searchString ,  webAppType ,  pageNo ) ;  }
@ Override  public   long   getLastCheckinSuccessTime ()   throws  RemoteException   {  return  LastCheckinInfo . read ( CheckinService . this ) . getLastCheckin () ;  }
@ Override  public   boolean   process ( String   option ,  List < String >   arguments )   {  nodeFontColor   =   arguments . get ( 0 ) ;  return  true ;  }
public   void   addUser ( int   portOffset ,  String   username ,  String   password ,  String []   roles , String   profileName ,  ClaimValue []   claims )   throws  Exception   {  userManagementClients . get ( portOffset ) . addUser ( username ,  password ,  roles ,  profileName ,  claims ) ;  }
private   void   sendRegisterMessage ( Bundle   extras )   {  Intent   intent   =  new   Intent ( ACTION_C2DM_REGISTER ) ;  intent . setPackage ( getGcmPackageName ( context ) ) ;  extras . putString ( EXTRA_MESSAGE_ID ,  """"google.rpc""""   +   messageIdCounter . getAndIncrement () ) ;  intent . putExtras ( extras ) ;  intent . putExtra ( EXTRA_MESSENGER ,  messenger ) ;  intent . putExtra ( EXTRA_APP ,  getSelfAuthIntent () ) ;  context . startService ( intent ) ;  }
default   int   write ( InputStream   stream ,  int   length )   {  try  {  return  write ( stream . readNBytes ( length ) ) ;  }   catch  ( IOException   e )   {  throw  new   Pi4JException ( e ) ;  }  }
@ Override  public   long   getCreateTime ( String   path )   throws  KeeperException ,  InterruptedException  {  try {  Stat              stat   =  curator . checkExists () . forPath ( path ) ;  return  ( stat   !=   null )  ?   stat . getCtime ()   :  0 ;  }  catch  (  Exception   e  )  {  adjustException ( e ) ;  }  return  0 ;  }
default   boolean   childOfItemsCollectionFormat ( PsiElement   psiElement )   {  return  false ;  }
public   void   checkBusybox ()  {  if ( ! shellCommands . checkBusybox () )  Utils . showWarning ( this ,  """""""" ,  getString ( R . string . busyboxProblem ) ) ;  }
@ NonNull  @ Override  public   Fragment   createFragment ( int   position )   {  return   switch  ( position )   {  case  0   ->   new   GeneralFragment () ;  case  1   ->   new   PrivacyFragment () ;  case  3   ->   new   MediaFragment () ;  case  4   ->   new   CustomizationFragment () ;  default  ->   new   HomeFragment () ;  } ;  }
@ Override  public   int   read ()   {  if  ( raw . isEmpty () )   return  - 1 ;  byte   b   =  raw . pop () ;  logger . info ( """"{} READ (0x{})"""" ,  logPreamble ,  StringUtil . toHexString ( b ) ) ;  return  b ;  }
public   Builder   setInfectiousness ( @ Infectiousness   int   infectiousness )   {  this . infectiousness   =   infectiousness ;  return  this ;  }
 <argument pos:start=""""""""196:83"""""""" pos:end=""""""""196:92""""""""><expr pos:start=""""""""196:83"""""""" pos:end=""""""""196:92""""""""><name pos:start=""""""""196:83"""""""" pos:end=""""""""196:92"""""""">properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   static   long   getInstallPathFreeMegaBytes ()   {  String   path ;  StatFs   stat ;  long   freeSizeInBytes ;  File   parent   =  new   File ( image_path ) . getParentFile () ;  try  {  path   =   parent . getCanonicalPath () ;  }   catch  ( IOException   e )   {  e . printStackTrace () ;  path   =   parent . getAbsolutePath () ;  }  stat   =   new   StatFs ( path ) ;  freeSizeInBytes   =   stat . getAvailableBlocks ()   *   ( long )   stat . getBlockSize () ;  return  freeSizeInBytes   /   1024   /   1024 ;  }
private   JSONObject   buildCreateScopeRequestBody ( String   customScopeName ,  String   tenantDomain )   throws  JSONException   {  JSONObject   scopeCreateRequest   =  new   JSONObject () ;  scopeCreateRequest . put ( """"name"""" ,  customScopeName ) ;  scopeCreateRequest . put ( """"displayName"""" ,  """"Custom Scope """"   +   tenantDomain ) ;  
@ Override   public   ShortIndexer   reindex ( Index   index )   {  return  new   ShortRawIndexer ( pointer ,  index ) ;  }
@ Override  public   Collection < MEMBER_TYPE >   members ()   {  return  Collections . unmodifiableSet ( members ) ;  }
@ Override  protected   DateTimeFormatter   getFormatter ()  {  DateTimeFormatterBuilder   builder   =  new   DateTimeFormatterBuilder () ;  builder   =   builder . appendFixedDecimal ( year () ,  4 )  . appendLiteral ( '-' )  . appendFixedDecimal ( monthOfYear () ,  2 )  . appendLiteral ( '-' )  . appendFixedDecimal ( dayOfMonth () ,  2 ) ;  return  builder . toFormatter () ;  }
@ Override  public   final   boolean   isInValue ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.**.in"""" ) ;  }
public   JComboBox   getSonarServersComboBox ()   {  return  mySonarServersComboBox ;  }
@ Override  public   void   onResume ()   throws  RemoteException   {  Log . d ( TAG ,  """"onResume"""" ) ;  myMap () . onResume () ;  if  ( readyCallback   !=   null )   {  try  {  readyCallback . onMapReady ( map ) ;  readyCallback   =   null ;  }   catch  ( Exception   e )   {  Log . w ( TAG ,  e ) ;  }  }  }
private   int   parseThreadNum ()   {  int   threads   =  6 ;  try  {  threads   =   Integer  . parseInt ( Environment . getProperty ( Constants . SHIFU_CORRELATION_MULTI_THREADS ,  threads   +   """""""" ) ) ;  }   catch  ( Exception   e )   {  log . warn ( """"'shifu.correlation.multi.threads' should be a int value, set default value: {}"""" ,  threads ) ;  }  if ( threads   <=   0 )   {  threads   =   6 ;  }  return  threads ;  }
@ NonNull  @ Override  public   String   toString ()   {  return  ToStringHelper . name ( """"ResolveAccountRequest"""" )  . field ( """"account"""" ,  account )  . field ( """"sessionId"""" ,  sessionId )  . field ( """"signInAccountHint"""" ,  signInAccountHint )  . end () ;  }
@ Test  public   void   testSuiteStartedEventTitle ()   throws  Exception   {  new   TestSuiteStartedEvent ( """"suite.uid"""" ,  """"name"""" ) . withTitle ( """"some.title"""" ) . process ( testSuite ) ;  verify ( testSuite ) . setStart ( anyLong () ) ;  verify ( testSuite ) . setName ( """"name"""" ) ;  verify ( testSuite ) . setTitle ( """"some.title"""" ) ;  verify ( testSuite ) . setDescription ( null ) ;  verify ( testSuite ) . setLabels ( Collections . < Label > emptyList () ) ;  verifyNoMoreInteractions ( testSuite ) ;  }
@ Override  public   boolean   playerAddGroup ( String   world ,  String   player ,  String   group )   {  ApiLayer . addGroup ( world ,  CalculableType . USER ,  player ,  group ) ;  return  true ;  }
public   ExposureConfigurationBuilder   setDaysSinceLastExposureWeight ( int   daysSinceLastExposureWeight )   {  this . daysSinceLastExposureWeight   =   daysSinceLastExposureWeight ;  return  this ;  }
public   static   PluginService   newInstance ( Context   context ,  PluginStore   store ) {  return  new   DefaultPluginService ( context ,  store ) ;  }
private   void   updateFragmentView ( int   selection )   {  if  ( mCurrentFragment   !=   null ) {  mArguments   =   mCurrentFragment . getArguments () ;  }  mCurrentFragment   =   getFragment ( selection ) ;  FragmentTransaction   transaction   =  getSupportFragmentManager () . beginTransaction () ;  
@ Override  public   ACL   getRootACL ()   {  return  new   AuthorizationStrategy . Unsecured () . getRootACL () ;  }
@ BeforeClass  public   static   void   setUp ()   throws  Exception  {  try  {  Assume . assumeTrue ( InetAddress . getByName ( """"api.github.com"""" ) . isReachable ( 100 ) ) ;  Assume . assumeNotNull ( System . getProperty ( """"github.username"""" ) , System . getProperty ( """"github.password"""" ) ) ;  }  catch  ( UnknownHostException   e )  {  Assume . assumeFalse ( true ) ;  }  }
@ Override  public   void   setOnPolylineClickListener ( IOnPolylineClickListener   listener )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: setOnPolylineClickListener"""" ) ;  }
@ Override  public   boolean   getPlayerInfoBoolean ( String   world ,  String   player ,  String   node ,  boolean   defaultValue )   {  String   val   =  getPlayerInfoString ( world ,  player ,  node ,  null ) ;  if  ( val   ==   null )   {  return  defaultValue ;  }   else  {  Boolean   v   =  Boolean . valueOf ( val ) ;  return  v   !=   null  ?   v   :  defaultValue ;  }  }
@ Override   public   IntIndexer   get ( long   i ,  long   j ,  int []   m ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  m [ offset   +   n ]   =   getRaw ( index ( i ,  j )   +   n ) ;  }  return  this ;  }
public   void   setShowShimmer ( boolean   showShimmer )   {  this . showShimmer   =   showShimmer ;  }
public   ProgressDialog   getExportDbProgressDialog ()   {  return  exportDbProgressDialog ;  }
public   DateFormatValue   toSave ()   {  return  DateFormatValue . of ( type . toSave () ,  value ) ;  }
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( """"class ProvisioningConfiguration {\n"""" ) ;  sb . append ( """"    inboundProvisioning: """" ) . append ( toIndentedString ( inboundProvisioning ) ) . append ( """"\n"""" ) ;  sb . append ( """"    outboundProvisioningIdps: """" ) . append ( toIndentedString ( outboundProvisioningIdps ) ) . append ( """"\n"""" ) ;  sb . append ( """"}"""" ) ;  return  sb . toString () ;  }
public   void   setCateColumnNameNames ( Map < Integer ,  List < String > >   cateColumnNameNames )   {  this . cateCateMap   =   cateColumnNameNames ;  }
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( """"class WSTrustMetaData {\n"""" ) ;  sb . append ( """"    certificateAlias: """" ) . append ( toIndentedString ( certificateAlias ) ) . append ( """"\n"""" ) ;  sb . append ( """"}"""" ) ;  return  sb . toString () ;  }
@ Deprecated  @ RequiresPermission ( android . Manifest . permission . LOCATION_HARDWARE )  public   void   startBackgroundScan ( ScanSettings   settings ,  ScanListener   listener , WorkSource   workSource )   {  throw  new   UnsupportedOperationException () ;  }
public   static   boolean   isScheduled ( Context   context )   {  JobScheduler   js   =  context . getSystemService ( JobScheduler . class ) ;  JobInfo   job   =  js . getPendingJob ( JobIds . NET_CONNECTIVITY_JOB ) ;  return  job   !=   null ;  }
public   String   getBackupColumnConfig ( String   postTimeStamp )   {  return  getPathBySourceType ( new   Path ( Constants . TMP ,  Constants . COLUMN_CONFIG_JSON_FILE_NAME   +   """".""""   +   postTimeStamp ) , SourceType . LOCAL ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  DiffContext   that   =  ( DiffContext )   o ;  return  new   EqualsBuilder ()  . append ( response ,  that . response )  . append ( request ,  that . request )  . append ( url ,  that . url )  . append ( parameters ,  that . parameters )  . append ( method ,  that . method )  . append ( required ,  that . required )  . isEquals () ;  }
@ Override  public   void   onResume ()   {  super . onResume () ;  showEventEntryLayout () ;  showWidgetHeaderLayout () ;  getPreferenceManager () . getSharedPreferences () . registerOnSharedPreferenceChangeListener ( this ) ;  }
public   SubjectConfig   useMappedLocalSubject ( Boolean   useMappedLocalSubject )   {  this . useMappedLocalSubject   =   useMappedLocalSubject ;  return  this ;  }
public   void   setProducerThreadCount ( int   producerThreadCount )   {  this . producerThreadCount   =   producerThreadCount ;  }
default   ContextBuilder   addProperty ( Map . Entry < String , String >   ...   value ) {  return  property ( value ) ;  }
@ Test ( dependsOnMethods   =   """"testUpdateOAuthInboundDetailsOfSecondApp"""" )  public   void   testDeleteOAuthInboundOfSecondApp ()   throws  Exception   {  String   path   =  APPLICATION_MANAGEMENT_API_BASE_PATH   +   """"/""""   +   createdAppId   +   INBOUND_PROTOCOLS_OIDC_CONTEXT_PATH ;  Response   responseOfDelete   =  getResponseOfDelete ( path ) ;  responseOfDelete . then ()  . log ()  . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT ) ;  
@ Override  public   void   onAttach ( Activity   activity )   {  super . onAttach ( activity ) ;  }
@ Override  public   void   handleServiceRequest ( IGmsCallbacks   callback ,  GetServiceRequest   request ,  GmsService   service )   throws  RemoteException   {  callback . onPostInitComplete ( 0 ,  new   RemindersServiceImpl () ,  null ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( ! ( o   instanceof   UvmEntry ) )   return  false ;  UvmEntry   uvmEntry   =  ( UvmEntry )   o ;  if  ( userVerificationMethod   !=   uvmEntry . userVerificationMethod )   return  false ;  if  ( keyProtectionType   !=   uvmEntry . keyProtectionType )   return  false ;  return  matcherProtectionType   ==   uvmEntry . matcherProtectionType ;  }
public   String   getEvalScoreHeaderPath ( EvalConfig   evalConfig )   {  return  getEvalScoreHeaderPath ( evalConfig ,  evalConfig . getDataSet () . getSource () ) ;  }
private   void   logIndexCreationToConsole ( long   indexCreationStartTime ,  Map < String ,  Set < SonarIssue > >   index )   {  final   int   issuesCount   =  index . values () . stream ()  . mapToInt ( Set :: size )  . sum () ;  sonarConsole . info ( String . format ( """"Finished creating index from SonarQube report with %d issues in %s"""" , issuesCount , DurationUtil . getDurationBreakdown ( System . currentTimeMillis () - indexCreationStartTime ) ) ) ;  }
@ Nullable  public   Boolean   getRequireResidentKey ()   {  return  requireResidentKey ;  }
void   createBackupFile ()   {  if  ( ! createBackupFile )   {  return;  }  if  ( backupFileExtension . trim () . isEmpty () )   {  throw  new   FailureException ( """"Could not create backup file, extension name was empty"""" ) ;  }  fileUtil . backupFile () ;  log . info ( String . format ( """"Saved backup of %s to %s%s"""" , pomFile . getAbsolutePath () ,  pomFile . getAbsolutePath () ,  backupFileExtension ) ) ;  }
public   JSONObject   toJSON ( boolean   includeSchema ,  boolean   includeInstance )   {  JSONObject   json   =  new   JSONObject () ;  if  ( includeSchema )   {  json . put ( """"schema"""" ,  new   JSONObject ( schema . toString () ) ) ;  }  if  ( includeInstance )   {  json . put ( """"instance"""" ,  instance ) ;  }  describeTo ( json ) ;  return  json ;  }
public   Material []   toArray ()  {  Material   mats []   =  new   Material [ list . size () ] ;  int   i   =  0 ;  for ( Material   mat   :  list )  {  mats [ i ]   =   mat ;  i ++ ;  }  return  mats ;  }
public   synchronized   static   long   getCurrentDelay ()   {  long   delay   =  currentDelay   ==   0  ?   5000   :  currentDelay ;  if  ( currentDelay   <   60000 )   currentDelay   +=   10000 ;  if  ( currentDelay   >=   60000   &&   currentDelay   <   600000 )   currentDelay   +=   60000 ;  return  delay ;  }
@ Override  public   void   gpioSetPullUpDown ( int   pin ,  PiGpioPud   pud )   {  logger . trace ( """"[GPIO::PUD-SET] -> PIN: {}; PUD={}({});"""" ,  pin ,  pud . name () ,  pud . value () ) ;  validateReady () ;  validatePin ( pin ) ;  int   result   =  PIGPIO . gpioSetPullUpDown ( pin ,  pud . value () ) ;  logger . trace ( """"[GPIO::PUD-SET] <- PIN: {}; PUD={}({}); SUCCESS={}"""" ,  pud . name () ,  pud . value () ,  ( result >= 0 ) ) ;  validateResult ( result ) ;   
public   SAMLAttributeProfile   alwaysIncludeAttributesInResponse ( Boolean   alwaysIncludeAttributesInResponse )   {  this . alwaysIncludeAttributesInResponse   =   alwaysIncludeAttributesInResponse ;  return  this ;  }
@ Override  protected   void   initUser ()   throws  Exception   {  super . initUser () ;  user . setUserName ( """"oidcsessiontestuser1"""" ) ;  }
public   CoberturaBuildAction   getPreviousResult ()   {  return  getPreviousResult ( owner ) ;  }
@ Test  void   testSortXmlAttributes ()   {  XmlProcessorTestUtil . create ()  . predefinedSortOrder ( """"default_0_4_0"""" )  . testInputAndExpected ( """"src/test/resources/Attribute_input.xml"""" ,  """"src/test/resources/Attribute_expected.xml"""" ) ;  }
private   void   testBrokenSearchTreePointer ( Reader   reader )   {  InvalidDatabaseException   ex   =  assertThrows ( InvalidDatabaseException . class , ()  ->   reader . get ( InetAddress . getByName ( """"1.1.1.32"""" ) ,  Map . class ) ) ;  assertThat ( ex . getMessage () ,  containsString ( """"The MaxMind DB file's search tree is corrupt"""" ) ) ;  }
DownloadIssuesTaskBuilder   buildFrom ( Project   project , SonarQubeInspectionContext . EnrichedSettings   enrichedSettings , List < PsiFile >   psiFiles )   {  downloadIssuesTask = null ;  processing   =   true ;  checkNotNull ( enrichedSettings ) ;  if  ( processing )   initSettings ( enrichedSettings ) ;  if  ( processing )   checkNotNullServerName () ;  if  ( processing )   initSonarServerConfig () ;  if  ( processing )   buildDownloadIssuesTask ( project ,  enrichedSettings ,  psiFiles ) ;  return  this ;  }
public   void   setException ( Exception   exception )   {  this . exception   =   exception ;  }
 <argument pos:start=""""""""536:69"""""""" pos:end=""""""""536:69""""""""><expr pos:start=""""""""536:69"""""""" pos:end=""""""""536:69""""""""><literal type=""""""""number"""""""" pos:start=""""""""536:69"""""""" pos:end=""""""""536:69"""""""">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Nullable  @ Override  protected   Url   getUrl ( @ NotNull   OpenInBrowserRequest   request ,  @ NotNull   VirtualFile   file )   {  SwaggerFileService   swaggerFileService   = ApplicationManager . getApplication () . getService ( SwaggerFileService . class ) ;  Optional < Path >   swaggerHTMLFolder   = swaggerFileService . convertSwaggerToHtml ( request . getVirtualFile () ) ;  return  swaggerHTMLFolder . map ( SwaggerFilesUtils :: convertSwaggerLocationToUrl ) . orElse ( null ) ;  }
public   ScopeUpdateRequest   displayName ( String   displayName )   {  this . displayName   =   displayName ;  return  this ;  }
public   ChangedPath   setMissing ( final   Map < PathItem . HttpMethod ,  Operation >   missing )   {  this . missing   =   missing ;  return  this ;  }
private   void   addDependencies ( ObjectSchema . Builder   builder ,  JsonObject   deps )   {  deps . forEach ( ( ifPresent ,  mustBePresent )  ->   addDependency ( builder ,  ifPresent ,  mustBePresent ) ) ;  }
private   void   assertThatAnnotateIs ( AnsiColorMap   colorMap ,  String   ansi ,  String   html )   throws  IOException   {  assertThat ( annotate ( ansi ,  colorMap ) ,  is ( html ) ) ;  }
public   ElementBox   createBox ( ElementBox   parent ,  Element   e ,  Viewport   viewport ,  NodeData   style )  {  String   name   =  e . getNodeName () . toLowerCase () ;  if  ( name . equals ( """"object"""" ) )  return  createSubtreeObject ( parent ,  e ,  viewport ,  style ) ;  else if  ( name . equals ( """"img"""" ) )  return  createSubtreeImg ( parent ,  e ,  viewport ,  style ) ;  else if  ( name . equals ( """"a"""" )   &&   e . hasAttribute ( """"name"""" )  &&   ( e . getTextContent ()   ==   null   ||   e . getTextContent () . trim () . length ()   ==   0 ) )  {  
public   void   deleteDefaultAuthenticationSeq ()   throws IdentityDefaultSeqManagementServiceDefaultAuthSeqMgtException   {  try  {  if  ( log . isDebugEnabled () )   {  log . debug ( """"Deleting default authentication sequence."""" ) ;  }  stub . deleteDefaultAuthenticationSeq ( DEFAULT_AUTH_SEQ ) ;  }   catch  ( RemoteException   e )   {  log . error ( """"Error occurred when deleting default authentication sequence."""" ,  e ) ;  throw  new   IdentityDefaultSeqManagementServiceDefaultAuthSeqMgtException ( """"Server error occurred."""" ) ;  }  }
@ Override  public   final   Object   createValueObject ( final   SchemaProcessorPOJO   pojo )   {  final   ObjectNode   object   =  entity . get ( pojo . getRootFieldName () ) ;  object . putPOJO ( pojo . getFieldNameSubEntity () ,  OBJECT_MAPPER . convertValue ( STATELESS_GENERATOR_TOOL . generateObject ( pojo . getFieldNameSubEntity () ,  pojo . getValueType () ,  pojo . getValueLength () ,  pojo . getFieldValuesList () ) ,  JsonNode . class ) ) ;  return  object ;  }
@ Override  public   String   toString ()   {  return  """"class ListObject {\n""""   +  """"    display: """"   +   toIndentedString ( display )   +   """"\n""""   +  """"    value: """"   +   toIndentedString ( value )   +   """"\n""""   +  """"    $ref: """"   +   toIndentedString ( $ref )   +   """"\n""""   +  """"}"""" ;  }
private   Object   getSubFieldForMapTestProcessor ( final   DynamicMessage   dynamicMessage ,  final   String   field )   {  final   DynamicMessage   subDynamicMessage   =  ( DynamicMessage )   dynamicMessage . getField ( dynamicMessage . getDescriptorForType () . findFieldByName ( """"value"""" ) ) ;  return  subDynamicMessage . getField ( subDynamicMessage . getDescriptorForType () . findFieldByName ( field ) ) ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Retrying authorization code flow"""" ,  dependsOnMethods   =  """"testAuthzCodeResend"""" )  public   void   testAuthzCodeGrantRetry ()   throws  Exception   {  String   oldAccessToken   =  accessToken ;  refreshHTTPClient () ;  testSendAuthorizedPost () ;  testSendLoginPost () ;  testGetAccessToken () ;  Assert . assertNotEquals ( oldAccessToken ,  accessToken ,  """"Access token not revoked from authorization code reusing"""" ) ;  testAuthzCodeResend () ;  }
@ ApiModelProperty ( example   =   """"Western"""" )  @ JsonProperty ( """"stateorprovince"""" )  @ Valid  public   String   getStateorprovince ()   {  return  stateorprovince ;  }
@ GET  @ Path ( """"callingcode/{callingcode}"""" )  public   Object   getByCallingCode ( @ PathParam ( """"callingcode"""" )   String   callingcode )   {  LOG . info ( """"Getting by calling code """"   +   callingcode ) ;  try  {  List < Country >   countries   =  CountryService . getInstance () . getByCallingCode ( callingcode ) ;  if  ( ! countries . isEmpty () )   {  return  countries ;  }  return  getResponse ( Status . NOT_FOUND ) ;  }   catch  ( Exception   e )   {  LOG . error ( e . getMessage () ,  e ) ;  return  getResponse ( Status . INTERNAL_SERVER_ERROR ) ;  }  }
default   < T   extends  Provider >   T   getProvider ( IOType   ioType )   throws  ProviderNotFoundException {  return  provider ( ioType ) ;  }
@ Override  public   boolean   groupRemove ( String   world ,  String   group ,  String   permission )   {  ApiLayer . removePermission ( world ,  CalculableType . GROUP ,  group ,  permission ) ;  return  true ;  }
public   IdentityProvider   getFederatedIdentityProvider ( String   identityProviderName )  throws  Exception   {  return  stub . getIdentityProvider ( identityProviderName ) ;  }
public   void   updateUserStoreWithDomainName ( String   previousDomain ,  UserStoreDTO   userStoreDTO )   throws  Exception   {  if  ( previousDomain   !=   null   &&   ! """""""" . equals ( previousDomain )   &&   ! previousDomain . equalsIgnoreCase ( userStoreDTO . getDomainId () ) )   {  stub . editUserStoreWithDomainName ( previousDomain ,  userStoreDTO ) ;  }   else  {  this . updateUserStore ( userStoreDTO ) ;  }  }
@ Override   public   ByteIndexer   putLong ( long   i ,  long   j )   {  RAW . putLong ( base   +   checkIndex ( i ,  size   -   7 ) ,  j ) ;  return  this ;  }
@ Override  public   InputStream   openInputStream ()   {  return  new   ByteArrayInputStream ( source . getBytes ( Charset . defaultCharset () ) ) ;  }
private   String   printJsonChildren ( final   int   indentation )   {  if  ( getChildren () . isEmpty () )   {  return  StringUtils . repeat ( """" """" ,  indentation )   +   CARET ;  }  final   StringBuilder   sb   =  new   StringBuilder () ;  for  ( final   Field   field   :  getChildren () )   {  sb . append ( field . getCompleteJson ( indentation ) ) . append ( """",\n"""" ) ;  }  if  ( sb . length ()   >   1 )   {  sb . deleteCharAt ( sb . length ()   -   1 ) ;  sb . deleteCharAt ( sb . length ()   -   1 ) ;  }  return  sb . toString () ;  }
private   List < FetchUri >   buildFetchUris ()   throws  MalformedURLException ,  URISyntaxException   {  final   URI   uri   =  new   URL ( this . jenkinsMaster ,  AGENT_JAR_URI_SUFFIX ) . toURI () ;  final   FetchUri   jenkinsAgentFetchUri   =  new   FetchUri ( uri ,  false ,  false ,  false ,  Option . empty () ) ;  return  ImmutableList . < FetchUri > builder ()  . addAll ( this . additionalFetchUris )  . add ( jenkinsAgentFetchUri )  . build () ;  }
@ Override  public   void   run ()   {  try  {  getPrestoQueryResult ( this . datasource ,  this . query ,  this . client ,  true ,  config . getSelectLimit () , this . userName ,  this . properties ) ;  }   catch  ( QueryErrorException   e )   {  log . error ( e . getMessage () ,  e ) ;  }   catch  ( Throwable   e )   {  log . error ( e . getMessage () ,  e ) ;  }   finally  {  if  ( this . client   !=   null )   {  this . client . close () ;  }  }  }
@ Test  public   void   voidTestMapKeyIsString ()   throws  IOException   {  this . testReader   =   new   Reader ( getFile ( """"GeoIP2-City-Test.mmdb"""" ) ) ;  DeserializationException   ex   =  assertThrows ( DeserializationException . class , ()  ->   this . testReader . get ( InetAddress . getByName ( """"2.125.160.216"""" ) , TestModelInvalidMap . class ) ) ;  assertEquals ( """"Error getting record for IP /2.125.160.216 -  Map keys must be strings."""" , ex . getMessage () ) ;  }
public   List < ?   extends  PsiNamedElement >   findDirectNamedChildren ( final   String   path ,  final   PsiElement   psiElement )   {  Predicate < PsiElement >   childFilter   = child  ->  child   instanceof   NavigatablePsiElement  &&   ! ( child   instanceof   JsonStringLiteral )  &&   ! ( child   instanceof   YAMLSequence )  &&   ! ( child   instanceof   JsonArray ) ;  return  findChildrenByPathFrom ( new   PathExpression ( path ) ,  psiElement ,  childFilter ) ;  }
private   static   Stream < Arguments >   provideSeparators ()   {  return  Stream . of ( Arguments . of ( """"\nn"""" ,  """"[10, 110]"""" ) , Arguments . of ( """"\n\n"""" ,  """"[10, 10]"""" ) , Arguments . of ( """"gurka"""" ,  """"[103, 117, 114, 107, 97]"""" ) , Arguments . of ( """""""" ,  """"[]"""" ) ) ;  }
@ Override  public   float   getIntrinsicRatio ()  {  return  ( float )   getIntrinsicWidth ()   /   ( float )   getIntrinsicHeight () ;  }
@ Override  public   double   toMicros ( double   ticks )   {  return  ticks   *   RDTSC_MICRO_FACTOR ;  }
public   boolean   isRunning ()   {  synchronized  ( this )   {  return  installThread   !=   null   &&   installThread . isAlive () ;  }  }
private   void   finishFileDownloading ()   {  downloader . finishFileDownloading () ;  }
public   void   dropNullColumns ()   {  for  ( Iterator < Map . Entry < String ,  TypedValue > >   it   =  mRow . entrySet () . iterator () ;   it . hasNext () ;   )   {  Map . Entry < String ,  TypedValue >   entry   =  it . next () ;  if  ( entry . getValue () . type   ==   TypedValue . CursorFieldType . NULL  ||   entry . getValue () . value   ==   null )   {  it . remove () ;  }  }  }
@ Test  public   void   beansNotCreatedWhenDiscoveryEnabled_EurekaNotEnabled ()   {  new   ApplicationContextRunner ()  . withConfiguration ( AutoConfigurations . of ( EurekaConfigServerBootstrapConfiguration . class ) )  . withPropertyValues ( """"spring.cloud.config.discovery.enabled=true"""" ,  """"eureka.client.enabled=false"""" )  . run ( this :: assertEurekaBeansNotPresent ) ;  }
@ Test  void   getFieldType ()   {  Assertions . assertThat ( fieldValueMapping ) . hasFieldOrPropertyWithValue ( """"fieldType"""" ,  """"String"""" ) ;  }
@ Test  @ SuppressWarnings ( """"unchecked"""" )  void   foldr ()   {  final   List < Integer >   result   = Underscore . foldr ( asList ( asList ( 0 ,  1 ) ,  asList ( 2 ,  3 ) ,  asList ( 4 ,  5 ) ) , ( item1 ,  item2 )  ->  {  List < Integer >   list   =  new   ArrayList <> ( item1 ) ;  list . addAll ( item2 ) ;  return  list ;  } , Collections . < Integer > emptyList () ) ;  assertEquals ( """"[4, 5, 2, 3, 0, 1]"""" ,  result . toString () ) ;  }
public   void   initGrads ()   {  this . wGrads   =   new   HashMap < Integer ,  Float > () ;  }
@ Override  public   void   onCreate ( @ Nullable   Bundle   savedInstanceState )   {  try  {  Bundle   temp   =  new   Bundle () ;  MapsBundleHelper . transfer ( savedInstanceState ,  temp ) ;  delegate . onCreate ( temp ) ;  MapsBundleHelper . transfer ( temp ,  savedInstanceState ) ;  view   =   ( View )   ObjectWrapper . unwrap ( delegate . getView () ) ;  container . removeAllViews () ;  container . addView ( view ) ;  }   catch  ( RemoteException   e )   {  throw  new   RuntimeRemoteException ( e ) ;  }  }
@ Override  public   void   addCastStateListener ( ICastStateListener   listener )   {  Log . d ( TAG ,  """"unimplemented Method: addCastStateListener"""" ) ;  this . castStateListeners . add ( listener ) ;  }
public   EmailSenderAdd   addPropertiesItem ( Properties   propertiesItem )   {  if  ( this . properties   ==   null )   {  this . properties   =   new   ArrayList < Properties > () ;  }  this . properties . add ( propertiesItem ) ;  return  this ;  }
@ Test  public   void   test200WithInvalidJson ()   throws  Exception   {  WebServiceClient   client   =  createSuccessClient ( """"insights"""" ,  """"me"""" ,  """"{"""" ) ;  Exception   ex   =  assertThrows ( GeoIp2Exception . class ,  client :: insights ) ;  assertEquals ( """"Received a 200 response but could not decode it as JSON"""" ,  ex . getMessage () ) ;  }
public   void   setItCaveatTypes ( String   itCaveatTypes )   {  this . itCaveatTypes   =   itCaveatTypes ;  }
@ Override  public   void   onError ( Exception   ex )   {  ex . printStackTrace () ;  }
@ Override  protected   DatabaseObject   snapshotObject ( DatabaseObject   example ,  DatabaseSnapshot   snapshot )   throws  DatabaseException ,  InvalidExampleException   {  Column   column   =  ( Column )   example ;  if  ( column . getType ()   ==   null )   {   
private   View   getControlsContainer ()   {  return  findViewById ( R . id . container_controls ) ;  }
public   void   appendDescription ( Component   description )   {  if  ( this . description . isEmpty () )   {  this . description   =   Lists . newArrayList ( description ) ;  }   else  {  this . description . add ( description ) ;  }  addMessage ( description . getString () ) ;  }
public   void   setWeightedIv ( Double   weightedIv )   {  this . weightedIv   =   weightedIv ;  }
public   static   boolean   canBlur ( Window   window )   {  return  Build . VERSION . SDK_INT   >=   Build . VERSION_CODES . S   &&  window . getWindowManager () . isCrossWindowBlurEnabled () ;  }
default   < T   extends  Provider >   Map < String ,  T >   getAll ( Class < T >   providerClass )   throws  ProviderNotFoundException   {  return  all ( providerClass ) ;  }
public   void   scroll ( int   wheelIndex ,  int   scrollTimes )   {  Wheel   wheel   =  wheels . getWheel ( state . derived . getOrderedVisibleWheels () . get ( wheelIndex ) ) ;  wheelScroller . scroll ( wheel ,  scrollTimes ) ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init ( TestUserMode . SUPER_TENANT_ADMIN ) ;  applicationMgtRestClient   =   new   OAuth2RestClient ( serverURL ,  tenantInfo ) ;  httpClient   =   HttpClientBuilder . create () . setDefaultCookieStore ( cookieStore ) . build () ;  createApplication () ;  }
@ ReactMethod  public   void   getLaunchTagEvent ( Callback   callback )   {  Activity   currentActivity   =  getCurrentActivity () ;  if  ( currentActivity   ==   null )   {  callback . invoke ( ERR_GET_ACTIVITY_FAIL ) ;  return;  }  Intent   launchIntent   =  currentActivity . getIntent () ;  WritableMap   nfcTag   =  parseNfcIntent ( launchIntent ) ;  callback . invoke ( null ,  nfcTag ) ;  }
public   void   setInitialInstanceInfoReplicationIntervalSeconds ( int   initialInstanceInfoReplicationIntervalSeconds )   {  this . initialInstanceInfoReplicationIntervalSeconds   =   initialInstanceInfoReplicationIntervalSeconds ;  }
@ Override  public   boolean   onPrepareOptionsMenu ( Menu   menu )  {  int   filteringId   =  Sorter . convertFilteringId ( prefs . getInt ( """"filteringId"""" ,  0 ) ) ;  MenuItem   filterItem   =  menu . findItem ( filteringId ) ;  if ( filterItem   !=   null )  {  filterItem . setChecked ( true ) ;  }  int   sortingId   =  Sorter . convertSortingId ( prefs . getInt ( """"sortingId"""" ,  1 ) ) ;  MenuItem   sortItem   =  menu . findItem ( sortingId ) ;  if ( sortItem   !=   null )  {  sortItem . setChecked ( true ) ;  }  return  true ;  }
@ Override  protected   void   afterHookedMethod ( MethodHookParam   param )   throws  Throwable   {  var   tabId   =  ( ( Number )   tabs . get ( ( int )   param . args [ 0 ] ) ) . intValue () ;  tabInstances . remove ( tabId ) ;  tabInstances . put ( tabId ,  param . getResult () ) ;  }
@ Test  public   void   thatSchemaKeysAreSuggested ()   {  getCaretCompletions ( """"schema"""" )  . assertContains ( """"$ref"""" , """"format"""" , """"title"""" , """"description"""" , """"default"""" , """"multipleOf"""" , """"maximum"""" , """"exclusiveMaximum"""" , """"minimum"""" , """"exclusiveMinimum"""" , """"maxLength"""" , """"minLength"""" , """"pattern"""" , """"maxItems"""" , """"minItems"""" , """"uniqueItems"""" , """"maxProperties"""" , """"minProperties"""" , """"required"""" , """"enum"""" , """"type"""" , """"items"""" , """"allOf"""" , """"properties"""" , """"additionalProperties"""" , """"discriminator"""" , """"readOnly"""" , """"xml"""" , """"externalDocs"""" , """"example"""" )  . isOfSize ( 30 ) ;  }
@ Override  public   void   setName ( String   name )   {  this . name   =   name ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( name ,  value ,  displayName ,  description ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  InboundSCIMProvisioningConfiguration   inboundSCIMProvisioningConfiguration   =  ( InboundSCIMProvisioningConfiguration )   o ;  return  Objects . equals ( this . proxyMode ,  inboundSCIMProvisioningConfiguration . proxyMode )   &&  Objects . equals ( this . provisioningUserstoreDomain ,  inboundSCIMProvisioningConfiguration . provisioningUserstoreDomain ) ;  }
@ Override  protected   IResource   getLaunchableResource ( IContainer   container )   {  if  ( container   ==   null )   {  return  null ;  }  try  {  IResource []   jsFiles   =  Arrays . stream ( container . members () ) . filter ( member  ->   member . getType ()   ==   IResource . FILE   &&   member . getName () . endsWith ( """".js"""" ) ) . toArray ( IResource [] :: new ) ;  if  ( jsFiles . length   ==   1 )   {  return  jsFiles [ 0 ] ;  }  }   catch  ( CoreException   e )   {  ILog . get () . error ( e . getMessage () ,  e ) ;  }  return  null ;  }
@ Override  public   void   setPlayerInfoInteger ( String   world ,  String   player ,  String   node ,  int   value )   {  setPlayerInfoString ( world ,  player ,  node ,  String . valueOf ( value ) ) ;  }
public   static   Collection < Class >   getAllClasses ( Class   targetClass ) {  Set < Class >   results   =  new   HashSet <> () ;  results . add ( targetClass ) ;  
public   void   setValidSetIndex ( List < Integer >   validSetIndex )   {  this . validSetIndex   =   validSetIndex ;  }
@ Override  public   long   getEvictionIntervalTimerInMs ()   {  return  evictionIntervalTimerInMs ;  }
public   static   DialectEnum   fromValue ( String   value )   {  for  ( DialectEnum   b   :  DialectEnum . values () )   {  if  ( b . value . equals ( value ) )   {  return  b ;  }  }  throw  new   IllegalArgumentException ( """"Unexpected value '""""   +   value   +   """"'"""" ) ;  }
@ Test  public   void   allPropertyKeys_areReturned ()   {  assertThat ( graphApi . getAllPropertyKeys () ,  hasItems ( """"foo"""" ) ) ;  }
@ Override  public   void   onReceive ( Context   context ,  Intent   intent )   {  if  ( isDownloadCurrent ( intent ) )   {  finishDownloading () ;  tearDownDownloadReceiver () ;  }  }
private   void   startStateOperation ( @ Nullable   Bundle   savedInstanceState ,  PendingStateOperation < T >   op )   {  if  ( delegate   !=   null )   {  op . apply ( delegate ) ;  }   else  {  pendingStateOperations . add ( op ) ;  if  ( savedInstanceState   !=   null )   {  if  ( this . savedInstanceState   ==   null )   this . savedInstanceState   =   new   Bundle () ;  this . savedInstanceState . putAll ( savedInstanceState ) ;  }  createDelegate ( listener ) ;  }  }
public   void   treeLevel ( int   treeLevel )   {  this . treeLevel   =   treeLevel ;  }
@ Override  public   void   onReceivedSslError ( WebView   view ,  SslErrorHandler   handler ,  SslError   error )   {  try  {  
public   void   setModel ( List < Resource >   sonarResources )   {  mySonarResourcesTable . setModelAndUpdateColumns ( new   ListTableModel <> ( new   ColumnInfo [] { NAME_COLUMN , KEY_COLUMN , TYPE_COLUMN } ,  sonarResources ,  0 ) ) ;  }
@ Test  public   void   factories ()   {  CombinedSchema . allOf ( asList ( BooleanSchema . INSTANCE ) ) ;  CombinedSchema . anyOf ( asList ( BooleanSchema . INSTANCE ) ) ;  CombinedSchema . oneOf ( asList ( BooleanSchema . INSTANCE ) ) ;  }
@ NonNull  @ Override  public   GuidanceStylist . Guidance   onCreateGuidance ( Bundle   savedInstanceState )   {  String   title   =  getString ( R . string . pref_title_account ) ;  String   breadcrumb   =  getString ( R . string . pref_title_sign_out ) ;  String   description   =  getString ( R . string . pref_sign_out_desc ) ;  Drawable   icon   =  null ;  icon   =   getActivity () . getDrawable ( R . drawable . ic_app_logo_shadowless ) ;  return  new   GuidanceStylist . Guidance ( title ,  description ,  breadcrumb ,  icon ) ;  }
public   Schema   outputSchema ( Schema   input )   {  try  {  return  Utils  . getSchemaFromString ( """"PSIInfo:Tuple(columnId : int, psi : double, unitstats : chararray)"""" ) ;  }   catch  ( ParserException   e )   {  log . debug ( """"Error when generating output schema."""" ,  e ) ;  
@ Test  public   void   notRequiresNumber ()   {  NumberSchema . builder () . requiresNumber ( false ) . build () . validate ( """"foo"""" ) ;  }
public   List < Query >   getAll ( String   datasource ,  String   engine ,  List < String >   queryIds )   {  return  queryRepository . findAllByDatasourceAndEngineAndQueryIdIn ( datasource ,  engine ,  queryIds ) ;  }
@ Test  void   main ()   {  U . main ( new   String []   {} ) ;  new   U <> ( new   ArrayList <> () ) ;  new   U < String > ( """""""" ) ;  new   U <> ( Collections . < Object > emptyList () ) . chain () ;  U . chain ( new   ArrayList < String > () ) ;  U . chain ( new   HashSet < String > () ) ;  assertNull ( U . chain ( new   String []   {} ) . item () ) ;  }
@ Test  public   void   designatedLeaderPrioritizerOverPriorityList ()   {  Node   a   =  createNode ( """"http:
public   < T >   T   get ( final   List < String >   paths )   {  List < String >   newPaths   =  new   ArrayList <> () ;  newPaths . add ( """"value"""" ) ;  newPaths . addAll ( paths ) ;  return  U . get ( U . getStringObjectMap ( data ) ,  newPaths ) ;  }
@ Override  public   Set < String >   getSupportedAnnotationTypes ()   {  return  delegate . getSupportedAnnotationTypes () ;  }
@ Test  void   whenOldBackupFileCannotBeDeletedAnExceptionShouldBeThrown ()   {  var   fileUtil   =  createFileUtil () ;  doNotAccessRealBackupFile ( fileUtil ) ;  
@ Test  public   void   commandPickAliasesTest ()   {  Method   inspectMethod   =  commandMap . get ( """"pick"""" ) ;  Method   inspectFirstMethodAlias   =  commandMap . get ( """"pickup"""" ) ;  Method   inspectSecondMethodAlias   =  commandMap . get ( """"p"""" ) ;  assertEquals ( inspectMethod ,  inspectFirstMethodAlias ) ;  assertEquals ( inspectMethod ,  inspectSecondMethodAlias ) ;  }
@ Override  public   void   setSchemaRegistryClient ( final   String   url ,  final   Map < String ,  ? >   properties )   {  this . schemaRegistryClient   =   ( SchemaRegistryClient )   SchemaRegistryFactory . getSchemaRegistryClient ( SchemaRegistryEnum . CONFLUENT ,  url ,  properties ) ;  }
private   void   incMap ( int   index ,  Map < Integer ,  Long >   mapping )   {  Long   count   =  mapping . get ( index ) ;  if ( count   ==   null )   {  mapping . put ( index ,  Long . valueOf ( 1 ) ) ;  }   else  {  mapping . put ( index ,  count   +   1 ) ;  }  }
@ ParameterizedTest  @ MethodSource ( """"parametersForTestNullOnOptionalField"""" )  final   void   testNullOnOptionalField ( final   List < FieldValueMapping >   schemaAsJson ,  final   String   expected )   {  final   SchemaProcessor   jsonSchemaProcessor   =  new   SchemaProcessor () ;  jsonSchemaProcessor . processSchema ( SchemaTypeEnum . JSON ,  null ,  null ,  schemaAsJson ) ;  final   ObjectNode   message   =  ( ObjectNode )   jsonSchemaProcessor . next () ;  JSONAssert . assertEquals ( message . toString () ,  expected ,  JSONCompareMode . STRICT ) ;  }
@ Override  public   DigitalInput   shutdown ( Context   context )   throws  ShutdownException   {  logger . trace ( """"shutdown GPIO [{}]; {}"""" ,  this . config . address () ,  gpio . getPinPath () ) ;  
@ ApiModelProperty ( required   =   true ,  value   =   """"List of organizations specifying sharing scope and roles."""" )  @ JsonProperty ( """"organizations"""" )  @ Valid  @ NotNull ( message   =   """"Property organizations cannot be null."""" )  public   List < UserShareRequestBodyOrganizations >   getOrganizations ()   {  return  organizations ;  }
public   static   List < Value >   formats ()   {  return  ImmutableList . of ( new   StringValue ( """"int32"""" ) , new   StringValue ( """"int64"""" ) , new   StringValue ( """"float"""" ) , new   StringValue ( """"double"""" ) , new   StringValue ( """"byte"""" ) , new   StringValue ( """"binary"""" ) , new   StringValue ( """"date"""" ) , new   StringValue ( """"date-time"""" ) , new   StringValue ( """"password"""" ) , new   StringValue ( """"email"""" ) , new   StringValue ( """"uuid"""" ) ) ;  }
default   int   serOpen ( CharSequence   device ,  int   baud )   {  return  serOpen ( device ,  baud ,  0 ) ;  }
@ Override  public   void   run ( LocationClientImpl   client )   throws  RemoteException   {  client . removeLocationUpdates ( listener ) ;  }
ScriptBuilder   setPackageCoverage ( String   packageCoverage )   {  this . packageCoverage   =   packageCoverage ;  return  this ;  }
@ Override  public   Change []   fixMissing ( DatabaseObject   missingObject ,  DiffOutputControl   control ,  Database   referenceDatabase ,  Database   comparisonDatabase ,  ChangeGeneratorChain   chain )   {  if  ( referenceDatabase   instanceof   HibernateDatabase   &&   ! comparisonDatabase . supportsSequences () )   {  return  null ;  }   else if  ( comparisonDatabase   instanceof   HibernateDatabase   &&   ! referenceDatabase . supportsSequences () )   {  return  null ;  } else  {  return  super . fixMissing ( missingObject ,  control ,  referenceDatabase ,  comparisonDatabase ,  chain ) ;  }  }
public   void   onSendMessageSuccess ( String   response ,  long   requestId )   {  if  ( this . listener   !=   null )   {  try  {  this . listener . onSendMessageSuccess ( response ,  requestId ) ;  }   catch  ( RemoteException   ex )   {  Log . e ( TAG ,  """"Error calling onSendMessageSuccess: """"   +   ex . getMessage () ) ;  }  }  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"requestObjectEncryptionAlgorithm"""" )  @ Valid  public   MetadataProperty   getRequestObjectEncryptionAlgorithm ()   {  return  requestObjectEncryptionAlgorithm ;  }
public   void   setRemoteRegionConnectionIdleTimeoutSeconds ( int   remoteRegionConnectionIdleTimeoutSeconds )   {  this . remoteRegionConnectionIdleTimeoutSeconds   =   remoteRegionConnectionIdleTimeoutSeconds ;  }
@ Override  public   void   attachBaseContext ( Context   newBase )   {  super . attachBaseContext ( newBase ) ;  }
@ Override  public   void   addResponseCookie ( final   Cookie   cookie )   {  final   Http . CookieBuilder   cookieBuilder   = Http . Cookie . builder ( cookie . getName () ,  cookie . getValue () )  . withPath ( cookie . getPath () )  . withDomain ( cookie . getDomain () )  . withSecure ( cookie . isSecure () )  . withHttpOnly ( cookie . isHttpOnly () ) ;  
public   Builder   setName ( String   name )   {  this . name   =   name ;  return  this ;  }
public   void   showHex ( boolean   showHex )   {  hexEdit . setVisibility ( showHex  ?   View . VISIBLE   :  View . GONE ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   testConclude ()   {  if  ( ! StringUtils . equals ( MultitenantConstants . SUPER_TENANT_DOMAIN_NAME ,  tenant ) )   {  getResponseOfDelete ( KEYSTORE_MANAGEMENT_API_BASE_PATH   +  KEYSTORE_MANAGEMENT_API_CERTIFICATE_PATH   +   PATH_SEPARATOR   +   """"newcert"""" ) ;  }  super . conclude () ;  }
@ Override  public   void   writeTo ( Graph   data ,  Class < ? >   type ,  Type   genericType ,  Annotation []   annotations , MediaType   mediaType ,  MultivaluedMap < String ,  Object >   headers ,  OutputStream   out )   throws  IOException   {  GraphMLWriter . outputGraph ( data ,  out ) ;  out . flush () ;  }
@ Override  @ Nullable  public   Uri   getHiResImageUri ()   {  return  this . hiResImageUri ;  }
public   void   writeCommand ( OutputStream   os ,  String   command )   throws  Exception   {  Log . i ( LilDebi . TAG ,  """"writeCommand: """"   +   command ) ;  logUpdate . update ( """"# """"   +   command   +   """"\n"""" ) ;  os . write ( ( command   +   """"\n"""" ) . getBytes ( """"ASCII"""" ) ) ;  }
@ ReactMethod  public   void   mediaStreamCreate ( String   id )   {  ThreadUtils . runOnExecutor ( ()  ->  {  MediaStream   mediaStream   =  mFactory . createLocalMediaStream ( id ) ;  localStreams . put ( id ,  mediaStream ) ;  } ) ;  }
public   void   copy ( IP   ip )   {  this . ip   =   ip . ip ;  this . mask   =   ip . mask ;  this . network   =   ip . network ;  }
@ ApiModelProperty ( required   =   true ,  value   =   """"Name of the claim to be displayed in the UI."""" )  @ JsonProperty ( """"displayName"""" )  public   String   getDisplayName ()   {  return  displayName ;  }
public   DateFormatter   widgetHeaderDateFormatter ()   {  return  new   DateFormatter ( context ,  getWidgetHeaderDateFormat () ,  clock () . now () ) ;  }
public   ProvisioningConfiguration   outboundProvisioningIdps ( List < OutboundProvisioningConfiguration >   outboundProvisioningIdps )   {  this . outboundProvisioningIdps   =   outboundProvisioningIdps ;  return  this ;  }
@ Test  public   void   thatTypeValuesAreSuggested ()   {  getCaretCompletions ( """"type"""" )  . assertContains ( """"object"""" ,  """"integer"""" ,  """"number"""" ,  """"string"""" ,  """"boolean"""" ,  """"array"""" )  . isOfSize ( 6 ) ;  }
@ Test  public   void   hibernateSchemaExport ()   throws  Exception   {  hibernateSchemaExport ( false ) ;  }
@ Override  public   < T >   void   registerFluidStorage ( IServerExtensionProvider < FluidView . Data >   provider ,  Class < ?   extends  T >   clazz )   {  fluidStorageProviders . register ( clazz ,  provider ) ;  }
public   void   addBPSProfile ( BPSProfile   bpsProfileDTO )   throws  RemoteException , WorkflowAdminServiceWorkflowException ,  WorkflowImplAdminServiceWorkflowImplException   {  stubImpl . addBPSProfile ( bpsProfileDTO ) ;  }
private   void   setLogLevel ()   {  LogManager . getRootLogger () . setLevel ( getLogLevel () ) ;  }
public   List < Double >   normalize ( Object   raw )   {  return  normalize ( config ,  raw ,  method ,  stdDevCutOff ) ;  }
@ Override  public   final   float []   getIdealArray ()   {  if ( this . ideal   ==   null )   {  return  null ;  }  return  this . ideal . getData () ;  }
public   static   SonarClientFactory   getInstance ()   {  return  new   SonarClientFactory () ;  }
@ Test  public   void   testGeoHashLengthAcrossSouthPole ()   {  assertEquals ( 0 ,  hashLengthToCoverBoundingBox ( - 80 ,  10 ,  80 , 20 ) ) ;  }
@ Override   public   CharIndexer   reindex ( Index   index )   {  return  new   CharBufferIndexer ( buffer ,  index ) ;  }
@ Override  public   void   setTrafficEnabled ( boolean   traffic )   throws  RemoteException   {  Log . w ( TAG ,  """"Traffic not yet supported"""" ) ;  }
@ Override   public   int   getSampleRate ()   {  return  sampleRate   >   0   ||   audio_c   ==   null  ?   super . getSampleRate ()   :  audio_c . sample_rate () ;  }
public   static   byte []   fromHexString ( String   s )   {  return  fromHexString ( s ,  0 ,  s . length () ) ;  }
@ Override  protected   void   onPostExecute ( Void   aVoid )   {  super . onPostExecute ( aVoid ) ;  BusProvider . getBus () . post ( new   FileCopiedEvent ( targetLocation ) ) ;  }
public   synchronized   static   Method   loadSendStickerMethod ( ClassLoader   loader )   throws  Exception   {  return  UnobfuscatorCache . getInstance () . getMethod ( loader ,  ()  ->  {  var   method   =  findFirstMethodUsingStrings ( loader ,  StringMatchType . Contains ,  """"StickerGridViewItem.StickerLocal"""" ) ;  if  ( method   ==   null )   throw  new   RuntimeException ( """"SendSticker method not found"""" ) ;  return  method ;  } ) ;  }
@ Override   public   HalfIndexer   put ( long   i ,  long   j ,  float   h )   {  putRaw ( index ( i ,  j ) ,  h ) ;  return  this ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   endTest ()   throws  Exception   {  try  {  deleteSAML2WebSSOConfiguration ( PORT_OFFSET_0 ,  PRIMARY_IS_SAML_ISSUER_NAME ) ;  deleteServiceProvider ( PORT_OFFSET_0 ,  PRIMARY_IS_SERVICE_PROVIDER_NAME ) ;  deleteIdentityProvider ( PORT_OFFSET_0 ,  IDENTITY_PROVIDER_NAME ) ;  deleteSAML2WebSSOConfiguration ( PORT_OFFSET_1 ,  SECONDARY_IS_SAML_ISSUER_NAME ) ;  deleteServiceProvider ( PORT_OFFSET_1 ,  SECONDARY_IS_SERVICE_PROVIDER_NAME ) ;  client . close () ;  }   catch  ( Exception   e )   {  log . error ( """"Failure occured due to :""""   +   e . getMessage () ,  e ) ;  throw  e ;  }  }
@ JsonProperty ( """"names"""" )  public   Map < String ,  String >   getNames ()   {  return  new   HashMap <> ( this . names ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   tearDown ()   throws  Exception   {  driver . quit () ;  }
@ Override   public   int   get ( long ...   indices )   {  return  array [ ( int ) index ( indices ) ]   &   0xFFFF ;  }
private   void   updateDevice ()   {  if  ( ! mIsCreateMode   &&   mDeviceNeedsToUpdate   &&   mDevice   !=   null )   {  getApi () . editDevice ( mDevice ) ;  }  }
@ Test  public   void   formatNameTest ()   {  assertEquals ( """"relative-json-pointer"""" ,  SUBJECT . formatName () ) ;  }
public   Value   withMerge ()   {  return  _merge  ?   this   : construct ( _ignored ,  _ignoreUnknown ,  _allowGetters ,  _allowSetters ,  true ) ;  }
private   void   updateContent ( int   position )   {  if  ( position   ==   0 )   {  setDrawableSelected ( tabConversas ,  DesignUtils . getUnSeenColor () ,  DesignUtils . getPrimaryTextColor () ,  0 ) ;  setDrawableSelected ( tabGrupos ,  Color . TRANSPARENT ,  DesignUtils . getPrimaryTextColor () ,  1 ) ;  setFilter ( position ) ;  }   else  {  setDrawableSelected ( tabConversas ,  Color . TRANSPARENT ,  DesignUtils . getPrimaryTextColor () ,  0 ) ;  setDrawableSelected ( tabGrupos ,  DesignUtils . getUnSeenColor () ,  DesignUtils . getPrimaryTextColor () ,  1 ) ;  setFilter ( position ) ;  }  }
 <argument pos:start=""""""""469:86"""""""" pos:end=""""""""469:99""""""""><expr pos:start=""""""""469:86"""""""" pos:end=""""""""469:99""""""""><name pos:start=""""""""469:86"""""""" pos:end=""""""""469:99"""""""">modelScoreList</name></expr></argument>
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init ( TestUserMode . SUPER_TENANT_ADMIN ) ;  OIDCUtilTest . initUser () ;  createUser ( OIDCUtilTest . user ) ;  OIDCUtilTest . initApplications () ;  createApplications () ;  configureSPToSkipConsent () ;  client   =   HttpClientBuilder . create () . setDefaultCookieStore ( cookieStore ) . build () ;  mockApplicationServer   =   new   MockApplicationServer () ;  mockApplicationServer . start () ;  }
public   UserShareRequestBodyOrganizations   addRolesItem ( RoleWithAudience   rolesItem )   {  if  ( this . roles   ==   null )   {  this . roles   =   new   ArrayList <> () ;  }  this . roles . add ( rolesItem ) ;  return  this ;  }
public   static   String   trimRight ( String   data ,  char   trim )   {  int   count   =  0 ;  for  ( var   index   =  data . length () ;   index   >   0 ;   index -- )  if  ( data . charAt ( index   -   1 )   ==   trim )  count ++ ;  else  return  data . substring ( 0 ,  data . length ()   -   count ) ;  return  EMPTY ;  }
public   void   release ()   {  if  ( ! context . isReleased () )   {  context . release () ;  
public   int   columnWidth ( int   column )   {  return  columnWidths . get ( column ) ;  }
public   void   setFixK2 ( boolean   fixK2 )   {  if  ( fixK2 )   {  flags   |=   CV_CALIB_FIX_K2 ;  }   else  {  flags   &=   ~ CV_CALIB_FIX_K2 ;  }  }
@ BeforeAll  static   void   beforeClass ()   throws  Exception   {  if  ( SERVER   !=   null )   {  return;  }  SERVER   =   new   ServerRunning () ;  }
@ Override  public   PwmConfigBuilder   pwmType ( PwmType   pwmType )   {  this . properties . put ( PwmConfig . PWM_TYPE_KEY ,  pwmType . toString () ) ;  return  this ;  }
public   List < MesosAgentSpecTemplate >   getMesosAgentSpecTemplates ()   {  return  Collections . unmodifiableList ( this . mesosAgentSpecTemplates ) ;  }
@ Override  public   void   onClick ( DialogInterface   dialog ,  int   which )   {  dialog . dismiss () ;  Compression   compression   =  Compression . fromIndex ( which ) ;  
private   boolean   hasYamlRootKey ( final   PsiFile   psiFile ,  final   String   lookupKey ,  final   String   lookupVersion )   {  final   Language   language   =  psiFile . getLanguage () ;  if  ( ! YAMLLanguage . INSTANCE . is ( language ) )   {  return  false ;  }  return  new   PathFinder ()  . findByPathFrom ( lookupKey ,  psiFile )  . filter ( psiElement  ->   hasVersion ( psiElement ,  lookupVersion ) )  . isPresent () ;  }
public   void   setDisplayedValues ( String []   displayedValues )   {  if  ( mDisplayedValues   ==   displayedValues )   {  return;  }  mDisplayedValues   =   displayedValues ;  if  ( mDisplayedValues   !=   null )   {  
@ Test  public   void   createFeatureLabelTest ()   throws  Exception   {  Label   label   =  AllureModelUtils . createFeatureLabel ( """"some-feature"""" ) ;  assertThat ( label . getValue () ,  is ( """"some-feature"""" ) ) ;  assertThat ( label . getName () ,  is ( LabelName . FEATURE . value () ) ) ;  }
public   void   testUnusedRequestBodyMainFile ()   {  doTest ( """"unused_request_body_main_file.json"""" ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  return  this   ==   o   ||   o   instanceof   Scope   &&   scopeUri . equals ( ( ( Scope )   o ) . scopeUri ) ;  }
private   static   Map < String ,  String >   headersOf ( ResponseEntity < ? >   response )   {  HttpHeaders   httpHeaders   =  response . getHeaders () ;  if  ( httpHeaders   ==   null   ||   httpHeaders . isEmpty () )   {  return  Collections . emptyMap () ;  }  Map < String ,  String >   headers   =  new   HashMap <> () ;  for  ( Entry < String ,  List < String > >   entry   :  httpHeaders . entrySet () )   {  if  ( ! entry . getValue () . isEmpty () )   {  headers . put ( entry . getKey () ,  entry . getValue () . get ( 0 ) ) ;  }  }  return  headers ;  }
public   void   finishFileDownloading ()   {  getDownloadManager ( context ) . remove ( downloadId ) ;  tearDownDownloadReceiver () ;  }
public   void   updateTenant ( String   tenantDomain ,  String   admin ,  String   adminPassword ,  String   email ,  String   firstName , String   lastName )  throws  RemoteException ,  TenantMgtAdminServiceExceptionException   {  TenantInfoBean   tenantInfoBean   =  new   TenantInfoBean () ;  tenantInfoBean . setActive ( true ) ;  tenantInfoBean . setAdmin ( admin ) ;  tenantInfoBean . setAdminPassword ( adminPassword ) ;  tenantInfoBean . setEmail ( email ) ;  tenantInfoBean . setFirstname ( firstName ) ;  tenantInfoBean . setLastname ( lastName ) ;  tenantInfoBean . setTenantDomain ( tenantDomain ) ;  updateTenant ( tenantInfoBean ) ;  }
public   GoogleSignInOptions . Builder   setAccountName ( String   accountName )   {  this . account   =   new   Account ( accountName ,  AuthConstants . DEFAULT_ACCOUNT_TYPE ) ;  return  this ;  }
@ Override  public   void   encode ( S2CMessageBlood   message ,  FriendlyByteBuf   buffer )  {  buffer . writeDouble ( message . x ) ;  buffer . writeDouble ( message . y ) ;  buffer . writeDouble ( message . z ) ;  }
@ Override  public   void   doReadFields ( DataInput   in )   throws  IOException   {  int   size   =  in . readInt () ;  this . seedList   =   new   ArrayList < CandidateSeed > ( size ) ;  for  (  int   i   =  0  ;   i   <   size ;   i ++ )   {  int   id   =  in . readInt () ;  int   columnIdCnt   =  in . readInt () ;  List < Integer >   columnIdList   =  new   ArrayList < Integer > ( columnIdCnt ) ;  for  (  int   j   =  0 ;   j   <   columnIdCnt ;   j   ++  )   {  columnIdList . add ( in . readInt () ) ;  }  this . seedList . add ( new   CandidateSeed ( id ,  columnIdList ) ) ;  }  }
@ Override  public   void   hideTarget ( Block   block )   {  Objects . requireNonNull ( block ) ;  hideBlocks . add ( block ) ;  }
private   void   updateLog ()   {  if  ( mFetchLogTask   !=   null )   {  mFetchLogTask . cancel ( true ) ;  }  mLog . setText ( R . string . retrieving_logs ) ;  mFetchLogTask   =   new   UpdateLogTask ( this ) . execute () ;  }
@ PostMapping ( """"/owners/{ownerId}/pets"""" )  @ ResponseStatus ( HttpStatus . CREATED )  public   Pet   processCreationForm ( @ RequestBody   PetRequest   petRequest , @ PathVariable ( """"ownerId"""" )   @ Min ( 1 )   int   ownerId )   {  Owner   owner   =  ownerRepository . findById ( ownerId )  . orElseThrow ( ()  ->   new   ResourceNotFoundException ( """"Owner """"   +   ownerId   +   """" not found"""" ) ) ;  final   Pet   pet   =  new   Pet () ;  owner . addPet ( pet ) ;  return  save ( pet ,  petRequest ) ;  }
 <argument pos:start=""""""""661:54"""""""" pos:end=""""""""661:62""""""""><expr pos:start=""""""""661:54"""""""" pos:end=""""""""661:62""""""""><literal type=""""""""string"""""""" pos:start=""""""""661:54"""""""" pos:end=""""""""661:62"""""""">""""""""#3465A4""""""""</literal></expr></argument>
public   String   join ( final   String   separator )   {  return  join ( iterable ,  separator ) ;  }
@ LocalData  @ Test  public   void   testRoleAuthority ()   {  jenkinsRule . jenkins . setSecurityRealm ( new   MockSecurityRealm () ) ;  try  ( ACLContext   c   =  ACL . as ( User . getById ( """"alice"""" ,  true ) ) )   {  assertTrue ( jenkinsRule . jenkins . hasPermission ( Permission . READ ) ) ;  }  }
public   boolean   hasPath ( final   String   pathExpression )   {  return  new   PathFinder () . isInsidePath ( psiElement ,  pathExpression ) ;  }
@ Override  public   InputStream   inputStream ()   throws  IOException   {  return  inputStreamFactory . apply ( info ) ;  }
public   void   listResidences ( Player   player ,  int   page ,  boolean   showhidden )   {  this . listResidences ( player ,  player . getName () ,  page ,  showhidden ) ;  }
public   void   setConfig ( BrowserConfig   config )  {  this . config   =   config ;  }
private   boolean   prepareSocket ()   throws  IOException   {  boolean   upgradeSocketToSSLSocket   =  false ;  
private   OfflineFile   getNextDownloadFile ()   {  OfflineFile   file   =  offlineFileRepository . getFileWithState ( OfflineFile . OUT_OF_DATE ) ;  if  ( file   ==   null )   {  return  offlineFileRepository . getFileWithState ( OfflineFile . DOWNLOADING ) ;  }  return  file ;  }
private   void   refreshView ()   {  if  ( mMaps   ==   null   ||   mMaps . isEmpty () )   {  mMapGrid . setVisibility ( View . GONE ) ;  mNoMapsInfo . setVisibility ( View . VISIBLE ) ;  }   else  {  mMapGrid . setVisibility ( View . VISIBLE ) ;  mNoMapsInfo . setVisibility ( View . GONE ) ;  BaseAdapter   mapGridAdapter   =  ( BaseAdapter )   mMapGrid . getAdapter () ;  if  ( mapGridAdapter   ==   null )   {  mapGridAdapter   =   new   MapGridAdapter () ;  mMapGrid . setAdapter ( mapGridAdapter ) ;  }   else  {  mapGridAdapter . notifyDataSetChanged () ;  }  }  }
private   void   addRandomEntry ( Geomem < String ,  String >   g )   {  double   lat   =  GeomemTest . topLeftLat   +   5   -   Math . random ()   *   40 ;  double   lon   =  GeomemTest . topLeftLong   -   5   +   Math . random ()   *   80 ;  long   t   =  Math . round ( Math . random ()   *   1200 ) ;  String   id   =  UUID . randomUUID () . toString () . substring ( 0 ,  2 ) ;  g . add ( lat ,  lon ,  t ,  id ,  id ) ;  }
@ Override  public   boolean   setPlayerFlag ( String   player ,  String   flag ,  FlagState   state )   {  ResidenceFlagChangeEvent   fc   =  new   ResidenceFlagChangeEvent ( residence ,  null , flag , ResidenceFlagChangeEvent . FlagType . PLAYER , state ,  player ) ;  Residence . getServ () . getPluginManager () . callEvent ( fc ) ;  if ( fc . isCancelled () )  return  false ;  return  super . setPlayerFlag ( player , flag , state ) ;  }
public   void   setEnableSignatureValidation ( Boolean   enableSignatureValidation )   {  this . enableSignatureValidation   =   enableSignatureValidation ;  }
@ Override  public   boolean   accept ( Path   path )   {  boolean   hiddenOrSuccessFile   =  path . getName () . startsWith ( Constants . HIDDEN_FILES )  ||   path . getName () . equalsIgnoreCase ( """"_SUCCESS"""" ) ;  if ( pathFilter   !=   null )   {  return  ! hiddenOrSuccessFile   &&   pathFilter . accept ( path ) ;  }   else  {  return  ! hiddenOrSuccessFile ;  }  }
@ Override  public   Note   next ()   {  if  ( curNode . isEmpty () )   {  return  null ;  }  Note   note   =  curNode . get () . getNote () ;  curIndex ++ ;  curDelta   +=   note . getDelta () ;  prevNode   =   curNode ;  
@ Override  public   void   apply ( Wheel   wheel )   {  wheel . setValue ( date ) ;  }
public   void   ioctl ( long   command ,  int   value )   throws  IOException   {  int   response   =  directIOCTL ( this . fdHandle ,  command ,  value ) ;  if  ( response   <   0 )  throw  new   LinuxFileException () ;  }
@ ApiModelProperty ( example   =   """"basic"""" ,  value   =   """""""" )  @ JsonProperty ( """"displayName"""" )  @ Valid  public   String   getDisplayName ()   {  return  displayName ;  }
@ Override  public   void   onIceConnectionChange ( PeerConnection . IceConnectionState   iceConnectionState )   {  ThreadUtils . runOnExecutor ( ()  ->  {  WritableMap   params   =  Arguments . createMap () ;  params . putInt ( """"pcId"""" ,  id ) ;  params . putString ( """"iceConnectionState"""" ,  iceConnectionStateString ( iceConnectionState ) ) ;  webRTCModule . sendEvent ( """"peerConnectionIceConnectionChanged"""" ,  params ) ;  } ) ;  }
@ Override  public   void   getStreetViewPanoramaAsync ( IOnStreetViewPanoramaReadyCallback   callback )   throws  RemoteException   {  }
@ Override  public   void   onReceive ( Context   context ,  Intent   intent )   {  final   String   action   =  intent . getAction () ;  switch  ( action )   {  case  ACTION_PAUSE :  mTransportControls . pause () ;  pauseNotification () ;  break;  case  ACTION_PLAY :  mTransportControls . play () ;  break;  case  ACTION_NEXT :  mTransportControls . skipToNext () ;  break;  case  ACTION_PREV :  mTransportControls . skipToPrevious () ;  break;  default:  Log . w ( TAG ,  """"Unknown intent ignored. Action=""""   +   action ) ;  }  }
@ DataBoundSetter  public   void   setOutputFile ( String   outputFile )   {  this . outputFile   =   outputFile ;  }
private   File   selectExecutable ()   {  FileChooser   fc   =  new   FileChooser () ;  fc . setTitle ( """"Select executable file"""" ) ;  fc . getExtensionFilters () . addAll ( new   FileChooser . ExtensionFilter ( """"Executables"""" ,  """"*"""" ,  """"*.exe"""" ) , new   FileChooser . ExtensionFilter ( """"OSX Executables"""" ,  """"*.out"""" ,  """"*.app"""" ) , new   FileChooser . ExtensionFilter ( """"All Files"""" ,  """"*.*"""" ) ) ;  return  fc . showOpenDialog ( null ) ;  }
@ Override  protected   void   doHealthCheck ( Health . Builder   builder )   {  builder . down () ;  }
private   ArrayList < Server >   getServers ()   {  return  getIntent () . getParcelableArrayListExtra ( Intents . Extras . INTENT_SERVERS ) ;  }
public   int   getRandomLargeTextSize ( Random   randomTextSize ,  int   minSize ,  int   maxSize )   {  return  randomTextSize . nextInt ( maxSize   -   minSize )   +   minSize ;  }
public   static   BigInteger   toBigInteger ( long   l )   {  BigInteger   bi   =  BigInteger . valueOf ( l   &   0x7FFFFFFFFFFFFFFFL ) ;  if  ( l   <   0 )   {  bi   =   bi . setBit ( 63 ) ;  }  return  bi ;  }
private   long   getOrCreateRelationship ( long   start ,  long   end ,  RelationshipType   type )   {  long   relationship   =  graph . createRelationship ( start ,  end ,  type ) ;  graph . addRelationshipProperty ( relationship ,  OwlRelationships . RDFS_IS_DEFINED_BY . name () , definingOntology ) ;  return  relationship ;  }
default   void   gpioDisableNotifications ( int   pin )   {  gpioNotifications ( pin ,  false ) ;  }
public   void   setwGrads ( Map < Integer ,  float [] >   wGrads )   {  this . wGrads   =   wGrads ;  }
@ Override  @ SuppressWarnings ( """"unchecked"""" )  public   < K ,  V >   Chain < Map < K ,  V > >   toMap ()   {  return  new   Chain <> ( Underscore . toMap ( ( Iterable < Map . Entry < K ,  V > > )   value () ) ) ;  }
public   UserDefinedLocalAuthenticatorCreation   name ( String   name )   {  this . name   =   name ;  return  this ;  }
@ GET  @ Path ( """"name/{name}"""" )  public   Object   getByName ( @ PathParam ( """"name"""" )   String   name ,  @ QueryParam ( """"fullText"""" )   boolean   fullText )   {  LOG . info ( """"Getting by name """"   +   name ) ;  try  {  List < Country >   countries   =  CountryService . getInstance () . getByName ( name ,  fullText ) ;  if  ( ! countries . isEmpty () )   {  return  countries ;  }  return  getResponse ( Status . NOT_FOUND ) ;  }   catch  ( Exception   e )   {  LOG . error ( e . getMessage () ,  e ) ;  return  getResponse ( Status . INTERNAL_SERVER_ERROR ) ;  }  }
private   String   itemResponse ( String   title ,  String   code )   {  StringBuilder   sb   =  new   StringBuilder () ;  String   status   =  """""""" ;  if  ( ! code . equals ( """"default"""" )   &&   ! code . matches ( """"[1-5]XX"""" ) )   {  status   =   HttpStatus . getReasonPhrase ( Integer . parseInt ( code ) ) ;  }  sb . append ( StringUtils . repeat ( ' ' ,  4 ) )  . append ( """"- """" )  . append ( title )  . append ( code )  . append ( ' ' )  . append ( status )  . append ( System . lineSeparator () ) ;  return  sb . toString () ;  }
public   static   IndependentTreeModel   loadFromStream ( InputStream   input ,  boolean   isConvertToProb ,  boolean   isOptimizeMode )  throws  IOException   {  return  loadFromStream ( input ,  isConvertToProb ,  isOptimizeMode ,  true ) ;  }
@ Test  public   void   classImplementsJSONString ()   {  assertTrue ( JSONWriter . implementsJSONString ( new   Ancestor () ) ) ;  }
public   static   < E >   List < E >   filterIndexed ( final   List < E >   list ,  final   PredicateIndexed < E >   pred )   {  final   List < E >   filtered   =  new   ArrayList <> () ;  int   index   =  0 ;  for  ( E   element   :  list )   {  if  ( pred . test ( index ,  element ) )   {  filtered . add ( element ) ;  }  index   +=   1 ;  }  return  filtered ;  }
private   VBox   createEnvelopeBackground ( DoubleExpression   width ,  DoubleExpression   height )   {  AnchorPane   topCell   =  new   AnchorPane () ;  topCell . getStyleClass () . add ( """"dynamics-top-cell"""" ) ;  topCell . prefWidthProperty () . bind ( width ) ;  topCell . prefHeightProperty () . bind ( height . divide ( 2.0 ) ) ;  AnchorPane   bottomCell   =  new   AnchorPane () ;  bottomCell . getStyleClass () . add ( """"dynamics-bottom-cell"""" ) ;  bottomCell . prefWidthProperty () . bind ( width ) ;  bottomCell . prefHeightProperty () . bind ( height . divide ( 2.0 ) ) ;  return  new   VBox ( topCell ,  bottomCell ) ;  }
public   static   Runtime   newInstance ( Context   context )   {  return  new   DefaultRuntime ( context ) ;  }
@ Test  public   void   invalidArrayItemSchema ()   {  Assertions . assertThrows ( SchemaException . class ,  ()  ->  {  SchemaLoader . load ( get ( """"invalidArrayItemSchema"""" ) ) ;  } ) ;  }
@ Override  public   String   toString ()   {  return  """"RequestIndexingRequest{""""   +  """"versionCode=""""   +   versionCode   +  """", packageName='""""   +   packageName   +   '\''   +  """", corpus='""""   +   corpus   +   '\''   +  """", sequenceNumber=""""   +   sequenceNumber   +  '}' ;  }
public   double   getPlayerInfoDouble ( String   world ,  OfflinePlayer   op ,  String   node ,  double   defaultValue )   {  return  getUser ( op ) . getOptionDouble ( node ,  world ,  defaultValue ) ;  }
@ Test  public   void   invokesMultipleProcesors_asIterable ()   {  NoOpProcessor   noopProcessor1   =  new   NoOpProcessor () ;  NoOpProcessor   noopProcessor2   =  new   NoOpProcessor () ;  assertThat ( noopProcessor1 . invoked ) . isFalse () ;  assertThat ( noopProcessor2 . invoked ) . isFalse () ;  assertAbout ( javaSource () )  . that ( HELLO_WORLD_RESOURCE )  . processedWith ( Arrays . asList ( noopProcessor1 ,  noopProcessor2 ) )  . compilesWithoutError () ;  assertThat ( noopProcessor1 . invoked ) . isTrue () ;  assertThat ( noopProcessor2 . invoked ) . isTrue () ;  }
public   Builder   setName ( String   name )   {  newVoicebank . name   =   name ;  return  this ;  }
public   static   void   fractalTriangleWave ( double []   line ,  int   i ,  int   j ,  double   a ,  int   roughness )   {  int   m   =  ( j - i ) / 2 + i ;  if  ( i   ==   j   ||   i   ==   m )   {  return;  }  line [ m ]   =   ( line [ i ] + line [ j ] ) / 2   +   a ;  if  ( roughness   >   0   &&   line . length   >   roughness * ( j - i ) )   {  fractalTriangleWave ( line ,  i ,  m ,  0 ,  roughness ) ;  fractalTriangleWave ( line ,  m ,  j ,  0 ,  roughness ) ;  }   else  {  fractalTriangleWave ( line ,  i ,  m ,   a / SQRT2 ,  roughness ) ;  fractalTriangleWave ( line ,  m ,  j ,  - a / SQRT2 ,  roughness ) ;  }  }
@ Hide  public   CurrentLocationRequest . Builder   setImpersonation ( @ Nullable   ClientIdentity   impersonation )   {  this . impersonation   =   impersonation ;  return  this ;  }
public   JsonObject   requireObject ()   {  return  requireObject ( identity () ) ;  }
@ AfterClass  public   void   tearDown ()   throws  IOException   {  FileUtils . deleteDirectory ( new   File ( """"common"""" ) ) ;  }
public   List < EventProviderType >   getTypesOfActiveEventProviders ()   {  return  getActiveEventSources () . stream () . map ( s  ->   s . source . providerType ) . distinct () . collect ( Collectors . toList () ) ;  }
@ Override   public   double   get ( long   i )   {  return  getRaw ( index ( i ) ) ;  }
public   void   setRequestPathAuthenticators ( List < String >   requestPathAuthenticators )   {  this . requestPathAuthenticators   =   requestPathAuthenticators ;  }
public   void   compose ( ImageTransformer . Parameters   p1 ,  boolean   inverse1 , ImageTransformer . Parameters   p2 ,  boolean   inverse2 )   {  throw  new   UnsupportedOperationException ( """"Compose operation not supported."""" ) ;  }
public   void   testIsExistingUserWithID ()   throws  Exception   {  Assert . assertTrue ( userMgtClient . isExistingUserWithID ( userId ) ) ;  }
private   String   getIntrospectionUrl ( String   tenantDomain )   {  return  """"carbon.super"""" . equalsIgnoreCase ( tenantDomain )  ?  OAuth2Constant . INTRO_SPEC_ENDPOINT   :  OAuth2Constant . TENANT_INTRO_SPEC_ENDPOINT ;  }
static   DigitalOutputConfigBuilder   newInstance ( Context   context )    {  return  DefaultDigitalOutputConfigBuilder . newInstance ( context ) ;  }
private   boolean   isLargePoster ( Person   p )   {  return  DateUtils . getMonth ( p . getBirthday () )   ==   Month . JANUARY ;  }
public   void   changeUserStoreState ( String   domain ,  boolean   isDisabled )   throws  Exception   {  stub . changeUserStoreState ( domain ,  isDisabled ) ;  }
@ Override  public   boolean   canUseFor ( ObjectIdGenerator < ? >   gen )   {  return  ( gen   instanceof   StringIdGenerator ) ;  }
public   boolean   isNewThresholdAnalysisExploitable ()   {  return  newThresholdAnalysisExploitable ;  }
@ Override  public   boolean   equals ( java . lang . Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  CategoriesRes   categoriesRes   =  ( CategoriesRes )   o ;  return  Objects . equals ( this . id ,  categoriesRes . id )   &&  Objects . equals ( this . name ,  categoriesRes . name )   &&  Objects . equals ( this . self ,  categoriesRes . self )   &&  Objects . equals ( this . connectors ,  categoriesRes . connectors ) ;  }
@ DataBoundSetter  public   void   setUnstableNewHigh ( final   Integer   unstableNewHigh )   {  this . unstableNewHigh   =   unstableNewHigh ;  }
@ Override  MapPosition   getMapPosition ( Map   map )   {  return  GmsMapsTypeHelper . fromCameraPosition ( cameraPosition ) ;  }
@ JsonProperty ( """"is_anycast"""" )  public   boolean   isAnycast ()   {  return  this . isAnycast ;  }
public   static   Map < Integer ,  Integer >   getIdBinCategorySizeMap ( List < ColumnConfig >   columnConfigList )   {  Map < Integer ,  Integer >   idBinCategoryMap   =  new   HashMap <> ( columnConfigList . size () ) ;  for ( ColumnConfig   columnConfig   :  columnConfigList )   {  if ( columnConfig . getBinCategory ()   !=   null )   {  idBinCategoryMap . put ( columnConfig . getColumnNum () ,  columnConfig . getBinCategory () . size () ) ;  }   else  {  idBinCategoryMap . put ( columnConfig . getColumnNum () ,  0 ) ;  }  }  return  idBinCategoryMap ;  }
private   void   setUpMusicLogo ( ViewHolder   viewHolder )   {  if  ( viewHolder   !=   null )  viewHolder . mCardView . setMainImage ( ContextCompat . getDrawable ( mContext ,  R . drawable . tv_ic_audio ) ) ;  }
@ Test  void   once ()   {  final   Integer []   counter   =  new   Integer []   { 0 } ;  Supplier < Integer >   incr   = ()  ->  {  counter [ 0 ] ++ ;  return  counter [ 0 ] ;  } ;  final   Supplier < Integer >   onceIncr   =  Underscore . once ( incr ) ;  onceIncr . get () ;  onceIncr . get () ;  await () . atLeast ( 60 ,  TimeUnit . MILLISECONDS )  . until ( ()  ->  {  assertEquals ( 1 ,  counter [ 0 ] . intValue () ,  """"incr was called only once"""" ) ;  assertEquals ( 1 , onceIncr . get () . intValue () , """"stores a memo to the last value"""" ) ;  return  true ;  } ) ;  }
public   void   addRelation ( RelationType   relationType ,  RelationDirection   direction )   {  int   idx   =  relationType . ordinal () ;  directions [ idx ]   =   directions [ idx ] . sum ( direction ) ;  }
public   SortPomImplUtil   sortDependencies ( String   sortOrder )   {  sortDependencies   =   sortOrder ;  return  this ;  }
@ Override  public   void   onClick ( DialogInterface   dialog ,  int   which )   {  deleteFileFromOfflineStorage ( event . getFile () ) ;  }
private   void   setRelPoint ( Point   point ,  int   offset )   {  final   Float []   oldVal   =  Arrays . copyOf ( coords ,  coords . length ) ;  if  ( point   ==   null )   {  coords [ offset ]   =   null ;  coords [ offset   +   1 ]   =   null ;  }   else  {  coords [ offset ]   =   ( float )   point . x   /   imageSize . width ;  coords [ offset   +   1 ]   =   1f   -   ( float )   point . y   /   imageSize . height ;  }  pcs . firePropertyChange ( PROPERTY_COORDS ,  oldVal ,  coords ) ;  }
public   ChangedHeader   setDeprecated ( final   boolean   deprecated )   {  this . deprecated   =   deprecated ;  return  this ;  }
@ Override  public   double   scaleY ( int   scaleMe )   {  return  verticalScale . get ()   *   scaleMe ;  }
@ Test  public   void   testGeoHashLengthAcrossLongitude180 ()   {  assertEquals ( 0 ,  hashLengthToCoverBoundingBox ( 71.676351 ,  178.389963 ,  70.633291 , - 177.116629 ) ) ;  }
@ NonNull  @ Override  public   Task < Void >   setMockMode ( boolean   mockMode )   {  return  scheduleTask ( ( VoidReturningGoogleApiCall < LocationClientImpl > )   ( client )  ->   client . setMockMode ( mockMode ) ) ;  }
public   static   RefineQueries   getQueries ( String   queries )   throws  IOException   {  return  MAPPER . readValue ( queries ,  RefineQueries . class ) ;  }
public   void   deleteUserClaimValuesWithID ( String   userID ,  String []   claims ,  String   profileName )  throws  UserStoreException ,  RemoteException ,  UUIDUserStoreManagerServiceUserStoreExceptionException   {  uuidUserStoreManagerServiceStub . deleteUserClaimValuesWithID ( userID ,  claims ,  profileName ) ;  }
@ Override  public   boolean   isOptionalFieldAccordingToSchema ( final   String   completeFieldName ,  final   String   fieldName ,  final   int   level )   {  var   subSchema   =  findSchema ( completeFieldName ,  this . schema ,  new   AtomicBoolean ( false ) ) ;  if  ( subSchema . getType () . equals ( Type . MAP ) )   {  subSchema   =   findRecursiveSchemaForRecord ( subSchema . getValueType () ) ;  }   else if  ( subSchema . getType () . equals ( Type . ARRAY ) )   {  subSchema   =   findRecursiveSchemaForRecord ( subSchema . getElementType () ) ;  }  return  isOptionalField ( subSchema ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  RunConditionCheckResult   that   =  ( RunConditionCheckResult )   o ;  if  ( mShouldRun   !=   that . mShouldRun )   return  false ;  return  mBlockReasons . equals ( that . mBlockReasons ) ;  }
public   void   addFedIdpAccountAssociation ( String   idpName , String   idpAssociatedId )   throws  Exception {  userProfileMgtServiceStub . associateID ( idpName ,  idpAssociatedId ) ;  }
@ Override  public   void   onError ( WebSocket   conn ,  Exception   ex )   {  if  ( ex   instanceof   BindException )   {  wasBindException [ 0 ]   =   true ;  }  if  ( ex   instanceof   ConcurrentModificationException )   {  wasConcurrentException [ 0 ]   =   true ;  }  }
static   void   save_to_prefs ( SharedPreferences   store ,  List < String >   entries )  {  JSONArray   arr   =  new   JSONArray () ;  for  ( int   i   =  0 ;   i   <   entries . size () ;   i ++ )  arr . put ( entries . get ( i ) ) ;  store . edit ()  . putString ( PERSIST_PREF ,  arr . toString () )  . commit () ;  }
@ Override   public   FloatIndexer   put ( long   i ,  long   j ,  long   k ,  float   f )   {  array [ ( int ) index ( i ,  j ,  k ) ]   =   f ;  return  this ;  }
public   SortPomImplUtil   encoding ( String   encoding )   {  this . encoding   =   encoding ;  return  this ;  }
public   static   Tooltip   create ( List < Component >   components )   {  return  create ( components ,  components ) ;  }
public   CloseableHttpResponse   getResponseOfHttpPost ( String   endPointUrl ,  String   jsonRequest ,  Header []   headers )  throws  IOException   {  HttpPost   request   =  new   HttpPost ( endPointUrl ) ;  request . setHeaders ( headers ) ;  request . setEntity ( new   StringEntity ( jsonRequest ) ) ;  return  client . execute ( request ) ;  }
@ Override  public   void   setTranslationY ( float   f )   {  if  ( this . getHeight ()   >   0 )   {  int   v   =  f   >   ( ( float )   this . getHeight () )  ?   GONE   :  VISIBLE ;  if  ( v   ==   VISIBLE )   {  super . setTranslationY ( f ) ;  }  this . setVisibility ( v ) ;  }  }
public   Builder   with ( EurekaClient   eurekaClient )   {  this . eurekaClient   =   eurekaClient ;  return  this ;  }
@ Override  public   int   read ( char []   cbuf ,  int   off ,  int   len )   throws  IOException   {  int   numChars   =  super . read ( cbuf ,  off ,  len ) ;  replaceBadXmlCharactersBySpace ( cbuf ,  off ,  len ) ;  return  numChars ;  }
private   Cursor   createMockCursor ( String   trackName ,  long   trackStartDate )   {  Cursor   mockCursor   =  mock ( Cursor . class ) ;  when ( mockCursor . getColumnIndex ( Schema . COL_NAME ) ) . thenReturn ( 1 ) ;  when ( mockCursor . getString ( 1 ) ) . thenReturn ( trackName ) ;  when ( mockCursor . getColumnIndex ( Schema . COL_START_DATE ) ) . thenReturn ( 2 ) ;  when ( mockCursor . getLong ( 2 ) ) . thenReturn ( trackStartDate ) ;  return  mockCursor ;  }
private   void   deleteUser ( String   userId )   throws  Exception   {  scim2RestClient . deleteUser ( userId ) ;  }
public   void   testGetUserListConditionWithID ()   throws  Exception   {  ConditionDTO   conditionDTO   =  new   ConditionDTO () ;  conditionDTO . setOperation ( OperationalOperation . AND . toString () ) ;  UserDTO   []   userDTOS   =  userMgtClient . getUserListWithID ( conditionDTO ,  """"PRIMARY"""" ,  defaultProfile ,  100 ,  0 ,  null , null ) ;  Assert . assertNotNull ( userDTOS ) ;  Assert . assertTrue ( userDTOS . length   >   0 ) ;  }
protected   Optional < String >   checkEscaping ( String   subject )   {  for  ( int   i   =  0 ;   i   <   subject . length ()   -   1 ;   ++ i )   {  char   c   =  subject . charAt ( i ) ;  if  ( c   ==   '~' )   {  char   next   =  subject . charAt ( i   +   1 ) ;  if  ( next   ==   '1'   ||   next   ==   '0' )   {  continue;  }  return  failure ( subject ) ;  }  }  if  ( subject . charAt ( subject . length ()   -   1 )   ==   '~' )   {  return  failure ( subject ) ;  }  return  Optional . empty () ;  }
public   static   float   getPower ( Level   world ,  BlockPos   pos )   {  return  ClientProxy . getEnchantPowerBonus ( world . getBlockState ( pos ) ,  world ,  pos ) ;  }
public   void   setFisheyeAutoExposureSkipFrames ( int   value )   {  setOption ( RealSense . RS_OPTION_FISHEYE_AUTO_EXPOSURE_SKIP_FRAMES ,  value ) ;  }
private   void   write ( ByteBuffer   buf )   {  log . trace ( """"write({}): {}"""" ,  buf . remaining () , buf . remaining ()   >   1000  ?   """"too big to display""""   :  new   String ( buf . array () ) ) ;  outQueue . add ( buf ) ;  wsl . onWriteDemand ( this ) ;  }
public   void   repeatImage ( Rectangle   bb ,  Rectangle   pos ,  Rectangle   clip , boolean   repeatX ,  boolean   repeatY ,  Target   target )  {  if  ( repeatX   &&   repeatY )  drawRepeatBoth ( pos ,  bb . width ,  bb . height ,  clip ,  target ) ;  else if  ( repeatX )  drawRepeatX ( pos ,  bb . width ,  clip ,  target ) ;  else if  ( repeatY )  drawRepeatY ( pos ,  bb . height ,  clip ,  target ) ;  else  target . apply ( pos . x ,  pos . y ) ;  }
@ Override  public   void   onShutdown ( Container   container )   {  if  ( jobManager   !=   null )   {  try  {  jobManager . stop () ;  }   catch  ( Exception   ex )   {  throw  new   IllegalStateException ( ex ) ;  }  }  }
@ Override  public   String   toUrlValue ()   {  return  name () . toLowerCase ( Locale . ENGLISH ) ;  }
@ Override  public   void   afterEach ( ExtensionContext   context )   throws  Exception   {  long   time   =  System . currentTimeMillis () ;  do  {  LockSupport . parkNanos ( 10000000 ) ;  }  while  ( checkZombies ( true )   &&   System . currentTimeMillis ()   -   time   <   1000 ) ;  checkZombies ( false ) ;  }
@ Test  public   void   testOk ()   {  final   Result   result   =  ( Result )   adapter . adapt ( new   OkAction ( VALUE ) ,  context ) ;  assertEquals ( 200 ,  result . status () ) ;  assertEquals ( VALUE ,  getBody ( result ) ) ;  }
public   double   getWeightedTotal ()   {  return  this . weightedTp   +   this . weightedTn   +   this . weightedFn   +   this . weightedFp ;  }
@ Override   public   UByteIndexer   put ( long []   indices ,  int []   b ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  array [ ( int ) index ( indices )   +   n ]   =   ( byte ) b [ offset   +   n ] ;  }  return  this ;  }
@ Override  public   String   getDisplayName ()   {  return  Messages . JobBadgeAction_DisplayName () ;  }
@ Override  public   int   getRemoteRegionConnectionIdleTimeoutSeconds ()   {  return  remoteRegionConnectionIdleTimeoutSeconds ;  }
@ Test  void   canCreateActionForShortlogForWindowsBreakLines ()   {  final   String   eol   =  """"\r\n"""" ;  canCreateActionForShortlog ( new   ShortlogActionCreator ( lineIdentifier ,  eol ) ,  """"[Pipeline] echo""""   +   eol ,  """"testlog-crlf.log"""" ,  false ) ;  }
@ Override  public   void   jade$setConnected ( boolean   connected )   {  this . jade$isConnected   =   connected ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"authenticators"""" )  @ Valid  public   List < FederatedAuthenticator >   getAuthenticators ()   {  return  authenticators ;  }
private   WebClient . Builder   setUrl ( WebClient . Builder   builder ,  String   serviceUrl )   {  String   url   =  UriComponentsBuilder . fromUriString ( serviceUrl ) . userInfo ( null ) . toUriString () ;  final   EurekaHttpClientUtils . UserInfo   userInfo   =  extractUserInfo ( serviceUrl ) ;  if  ( userInfo   !=   null )   {  builder . filter ( ExchangeFilterFunctions . basicAuthentication ( userInfo . username () ,  userInfo . password () ) ) ;  }  return  builder . baseUrl ( url ) ;  }
private   boolean   isAfterSuiteConfigMethod ( ITestResult   iTestResult )   {  return  ConfigMethodType . AFTER_SUITE . equals ( getConfigMethodType ( iTestResult ) ) ;  }
@ Deprecated  public   static   void   writeObject ( AutoSafeParcelable   object ,  Parcel   parcel ,  int   flags )   {  if  ( object   ==   null )  throw  new   NullPointerException () ;  Class < ? >   clazz   =  object . getClass () ;  ClassDescriptor < ? >   descriptor   =  new   ClassDescriptor <> ( clazz ) ;  writeObject ( object ,  parcel ,  flags ,  descriptor ) ;  }
 <argument pos:start=""""""""174:104"""""""" pos:end=""""""""174:112""""""""><expr pos:start=""""""""174:104"""""""" pos:end=""""""""174:112""""""""><name pos:start=""""""""174:104"""""""" pos:end=""""""""174:112"""""""">fluidView</name></expr></argument>
@ java . lang . Override  public   java . lang . String   toString ()   {  return  """"CacheKey(left=""""  +   this . getLeft ()  +   """", right=""""  +   this . getRight ()  +   """", context=""""  +   this . getContext ()  +   """")"""" ;  }
@ Test  public   void   getByLanguageCode ()   throws  Exception   {  List < Country >   countries   =  CountryService . getInstance () . getByLanguage ( """"en"""" ) ;  Assert . assertNotNull ( countries ) ;  Assert . assertFalse ( countries . isEmpty () ) ;  for ( Country   country   :  countries )   {  Assert . assertTrue ( country . getLanguages () . contains ( """"en"""" ) ) ;  }  }
@ Command ( command = """"gold"""" ,  aliases = { """""""" } ,  description = """"Adjusts the amount of gold the player has"""" ,  debug = true )  public   void   command_gold ( String   arg )   {  int   gold   =  Integer . parseInt ( arg ) ;  player . setGold ( gold ) ;  }
@ Override  protected   void   onCreate ( Bundle   savedInstanceState )   {  super . onCreate ( savedInstanceState ) ;  sharedPrefs   =   PreferenceManager . getDefaultSharedPreferences ( this ) ;  editor   =   sharedPrefs . edit () ;  setTitle ( getResources () . getString ( R . string . prefs_ui_available_layout ) ) ;  
static   PwmPresetBuilder   newInstance ( String   name )    {  return  DefaultPwmPresetBuilder . newInstance ( name ) ;  }
public   void   setDefaultNameIdFormat ( String   defaultNameIdFormat )   {  this . defaultNameIdFormat   =   defaultNameIdFormat ;  }
@ Override  public   ResourceLocation   getUid ()   {  return  ExamplePlugin . UID_TEST_BREWING ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   Chain < Double >   median ()   {  return  new   Chain <> ( U . median ( ( List < Number > )   value () ) ) ;  }
private   void   setUpAppWebAgent ()   {  getWebView () . getSettings () . setUserAgentString ( getAppWebAgent () ) ;  }
default   int   spiReadByte ( int   handle ) {  byte []   temp   =  new   byte [ 1 ] ;  int   result   =  spiRead ( handle ,  temp ) ;  if ( result   <=   0 )   return  result ;  
@ Override   void   accept ( Visitor   visitor )   {  visitor . visitStringSchema ( this ) ;  }
public   boolean   matches ( String   instruction )   {  return  this . name () . equalsIgnoreCase ( instruction ) ;  }
@ Override   public   LongIndexer   put ( long []   indices ,  long []   l ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  array [ ( int ) index ( indices )   +   n ]   =   l [ offset   +   n ] ;  }  return  this ;  }
@ Override  public   void   mergeBin ( AbstractBinning < ? >   another )   {  EqualPopulationBinning   binning   =  ( EqualPopulationBinning )   another ;  super . mergeBin ( binning ) ;  LinkNode < HistogramUnit >   tmp   =  binning . header ;  while ( tmp   !=   null )   {  this . insertWithTrim ( new   LinkNode < HistogramUnit > ( tmp . data () ) ) ;  tmp   =   tmp . next () ;  }  }
@ Override  public   boolean   isClickable ()   throws  RemoteException   {  return  false ;  }
default   Builder   hit ( EntityHitResult   hit )   {  return  hit ( ()  ->   hit ) ;  }
public   static   TestSuiteResult   unmarshal ( File   testSuite )   throws  IOException   {  try  ( InputStream   stream   =  new   FileInputStream ( testSuite ) )   {  return  unmarshal ( stream ) ;  }  }
public   final   boolean   childOfOperation ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.paths.*.*"""" )   &&   ! childOfParameters ( psiElement ) ;  }
@ Test  public   void   validatorClassMustBePairedWithDigester ()  {  try  {  builder . withSyntaxChecker ( mock ( SyntaxChecker . class ) )  . withValidatorClass ( NotValidator . class ) . freeze () ;  fail ( """"No exception thrown!!"""" ) ;  }   catch  ( IllegalArgumentException   e )   {  assertEquals ( e . getMessage () , BUNDLE . printf ( """"malformedKeyword"""" ,  KEYWORD ) ) ;  }  }
default   int   readRegister ( int   register ,  Charset   charset ,  CharBuffer   buffer ,  int   length )   {  
public   void   setIdpClaim ( String   idpClaim )   {  this . idpClaim   =   idpClaim ;  }
@ AfterClass  public   void   delete ()   throws  IOException   {  FileUtils . deleteDirectory ( new   File ( """"tmp"""" ) ) ;  FileUtils . deleteDirectory ( new   File ( """"models"""" ) ) ;  FileUtils . deleteDirectory ( new   File ( """"test-output"""" ) ) ;  FileUtils . deleteDirectory ( new   File ( Constants . COLUMN_META_FOLDER_NAME ) ) ;  }
@ DataBoundSetter  public   void   setNvdCredentialsId ( String   nvdCredentialsId )   {  this . nvdCredentialsId   =   Util . fixEmpty ( nvdCredentialsId ) ;  }
public   boolean   isDropoutEnable ( int   layer ,  Set < Integer >   dropoutNodes )   {  return  dropoutNodes   !=   null   &&   ( this . getLayerDropoutRates () . length   >   layer )  &&   ( Double . compare ( this . getLayerDropoutRates () [ layer ] ,  0d )   >   0 ) ;  }
public   static   DataType   getDefaultDataTypeByOpType ( OpType   optype )   {  if ( optype . equals ( OpType . CONTINUOUS ) )   {  return  DataType . DOUBLE ;  }   else  {  return  DataType . STRING ;  }  }
@ Override  public   void   registerEntityComponent ( IComponentProvider < EntityAccessor >   provider ,  Class < ?   extends  Entity >   entityClass )   {  entityComponentProviders . register ( entityClass ,  provider ) ;  tryAddConfig ( provider ) ;  }
@ Override  public   void   setPlayerSuffix ( String   world ,  String   player ,  String   suffix )   {  }
@ Test  public   void   testHashOfNonDefaultLength ()   {  assertEquals ( """"6gkzwg"""" ,  encodeHash ( - 25.382708 ,  - 49.265506 ,  6 ) ) ;  }
private   static   boolean   selfIsMesosTask ()   {  return  System . getenv ( """"MESOS_SANDBOX"""" )   !=   null ;  }
public   PeriodicTask . Builder   setTag ( String   tag )   {  this . tag   =   tag ;  return  this ;  }
@ Override  public   synchronized   void   connect ()   {  Log . d ( TAG ,  """"connect()"""" ) ;  if  ( isConnected ()   ||   isConnecting () )   {  if  ( shouldDisconnect )   {  shouldDisconnect   =   false ;  return;  }  Log . d ( TAG ,  """"Already connected/connecting, nothing to do"""" ) ;  return;  }  for  ( Api . Client   connection   :  apiConnections . values () )   {  if  ( ! connection . isConnected () )   {  connection . connect () ;  }  }  }
private   void   onReceiveFolderStatus ( String   folderId ,  FolderStatus   folderStatus )   {  mLocalFolderStatuses . put ( folderId ,  folderStatus ) ;  notifyDataSetChanged () ;  }
public   GroundOverlayOptions   position ( LatLng   location ,  float   width ,  float   height )  throws  IllegalArgumentException ,  IllegalStateException   {  position ( location ,  width ) ;  if  ( height   <   0 )  throw  new   IllegalArgumentException ( """"height must not be negative"""" ) ;  this . height   =   height ;  return  this ;  }
@ Override  public   boolean   process ( String   option ,  List < String >   arguments )   {  hideGenerics   =   true ;  return  true ;  }
@ Override  public   void   onReceive ( Context   context ,  Intent   intent )   {  if  ( context . getPackageName () . equals ( intent . getStringExtra ( """"PKG"""" ) ) )   {  var   appName   =  context . getPackageManager () . getApplicationLabel ( context . getApplicationInfo () ) ;  Toast . makeText ( context ,  context . getString ( ResId . string . rebooting )   +   """" """"   +   appName   +   """"..."""" ,  Toast . LENGTH_SHORT ) . show () ;  if  ( ! Utils . doRestart ( context ) )  Toast . makeText ( context ,  """"Unable to rebooting """"   +   appName ,  Toast . LENGTH_SHORT ) . show () ;  }  }
@ FXML  void   openBulkVibratoEditor ( ActionEvent   event )   {  if  ( ! tabs . getTabs () . isEmpty () )   {  String   id   =  tabs . getSelectionModel () . getSelectedItem () . getId () ;  editors . get ( id ) . openBulkEditor ( BulkEditorType . VIBRATO ) ;  }  }
@ Override  public   void   drawGradientRect ( GuiGraphics   guiGraphics ,  float   left ,  float   top ,  float   width ,  float   height ,  int   startColor ,  int   endColor )   {  drawGradientRect ( guiGraphics ,  left ,  top ,  width ,  height ,  startColor ,  endColor ,  false ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   testClear ()   throws  Exception   {  resetISConfiguration () ;  super . testClear () ;  }
@ Override  public   Class < AllureTestCase >   getType ()   {  return  AllureTestCase . class ;  }
public   JSONObject   getExternalClaim ( String   dialectId ,  String   claimId )   throws  Exception   {  String   endPointUrl   =  serverBasePath   +   CLAIM_DIALECTS_ENDPOINT_URI   +   PATH_SEPARATOR   +   dialectId   +  CLAIMS_ENDPOINT_URI   +   PATH_SEPARATOR   +   claimId ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpGet ( endPointUrl ,  getHeaders () ) )   {  return  getJSONObject ( EntityUtils . toString ( response . getEntity () ) ) ;  }  }
@ Override  public   void   onClick ( View   v )   {  showDirectionsDialogFragment () ;  }
@ Override  public   boolean   playerAdd ( String   world ,  String   player ,  String   permission )   {  permission   =   permission . toLowerCase () ;  if  ( world   !=   null )   {  this . perms . addPlayerPermission ( player ,  world ,  permission ,  true ) ;  }   else  {  this . perms . addPlayerPermission ( player ,  permission ,  true ) ;  }  return  true ;  }
@ Override  public   void   onViewCreated ( View   view ,  Bundle   savedInstanceState )   {  super . onViewCreated ( view ,  savedInstanceState ) ;  }
@ Test ( expected   =   RepositoryException . class )  public   void   getNonExistingLocation ()   {  Coordinate   coordinate   =  new   Coordinate ( 0 , 0 , - 2 ) ;  locationRepo . getLocation ( coordinate ) ;  }
public   static   SelectionManager   getSelectionManager ()   {  return  smanager ;  }
@ Override  public   Map < String ,  ? >   getAll ()   {  return  mPreferences . getAll () ;  }
@ java . lang . Override  public   java . lang . String   toString ()   {  return  """"ChangedMediaType(oldSchema=""""  +   this . getOldSchema ()  +   """", newSchema=""""  +   this . getNewSchema ()  +   """", context=""""  +   this . getContext ()  +   """", schema=""""  +   this . getSchema ()  +   """", examples=""""  +   this . getExamples ()  +   """", example=""""  +   this . getExample ()  +   """")"""" ;  }
@ Override  public   IElement   getIcon ( EntityAccessor   accessor ,  IPluginConfig   config ,  IElement   currentIcon )   {  FallingBlockEntity   entity   =  ( FallingBlockEntity )   accessor . getEntity () ;  ItemStack   stack   =  new   ItemStack ( entity . getBlockState () . getBlock () ) ;  if  ( stack . isEmpty () )   {  return  currentIcon ;  }  return  IElementHelper . get () . item ( stack ) ;  }
public   static   SoundHandler   get ()  {  if ( instance   ==   null )  {  instance   =   new   SoundHandler () ;  }  return  instance ;  }
public   ServerAuthentication   getTsaServerAuthn ()   {  if  ( tsaServerAuthn   ==   null )   {  tsaServerAuthn   =   ServerAuthentication . NONE ;  }  return  tsaServerAuthn ;  }
private   Optional < AsnResponse >   getAsn ( InetAddress   ipAddress )  throws  IOException ,  GeoIp2Exception   {  LookupResult < AsnResponse >   result   =  this . get ( ipAddress , AsnResponse . class , DatabaseType . ASN ) ;  AsnResponse   response   =  result . getModel () ;  if  ( response   ==   null )   {  return  Optional . empty () ;  }  return  Optional . of ( new   AsnResponse ( response , result . getIpAddress () , result . getNetwork () ) ) ;  }
@ Override  final   double   doGetRate ()   {  return  SECONDS . toMicros ( 1L )   /   stableIntervalMicros ;  }
public   MetadataProperty   options ( List < String >   options )   {  this . options   =   options ;  return  this ;  }
private   JSONWriter   end ( char   m ,  char   c )   throws  JSONException   {  if  ( this . mode   !=   m )   {  throw  new   JSONException ( m   ==   'a' ?   """"Misplaced endArray.""""  :  """"Misplaced endObject."""" ) ;  }  this . pop ( m ) ;  try  {  this . writer . append ( c ) ;  }   catch  ( IOException   e )   {  
@ Override  public   void   doWrite ( DataOutput   out )   throws  IOException   {  out . writeDouble ( trainCount ) ;  out . writeDouble ( validationCount ) ;  out . writeDouble ( trainError ) ;  out . writeDouble ( validationError ) ;  if ( nodeStatsMap   ==   null )   {  out . writeBoolean ( false ) ;  }   else  {  out . writeBoolean ( true ) ;  out . writeInt ( nodeStatsMap . size () ) ;  for ( Entry < Integer ,  NodeStats >   entry :  nodeStatsMap . entrySet () )   {  out . writeInt ( entry . getKey () ) ;  entry . getValue () . write ( out ) ;  }  }  }
private   void   validateFieldColorLiteral ( String   fieldName ,  String   fieldValue )   throws  FormException   {  final   FormValidation   globalColorMapNameValidation   =  validateColorLiteral ( fieldValue ) ;  if  ( globalColorMapNameValidation . kind   !=   FormValidation . Kind . OK )   {  throw  new   FormException ( globalColorMapNameValidation . getMessage () ,  fieldName ) ;  }  }
public   SAMLSSOServiceProviderDTO   createSsoServiceProviderDTO ( SAMLConfig   config ) {  return  createSsoSPDTO ( config ) ;  }
public   int   add ( String   capability )   {  if  ( this . capabilities . contains ( capability ) )   {  return  WearableStatusCodes . DUPLICATE_CAPABILITY ;  }  DataItemInternal   dataItem   =  new   DataItemInternal ( buildCapabilityUri ( capability ,  true ) ) ;  DataItemRecord   record   =  wearable . putDataItem ( packageName ,  PackageUtils . firstSignatureDigest ( context ,  packageName ) ,  wearable . getLocalNodeId () ,  dataItem ) ;  this . capabilities . add ( capability ) ;  wearable . syncRecordToAll ( record ) ;  return  CommonStatusCodes . SUCCESS ;  }
private   void   shareApplication ( String   applicationId )   throws  Exception   {  ApplicationSharePOSTRequest   applicationSharePOSTRequest   =  new   ApplicationSharePOSTRequest () ;  applicationSharePOSTRequest . setShareWithAllChildren ( true ) ;  oAuth2RestClient . shareApplication ( applicationId ,  applicationSharePOSTRequest ) ;  
@ Test  public   void   falseIsFalseSchema ()   {  assertTrue ( loadAsV6 ( false )   instanceof   FalseSchema ) ;  }
private   void   addAudioList ()   {  AudioListFragment   fragment   =  Fragments . Builder . buildAudioListFragment ( getFile () , getShare () , ( ArrayList < ServerFile > )   getFiles () ) ;  getSupportFragmentManager () . beginTransaction ()  . replace ( R . id . audio_list_container ,  fragment ,  AudioListFragment . TAG )  . commit () ;  }
public   static   String   cameraUUID ( int   index )  {  return  CLEyeGetCameraUUID ( index ) ;  }
public   long   elapsedMicros ()   {  if  ( soundLine   ==   null )   {  if  ( startTime   <   0 )   {  throw  new   IllegalStateException ( """"PlaybackTimer not initialized."""" ) ;  }  return  ( System . nanoTime ()   -   startTime )   /   1000 ;  }   else  {  return  soundLine . getMicrosecondPosition () ;  }  }
public   Result   execute ( String   query ,  long   timeout ,  TimeUnit   unit )   {  return  execute ( query ,  HashMultimap . < String ,  Object > create () ,  timeout ,  unit ) ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"phoneNumbers"""" )  @ Valid  public   List < PhoneNumbers >   getPhoneNumbers ()   {  return  phoneNumbers ;  }
@ BeforeMethod ( alwaysRun   =   true )  public   void   testInit ()   {  RestAssured . basePath   =   basePath ;  }
@ DataBoundSetter  public   void   setEntries ( Collection < RoleDefinitionEntry >   entries )   {  this . entries   =   entries   !=   null  ?   new   TreeSet <> ( entries )   :  Collections . emptySortedSet () ;  }
@ Override  public   void   init ( WorkerContext < MasterIteSAParams ,  WorkerIteSAParams >   context )   {  }
@ Override  public   AnalogInput   create ( AnalogInputConfig   config )   {  TestAnalogInput   input   =  new   TestAnalogInput ( this ,  config ) ;  if  ( this . context . registry () . exists ( input . id () ) )  throw  new   IOAlreadyExistsException ( config . id () ) ;  input . initialize ( this . context ) ;  this . context . registry () . add ( input ) ;  return  input ;  }
@ Override  public   ProcessingMessage   newMessage ()  {  return  new   ProcessingMessage () . put ( """"schema"""" ,  schema ) ;  }
public   List < T >   cycle ( final   int   times )   {  return  cycle ( value () ,  times ) ;  }
private   Path   getTmpModelPath ( int   iteration )   {  return  new   Path ( DTrainUtils . getTmpModelName ( this . tmpModelsFolder ,  this . trainerId ,  iteration , modelConfig . getTrain () . getAlgorithm () . toLowerCase () ) ) ;  }
private   static   String   message ( final   Throwable   exp )   {  final   StringBuilder   text   =  new   StringBuilder ( 0 ) ;  text . append ( exp . getMessage () ) ;  if  ( exp . getCause ()   !=   null )   {  text . append ( """"; """" ) . append ( Repeater . message ( exp . getCause () ) ) ;  }  String   msg   =  text . toString () ;  if  ( msg . length ()   >   100 )   {  msg   =   String . format ( """"%s..."""" ,  msg . substring ( 0 ,  100 ) ) ;  }  return  msg ;  }
@ Test  public   void   renderDoesNotFailWhenHTTPStatusCodeIsRange ()   {  AsciidocRender   render   =  new   AsciidocRender () ;  ByteArrayOutputStream   outputStream   =  new   ByteArrayOutputStream () ;  OutputStreamWriter   outputStreamWriter   =  new   OutputStreamWriter ( outputStream ) ;  ChangedOpenApi   diff   = OpenApiCompare . fromLocations ( """"range_statuscode_1.yaml"""" ,  """"range_statuscode_2.yaml"""" ) ;  render . render ( diff ,  outputStreamWriter ) ;  assertThat ( outputStream . toString () ) . isNotBlank () ;  }
private   static   void   writeWideFieldLayer ( WideFieldLayer   wideFieldLayer ,  DataOutputStream   dos )   throws  IOException   {  dos . writeInt ( wideFieldLayer . getColumnId () ) ;  dos . writeInt ( wideFieldLayer . getIn () ) ;  
@ NonNull  public   StreetViewPanoramaOptions   position ( LatLng   position ,  StreetViewSource   source )   {  this . position   =   position ;  this . source   =   source ;  return  this ;  }
public   Claims   provisioningClaims ( List < ProvisioningClaim >   provisioningClaims )   {  this . provisioningClaims   =   provisioningClaims ;  return  this ;  }
public   Chain < Optional < T > >   find ( final   Predicate < T >   pred )   {  return  new   Chain <> ( Underscore . find ( list ,  pred ) ) ;  }
@ Override  public   boolean   shouldEnableReplicatedRequestCompression ()   {  return  this . enableReplicatedRequestCompression ;  }
public   void   setEnabledActionButtons ( boolean   enabled )   {  if  ( mainLayout   !=   null )   {  buttonsEnabled   =   enabled ;  mainLayout . setEnabled ( enabled ) ;  }  }
private   void   updateCurvesInPlace ()   {  for  ( Map . Entry < Double ,  Group >   curveEntry   :  drawnCurves . entrySet () )   {  Group   curveGroup   =  curveEntry . getValue () ;  curveGroup . getChildren () . clear () ;  for  ( Curve   curve   :  curves )   {  curveGroup . getChildren () . add ( curve . redraw ( curveEntry . getKey () ) ) ;  }  }  }
public   static   void   handle ( ReceiveDataPacket   message ,  ClientPayloadContext   context )   {  context . execute ( ()  ->  {  ObjectDataCenter . setServerData ( message . tag ) ;  } ) ;  }
@ Override  public   String   toString ()   {  return  """"GitHubRepository[host="""" + host + """",username="""" + userName + """",repository="""" + repositoryName + """"]"""" ;  }
@ Override  public   boolean   shouldEnableSelfPreservation ()   {  return  this . enableSelfPreservation ;  }
public   PutDataRequest   putAsset ( String   key ,  Asset   value )   {  assets . putParcelable ( key ,  value ) ;  return  this ;  }
public   static   String   getRedirectUrl ( HttpResponse   response )   {  Header []   headers   =  response . getAllHeaders () ;  String   url   =  """""""" ;  for  ( Header   header   :  headers )   {  if  ( """"Location"""" . equals ( header . getName () ) )   {  url   =   header . getValue () ;  }  }  return  url ;  }
public   Properties   key ( String   key )   {  this . key   =   key ;  return  this ;  }
@ SuppressWarnings ( {  """"unchecked"""" ,  """"rawtypes""""  } )  private   void   assertBeanNotPresent ( Class   beanClass )   {  try  {  context . getBean ( beanClass ) ;  fail ( """"Bean of type """"   +   beanClass   +   """" should not have been created."""" ) ;  }  catch  ( NoSuchBeanDefinitionException   exception )   {  
@ AfterClass ( alwaysRun   =   true )  public   void   testClear ()   throws  Exception {  deleteApplication () ;  tenantMgtRestClient . closeHttpClient () ;  applicationMgtRestClient . closeHttpClient () ;  httpClient . close () ;  httpClient   =   null ;  }
public   int   getCompatibilityFlags ( String   moduleId )   {  Integer   compatFlags   =  compatDataId . get ( moduleId ) ;  return  compatFlags   ==   null  ?   0   :  compatFlags ;  }
public   Chain < Map < String ,  Object > >   set ( final   List < String >   paths ,  Object   value )   {  U . set ( map () ,  paths ,  value ) ;  return  new   Chain <> ( map () ) ;  }
@ Override  public   void   setCustomizedSnoozePreset ( IRemindersCallbacks   callbacks ,  CustomizedSnoozePresetEntity   preset )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: setCustomizedSnoozePreset"""" ) ;  }
public   File   getDataDirWithPath ( String   path )   {  File   dataDir   =  this . getDataDir () ;  
@ Override  public   boolean   supportsInitiallyDeferrableColumns ()   {  return  false ;  }
public   int   deleteConfiguration ( String   name )   {  return  getWritableDatabase () . delete ( TABLE_NAME ,  BY_NAME ,  new   String [] { name } ) ;  }
private   void   loadState ( Bundle   state )   {  if  ( state   !=   null )  isSubtitlesEnable   =   state . getBoolean ( State . SUBTITLES_ENABLED ,  false ) ;  }
@ Override  public   int   getRendererType ()   throws  RemoteException   {  return  1 ;  }
@ Override  public   void   isFrameValid ( Framedata   inputFrame )   throws  InvalidDataException   {  if  ( ( inputFrame   instanceof   ContinuousFrame )   &&   ( inputFrame . isRSV1 ()   ||   inputFrame . isRSV2 ()  ||   inputFrame . isRSV3 () ) )   {  throw  new   InvalidFrameException ( """"bad rsv RSV1: """"   +   inputFrame . isRSV1 ()   +   """" RSV2: """"   +   inputFrame . isRSV2 ()   +   """" RSV3: """"  +   inputFrame . isRSV3 () ) ;  }  super . isFrameValid ( inputFrame ) ;  }
@ Nullable  @ Override  public   String   valueOf ( Resource   sonarResource )   {  return  sonarResource . getName () ;  }
@ Test  @ Disabled ( """"Some issues with reactor build here when top level version changes"""" )  public   void   localPom ()   throws  Exception   {  Resource   resource   =  new   FileSystemResource ( new   File ( """"pom.xml"""" ) ) ;  List < Dependency >   dependencies   =  resolver . dependencies ( resource ) ;  assertThat ( dependencies ) . filteredOn ( """"artifact.artifactId"""" ,  """"maven-settings"""" )  . hasSize ( 1 ) ;  assertThat ( dependencies ) . filteredOn ( """"artifact.artifactId"""" ,  """"spring-test"""" )  . isEmpty () ;  }
@ Test  public   void   thatDefinitionsKeysAreSuggested ()   {  getCaretCompletions ( """"definitions"""" )  . assertContains ( """"$ref"""" , """"format"""" , """"title"""" , """"description"""" , """"default"""" , """"multipleOf"""" , """"maximum"""" , """"exclusiveMaximum"""" , """"minimum"""" , """"exclusiveMinimum"""" , """"maxLength"""" , """"minLength"""" , """"pattern"""" , """"maxItems"""" , """"minItems"""" , """"uniqueItems"""" , """"maxProperties"""" , """"minProperties"""" , """"required"""" , """"enum"""" , """"type"""" , """"items"""" , """"allOf"""" , """"properties"""" , """"additionalProperties"""" , """"discriminator"""" , """"readOnly"""" , """"xml"""" , """"externalDocs"""" , """"example"""" )  . isOfSize ( 30 ) ;  }
private   void   removeFileFromDatabase ( RecentFile   recentFile )   {  RecentFileRepository   repository   =  new   RecentFileRepository ( this ) ;  repository . deleteFile ( recentFile . getUniqueKey () ) ;  }
@ Test  @ RepeatedTest ( COUNT )  public   void   twoApps ()   throws  Exception   {  String   first   =  deploy ( """"empty"""" ) ;  String   second   =  deploy ( """"cloud"""" ) ;  
@ XmlElement  public   List < Vet >   getVetList ()   {  if  ( vets   ==   null )   {  vets   =   new   ArrayList <> () ;  }  return  vets ;  }
public   static   void   longToBytes ( long   v ,  byte []   bytes ,  int   offset ) {  long   tmp   =  v ;  for ( int   i = 0 ;   i < 8 ;   i ++ ) {  bytes [ offset   +   7   -   i ]   =   ( byte ) ( tmp   &   0xFF ) ;  tmp   >>=   8 ;  }  }
@ Override   public   double   getFrameRate ()   {  if  ( context   ==   null   ||   context . isNull () )   {  return  super . getFrameRate () ;  }   else  {  flycaptureGetCameraAbsProperty ( context ,  FLYCAPTURE_FRAME_RATE ,  outFloat ) ;  return  outFloat [ 0 ] ;  }  }
public   static   ArrayList   readList ( Parcel   parcel ,  int   header ,  ClassLoader   classLoader )   {  int   size   =  readSize ( parcel ,  header ) ;  if  ( size   ==   0 )  return  null ;  int   start   =  parcel . dataPosition () ;  ArrayList   list   =  parcel . readArrayList ( classLoader ) ;  parcel . setDataPosition ( start   +   size ) ;  return  list ;  }
public   SAML2ServiceProvider   defaultAssertionConsumerUrl ( String   defaultAssertionConsumerUrl )   {  this . defaultAssertionConsumerUrl   =   defaultAssertionConsumerUrl ;  return  this ;  }
public   GeolocationPayloadBuilder   ConsiderIp ( boolean   newConsiderIp )   {  this . _considerIp   =   newConsiderIp ;  return  this ;  }
@ Override  public   String   getPlayerSuffix ( String   world ,  String   player )   {  return  Reader . getSuffix ( player ,  InfoType . USER ,  world ) ;  }
public   void   copyValues ( InlineBox   src )  {  super . copyValues ( src ) ;  valign   =   src . valign ;  }
private   SharedPreferences   getInfoSharedPreferences ()   {  return  context . getSharedPreferences ( GCM_REGISTRATION_PREF ,  Context . MODE_PRIVATE ) ;  }
public   static   LongIndexer   create ( long []   array ,  long []   sizes ,  long []   strides )   {  return  new   LongArrayIndexer ( array ,  sizes ,  strides ) ;  }
 <argument pos:start=""""""""467:55"""""""" pos:end=""""""""467:74""""""""><expr pos:start=""""""""467:55"""""""" pos:end=""""""""467:74""""""""><call pos:start=""""""""467:55"""""""" pos:end=""""""""467:74""""""""><name pos:start=""""""""467:55"""""""" pos:end=""""""""467:72""""""""><name pos:start=""""""""467:55"""""""" pos:end=""""""""467:64"""""""">evalConfig</name><operator pos:start=""""""""467:65"""""""" pos:end=""""""""467:65"""""""">.</operator><name pos:start=""""""""467:66"""""""" pos:end=""""""""467:72"""""""">getName</name></name><argument_list pos:start=""""""""467:73"""""""" pos:end=""""""""467:74"""""""">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   boolean   isValidPosition ()   {  return  image   !=   null   &&   relRect   !=   null ;  }
public   void   paste_entry ( int   pos )  {  ClipboardHistoryService . paste ( _entries . get ( pos ) ) ;  }
public   void   fill ()   {  SwaggerFields . parameterItems () . forEach ( this :: addUnique ) ;  }
@ Override   void   visitSchemaOfAdditionalProperties ( Schema   schemaOfAdditionalProperties )   {  if  ( schemaOfAdditionalProperties   !=   null )   {  List < String >   additionalPropNames   =  getAdditionalProperties () ;  for  ( String   propName   :  additionalPropNames )   {  Object   propVal   =  objSubject . get ( propName ) ;  ValidationException   failure   =  owner . getFailureOfSchema ( schemaOfAdditionalProperties ,  propVal ) ;  if  ( failure   !=   null )   {  owner . failure ( failure . prepend ( propName ,  schema ) ) ;  }  }  }  }
public   void   typeMap ( Map < Integer ,  TypeRoot < T > >   typeMap )   {  this . typeMap   =   Objects . requireNonNull ( typeMap ) ;  }
@ Override  public   DigitalOutputConfigBuilder   initial ( DigitalState   state )   {  this . properties . put ( DigitalOutputConfig . INITIAL_STATE_KEY ,  state . toString () ) ;  return  this ;  }
@ DisplayName ( """"SERIAL :: Read Byte Buffer"""" )  @ Order ( 13 )  @ Test  public   void   readByteBuffer ()   {  
@ Override  public   float   getDutyCycle ()   throws  IOException   {  return  this . dutyCycle ;  }
@ Deprecated  @ Override  public   void   getDriveService ( IGmsCallbacks   callback ,  int   versionCode ,  String   packageName , String []   scopes ,  String   accountName ,  Bundle   params )   throws  RemoteException   {  callGetService ( GmsService . DRIVE ,  callback ,  versionCode ,  packageName ,  params ,  accountName ,  scopes ) ;  }
@ Override  public   String   toUrlValue ()   {  if  ( this   ==   UNKNOWN )   {  throw  new   UnsupportedOperationException ( """"Shouldn't use LocationType.UNKNOWN in a request."""" ) ;  }  return  name () ;  }
public   Builder   withEnabled ( boolean   enabled )   {  schedule . enabled   =   enabled ;  return  this ;  }
@ Test  public   void   prependNoSchemaChange ()   {  ValidationException   exc   = new   ValidationException ( BooleanSchema . INSTANCE ,  Boolean . class ,  2 ) ;  ValidationException   changedExc   =  exc . prepend ( """"frag"""" ) ;  assertEquals ( """"#/frag"""" ,  changedExc . getPointerToViolation () ) ;  assertEquals ( """"type"""" ,  changedExc . getKeyword () ) ;  assertEquals ( BooleanSchema . INSTANCE ,  changedExc . getViolatedSchema () ) ;  }
@ Test  public   void   getTitleWithoutParams ()   {  String   title   =  getTitle ( """"{method}"""" ,  METHOD_NAME ,  null ,  null ) ;  Object []   args   =  { METHOD_NAME } ;  assertThat ( """"Method without arguments is processed incorrectly"""" ,  title , equalTo ( MessageFormat . format ( """"{0}"""" ,  args ) ) ) ;  }
@ Override  public   void   writeToParcel ( Parcel   out ,  int   flags )   {  super . writeToParcel ( out ,  flags ) ;  out . writeValue ( checked ) ;  out . writeValue ( visible ) ;  }
private   static   String   joinClassNames ( final   List < Class < ? > >   expectedTypes )   {  return  expectedTypes . stream () . map ( Class :: getSimpleName ) . collect ( joining ( """", """" ) ) ;  }
public   static   void   updateAllWidgets ( Context   context )   {  Intent   intent   =  new   Intent ( context ,  AppWidgetProvider . class ) ;  intent . setAction ( AppWidgetManager . ACTION_APPWIDGET_UPDATE ) ;  int []   widgetIds   =  getWidgetIds ( context ) ;  intent . putExtra ( AppWidgetManager . EXTRA_APPWIDGET_IDS ,  widgetIds ) ;  Log . d ( TAG ,  """"updateAllWidgets:""""   +   AppWidgetProvider . asList ( widgetIds )   +   """", context:""""   +   context ) ;  context . sendBroadcast ( intent ) ;  }
@ Override  public   void   updateRecurrence ( IRemindersCallbacks   callbacks ,  String   s1 ,  TaskEntity   task ,  UpdateRecurrenceOptions   options )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: updateRecurrence"""" ) ;  }
@ Test  public   void   testConstructor ()   throws  NoSuchAlgorithmException   {  try  {  new   DefaultSSLWebSocketServerFactory ( null ) ;  fail ( """"IllegalArgumentException should be thrown"""" ) ;  }   catch  ( IllegalArgumentException   e )   {  
private   boolean   isSuccess ( int   exitCode )   {  InstallSourceProperty   installSourceProperty   =  getDependencyCheck () . getProperties () . get ( InstallSourceProperty . class ) ;  if  ( installSourceProperty   !=   null )   {  DependencyCheckInstaller   ui   =  installSourceProperty . installers . get ( DependencyCheckInstaller . class ) ;  if  ( ui   !=   null )   {  Version   v   =  Version . parseVersion ( ui . id ) ;  if  ( v . getMajor ()   <   8 )   {  return  exitCode   ==   0 ;  }  }  }  
private   static   boolean   isExternalStorageDocument ( Uri   uri )   {  return  """"com.android.externalstorage.documents"""" . equals ( uri . getAuthority () ) ;  }
public   void   run ()   {  affinityLock . bind ( wholeCore ) ;  try  {  Thread . sleep ( 1000 ) ;  }   catch  ( InterruptedException   e )   {  Thread . currentThread () . interrupt () ;  }   finally  {  affinityLock . release () ;  }  }
public   static   List < Field >   server ()   {  return  ImmutableList . of ( new   StringField ( """"url"""" ,  true ) ,  new   StringField ( """"description"""" ) ,  new   ObjectField ( """"variables"""" ) ) ;  }
private   static   String []   args ( String []   args )   {  List < String >   result   =  new   ArrayList <> () ;  for  ( String   arg   :  args )   {  if  ( ! arg . startsWith ( """"--"""" ) )   {  result . add ( arg ) ;  }  }  return  result . toArray ( new   String [ result . size () ] ) ;  }
public   static   < T >   List < T >   take ( final   Iterable < T >   iterable ,  final   Integer   n )   {  return  first ( newArrayList ( iterable ) ,  n ) ;  }
@ Override   public   double   get ( long   i ,  long   j )   {  return  array [ ( int ) index ( i ,  j ) ] ;  }
public   boolean   completePropertiesSchemaKey ()   {  return  pathResolver . childOfPropertiesSchema ( psiElement ) ;  }
public   static   String   stripPrefixSuffix ( String   lyric ,  String   prefix ,  String   suffix )   {  if  ( prefix . length ()   +   suffix . length ()   >=   lyric . length () )   {  return  lyric ;  }  return  lyric . substring ( prefix . length () ,  lyric . length ()   -   suffix . length () ) ;  }
@ Override  public   boolean   onQueryTextChange ( String   newText )   {  if  ( mLocator   ==   null )  return  false ;  getSuggestions ( newText ) ;  return  true ;  }
public   APIResourceResponse   identifier ( String   identifier )   {  this . identifier   =   identifier ;  return  this ;  }
public   static   TemplateProcessor   of ( String   template )   {  return  new   TemplateProcessor ( template ) ;  }
@ Test  void   violationFileCanBeOverwritten ()   throws  Exception   {  var   tempFile   =  File . createTempFile ( """"violation"""" ,  """".xml"""" ,  new   File ( """"target"""" ) ) ;  SortPomImplUtil . create ()  . predefinedSortOrder ( """"default_0_4_0"""" )  . violationFile ( tempFile . getAbsolutePath () )  . testVerifySort ( """"/full_unsorted_input.xml"""" , """"/full_expected.xml"""" , """"[INFO] The xml element <modelVersion> should be placed before <parent>"""" , true ) ;  }
public   static   void   updated ( @ NonNull   Integer   widgetId )   {  instances . compute ( widgetId ,  ( id ,  state )  ->   new   InstanceState ( state   ==   null  ?   1   :  state . updated   +   1 , state   ==   null  ?   0   :  state . listReloaded , state   ==   null  ?   0   :  state . listRedrawn ) ) ;  }
public   void   embedded ( boolean   embedded )   {  this . embedded   =   embedded ;  }
@ Override  public   void   savePreferences ()   {  preferencesManager . setTheme ( themeManager . getCurrentTheme () . get () ) ;  }
@ Override  public   final   FloatMLDataSet   openAdditional ()   {  return  new   BasicFloatMLDataSet ( this . data ) ;  }
static   Class   putMemberOffset ( String   typeName ,  String   member ,  int   offset )   throws  ClassNotFoundException   {  try  {  Class < ? >   context   =  classStack . get () . peek () ;  Class < ? >   c   =  Class . forName ( typeName . replace ( '/' ,  '.' ) ,  false , context   !=   null  ?   context . getClassLoader ()   :  Loader . class . getClassLoader () ) ;  if  ( member   !=   null )   {  putMemberOffset ( c . asSubclass ( Pointer . class ) ,  member ,  offset ) ;  }  return  c ;  }   catch  ( ClassNotFoundException   e )   {  logger . warn ( """"Loader.putMemberOffset(): """"   +   e ) ;  return  null ;  }  }
private   Registration   getRegistration ( SQLiteDatabase   db ,  String   packageName ,  String   signature )   {  Cursor   cursor   =  db . query ( TABLE_REGISTRATIONS ,  null ,  FIELD_PACKAGE_NAME   +   """" LIKE ? AND """"   +   FIELD_SIGNATURE   +   """" LIKE ?"""" ,  new   String [] { packageName ,  signature } ,  null ,  null ,  null ,  """"1"""" ) ;  if  ( cursor   !=   null )   {  try  {  if  ( cursor . moveToNext () )   {  return  new   Registration ( cursor ) ;  }  }   finally  {  cursor . close () ;  }  }  return  null ;  }
public   MapPosition   getMapPosition ()   {  return  mapView . map () . getMapPosition () ;  }
@ Override  public   void   handle ( S2CMessageProjectileHitEntity   message ,  MessageContext   context )  {  context . execute ( ()  ->   ClientPlayHandler . handleProjectileHitEntity ( message ) ) ;  context . setHandled ( true ) ;  }
private   void   startUpload ()   {  SharedPreferences   prefs   =  PreferenceManager . getDefaultSharedPreferences ( this ) ;  if  (  prefs . contains ( OSMTracker . Preferences . KEY_OSM_OAUTH2_ACCESSTOKEN )  )   {  
private   static   void   renameOldAppBin ()   {  String   moveTo   =  app_bin . toString () ;  Calendar   now   =  Calendar . getInstance () ;  int   version   =  readVersionFile () ;  if  ( version   ==   0 )   {  moveTo   +=   """".old"""" ;  }   else  {  moveTo   +=   """".build""""   +   String . valueOf ( version ) ;  }  moveTo   +=   """".""""   +   String . valueOf ( now . getTimeInMillis () ) ;  LilDebiAction . log . append ( """"Moving '""""   +   app_bin   +   """"' to '""""   +   moveTo   +   """"'\n"""" ) ;  app_bin . renameTo ( new   File ( moveTo ) ) ;  app_bin . mkdir () ;   
@ DataProvider ( name   =   """"metaAttributesLimitValidationDataProvider"""" )  public   Object [] []   metaAttributesLimitValidationDataProvider ()   {  return  new   Object [] []   { { 1 } ,  { 2 } ,  { 3 } ,  { 5 } ,  { 10 } ,  { 13 } } ;  }
public   boolean   groupHas ( String   group ,  String   flag ,  boolean   def )   {  return  this . groupCheck ( group ,  flag ,  this . has ( flag ,  def ) ) ;  }
public   LongIndexer   putRaw ( long   i ,  long   l )   {  RAW . putLong ( base   +   checkIndex ( i ,  size )   *   VALUE_BYTES ,  l ) ;  return  this ;  }
@ Override  public   void   readFields ( DataInput   in )   throws  IOException   {  this . l2reg   =   in . readFloat () ;  this . in   =   in . readInt () ;  switch ( this . serializationType )   {  case  WEIGHTS :  case  MODEL_SPEC :  this . weights   =   SerializationUtil . readFloatArray ( in ,  this . weights ,  this . in ) ;  break;  case  GRADIENTS :  this . wGrads   =   SerializationUtil . readFloatArray ( in ,  this . wGrads ,  this . in ) ;  break;  default:  break;  }  }
public   static   FloatIndexer   create ( float []   array )   {  return  new   FloatArrayIndexer ( array ) ;  }
public   ChangedSchema   setChangeDeprecated ( final   boolean   changeDeprecated )   {  clearChangedCache () ;  this . changeDeprecated   =   changeDeprecated ;  return  this ;  }
@ Test  public   void   testGetPreTrainingStatsPath ()   {  Assert . assertEquals ( pathFinder . getPreTrainingStatsPath ( SourceType . LOCAL ) ,  """"tmp/PreTrainingStats"""" ) ;  Assert . assertTrue ( pathFinder . getPreTrainingStatsPath ( SourceType . HDFS ) . contains ( """"ModelSets/cancer-judgement/tmp/PreTrainingStats"""" ) ) ;  }
public   static   boolean   hasResult ( Intent   intent )   {  if  ( intent   ==   null )   return  false ;  return  intent . hasExtra ( EXTRA_LOCATION_RESULT ) ;  }
@ Override  public   float   getMaxZoomLevel ()   throws  RemoteException   {  return  ( float )   backendMap . getViewport () . limitScale ( Double . MIN_VALUE ) ;  }
@ Override  protected   Parcelable   onSaveInstanceState ()  {  Parcelable   superState   =  super . onSaveInstanceState () ;  SavedState   savedState   =  new   SavedState ( superState ) ;  savedState . text   =   mEditText . getText () . toString () ;  return  savedState ;  }
public   void   setThresholdLow ( float   thresholdLow )   {  this . thresholdLow   =   thresholdLow ;  }
public   String   verify ( OpenIDParameterDTO []   params )   throws  Exception   {  return  openidProviderServiceStub . verify ( params ) ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   init ()   throws  XPathExpressionException ,  RemoteException   {  super . testInit ( API_VERSION ,  swaggerDefinition ,  tenant ) ;  initUrls ( """"me"""" ) ;  try  {  createUser ( TEST_USER_1 ,  TEST_USER_PW ,  null ) ;  }   catch  ( Exception   e )   {  log . error ( """"Error while creating the user :""""   +   TEST_USER_1 ,  e ) ;  }  }
@ Test  public   void   getAffinityCompletesGracefully ()   {  getImpl () . getAffinity () ;  }
@ Before  public   void   Setup ()   {  server   =   new   MockWebServer () ;  context   =  new   GeoApiContext . Builder ()  . apiKey ( """"AIza..."""" )  . requestMetricsReporter ( new   OpenCensusRequestMetricsReporter () )  . baseUrlOverride ( """"http:
protected   static   int   getMaximumBuilds (  Chartable   chartable  )  {  if (  chartable   ==   null  )   return  0 ;  CoberturaBuildAction   action   =  chartable . getOwner () . getAction ( CoberturaBuildAction . class ) ;  if (  action   !=   null  )  {  return  action . getMaxNumberOfBuilds () ;  }  else {  Log . warn (  """"Couldn't find CoberturaPublisher to decide the maximum number of builds to be graphed""""  ) ;  return  0 ;  }  }
@ Test  public   void   violationCountWithCauses ()   {  ValidationException   subject   =  subjectWithCauses ( subjectWithCauses () ,  subjectWithCauses () ) ;  assertEquals ( 2 ,  subject . getViolationCount () ) ;  }
public   OfflineFile   getCurrentDownloadingFile ()   {  return  mOfflineFileDao . getCurrentDownloadingFile () ;  }
@ Override  public   int   hashCode ()   {  final   int   prime   =  31 ;  int   result   =  1 ;  long   temp ;  temp   =   Double . doubleToLongBits ( score ) ;  result   =   prime   *   result   +   ( int )   ( temp   ^   ( temp   >>>   32 ) ) ;  return  result ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Check is add profile enabled"""" )  public   void   testIsAddProfileEnabled ()   throws  Exception   {  boolean   isAddProfileEnabled   =  userProfileMgtClient . isAddProfileEnabled () ;  Assert . assertTrue ( isAddProfileEnabled ,  """"Getting is add profile enabled has failed."""" ) ;  }
@ Override  public   List < Changed >   getChangedElements ()   {  return  Arrays . asList ( implicitOAuthFlow , passwordOAuthFlow , clientCredentialOAuthFlow , authorizationCodeOAuthFlow , extensions ) ;  }
@ Override  public   void   checkClientTrusted ( X509Certificate []   chain ,  String   authType )   throws  CertificateException   {  throw  new   UnsupportedOperationException () ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   init ()   throws  Exception   {  super . testInit ( API_VERSION ,  swaggerDefinition ,  tenant ) ;  userStoreConfigAdminServiceClient   =   new   UserStoreConfigAdminServiceClient ( backendURL ,  sessionCookie ) ;  userStoreConfigUtils   =   new   UserStoreConfigUtils () ;  }
@ Override  public   void   onApplicationConnectionSuccess ( ApplicationMetadata   applicationMetadata ,  String   applicationStatus ,  String   sessionId ,  boolean   wasLaunched )   {  this . session . onApplicationConnectionSuccess ( applicationMetadata ,  applicationStatus ,  sessionId ,  wasLaunched ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( type ,  name ,  description ,  schema ) ;  }
public   Set < String >   getIndexedNodeProperties ()   {  return  indexedNodeProperties ;  }
public   void   testGetProfileNamesWithID ()   throws  Exception   {  String []   profiles   =  userMgtClient . getProfileNamesWithID ( userId ) ;  Assert . assertNotNull ( profiles ) ;  Assert . assertTrue ( profiles . length   >   0 ) ;  }
@ Test  public   void   idHandling ()   {  JSONObject   schema   =  RAW_OBJECTS . getJSONObject ( """"idInRoot"""" ) ;  URI   actual   =  withLs ( JsonValue . of ( schema ) ) . ls . id ;  assertEquals ( schema . get ( """"id"""" ) ,  actual . toString () ) ;  }
@ Override  public   InetSocketAddress   getRemoteSocketAddress ( WebSocket   conn )   {  if  ( socket   !=   null )   {  return  ( InetSocketAddress )   socket . getRemoteSocketAddress () ;  }  return  null ;  }
public   void   addLocation ( LatLng   location )   {  locations . add ( location . toUrlValue () ) ;  }
@ Schema ( example   =   """"+94 775563324"""" ,  description   =   """""""" )  public   String   getSender ()   {  return  sender ;  }
@ Override  public   Vec2   getSize ()   {  return  new   Vec2 ( Math . max ( DisplayHelper . font () . width ( text ) ,  0 ) ,  DisplayHelper . font () . lineHeight   -   1 ) ;  }
@ DataProvider ( name   =   """"organizationDiscoveryPaginationNumericEdgeCasesOfLimitDataProvider"""" )  public   Object [] []   organizationDiscoveryPaginationNumericEdgeCasesOfLimitDataProvider ()   {  return  new   Object [] []   { { 0 ,  0 } ,  { 0 ,  20 } ,  { 0 ,  25 } , { 2 ,  0 } ,  { 2 ,  20 } ,  { 2 ,  25 } } ;  }
@ Test  public   void   scanXZArchTest ()   throws  Exception   {  Scanner . main   (  new   String []   {  getTestResourcesDirectory   ( )   +   File . separator   +   """"rpmtest-3-0.1.XZ.fc19.noarch.rpm""""  }  ) ;  }
public   static   void   setOnFilePickedListener ( OnFilePickedListener   onFilePickedListener )   {  mOnFilePickedListener   =   onFilePickedListener ;  mOnUriPickedListener   =   null ;  }
default   int   write ( Charset   charset ,  Collection < char [] >   data )   {  try  {  ByteArrayOutputStream   os   =  new   ByteArrayOutputStream () ;  for  ( char []   ca   :  data )   {  ByteBuffer   bb   =  charset . encode ( CharBuffer . wrap ( ca ) ) ;  os . write ( bb . array () ) ;  }  return  write ( os . toByteArray () ) ;  }   catch  ( IOException   e )   {  throw  new   Pi4JException ( e ) ;  }  }
public   static   List < Integer >   reverse ( final   int []   array )   {  final   List < Integer >   result   =  newIntegerList ( array ) ;  Collections . reverse ( result ) ;  return  result ;  }
@ Override  public   void   onBackPressed ()   {  super . onBackPressed () ;  finish () ;  }
public   void   testListParentsNewBuiltin ()   throws  Exception   {  ArrayList <  String >   list   =  new   ArrayList <  String > () ;  Contents . addBuiltinDirectory ( """"/home"""" ) ;  new   Contents () . listParents (  list ,  new   File (  """"/home/one/two/three/four"""" ) ) ;  assertEquals (  3 ,  list . size () ) ;  assertEquals (  """"/home/one/two/three"""" ,  list . get (  0 ) ) ;  assertEquals (  """"/home/one/two"""" ,  list . get (  1 ) ) ;  assertEquals (  """"/home/one"""" ,  list . get (  2 ) ) ;  }
public   static   boolean   isShowDetailsPressed ()   {  return  Screen . hasShiftDown ()   ||   JadeClient . showDetails . isDown () ;  }
@ Override  public   void   postApplication ( MasterContext < NNParams ,  NNParams >   context )   {  IOUtils . closeStream ( this . progressOutput ) ;  
@ Override  public   FullData   process ( final   ProcessingReport   report , final   FullData   input )  throws  ProcessingException  {  assertEquals ( input . getSchema () . getPointer () ,  PTR ) ;  wanted . doIt ( report ,  message ) ;  return  input ;  }
@ Override  public   ServerFileMetadata   createFromParcel ( Parcel   parcel )   {  return  new   ServerFileMetadata ( parcel ) ;  }
@ Override  public   < T >   List < Future < T > >   invokeAll ( Collection < ?   extends  Callable < T > >   callables )  throws  InterruptedException   {  return  delegate . invokeAll ( callables ) ;  }
@ Test  @ Timeout ( 5000 )  public   void   testHandshakeRejectionTestCase10 ()   throws  Exception   {  testProtocolRejection ( 10 ,  new   Draft_6455 ( Collections . < IExtension > emptyList () , Collections . < IProtocol > singletonList ( new   Protocol ( """"chat"""" ) ) ) ) ;  }
@ Override  public   boolean   matches ( int   cpuId ,  int   cpuId2 )   {  CpuLayout   cpuLayout   =  AffinityLock . cpuLayout () ;  return  cpuLayout . socketId ( cpuId )   !=   cpuLayout . socketId ( cpuId2 ) ;  }
@ DataBoundSetter  public   void   setUnstableNewHigh ( Integer   unstableNewHigh )   {  this . unstableNewHigh   =   unstableNewHigh ;  }
public   static   Long   getLong ( String   propertyName )   {  String   propertyValue   =  getProperty ( propertyName ) ;  return  ( propertyValue   ==   null )  ?   null   :  Long . valueOf ( propertyValue ) ;  }
@ Test  public   void   testReservedWithMixedPrecentEncodedValues ()   throws  Exception  {  UriTemplate   template   =  UriTemplate . buildFromTemplate ( """"http:
@ Override  public   boolean   onKeyPressed ( KeyEvent   keyEvent )   {  if  ( new   KeyCodeCombination ( KeyCode . SPACE ) . match ( keyEvent ) )   {  configEditor . playSound () ;   
@ Test  public   void   testIsAllStopwords ()   {  assertThat ( LuceneUtils . isAllStopwords ( newArrayList ( """"the"""" ,  """"a"""" ) ) ,  is ( true ) ) ;  assertThat ( LuceneUtils . isAllStopwords ( newArrayList ( """"the"""" ,  """"cat"""" ) ) ,  is ( false ) ) ;  }
@ GET  @ Path ( """"region/{region}"""" )  public   Object   getByRegion ( @ PathParam ( """"region"""" )   String   region ,  @ QueryParam ( """"fields"""" )   String   fields )   {  LOG . info ( """"Getting by region """"   +   region ) ;  try  {  List < Country >   countries   =  CountryService . getInstance () . getByRegion ( region ) ;  if  ( ! countries . isEmpty () )   {  return  parsedCountries ( countries ,  fields ) ;  }  return  getResponse ( Response . Status . NOT_FOUND ) ;  }   catch  ( Exception   e )   {  LOG . error ( e . getMessage () ,  e ) ;  return  getResponse ( Response . Status . INTERNAL_SERVER_ERROR ) ;  }  }
public   void   addRow ( CalendarEvent   event )   {  addRow ( new   QueryRow ()  . setCalendarId ( event . getEventSource () . source . getId () )  . setEventId ( event . getEventId () )  . setTitle ( event . getTitle () )  . setBegin ( event . getStartMillis () )  . setEnd ( event . getEndMillis () )  . setDisplayColor ( event . getColor () )  . setAllDay ( event . isAllDay ()  ?   1   :  0 )  . setEventLocation ( event . getLocation () )  . setHasAlarm ( event . isAlarmActive ()  ?   1   :  0 )  . setRRule ( event . isRecurring ()  ?   """"FREQ=WEEKLY;WKST=MO;BYDAY=MO,WE,FR""""   :  null ) ) ;  }
default   int   write ( InputStream   stream )   {  try  {  return  write ( stream . readAllBytes () ) ;  }   catch  ( IOException   e )   {  throw  new   Pi4JException ( e ) ;  }  }
@ Override  public   Iterable < ?   extends  File >   getLocation ( Location   location )   {  return  fileManager . getLocation ( location ) ;  }
@ Override  protected   void   onDraw ( Canvas   canvas )   {  super . onDraw ( canvas ) ;  canvas . drawPath ( borderPath ,  checkerPaint ) ;  canvas . drawBitmap ( bitmap ,  null ,  viewRect ,  null ) ;  canvas . drawPath ( borderPath ,  borderPaint ) ;  canvas . save () ;  if  ( isWide () )   {  canvas . translate ( w   *   currentPos ,  h   /   2 ) ;  }  else  {  canvas . translate ( w   /   2 ,  h   *   ( 1   -   currentPos ) ) ;  }  canvas . drawPath ( pointerPath ,  pointerPaint ) ;  canvas . restore () ;  }
@ Test  public   void   testPath ()   throws  Exception  {  Expression   e   =  Expression . path ( var ( """"var"""" ) ) . build () ;  Assert . assertEquals ( """"{/var}"""" ,  e . toString () ) ;  }
public   long   getRaw ( long   i )   {  return  RAW . getInt ( base   +   checkIndex ( i ,  size )   *   VALUE_BYTES )   &   0xFFFFFFFFL ;  }
@ Override  public   void   write ( DataWriter   out )   throws  IOException   {  super . write ( out ) ;  out . align ( 4 ) ;  }
@ Override  public   boolean   hasNext ()   {  while  ( ( med   ==   null   ||   ! med . hasNext () )   &&   interMed . hasNext () )   {  med   =   interMed . next () . iterator () ;  }  return  med   !=   null   &&   med . hasNext () ;  }
private   static   Set < String >   _asSet ( String []   v )   {  if  ( v   ==   null   ||   v . length   ==   0 )   {  return  Collections . emptySet () ;  }  Set < String >   s   =  new   HashSet < String > ( v . length ) ;  for  ( String   str   :  v )   {  s . add ( str ) ;  }  return  s ;  }
@ Override  public   IBinder   onBind ( Intent   intent )   {  Log . d ( TAG ,  """"onBind: """"   +   intent ) ;  return  null ;  }
public   Ratio   getCoverage ( CoverageMetric   metric )   {  return  aggregateResults . get ( metric ) ;  }
@ Override   public   UIntIndexer   get ( long   i ,  long []   m ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  m [ offset   +   n ]   =   array [ ( int ) index ( i )   +   n ]   &   0xFFFFFFFFL ;  }  return  this ;  }
@ Override  public   void   setPlayerInfoString ( String   world ,  String   player ,  String   node ,  String   value )   {  setPlayerInfoValue ( world ,  player ,  node ,  value ) ;  }
private   HttpHost   getProxy ( ProxyConfiguration   proxy ,  String   host )   {  Proxy   p   =  proxy . createProxy ( host ) ;  switch  ( p . type () )   {  case  DIRECT :  return  null ;          
@ Override  protected   void   onSizeChanged ( int   w ,  int   h ,  int   oldw ,  int   oldh )   {  this . w   =   w ;  this . h   =   h ;  viewRect . set ( 0 ,  0 ,  w ,  h ) ;  float   inset   =  borderPaint . getStrokeWidth ()   /   2 ;  borderPath . reset () ;  borderPath . addRect ( new   RectF ( inset ,  inset ,  w   -   inset ,  h   -   inset ) ,  Path . Direction . CW ) ;  updateBitmap () ;  }
public   FormValidation   doCheckTrendsLimit ( @ QueryParameter   String   value )   {  return  isValidInteger ( value ) ;  }
public   void   register ( Crosshair   crosshair )  {  if ( ! this . idToCrosshair . containsKey ( crosshair . getLocation () ) )  {  this . idToCrosshair . put ( crosshair . getLocation () ,  crosshair ) ;  this . registeredCrosshairs . add ( crosshair ) ;  }  }
public   static   float   pixels ( float   pt )  {  return  pt   *   dpi   /   72.0f ;  }
public   int   getOpenIDSessionTimeout ()   throws  RemoteException   {  return  openidProviderServiceStub . getOpenIDSessionTimeout () ;  }
@ Override  public   List < Changed >   getChangedElements ()   {  return  Stream . concat ( changed . values () . stream () ,  Stream . of ( extensions ) )  . collect ( Collectors . toList () ) ;  }
public   static   < T >   Iterator < T >   concat ( Iterator < ?   extends  T >   a ,  Iterator < ?   extends  T >   b )   {  return  com . google . common . collect . Iterators . concat ( a ,  b ) ;  }
public   static   Value   from ( JsonSetter   src )   {  if  ( src   ==   null )   {  return  EMPTY ;  }  return  construct ( src . nulls () ,  src . contentNulls () ) ;  }
@ Override  public   String   toString ()   {  return  """"class ProvisioningRequest {\n""""   +  """"    jit: """"   +   toIndentedString ( jit )   +   """"\n""""   +  """"    outboundConnectors: """"   +   toIndentedString ( outboundConnectors )   +   """"\n""""   +  """"}"""" ;  }
public   static   int   getCategoicalBinIndex ( List < String >   binCategories ,  String   columnVal )   {  if ( StringUtils . isBlank ( columnVal )   ||   CollectionUtils . isEmpty ( binCategories ) )   {  return  - 1 ;  }  for ( int   i   =  0 ;   i   <   binCategories . size () ;   i ++ )   {  if ( isCategoricalBinValue ( binCategories . get ( i ) ,  columnVal ) )   {  return  i ;  }  }  return  - 1 ;  }
public   static   void   setKeyStoreParams ()   {  String   keyStore   =  filePath . getAbsolutePath () ;  System . setProperty ( """"Security.KeyStore.Location"""" ,  keyStore   +   ISIntegrationTest . URL_SEPARATOR   +   ISIntegrationTest . KEYSTORE_NAME ) ;  System . setProperty ( """"Security.KeyStore.Password"""" ,  """"wso2carbon"""" ) ;  }
@ Issue ( """"SECURITY-3344"""" )  @ Test  void   test_html_escape ()   throws  Exception   {  List < Finding >   findings   =  loadFindings ( """"dependency-check-report-html-injection.xml"""" ) ;  String   json   =  sut . transform ( findings ) . toString () ;  assertThatJson ( json ) . node ( """"rows"""" ) . isArray ()   
@ AfterClass ( alwaysRun   =   true )  public   void   testCleanUp ()   throws  Exception   {  removeApplications () ;  scim2RestClient . deleteUser ( userId ) ;  }
@ Override  public   final   void   updateError ( final   double   actual ,  final   double   ideal )   {  double   delta   =  ideal   -   actual ;  this . globalError   +=   delta   *   delta ;  this . setSize   +=   1 ;  }
@ Test  @ Timeout ( 5000 )  public   void   testHandshakeRejectionTestCase2 ()   throws  Exception   {  testHandshakeRejection ( 2 ) ;  }
public   void   setTemplateVersion ( String   templateVersion )   {  this . templateVersion   =   templateVersion ;  }
public   void   removeFromChannel ( String   player )  {  for ( ChatChannel   chan   :  channelmap . values () )  {  if ( chan . hasMember ( player ) )  chan . leave ( player ) ;  }  }
@ PublicApi ( exclude   =   true )  public   static   long   setToFlags ( Set < ExposureNotificationStatus >   set )   {  long   res   =  0 ;  for  ( ExposureNotificationStatus   status   :  set )   {  res   |=   status . flag () ;  }  return  res ;  }
protected   void   usage ()   {  output () . println ( DisUnity . getSignature () ) ;  commander () . usage () ;  }
public   BPSProfile []   listBPSProfiles ()  throws  RemoteException ,  WorkflowAdminServiceWorkflowException , WorkflowImplAdminServiceWorkflowImplException   {  BPSProfile []   bpsProfiles   =  stubImpl . listBPSProfiles () ;  if  ( bpsProfiles   ==   null )   {  bpsProfiles   =   new   BPSProfile [ 0 ] ;  }  return  bpsProfiles ;  }
private   static   ToIntFunction < Category >   specialOrder ()   {  String   core   =  I18n . get ( OptionsList . Entry . makeKey ( """"plugin_""""   +   Jade . ID ) ) ;  String   debug   =  I18n . get ( OptionsList . Entry . makeKey ( """"plugin_""""   +   Jade . ID   +   """".debug"""" ) ) ;  
private   boolean   anyInspectionToolEnabled ()   {  return  newIssuesGlobalInspectionToolEnabled   ||   oldIssuesGlobalInspectionToolEnabled ;  }
public   static   < K ,  E >   Map < K ,  List < E > >   groupBy ( final   Iterable < E >   iterable ,  final   Function < E ,  K >   func )   {  final   Map < K ,  List < E > >   retVal   =  new   LinkedHashMap <> () ;  for  ( E   e   :  iterable )   {  final   K   key   =  func . apply ( e ) ;  List < E >   val ;  if  ( retVal . containsKey ( key ) )   {  val   =   retVal . get ( key ) ;  }   else  {  val   =   new   ArrayList <> () ;  }  val . add ( e ) ;  retVal . put ( key ,  val ) ;  }  return  retVal ;  }
@ Test  public   void   typeChanged ()   {  BackwardIncompatibleProp   prop   =  SCHEMA_TYPE_CHANGED ;  assertSpecIncompatible ( BASE ,  """"bc_schema_type_changed.yaml"""" ,  prop ) ;  }
@ Override  public   FileVisitResult   visitFile ( Path   file ,  BasicFileAttributes   attrs )   throws  IOException   {  String   relativePathInsideBundle   =  pluginPath . relativize ( file ) . toString () ;  if  ( maxLocation . length ()   <   relativePathInsideBundle . length () )   {  maxLocation . setLength ( 0 ) ;  maxLocation . append ( relativePathInsideBundle ) ;  }  if  ( relativePathInsideBundle . length ()   >   MAX_ALLOWED_RELATIVE_PATH )   {  tooLongPaths . put ( relativePathInsideBundle ,  relativePathInsideBundle . length () ) ;  }  return  FileVisitResult . CONTINUE ;  }
public   SAMLMetaData   responseSigningAlgorithm ( MetadataProperty   responseSigningAlgorithm )   {  this . responseSigningAlgorithm   =   responseSigningAlgorithm ;  return  this ;  }
@ Test  public   void   changedButCompatible ()   {  assertSpecChangedButCompatible ( BASE ,  """"bc_openapi_changed_but_compatible.yaml"""" ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  deleteApp ( applicationId ) ;  consumerKey   =   null ;  consumerSecret   =   null ;  spPrivateKey   =   null ;  spX509PublicCert   =   null ;  client . close () ;  restClient . closeHttpClient () ;  }
@ Test  public   void   increaseFive ()   {  assertEquals (  5 ,  Utils . getShortestScrollOption ( 0 ,  5 ,  10 ,  false ) ) ;  }
public   Authenticator   displayName ( String   displayName )   {  this . displayName   =   displayName ;  return  this ;  }
@ Override  public   void   onCancelDownloads ()   {  completionSource . trySetResult ( null ) ;  }
@ Override  public   void   markAsClientFeature ( ResourceLocation   uid )   {  clientFeatures . add ( uid ) ;  }
private   ClassLoader   getClassLoader ( String   library )   throws  Exception   {  URL []   urls   =  new   URL []   {  new   File ( library ) . toURI () . toURL ()  } ;  URLClassLoader   classLoader   =  new   URLClassLoader ( urls ,  ThinJarWrapper . class . getClassLoader () . getParent () ) ;  Thread . currentThread () . setContextClassLoader ( classLoader ) ;  return  classLoader ;  }
@ Contract ( """"_ -> this"""" )  public   ProgressStyle   overlay ( IElement   overlay )   {  this . overlay   =   overlay ;  return  this ;  }
@ Override   public   IntIndexer   put ( long []   indices ,  int   n )   {  buffer . put ( ( int ) index ( indices ) ,  n ) ;  return  this ;  }
@ Override  public   double   getPlayerInfoDouble ( String   world ,  String   player ,  String   node ,  double   defaultValue )   {  String   val   =  getPlayerInfoString ( world ,  player ,  node ,  null ) ;  if  ( val   ==   null )   {  return  defaultValue ;  }  double   d   =  defaultValue ;  try  {  d   =   Double . valueOf ( val ) ;  return  d ;  }   catch  ( NumberFormatException   e )   {  return  defaultValue ;  }  }
public   List < Country >   getByRegionalBloc ( String   regionalBloc )   {  List < Country >   result   =  new   ArrayList <> () ;  for  ( Country   country   :  countries )   {  for  ( RegionalBloc   countryRegionalBloc   :  country . getRegionalBlocs () )   {  if  ( countryRegionalBloc . getAcronym () . toUpperCase () . equals ( regionalBloc . toUpperCase () )  ||   countryRegionalBloc . getOtherAcronyms () . contains ( regionalBloc . toUpperCase () ) )   {  result . add ( country ) ;  }  }  }  return  result ;  }
private   String   extractRefName ( final   String   jsonNodeName )   {  return  jsonNodeName . substring ( jsonNodeName . lastIndexOf ( SEPARATOR_SLASH )   +   1 ) ;  }
default   int   i2cBlockProcessCall ( int   handle ,  int   register ,  byte []   write ,  int   writeLength ,  byte []   read ) {  return  i2cBlockProcessCall ( handle ,  register ,  write ,  0 ,  writeLength ,  read ,  0 ) ;  }
@ Override  public   WideFieldLayer   combine ( WideFieldLayer   from )   {  if ( columnId   !=   from . getColumnId () )   {  return  this ;  }  Map < Integer ,  Float >   fromGrads   =  from . getwGrads () ;  for ( Entry < Integer ,  Float >   entry :  fromGrads . entrySet () )   {  Integer   index   =  entry . getKey () ;  float   grad   =  entry . getValue () ;  wGrads . put ( index ,  grad   +   wGrads . getOrDefault ( index ,  0.0f ) ) ;  }  return  this ;  }
private   synchronized   void   initView ()   {  mLeftViewIndex   =   - 1 ;  mRightViewIndex   =   0 ;  mDisplayOffset   =   0 ;  mCurrentX   =   0 ;  mNextX   =   0 ;  mMaxX   =   Integer . MAX_VALUE ;  mScroller   =   new   Scroller ( getContext () ) ;  mGesture   =   new   GestureDetector ( getContext () ,  mOnGesture ) ;  }
private   static   double   fillDefaultValue ( ColumnConfig   config ,  CategoryMissingNormType   categoryMissingNormType )   {  double   value   =  0.0 ;  switch ( categoryMissingNormType )   {  case  POSRATE :  
public   XmlBuilder   d ( String   cdata )   {  U . remove ( data ,  path   +   """".""""   +   SELF_CLOSING ) ;  U . update ( data ,  path   +   """".#cdata-section"""" ,  cdata ) ;  return  this ;  }
public   boolean   getConsonantOverlap ( String   consonant )   {  return  readonlyConfig . consonantOverlaps . get ( consonant ) ;  }
private   View   getParentView ()   {  return  findViewById ( R . id . parent_view ) ;  }
default   void   addAfterRenderCallback ( JadeAfterRenderCallback   callback )   {  addAfterRenderCallback ( 0 ,  callback ) ;  }
private   static   String   getSelfVersionName ( final   Context   context )   {  try  {  return  context . getPackageManager () . getPackageInfo ( context . getPackageName () ,  0 ) . versionName ;  }   catch  ( PackageManager . NameNotFoundException   neverHappens )   {  return  null ;  }  }
@ Bean  public   ElasticsearchClient   esClient ()   throws  Exception   {  ElasticsearchClientFactoryBean   factory   =  new   ElasticsearchClientFactoryBean () ;  enrichFactoryWithNodeSettings ( factory ) ;  factory . setClasspathRoot ( """"/models/root/mapping-failed/client1"""" ) ;  factory . setForceIndex ( false ) ;  factory . afterPropertiesSet () ;  return  factory . getObject () ;  }
public   boolean   changeHorizontalScale ( int   oldRank ,  int   newRank )   {  if  ( oldRank   !=   horizontalRank . get () )   {  
 <argument pos:start=""""""""205:58"""""""" pos:end=""""""""205:58""""""""><expr pos:start=""""""""205:58"""""""" pos:end=""""""""205:58""""""""><literal type=""""""""number"""""""" pos:start=""""""""205:58"""""""" pos:end=""""""""205:58"""""""">0</literal></expr></argument>
public   void   setAudioChannels ( int   audioChannels )   {  this . audioChannels   =   audioChannels ;  }
@ Test  public   void   testGetModelConfigMeta ()   {  Assert . assertNotNull ( MetaFactory . getModelConfigMeta () . size () ) ;  }
public   static   Method   getDeclaredMethod ( String   methodName ,  Class < ? >   clazz )   throws  NoSuchMethodException   {  String   key   =  clazz . getName ()   +   """"#""""   +   methodName ;  Method   cacheMethod   =  METHOD_CACHE . get ( key ) ;  if ( cacheMethod   !=   null )   {  return  cacheMethod ;  }  return  clazz . getDeclaredMethod ( methodName ,  ClassUtils . EMPTY_CLASS_ARRAY ) ;  }
@ Test  public   void   ipv4OldSuccess ()   {  assertSuccess ( THERE_IS_NO_PLACE_LIKE ,  new   IPV4ValidatorOld () ) ;  }
@ Override  public   void   run ()   {  for  ( int   i   =  0 ;   i   <   numUpdates ;   i ++ )   {  Log . w ( TAG ,  String . format ( """"Test Batch %d of %d"""" ,  i ,  numUpdates ) ) ;  Map < String ,  Map < String ,  Object > >   products   =  TestData . generateProducts ( numDocs ) ;  saveDocument ( """"Products"""" ,  products ) ;  }  }
@ Test  public   void   testMemoryModeFile ()   throws  Exception   {  try  ( DatabaseReader   reader   =  new   DatabaseReader . Builder ( this . geoipFile )  . fileMode ( Reader . FileMode . MEMORY ) . build () )   {  this . testMemoryMode ( reader ) ;  }  }
public   String   getDescription ()   {  String []   descriptions   =  null ;  try  {  Method   m   =  frameGrabber . getMethod ( """"getDeviceDescriptions"""" ) ;  descriptions   =   ( String [] ) m . invoke ( null ) ;  }   catch  ( java . lang . Exception   ex )   {   }  if  ( descriptions   !=   null   &&   deviceNumber   !=   null   &&   deviceNumber   <   descriptions . length )   {  return  descriptions [ deviceNumber ] ;  }   else  {  return  """""""" ;  }  }
@ Test  void   xmlElementsIgnoreCaseValueIsOk ()   {  var   pluginParameters   =  PluginParameters . builder () . setVerifyFail ( """"STOP"""" ,  """"XMLElements"""" ) . build () ;  assertEquals ( VerifyFailOnType . XMLELEMENTS ,  pluginParameters . verifyFailOn ) ;  }
@ Override  public   boolean   isOpen ()   {  return  readyState   ==   ReadyState . OPEN ;  }
public   static   GripType   getType ( ResourceLocation   id )  {  return  gripTypeMap . getOrDefault ( id ,  ONE_HANDED ) ;  }
Uri   downloadFileAsync ( String   url )   throws  IOException   {  this . downloadMode   =   true ;  this . runOnUiThread ( ()  ->  {  progressIndicator . setIndeterminate ( false ) ;  progressIndicator . setVisibility ( View . VISIBLE ) ;  } ) ;  byte []   module ;  try  {  module   =   Http . doHttpGet ( url ,  ( downloaded ,  total ,  done )  ->   progressIndicator . setProgressCompat ( ( downloaded   *   100 )   /   total ,  true ) ) ;  try  ( FileOutputStream   fileOutputStream   =  new   FileOutputStream ( this . moduleFile ) )   {  fileOutputStream . write ( module ) ;  }  }   finally  {  
public   void   startDocument ()   throws  SAXException   {  super . startDocument () ;  if  ( this . rootCoverage   ==   null )   {  this . rootCoverage   =   new   CoverageResult ( CoverageElement . PROJECT ,  null ,  Messages . CoberturaCoverageParser_name () ) ;  }  stack . clear () ;  inSource   =   false ;  inSources   =   false ;  }
static   boolean   isEqual ( Frame   frame ,  Mat   mat )   {  return  mat   !=   null   &&   frame   !=   null   &&   frame . image   !=   null   &&   frame . image . length   >   0  &&   frame . imageWidth   ==   mat . cols ()   &&   frame . imageHeight   ==   mat . rows ()  &&   frame . imageChannels   ==   mat . channels ()   &&   getMatDepth ( frame . imageDepth )   ==   mat . depth ()  &&   new   Pointer ( frame . image [ 0 ] . position ( 0 ) ) . address ()   ==   mat . data () . address ()  &&   frame . imageStride   *   Math . abs ( frame . imageDepth )   /   8   ==   ( int ) mat . step () ;  }
public   LimbPose   setRotationAngleX ( float   rotationAngleX )  {  this . rotationAngleX   =   rotationAngleX ;  return  this ;  }
public   String   getAudioTitle ( ServerFile   audioFile )   {  if  ( TextUtils . isEmpty ( audioTitle ) )   {  return  audioFile . getName () ;  }  if  ( TextUtils . isEmpty ( audioArtist )   &&   TextUtils . isEmpty ( audioAlbum ) )   {  return  audioFile . getName () ;  }  return  audioTitle ;  }
@ Override  public   Chain < T >   filterIndexed ( final   PredicateIndexed < T >   pred )   {  return  new   Chain <> ( Underscore . filterIndexed ( value () ,  pred ) ) ;  }
@ Override  public   double   getRadius ()   throws  RemoteException   {  return  options . getRadius () ;  }
@ Test  public   void   rectangleSingleFailure ()   {  JSONObject   input   =  testInputs . getJSONObject ( """"rectangleSingleFailure"""" ) ;  TestSupport . expectFailure ( rectangleSchema ,  NumberSchema . class ,  """"#/rectangle/a"""" ,  input ) ;  }
@ Override  public   int   getWidthExpansionPoints ( boolean   atLineStart ,  boolean   atLineEnd )  {  if  ( collapsews   &&   splitws   &&   ! lineBreakStop )  {  int   cnt   =  0 ;  final   String   text   =  getText () ;  for  ( int   i   =  0 ;   i   <   text . length () ;   i ++ )  {  if  ( text . charAt ( i )   ==   ' '  &&   ! ( i   ==   0   &&   atLineStart )   
public   Builder   locales ( List < String >   val )   {  this . locales   =   val ;  return  this ;  }
private   boolean   isNavigationDrawerRequired ( Bundle   state )   {  return  ( state   ==   null )   ||   state . getBoolean ( State . NAVIGATION_DRAWER_VISIBLE ) ;  }
private   void   describePropertyDependencies ( Map < String ,  Set < String > >   propertyDependencies )   {  writer . key ( """"dependencies"""" ) ;  writer . object () ;  propertyDependencies . forEach ( ( key ,  value )  ->  {  writer . key ( key ) ;  writer . array () ;  value . forEach ( writer :: value ) ;  writer . endArray () ;  } ) ;  writer . endObject () ;  }
@ Test  public   void   testGetSecretByNonExistingSecretName ()   {  Response   response   =  getResponseOfGet ( SECRET_API_BASE_PATH   +   PATH_SEPARATOR   +   SECRET_TYPE   +   PATH_SEPARATOR   +   """"randomName"""" ) ;  validateErrorResponse ( response ,  HttpStatus . SC_NOT_FOUND ,  """"SECRETM_00009"""" ) ;  }
public   static   Map < String ,  String >   readConfig ( InputStream   paramStream )   {  Properties   properties   =  new   Properties () ;  Map < String ,  String >   res   =  new   HashMap <> () ;  try  {  properties . load ( new   InputStreamReader ( paramStream ,  StandardCharsets . UTF_8 ) ) ;  for  ( String   s :  properties . stringPropertyNames () )   {  res . put ( s ,  properties . getProperty ( s ) ) ;  }  return  res ;  }   catch  ( IOException   e )   {  System . err . println ( e . getMessage () ) ;  throw  new   RuntimeException ( e ) ;  }  }
public   void   setOrgName ( String   orgName )   {  this . orgName   =   orgName ;  }
@ Override  public   boolean   busUserProvided ()   {  return  this . busUserProvided ;  }
public   void   setHybridThreshold ( Double   hybridThreshold )   {  this . hybridThreshold   =   hybridThreshold ;  }
public   void   setParams ( BasicNetwork   network )   {  this . network   =   network . getFlat () ;  this . weights   =   network . getFlat () . getWeights () ;  }
public   static   void   transform ( Graph   graph )   {  transform ( graph . getVertices () ) ;  transform ( graph . getEdges () ) ;  }
@ Override  public   boolean   contains ( Object   object )   {  for  ( Collection < T >   ts   :  multiCol )   {  if  ( ts . contains ( object ) )   return  true ;  }  return  false ;  }
@ Bean ( destroyMethod   =   """"shutdown"""" )  @ ConditionalOnMissingBean ( value   =   EurekaClient . class ,  search   =   SearchStrategy . CURRENT )  public   EurekaClient   eurekaClient ( ApplicationInfoManager   manager ,  EurekaClientConfig   config , TransportClientFactories < ? >   transportClientFactories )   {  return  new   CloudEurekaClient ( manager ,  config ,  transportClientFactories ,  this . optionalArgs ,  this . context ) ;  }
protected   JobKey   createJobKey ( final   String   jobName ,  final   Job   job )   {  String   key   =  StringUtils . isNotBlank ( jobName )  ?   jobName   :  job . getClass () . getCanonicalName () ;  return  JobKey . jobKey ( key ,  job . getGroupName () ) ;  }
@ Test  public   void   leastSpecificSubdivision ()   {  assertEquals ( """"MN"""" , this . insights . getLeastSpecificSubdivision () . getIsoCode () , """"Most specific subdivision returns first subdivision"""" ) ;  }
public   static   double   colorDistance ( int   color1 ,  int   color2 )   {  int   r1   =  Color . red ( color1 ) ;  int   g1   =  Color . green ( color1 ) ;  int   b1   =  Color . blue ( color1 ) ;  int   r2   =  Color . red ( color2 ) ;  int   g2   =  Color . green ( color2 ) ;  int   b2   =  Color . blue ( color2 ) ;  return  Math . sqrt ( Math . pow ( r1   -   r2 ,  2 )   +   Math . pow ( g1   -   g2 ,  2 )   +   Math . pow ( b1   -   b2 ,  2 ) ) ;  }
public   void   setAudioOptions ( Map < String ,  String >   options )   {  this . audioOptions   =   options ;  }
public   DiffResult   resultRequestBody ()   {  return  requestBody   ==   null  ?   DiffResult . NO_CHANGES   :  requestBody . isChanged () ;  }
@ Override  public   void   doAncsPositiveAction ( IWearableCallbacks   callbacks ,  int   i )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: doAncsPositiveAction: """"   +   i ) ;  }
@ Test  public   void   resolveWrapsURISyntaxException ()   {  try  {  ReferenceResolver . resolve ( """"\\\\somethin\010g invalid
public   ExposureInformationBuilder   setTransmissionRiskLevel ( @ RiskLevel   int   transmissionRiskLevel )   {  this . transmissionRiskLevel   =   transmissionRiskLevel ;  return  this ;  }
@ Override  public   boolean   equals ( Object   other )   {  if  ( ! ( other   instanceof   Theme ) )   {  return  false ;  }  Theme   otherTheme   =  ( Theme )   other ;  return  otherTheme . id . equals ( this . id ) ;  }
@ Test  public   void   testGetUrlEncodedFullName ()   {  assertThat ( notBuiltAction . getUrlEncodedFullName () ,  is ( NOT_BUILT_JOB_NAME ) ) ;  assertThat ( successfulAction . getUrlEncodedFullName () ,  is ( SUCCESSFUL_JOB_NAME ) ) ;  assertThat ( new   JobBadgeAction ( null ) . getUrlEncodedFullName () ,  is ( """"null-project-no-url-encoded-fullName"""" ) ) ;  }
@ Override  public   void   stop ()   {  this . running   =   false ;  eurekaServerBootstrap . contextDestroyed ( this . servletContext ) ;  }
public   DeferredChanged < ChangedSchema >   getTypeChangedSchema ( Schema   left ,  Schema   right ,  DiffContext   context )   {  return  new   RealizedChanged ( SchemaDiff . getSchemaDiffResult ( openApiDiff )  . getChangedSchema ()  . setOldSchema ( left )  . setNewSchema ( right )  . setChangedType ( true )  . setContext ( context ) ) ;  }
@ Override  public   void   onActivityDestroyed ( @ NonNull   Activity   activity )   {  Log . v ( TAG ,  activity . getClass () . getSimpleName ()   +   """" Destroyed"""" ) ;  }
private   List < Double >   calculateWoe ( List < Integer >   binCountPos ,  List < Integer >   binCountNeg )   {  List < Double >   woe   =  new   ArrayList < Double > () ;  double   sumPos   =  0.0 ;  double   sumNeg   =  0.0 ;  for ( int   i   =  0 ;   i   <   binCountPos . size () ;   i ++ )   {  sumPos   +=   binCountPos . get ( i ) ;  sumNeg   +=   binCountNeg . get ( i ) ;  }  for ( int   i   =  0 ;   i   <   binCountPos . size () ;   i ++ )   {  woe . add ( Math . log ( ( binCountPos . get ( i )   /   sumPos   +   EPS )   /   ( binCountNeg . get ( i )   /   sumNeg   +   EPS ) ) ) ;  }  return  woe ;  }
public   void   setDollarReplacement ( String   dollarReplacement )   {  this . dollarReplacement   =   dollarReplacement ;  }
public   void   setShare ( @ NonNull   String   share )   {  this . share   =   share ;  }
@ NonNull  @ Override  public   GuidanceStylist . Guidance   onCreateGuidance ( Bundle   savedInstanceState )   {  return  new   GuidanceStylist . Guidance ( getString ( R . string . pref_title_connection ) , getString ( R . string . pref_connection_desc ) , """""""" , ContextCompat . getDrawable ( getActivity () ,  R . drawable . ic_app_logo_shadowless ) ) ;  }
@ Test  public   void   testMavenLocalRepoDownload ()   throws  Exception   {  System . setProperty ( """"thin.root"""" ,  """"target"""" ) ;  
@ Test  public   void   thatFormatsAreSuggested ()   {  getCaretCompletions ( """"formats_all"""" )  . assertContains ( """"int32"""" ,  """"int64"""" )  . assertContains ( """"byte"""" ,  """"binary"""" ,  """"date"""" ,  """"date-time"""" ,  """"password"""" )  . assertContains ( """"float"""" ,  """"double"""" ) ;  }
public   boolean   equals ( Object   other )   {  if  ( ! ( other   instanceof   DotArc ) )  return  false ;  DotArc   oa   =  ( DotArc )   other ;  return  oa . from . equals ( from )   &&   oa . to . equals ( to )   &&   oa . attributes . equals ( attributes ) ;  }
@ Test  public   void   versionIRI ()   {  Node   ontology   =  getNode ( ROOT ) ;  Node   version   =  getNode ( VERSION_IRI ) ;  assertThat ( hasRelationship ( ontology ,  version ,  OwlRelationships . OWL_VERSION_IRI ) ,  is ( true ) ) ;  }
public   Schema   expectedViolatedSchema ()   {  if  ( expectedViolatedSchema   !=   null )   {  return  expectedViolatedSchema ;  }  return  subject ;  }
@ Override  public   ProviderGroup < SpiProvider >   spi ()   {  return  providers . spi () ;  }
@ Nullable  @ Override  public   AssetPackLocation   getPackLocation ( @ NonNull   String   packName )   {  throw  new   UnsupportedOperationException () ;  }
public   boolean   tryAcquire ( long   timeout ,  TimeUnit   unit )   {  return  tryAcquire ( 1 ,  timeout ,  unit ) ;  }
private   String   getSessionDataKeyConsent ( CloseableHttpClient   client ,  String   sessionDataKey )  throws  IOException ,  URISyntaxException   {  HttpResponse   response   =  sendLoginPost ( client ,  sessionDataKey ) ;  Assert . assertNotNull ( response ,  """"Login request failed. response is null."""" ) ;  Header   locationHeader   =  response . getFirstHeader ( HTTP_RESPONSE_HEADER_LOCATION ) ;  Assert . assertNotNull ( locationHeader ,  """"Login response header is null"""" ) ;  EntityUtils . consume ( response . getEntity () ) ;  
public   boolean   hasLyric ( String   lyric )   {  return  configMap . containsKey ( lyric ) ;  }
private   CoverageResult   loadResults ( String   fileName )   throws  Exception   {  InputStream   in   =  getClass () . getResourceAsStream ( fileName ) ;  CoverageResult   result   =  CoberturaCoverageParser . parse ( in ,  null ) ;  return  result ;  }
@ Override  public   void   handle ( S2CMessageRemoveProjectile   message ,  MessageContext   context )  {  context . execute ( ()  ->   ClientPlayHandler . handleRemoveProjectile ( message ) ) ;  context . setHandled ( true ) ;  }
@ Test  public   void   objectUnionOf ()   {  Node   parent   =  getNode ( ROOT   +   """"/Parent"""" ) ;  Node   union   =  getLabeledOtherNode ( parent ,  OwlRelationships . OWL_EQUIVALENT_CLASS ,  OwlLabels . OWL_UNION_OF ) ;  assertThat ( union . hasLabel ( OwlLabels . OWL_ANONYMOUS ) ,  is ( true ) ) ;  Node   mother   =  getNode ( ROOT   +   """"/Mother"""" ) ;  Node   father   =  getNode ( ROOT   +   """"/Father"""" ) ;  assertThat ( hasDirectedRelationship ( union ,  mother ,  OwlRelationships . OPERAND ) ,  is ( true ) ) ;  assertThat ( hasDirectedRelationship ( union ,  father ,  OwlRelationships . OPERAND ) ,  is ( true ) ) ;  }
@ Override  protected   void   processSetForegroundColor ( int   color )   {  setForegroundColor ( colorMap . getNormal ( color ) ) ;  }
public   static   < K ,  V >   Function < Map < K ,  V > ,  V >   property ( final   K   key )   {  return  object  ->   object . get ( key ) ;  }
@ Test  public   void   testValidateRequest_noCenterAndNoZoomWithPath ()   throws  Exception   {  try  ( LocalTestServerContext   sc   =  new   LocalTestServerContext ( IMAGE ) )   {  StaticMapsRequest   req   =  StaticMapsApi . newRequest ( sc . context ,  new   Size ( WIDTH ,  HEIGHT ) ) ;  Path   path   =  new   Path () ;  path . color ( """"green"""" ) ;  path . fillcolor ( """"0xAACCEE"""" ) ;  path . weight ( 3 ) ;  path . geodesic ( true ) ;  path . addPoint ( """"Melbourne"""" ) ;  path . addPoint ( SYDNEY ) ;  req . path ( path ) ;  req . await () ;  }  }
@ DataProvider ( name   =   """"offsetLimitProvider"""" )  public   static   Object [] []   paginationLimitOffsetProvider ()   {  return  new   Object [] [] { { 0 ,  5 } , { 4 ,  5 } , { 5 ,  5 } , { 10 ,  5 } , { 15 ,  5 } ,} ;  }
public   ChangedRequestBody   setExtensions ( final   ChangedExtensions   extensions )   {  this . extensions   =   extensions ;  return  this ;  }
private   Path   getVotedSelectionPath ( SourceType   sourceType )   {  return  ShifuFileUtils . getFileSystemBySourceType ( sourceType )  . makeQualified ( new   Path ( getPathFinder () . getVarSelsPath ( sourceType ) ,  """"VarSels"""" ) ) ;  }
private   Object   getValue ( Method   method )   throws  VarExploderException  {  try {  if  ( method   ==   null )  {  return  null ;  }  return  method . invoke ( source ) ;  }  catch  ( IllegalArgumentException   e )  {  throw  new   VarExploderException ( e ) ;  }  catch  ( IllegalAccessException   e )  {  throw  new   VarExploderException ( e ) ;  }  catch  ( InvocationTargetException   e )  {  throw  new   VarExploderException ( e ) ;  }  }
public   ChangedOperation   setOperationId ( final   ChangedMetadata   operationId )   {  this . operationId   =   operationId ;  return  this ;  }
public   FormValidation   doCheckCredentialsId ( @ QueryParameter   String   value ,  @ AncestorInPath   Item   project )   {  if  ( project   !=   null   &&   StringUtils . isBlank ( value )   &&   StringUtils . isBlank ( credentialsId ) )   {  return  FormValidation . error ( """"Please specify the credentials to use"""" ) ;  }   else  {  return  FormValidation . ok () ;  }  }
public   boolean   tryAcquire ()   {  return  tryAcquire ( 1 ,  0 ,  MICROSECONDS ) ;  }
public   ForegroundColorSpan   getFcs ()   {  return  new   ForegroundColorSpan ( ContextCompat . getColor ( context ,  R . color . accent ) ) ;  }
public   final   Compiler   withOptions ( Iterable < ?   extends  Object >   options )   {  return  copy ( processors () , FluentIterable . from ( options ) . transform ( toStringFunction () ) . toList () , classPath () , annotationProcessorPath () ) ;  }
@ Schema ( description   =   """""""" )  public   String   getSmtpServerHost ()   {  return  smtpServerHost ;  }
@ Override  public   double   mean ( long   numPersons )   {  return  Math . round ( Math . pow ( numPersons ,  ( 0.512   -   0.028   *   Math . log10 ( numPersons ) ) ) ) ;  }
public   static   void   appendHexString ( StringBuilder   builder ,  ByteBuffer   buffer ,  int   offset ,  int   length ) {  appendHexString ( builder ,  buffer . array () ,  offset ,  length ) ;  }
@ NonNull  public   static   Intent   getPermittedActivityIntent ( @ NonNull   Context   context ,  @ NonNull   Intent   intent )   {  return  arePermissionsGranted ( context )  ?   intent   :  MainActivity . intentToStartMe ( context ) ;  }
@ ConditionalOnMissingBean  @ Bean  public   EurekaInstanceMonitor   eurekaInstanceMeterBinder ( MeterRegistry   meterRegistry , PeerAwareInstanceRegistry   instanceRegistry ,  EurekaInstanceTagsProvider   tagProvider ,  TaskExecutor   executor )   {  return  new   EurekaInstanceMonitor ( meterRegistry ,  instanceRegistry ,  tagProvider ,  executor ) ;  }
private   void   setVideoHolder ()   {  mSurfaceHolder . setFormat ( PixelFormat . RGBX_8888 ) ;  mSurfaceHolder . setKeepScreenOn ( true ) ;  }
@ Override  public   Map < String ,  Platform >   all ()   {  return  platforms . all () ;  }
public   static   void   start ( Context   context ,  ComponentName   componentName )   {  Intent   intent   =  new   Intent ( context ,  PickIconActivity . class ) ;  intent . putExtra ( COMPONENT_NAME ,  componentName ) ;  context . startActivity ( intent ) ;  }
public   static   SpiBus   getByNumber ( int   busNumber ) {  for ( var   item   :  SpiBus . values () ) {  if ( item . getBus ()   ==   busNumber ) {  return  item ;  }  }  return  null ;  }
@ Override  public   List < ViewManager >   createViewManagers ( ReactApplicationContext   reactContext )   {  context   =   reactContext ;  return  Arrays . < ViewManager >   asList ( new   DatePickerManager () ) ;  }
public   Schema   getSchemaOfAdditionalItems ()   {  return  schemaOfAdditionalItems ;  }
private   void   createUser ()   throws  Exception   {  UserObject   userInfo   =  new   UserObject () ;  userInfo . setUserName ( TEST_USER ) ;  userInfo . setPassword ( ADMIN_WSO2 ) ;  userInfo . setName ( new   Name () . givenName ( TEST_USER_GIVEN ) ) ;  userInfo . addEmail ( new   Email () . value ( TEST_USER_GMAIL_COM ) ) ;  userID   =   scim2RestClient . createUser ( userInfo ) ;  }
public   void   setParentFile ( ServerFile   parentFile )   {  this . parentFile   =   parentFile ;  }
@ Test  void   deprecatedSortDependenciesTrueMessageShouldWork ()   {  Executable   testMethod   = ()  ->  SortPomImplUtil . create ()  . sortDependencies ( """"true"""" )  . sortPlugins ( """"true"""" )  . testFiles ( """"/Simple_input.xml"""" ,  """"/Simple_expected_sortDep.xml"""" ) ;  var   thrown   =  assertThrows ( FailureException . class ,  testMethod ) ;  assertThat ( thrown . getMessage () , is ( """"The 'true' value in 'sortDependencies' is no longer supported. Please use value 'groupId,artifactId' instead."""" ) ) ;  }
public   static   LeaseManager   load ( Map   root , ResidenceManager   m )  {  LeaseManager   l   =  new   LeaseManager ( m ) ;  if ( root != null )  {  for ( Object   val   :  root . values () )  {  if ( ! ( val   instanceof   Long ) )  {  root . remove ( val ) ;  }  }  l . leaseExpireTime   =   Collections . synchronizedMap ( root ) ;  }  return  l ;  }
@ Override  public   int   getItemCount ()   {  assert  mServerName   !=   null ;  return  mNavigationItems   !=   null  ?   mNavigationItems . size ()   :  mServerName . size () ;  }
public   static   BulletTrailRenderingHandler   get ()  {  if ( instance   ==   null )  {  instance   =   new   BulletTrailRenderingHandler () ;  }  return  instance ;  }
public   static   Value   from ( JacksonInject   src )   {  if  ( src   ==   null )   {  return  EMPTY ;  }  return  construct ( src . value () ,  src . useInput () . asBoolean () ) ;  }
@ Override  protected   List < String >   otherTestIndices ()   {  return  Collections . singletonList ( """"badindex"""" ) ;  }
public   boolean   matches ( TypeElement   cd )   {  return  matches ( cd . getQualifiedName () ) ;  }
@ Test  public   void   consumerProcessesSingleObject ()   {  queue . add ( new   OWLCompositeObject ( """"http:
@ Override  public   int   getMinCost ( int   level )  {  return  1   +   10   *   ( level   -   1 ) ;  }
public   SchemaLoaderBuilder   schemaJson ( Object   schema )   {  if  ( schema   instanceof   JSONObject )   {  schema   =   toMap ( ( JSONObject )   schema ) ;  }  this . schemaJson   =   schema ;  return  this ;  }
private   List < FieldValueMapping >   processFieldList ( final   List < Schema . Field >   fieldList ,  final   boolean   isAncestorRequired )   {  final   var   completeFieldList   =  new   ArrayList < FieldValueMapping > () ;  for  ( Schema . Field   innerField   :  fieldList )   {  processField ( innerField ,  completeFieldList ,  isAncestorRequired ,  false ) ;  }  return  completeFieldList ;  }
@ Override  protected   void   afterHookedMethod ( MethodHookParam   param )   throws  Throwable   {  mMap . putAll ( fakeMap ) ;  shareItemField . set ( param . thisObject ,  mMap ) ;  fakeMap . clear () ;  }
@ AfterEach  void   tearDown ()   {  if  ( tempCpuInfoFile . exists () )   {  tempCpuInfoFile . delete () ;  }  }
private   void   tearDownSettingsPreferenceListener ()   {  getPreferenceScreen () . getSharedPreferences () . unregisterOnSharedPreferenceChangeListener ( this ) ;  }
public   void   onClick ( View   v )   {  hideSoftInput () ;  mInputText . clearFocus () ;  }
private   long   validateArguments ( int   interval ,  int   duration ,  TimeUnit   unit )   {  if  ( interval   <=   0 )   {  throw  new   IllegalArgumentException ( """"A time interval of zero or less is not supported."""" ) ;  }  if  ( duration   <=   0 )   {  throw  new   IllegalArgumentException ( """"A time duration of zero or less is not supported."""" ) ;  }  return  validateTimeUnit ( interval ,  unit ) ;  }
private   void   clearChangedCache ()   {  this . changed   =   null ;  this . coreChanged   =   null ;  this . changedElements   =   null ;  }
private   ValidationException   createDummyException ( final   String   pointer )   {  return  new   ValidationException ( BooleanSchema . INSTANCE , new   StringBuilder ( pointer ) , """"stuff went wrong"""" ,  emptyList () ) ;  }
@ Override  public   boolean   equals ( final   Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   instanceof   BooleanSchema )   {  BooleanSchema   that   =  ( BooleanSchema )   o ;  return  that . canEqual ( this )   &&   super . equals ( that ) ;  }   else  {  return  false ;  }  }
public   UserSharedOrganizationsResponseSharedOrganizations   orgId ( String   orgId )   {  this . orgId   =   orgId ;  return  this ;  }
@ Override  public   Iterator < KeywordValidator >   iterator ()  {  return  validators . iterator () ;  }
@ SetEnvironment ( executionEnvironments   =   { ExecutionEnvironment . ALL } )  @ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Check list users by claim value"""" ,  dependsOnMethods   =   """"testGetRolesOfCurrentUser"""" )  public   void   testListUserByClaim ()   throws  Exception   {  super . testListUserByClaim () ;  }
private   Object   readValue ( int   depth )   {  if  ( depth   >   maxDepth )   {  throw  error ( """"Maximum depth exceeded"""" ) ;  }  switch  ( current )   {  case  'n' :  return  readNull () ;  case  't' :  return  readTrue () ;  case  'f' :  return  readFalse () ;  case  '""""' :  return  readString () ;  case  '[' :  return  readArray ( depth   +   1 ) ;  case  '{' :  return  readObject ( depth   +   1 ) ;  case  '-' :  case  '0' :  case  '1' :  case  '2' :  case  '3' :  case  '4' :  case  '5' :  case  '6' :  case  '7' :  case  '8' :  case  '9' :  return  readNumber () ;  default:  throw  expected ( """"value"""" ) ;  }  }
@ Override   public   UIntIndexer   reindex ( Index   index )   {  return  new   UIntRawIndexer ( pointer ,  index ) ;  }
default   char []   readRegisterCharArray ( int   register ,  int   offset ,  int   numberOfBytes )   throws  IOReadException   {  return  readRegisterCharArray ( register ,  StandardCharsets . US_ASCII ,  offset ,  numberOfBytes ) ;  }
@ Override  @ Nullable  public   Double   getTimeoutSeconds ()   {  return  timeoutSeconds ;  }
@ Test  public   void   sniffByContains ()   {  JSONObject   schema   =  new   JSONObject () ;  schema . put ( """"contains"""" ,  new   JSONObject () ) ;  Schema   actual   =  loadAsV6 ( schema ) ;  assertTrue ( actual   instanceof   ArraySchema ) ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Testing updating Oauth2 application state"""" , dependsOnMethods   =   { """"testRegisterApplication"""" ,  """"testUpdateOauthAppState"""" } )  public   void   testUpdateOauthSecretKey ()   throws  Exception   {  boolean   updated   =  false ;  try  {  updateOauthSecretKey () ;  updated   =   true ;  }   catch  ( Exception   e )   {  Assert . assertFalse ( false ,  """"Error when retrieving oauth app state"""" ) ;  }  Assert . assertTrue ( updated ) ;  }
protected   Trigger   nowTrigger ()   {  return  TriggerBuilder . newTrigger () . startNow () . build () ;  }
@ Override  public   String   codecName ()   {  return  getCodecName ( LegacyJacksonJson . class ) ;  }
@ Test  @ SuppressWarnings ( """"unchecked"""" )  void   cloneMap ()   {  Map < String ,  String >   result   = ( Map < String ,  String > )  Underscore . clone ( new   LinkedHashMap < String ,  String > ()   { {  put ( """"name"""" ,  """"moe"""" ) ;  } } ) ;  assertEquals ( """"{name=moe}"""" ,  result . toString () ) ;  Integer []   result2   =  Underscore . clone ( new   Integer []   { 1 ,  2 ,  3 ,  4 ,  5 } ) ;  assertEquals ( """"[1, 2, 3, 4, 5]"""" ,  asList ( result2 ) . toString () ) ;  }
public   void   setSyncWhenTimestampDiffers ( boolean   syncWhenTimestampDiffers )   {  this . syncWhenTimestampDiffers   =   syncWhenTimestampDiffers ;  }
private   synchronized   void   writeInternal ( Message   message ,  int   tag )   throws  IOException   {  if  ( ! initialized )   {  Log . d ( TAG ,  """"Write MCS version code: """"   +   version ) ;  os . write ( version ) ;  initialized   =   true ;  }  os . write ( tag ) ;  byte []   bytes   =  message . encode () ;  writeVarint ( os ,  bytes . length ) ;  os . write ( bytes ) ;  os . flush () ;  streamId ++ ;  }
public   void   setInput ( DataInputStream   input )   {  this . input   =   input ;  }
 <argument pos:start=""""""""139:100"""""""" pos:end=""""""""139:107""""""""><expr pos:start=""""""""139:100"""""""" pos:end=""""""""139:107""""""""><literal type=""""""""string"""""""" pos:start=""""""""139:100"""""""" pos:end=""""""""139:107"""""""">""""""""folder""""""""</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Override  public   Task < TResult >   addOnCompleteListener ( OnCompleteListener < TResult >   listener )   {  return  addOnCompleteListener ( MAIN_THREAD ,  listener ) ;  }
public   Map < String ,  Header >   getNewHeaders ()   {  return  this . newHeaders ;  }
private   static   ComponentName   getComponentNameFromIntent ( Intent   intent )   {  if  ( Build . VERSION . SDK_INT   <   Build . VERSION_CODES . TIRAMISU )   {  
@ Test  public   void   testAnswerChallengeWhenAlreadyAnswered ()   throws  IOException   {  String   endpointURI   =  String . format ( this . userChallengeAnswerEndpointURI ,  """"challengeQuestion1"""" ) ;  String   body   =  readResource ( """"challenge-answer-set1-q4-correct.json"""" ) ;  getResponseOfPost ( endpointURI ,  body ) ;  Response   response   =  getResponseOfPost ( endpointURI ,  body ) ;  validateErrorResponse ( response ,  HttpStatus . SC_CONFLICT ,  """"CQM-10014"""" ,  this . tenant ) ;  getResponseOfDelete ( this . userChallengeAnswersEndpointURI ) ;  }
@ Override  public   X509Certificate []   getAcceptedIssuers ()   {  throw  new   UnsupportedOperationException () ;  }
public   void   testUrlReferenceShouldNotBeReportedAsError ()   {  doTest ( """"url_ref.json"""" ) ;  }
public   int   hashCode ()   {  return  ( major   <<   16 )   |   ( minor   <<   8 )   |   release ;  }
@ Override  public   String   toString ()   {  var   element   =  getContent () ;  return  """"ModuleSortedWrapper{content=""""  +   ( element   ==   null  ?   """"null""""   :  element . toString () . replaceAll ( """".+@[^ ]+ """" ,  """""""" ) )  +   '}' ;  }
@ Test  @ LocalData  public   void   agentBuildPermissionsAllowsToBuildOnAgent ()   throws  Exception   {  try  ( ACLContext   c   =  ACL . as ( User . getById ( """"tester"""" ,  true ) ) )   {  project . scheduleBuild2 ( 0 ,  new   Cause . UserIdCause () ) ;  }  jenkinsRule . waitUntilNoActivity () ;  FreeStyleBuild   b   =  project . getLastBuild () ;  assertThat ( b ,  is ( not ( nullValue () ) ) ) ;  jenkinsRule . assertBuildStatusSuccess ( b ) ;  assertThat ( checker . userName ,  is ( """"tester"""" ) ) ;  }
public   UniqueIDUserClaimSearchEntryDAO []   getUsersClaimValuesWithID ( List < String >   userIDs ,  List < String >   claims , String   profileName )   throws  UserStoreException , RemoteException ,  UUIDUserStoreManagerServiceUserStoreExceptionException   {  return  uuidUserStoreManagerServiceStub . getUsersClaimValuesWithID ( userIDs . toArray ( new   String [ 0 ] ) , claims . toArray ( new   String [ 0 ] ) ,  profileName ) ;  }
@ Deprecated  @ SuppressLint ( """"RequiresPermission"""" )  public   void   stopTrackingBssids ( BssidListener   listener )   {  throw  new   UnsupportedOperationException () ;  }
static   TestI2CProvider   newInstance () {  return  new   TestI2CProviderImpl () ;  }
@ JavascriptInterface  public   void   backupSyncOptIn ( String   accountName )   {  Log . d ( TAG ,  """"JSBridge: backupSyncOptIn"""" ) ;  }
@ Override  public   EntityAccessor . Builder   requireVerification ()   {  verify   =   true ;  return  this ;  }
public   void   dismiss ()   {  if  ( mCreate   ==   null )   return;  mCreate . dismiss () ;  }
public   void   setThresholdKWhiteMarkers ( double   thresholdKWhiteMarkers )   {  this . thresholdKWhiteMarkers   =   thresholdKWhiteMarkers ;  }
@ Override  public   @ Nullable   Map . Entry < ResourceLocation ,  List < ViewGroup < EnergyView . Data > > >   streamData ( T   accessor )   {  return  CommonProxy . getServerExtensionData ( accessor ,  WailaCommonRegistration . instance () . energyStorageProviders ) ;  }
private   String   etag ( String   etag )   {  return  """"\""""""""   +   etag   +   """"\"""""""" ;  }
private   static   Options   createHelpOptions ()   {  Options   options   =  new   Options () ;  options . addOption ( Option . builder ( HELP_KEY ) . longOpt ( """"help"""" )  . desc ( """"print this message"""" ) . build () ) ;  return  options ;  }
private   void   setPlayerValue ( String   worldName ,  String   playerName ,  String   node ,  Object   value )   {  OverloadedWorldHolder   owh ;  if  ( worldName   ==   null )   {  owh   =   groupManager . getWorldsHolder () . getWorldDataByPlayerName ( playerName ) ;  }   else  {  owh   =   groupManager . getWorldsHolder () . getWorldData ( worldName ) ;  }  if  ( owh   ==   null )   {  return;  }  User   user   =  owh . getUser ( playerName ) ;  if  ( user   ==   null )   {  return;  }  user . getVariables () . addVar ( node ,  value ) ;  }
public   MetadataProperty   defaultValue ( String   defaultValue )   {  this . defaultValue   =   defaultValue ;  return  this ;  }
@ Override  public   float   getIntrinsicRatio ()  {  return  getIntrinsicWidth ()   /   getIntrinsicHeight () ;  }
@ Override  public   Object   getCredentials ()   {  return  profiles . hashCode () ;  }
@ BeforeClass  public   void   setUp ()   throws  Exception   {  Environment . setProperty ( Environment . SHIFU_HOME ,  """"."""" ) ;  File   models   =  new   File ( """"src/test/resources/example/cancer-judgement/ModelStore/ModelSet1/models"""" ) ;  FileUtils . copyDirectory ( models ,  tmpModels ) ;  instance   =   new   EvalScoreUDF ( """"LOCAL"""" , """"src/test/resources/example/cancer-judgement/ModelStore/ModelSet1/ModelConfig.json"""" , """"src/test/resources/example/cancer-judgement/ModelStore/ModelSet1/ColumnConfig.json"""" , """"EvalA"""" ) ;  }
@ Test  public   void   testcaseStartedEventTest ()   throws  Exception   {  allure . fire ( new   TestCaseStartedEvent ( """""""" ,  """""""" ) ) ;  assertThat ( listener . get ( SimpleListener . EventType . TESTCASE_STARTED_EVENT ) ,  is ( 1 ) ) ;  }
public   synchronized   void   noteAppKnown ( String   packageName ,  boolean   allowRegister )   {  SQLiteDatabase   db   =  getWritableDatabase () ;  db . beginTransaction () ;  App   app   =  getApp ( db ,  packageName ) ;  ContentValues   cv   =  new   ContentValues () ;  cv . put ( FIELD_ALLOW_REGISTER ,  allowRegister ) ;  if  ( app   ==   null )   {  cv . put ( FIELD_PACKAGE_NAME ,  packageName ) ;  db . insert ( TABLE_APPS ,  null ,  cv ) ;  }   else  {  db . update ( TABLE_APPS ,  cv ,  FIELD_PACKAGE_NAME   +   """" LIKE ?"""" ,  new   String [] { packageName } ) ;  }  db . setTransactionSuccessful () ;  db . endTransaction () ;  }
@ EventHandler ( priority   =   EventPriority . LOWEST ,  ignoreCancelled   =   true )  public   void   onBlockPistonRetract ( BlockPistonRetractEvent   event )   {  FlagPermissions   perms   =  Residence . getPermsByLoc ( event . getBlock () . getLocation () ) ;  if  ( ! perms . has ( """"piston"""" ,  true ) ) {  event . setCancelled ( true ) ;  return;  }  if  ( event . isSticky () ) {  Location   location   =  event . getRetractLocation () ;  FlagPermissions   blockperms   =  Residence . getPermsByLoc ( location ) ;  if  ( ! blockperms . has ( """"piston"""" ,  true ) )   {  event . setCancelled ( true ) ;  }  }  }
@ Override  public   int   readRegister ( byte []   register ,  byte []   buffer ,  int   offset ,  int   length )   {  return  this . i2c . readRegister ( register , buffer , offset , length ) ;  }
 <argument pos:start=""""""""415:47"""""""" pos:end=""""""""415:47""""""""><expr pos:start=""""""""415:47"""""""" pos:end=""""""""415:47""""""""><name pos:start=""""""""415:47"""""""" pos:end=""""""""415:47"""""""">i</name></expr></argument>
public   void   setDatacenter ( String   datacenter )   {  this . datacenter   =   datacenter ;  }
public   void   enableAssociation ( String   associationId )   throws  RemoteException ,  WorkflowAdminServiceWorkflowException   {  stub . changeAssociationState ( associationId ,  true ) ;  }
@ Test  public   void   cannotAddFormatAttributeWithNullName ()  {  try  {  Library . newBuilder () . addFormatAttribute ( null , mock ( FormatAttribute . class ) ) ;  fail ( """"No exception thrown!!"""" ) ;  }   catch  ( NullPointerException   e )   {  assertEquals ( e . getMessage () ,  BUNDLE . getMessage ( """"nullFormat"""" ) ) ;  }  }
@ Test  public   void   containsKeySuccess ()   {  assertTrue ( createSubject () . containsKey ( """"not"""" ) ) ;  }
public   static   CharSequence   getYtt ( Context   context ,  int   daysToEvent )   {  switch  ( daysToEvent )   {  case  - 1 :  return  context . getText ( R . string . yesterday ) ;  case  0 :  return  context . getText ( R . string . today ) ;  case  1 :  return  context . getText ( R . string . tomorrow ) ;  default:  return  """""""" ;  }  }
@ Override   public   UIntIndexer   put ( long   i ,  long   j ,  long []   m ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  array [ ( int ) index ( i ,  j )   +   n ]   =   ( int ) m [ offset   +   n ] ;  }  return  this ;  }
private   static   Function < String ,  String >   createCompounder ( final   Function3 < String ,  String ,  Integer ,  String >   callback )   {  return  string  ->  {  int   index   =  - 1 ;  List < String >   array   =  words ( deburr ( string ) ) ;  int   length   =  array . size () ;  String   result   =  """""""" ;  while  ( ++ index   <   length )   {  result   =   callback . apply ( result ,  array . get ( index ) ,  index ) ;  }  return  result ;  } ;  }
@ Nullable  @ Override  public   Bundle   call ( @ NonNull   String   method ,  @ Nullable   String   arg ,  @ Nullable   Bundle   extras )   {  if  ( method . equals ( """"getHookBinder"""" ) )   {  Bundle   result   =  new   Bundle () ;  result . putBinder ( """"binder"""" ,  HookBinder . getInstance () ) ;  return  result ;  }  return  null ;  }
@ Override  public   boolean   isConnectionCallbacksRegistered ( ConnectionCallbacks   listener )   {  return  connectionCallbacks . contains ( listener ) ;  }
private   void   pausePlayback ()   {  engine . pausePlayback () ;  songEditor . pausePlayback () ;  iconManager . setPlayIcon ( playPauseIcon ) ;  }
public   static   boolean   isMultilineTitle ( Context   context )   {  return  getBoolean ( context ,  PREF_MULTILINE_TITLE ,  PREF_MULTILINE_TITLE_DEFAULT ) ;  }
private   long   getFileSize ( ServerFile   file )   {  return  file . getSize () ;  }
public   static   void   cancelJob ( Context   context )   {  JobScheduler   js   =  context . getSystemService ( JobScheduler . class ) ;  js . cancel ( JobIds . NET_CONNECTIVITY_JOB ) ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Check get user profile"""" )  public   void   testGetUserProfile ()   throws  Exception   {  UserProfileDTO   profile   =  userProfileMgtClient . getUserProfile ( userId1 ,  """"default"""" ) ;  UserFieldDTO []   fields   =  profile . getFieldValues () ;  String   displayValue   =  null ;  for  ( UserFieldDTO   field   :  fields )   {  if ( """"Last Name"""" . equals ( field . getDisplayName () ) ) {  displayValue   =   field . getFieldValue () ;  break;  }  }  Assert . assertTrue ( userId1 . equals ( displayValue ) ,  """"Getting user profile has failed."""" ) ;  }
public   void   setKsPasswd ( final   String   aPasswd )   {  setKsPasswd ( aPasswd   ==   null  ?   null   :  aPasswd . toCharArray () ) ;  }
@ Test  public   void   scanNoArchRPMTest ()   throws  Exception   {  Scanner . main   (  new   String []   {  getTestResourcesDirectory   ( )   +   File . separator   +   """"rpm-1-1.0-1.noarch.rpm""""  }  ) ;  }
public   static   < E >   List < E >   difference ( final   List < E >   list1 ,  final   List < E >   list2 )   {  final   List < E >   result   =  new   ArrayList <> () ;  for  ( final   E   item   :  list1 )   {  if  ( ! list2 . contains ( item ) )   {  result . add ( item ) ;  }  }  return  result ;  }
@ Override  public   void   stateChanged ( ChangeEvent   e )   {  clientslabel . setText ( """"Clients: """"   +   clients . getValue () ) ;  }
@ Test  public   void   fragmentEscapingTilde ()   {  ValidationException   subject   =  createDummyException ( """"#/aaa"""" ) . prepend ( """"x~y"""" ) ;  assertEquals ( """"#/x~0y/aaa"""" ,  subject . getPointerToViolation () ) ;  }
@ ApiModelProperty ( example   =   """"abc"""" )  @ JsonProperty ( """"filter"""" )  @ Valid  public   String   getFilter ()   {  return  filter ;  }
@ Override  @ NonNull  public   String   toString ()   {  return  builder . toString () ;  }
public   String   getDisplayName ()   {  return  """"GitHub Committer Authorization Strategy"""" ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   testClear ()   throws  Exception   {  super . deleteUser ( userId ) ;  deleteApp ( appId ) ;  applicationMgtRestClient   =   null ;  scim2RestClient   =   null ;  httpClient   =   null ;  }
public   static   void   authenticateStub ( String   userName ,  String   password ,  Stub   stub )   {  CarbonUtils . setBasicAccessSecurityHeaders ( userName ,  password ,  stub . _getServiceClient () ) ;  }
protected   void   init ( TestUserMode   userMode )   throws  Exception   {  super . init ( userMode ) ;  appMgtclient   =   new   ApplicationManagementServiceClient ( sessionCookie ,  backendURL ,  null ) ;  adminClient   =   new   OauthAdminClient ( backendURL ,  sessionCookie ) ;  remoteUSMServiceClient   =   new   RemoteUserStoreManagerServiceClient ( backendURL ,  sessionCookie ) ;  restClient   =   new   OAuth2RestClient ( serverURL ,  tenantInfo ) ;  }
private   void   startPreviousAudio ()   {  this . audioFile   =   getPreviousAudioFile () ;  setUpAudioPlayback () ;  playAudio () ;  setUpAudioMetadata () ;  }
@ Test  void   addsAndRetrieves ()   throws  Exception   {  final   Directive . Stack   stack   =  new   DomStack () ;  final   Directive . Cursor   first   =  Mockito . mock ( Directive . Cursor . class ) ;  final   Directive . Cursor   second   =  Mockito . mock ( Directive . Cursor . class ) ;  stack . push ( first ) ;  stack . push ( second ) ;  MatcherAssert . assertThat ( """"Can't retrieve the second element"""" , stack . pop () , Matchers . equalTo ( second ) ) ;  MatcherAssert . assertThat ( """"Can't retrieve the first element"""" , stack . pop () , Matchers . equalTo ( first ) ) ;  }
public   Builder < S >   schemaLocation ( SchemaLocation   location )   {  this . schemaLocation   =   location ;  return  this ;  }
FilePath   resolveOutputFile ()   {  String   outputFile   =  step . getOutputFile () ;  if  ( outputFile   ==   null   ||   outputFile . trim () . isEmpty () )   {  return  null ;  }  try  {  FilePath   workspace   =  getContext () . get ( FilePath . class ) ;  if  ( workspace   ==   null )   {  throw  new   IllegalStateException ( """"Could not find workspace to save file outputFile: """"   +   outputFile   +  """". You should use it inside a 'node' block"""" ) ;  }  return  workspace . child ( outputFile ) ;  }   catch  ( IOException  |  InterruptedException   e )   {  throw  new   IllegalStateException ( e ) ;  }  }
public   void   testUnusedDefinitionWhereDefinitionsAreNotInRoot ()   {  final   VirtualFile   virtualFile   = myFixture . copyFileToProject ( """"validator/field/unused_definition/yaml/unused_definition_not_in_root.yaml"""" , """"definitions.yaml"""" ) ;  final   VirtualFile   swaggerFile   = myFixture . copyFileToProject ( """"validator/field/unused_definition/yaml/unused_definition_not_in_root_swagger.yaml"""" , """"swagger.yaml"""" ) ;  myFixture . configureFromExistingVirtualFile ( swaggerFile ) ;  myFixture . testHighlighting ( true ,  false ,  true ,  virtualFile ) ;  }
public   void   delayedHide ( long   delayMillis )   {  mHideHandler . removeCallbacks ( mHideRunnable ) ;  mHideHandler . postDelayed ( mHideRunnable ,  delayMillis ) ;  }
public   HintRequest   build ()   {  return  new   HintRequest ( hintPickerConfig ,  emailAddressIdentifierSupported ,  phoneNumberIdentifierSupported ,  accountTypes ,  idTokenRequested ,  serverClientId ,  idTokenNonce ) ;  }
default   boolean   equals ( short   state ) {  return  equals ( DigitalState . getState ( state ) ) ;  }
@ Test  void   writeNewlineShouldBeConvertedToSeparator1 ()   {  writer . write ( """"Hey\nYou!"""" ) ;  writer . close () ;  assertThat ( out . toString () ,  is ( """"HeyseparatorYou!"""" ) ) ;  }
@ Override  protected   void   beforeHookedMethod ( MethodHookParam   param )   throws  Throwable   {  param . args [ 0 ]   =   ( int )   param . args [ 0 ]   &   ~ WindowManager . LayoutParams . FLAG_SECURE ;  if  ( ( int )   param . args [ 0 ]   ==   0 )   {  param . setResult ( null ) ;  }  }
public   void   setProperty ( String   anExpr )   throws  ProperyProviderException   {  int   tmpPos ;  if  ( anExpr   !=   null   &&   ( tmpPos   =   anExpr . indexOf ( '=' ) )   >   - 1 )   {  setProperty ( anExpr . substring ( 0 ,  tmpPos ) ,  anExpr . substring ( tmpPos   +   1 ) ) ;  }   else  {  throw  new   ProperyProviderException ( """"Wrong setProperty(...) expression."""" ) ;  }  }
@ Override  public   JsonObject   serialize ()  {  JsonObject   object   =  new   JsonObject () ;  object . addProperty ( """"item"""" ,  this . id . toString () ) ;  return  object ;  }
protected   void   switchApplicationAudience ( String   appId ,  AssociatedRolesConfig . AllowedAudienceEnum   newAudience )  throws  Exception   {  AssociatedRolesConfig   associatedRolesConfigApp2   =  new   AssociatedRolesConfig () ;  associatedRolesConfigApp2 . setAllowedAudience ( newAudience ) ;  ApplicationPatchModel   patchModelApp2   =  new   ApplicationPatchModel () ;  patchModelApp2 . setAssociatedRoles ( associatedRolesConfigApp2 ) ;  oAuth2RestClient . updateApplication ( appId ,  patchModelApp2 ) ;  }
public   PolylineOptions   startCap ( @ NonNull   Cap   startCap )   {  this . startCap   =   startCap ;  return  this ;  }
private   int   getRadiusSegment ( int   r )   {  int   dMin   =  Math . abs ( r   -   minRadius ) ;  int   dMed   =  Math . abs ( r   -   medRadius ) ;  int   dMax   =  Math . abs ( r   -   maxRadius ) ;  if  ( dMin   <   dMed   &&   dMin   <   dMax )   {  return  0 ;  }   else if  ( dMed   <   dMin   &&   dMed   <   dMax )   {  return  1 ;  }  return  2 ;  }
public   static   double   heightDegrees ( int   n )   {  if  ( n   >   MAX_HASH_LENGTH )  return  calculateHeightDegrees ( n ) ;  else  return  HashHeights . values [ n ] ;  }
@ Test  public   void   runJar ()   throws  Exception   {  ProcessBuilder   builder   =  new   ProcessBuilder ( Utils . javaCommand () ,  """"-Xmx128m"""" , """"-noverify"""" ,  """"-XX:TieredStopAtLevel=1"""" , """"-Djava.security.egd=file:/dev/./urandom"""" ,  """"-jar"""" , """"../other/build/libs/other-0.0.1-SNAPSHOT.jar"""" ,  """"--server.port=0"""" ) ;  builder . redirectErrorStream ( true ) ;  started   =   builder . start () ;  String   output   =  output ( started . getInputStream () ,  """"Started LauncherApplication"""" ) ;  assertThat ( output ) . contains ( """"Started LauncherApplication"""" ) ;  }
private   Pointer   getFrameData ( rs2_frame   frame )   throws  Exception   {  Pointer   frameData   =  rs2_get_frame_data ( frame ,  error ) ;  checkError ( error ) ;  return  frameData ;  }
@ Test  public   void   generatedSourceFile_packageInfo ()   {  GeneratingProcessor   generatingProcessor   =  new   GeneratingProcessor ( """"test"""" ) ;  assertThat ( javac () . withProcessors ( generatingProcessor ) . compile ( HELLO_WORLD_RESOURCE ) )  . generatedSourceFile ( """"test.package-info"""" )  . hasSourceEquivalentTo ( JavaFileObjects . forSourceString ( """"test.package-info"""" ,  generatingProcessor . generatedPackageInfoSource () ) ) ;  }
private   < T >   T   fetch ( final   Outcome < T >   outcome , final   Request   request ,  final   PreparedStatement   stmt )   throws  SQLException   {  final   T   result ;  try  ( stmt )   {  this . configure ( stmt ) ;  
@ Test  public   void   emptyRegion ()   throws  Exception   {  System . out . println ( """"- Empty Region"""" ) ;  for  ( BaseCountry   c   :  countries )   {  if  ( c . getRegion ()   ==   null   ||   c . getRegion () . isEmpty () )   {  System . out . println ( c . getName () ) ;  }  }  }
@ Override  public   void   downloadPaused ( long   downloadId ,  int   progress )   {  stopForegroundService ( this ,  this ,  false ) ;  NotificationManager   notificationManager   =  ( NotificationManager )   getApplicationContext ()  . getSystemService ( Context . NOTIFICATION_SERVICE ) ;  notificationBuilder  . setContentTitle ( getString ( R . string . notification_offline_download_paused ) )  . setOngoing ( false )  . setProgress ( 100 ,  progress ,  false ) ;  Notification   notification   =  notificationBuilder . build () ;  notificationManager . notify ( NOTIFICATION_OFFLINE_ID ,  notification ) ;  stopDownloading () ;  }
public   OIDCMetaData   idTokenSignatureAlgorithm ( MetadataProperty   idTokenSignatureAlgorithm )   {  this . idTokenSignatureAlgorithm   =   idTokenSignatureAlgorithm ;  return  this ;  }
public   int   getStart ()   {  int   start   =  Integer . MAX_VALUE ;  for  ( EntityAnnotation   member   :  this )   {  if  ( member . getStart ()   <   start )   {  start   =   member . getStart () ;  }  }  return  start ;  }
public   static   ResidenceManager   getResidenceManager ()   {  return  rmanager ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  Component   component   =  ( Component )   o ;  return  Objects . equal ( key ,  component . key )   &&  Objects . equal ( path ,  component . path ) ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init () ;  String   isServerBackendUrl   =  isServer . getContextUrls () . getWebAppURLHttps () ;  scopeEndpoint   =   isServerBackendUrl   +  getTenantedRelativePath ( SCOPE_ENDPOINT_SUFFIX ,  isServer . getContextTenant () . getDomain () ) ;  }
public   void   setLabels ( Collection < String >   labels )   {  this . labels   =   labels ;  }
@ ApiModelProperty ( example   =   """"https:
public   File   getMediaFile ()   {  try  {  if  ( ! isMediaFile () )   return  null ;  for  ( var   field   :  abstractMediaMessageClass . getDeclaredFields () )   {  if  ( field . getType () . isPrimitive () )   continue;  var   fileField   =  ReflectionUtils . getFieldByType ( field . getType () ,  File . class ) ;  if  ( fileField   !=   null )   {  var   mediaFile   =  ReflectionUtils . getObjectField ( field ,  fmessage ) ;  return  ( File )   fileField . get ( mediaFile ) ;  }  }  }   catch  ( Exception   e )   {  XposedBridge . log ( e ) ;  }  return  null ;  }
@ Override  public   IBinder   onBind ( Intent   intent )   {  Log . v ( TAG ,  """"Service onBind()"""" ) ;  return  binder ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( saas ,  discoverableByEndUsers ,  certificate ,  skipLoginConsent ,  skipLogoutConsent ,  returnAuthenticatedIdpList ,  enableAuthorization ,  fragment ,  enableAPIBasedAuthentication ,  attestationMetaData ,  trustedAppConfiguration ,  additionalSpProperties ,  useExternalConsentPage ) ;  }
@ Test  public   void   thatBooleanValuesAreSuggested ()   {  getCaretCompletions ( """"boolean_parameters_required"""" ) . assertContains ( """"true"""" ,  """"false"""" ) ;  }
@ Override  protected   void   onPause ()   {  super . onPause () ;  BusProvider . getBus () . unregister ( this ) ;  }
public   Builder   setLoiteringDelay ( int   loiteringDelayMs )   {  this . loiteringDelay   =   loiteringDelayMs ;  return  this ;  }
 <argument pos:start=""""""""286:89"""""""" pos:end=""""""""286:103""""""""><expr pos:start=""""""""286:89"""""""" pos:end=""""""""286:103""""""""><name pos:start=""""""""286:89"""""""" pos:end=""""""""286:103"""""""">conflictversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   int   match ( FontSpec   font )  {  if  ( this . family . equalsIgnoreCase ( font . family ) )  {  int   ret   =  100 ;  if  ( this . weight   ==   null )  ret ++ ;  else if   ( representsBold ( this . weight )   ==   representsBold ( font . weight ) )  ret   +=   10 ;  if  ( this . style   ==   null )  ret ++ ;  else if  ( this . style   ==   font . style )  ret   +=   10 ;  return  ret ;  }  else  return  0 ;  }
@ Test  public   void   testExprAnalyzer ()   {  ExprAnalyzer   analyzer   =  new   ExprAnalyzer ( """"(pop_type=='ach' and cnsr_seg=='Y') or pop_type=='cc_'"""" ) ;  Assert . assertEquals ( analyzer . getVarsInExpr () [ 0 ] ,  """"pop_type"""" ) ;  Assert . assertEquals ( analyzer . getVarsInExpr () [ 1 ] ,  """"cnsr_seg"""" ) ;  Assert . assertEquals ( analyzer . getVarsInExpr () [ 2 ] ,  """"pop_type"""" ) ;  }
public   void   removePlotter ( final   Plotter   plotter )   {  plotters . remove ( plotter ) ;  }
@ Override  public   ItemStack   assemble ( WorkbenchBlockEntity   entity ,  RegistryAccess   access )  {  return  ItemStack . EMPTY ;  }
@ Override  public   String   toString ()   {  return  String . format ( """"PI %s, %s"""" ,  this . target ,  this . data ) ;  }
@ Override  public   void   updateItem ( T   item ,  boolean   empty )   {  super . updateItem ( item ,  empty ) ;  if  ( empty   ||   item   ==   null )   {  setText ( null ) ;  setGraphic ( null ) ;  }   else  {  if  ( isEditing () )   {  textField . setText ( converter . toString ( getItem () ) ) ;  setText ( null ) ;  setGraphic ( textField ) ;  }   else  {  setText ( converter . toString ( getItem () ) ) ;  setGraphic ( null ) ;  }  }  }
public   List < T >   wrappedGet ( Accessor < ? >   accessor )   {  List < T >   list   =  Lists . newArrayList () ;  for  ( var   override   :  overrides )   {  Object   o   =  override . getRight () . apply ( accessor ) ;  if  ( o   !=   null )   {  list . addAll ( override . getLeft () . get ( o ) ) ;  }  }  list . addAll ( get ( accessor . getTarget () ) ) ;  return  list ;  }
@ Override  public   long   createNode ( String   id )   {  synchronized ( graphLock )   {  if  ( ! idMap . containsKey ( id ) )   {  long   nodeId   =  inserter . createNode ( Collections . < String ,  Object > emptyMap () ) ;  idMap . put ( id ,  nodeId ) ;  setNodeProperty ( nodeId ,  uniqueProperty ,  id ) ;  }  return  idMap . get ( id ) ;  }  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( o   ==   this )   return  true ;  if  ( o   ==   null )   return  false ;  if  ( o . getClass ()   !=   getClass () )   return  false ;  Value   other   =  ( Value )   o ;  if  ( ( _shape   !=   other . _shape )  ||   ! _features . equals ( other . _features ) )   {  return  false ;  }  return  _equal ( _lenient ,  other . _lenient )  &&   _equal ( _timezoneStr ,  other . _timezoneStr )  &&   _equal ( _pattern ,  other . _pattern )  &&   _equal ( _timezone ,  other . _timezone )  &&   _equal ( _locale ,  other . _locale ) ;  }
@ Override  public   void   onMessage ( WebSocket   conn ,  String   message )   {  fail ( """"There should be no onMessage"""" ) ;  }
@ Test  public   void   test ()   {  List < Integer >   a   =  Arrays . asList ( new   Integer []   {  1 ,  2 ,  3 ,  4 ,  5 ,  6  } ) ;  List < Integer >   b   =  Arrays . asList ( new   Integer []   {  2 ,  2 ,  5 ,  5 ,  5 ,  5  } ) ;  ColumnMetrics   columnMetrics   =  ColumnStatsCalculator . calculateColumnMetrics ( a ,  b ) ;  Assert . assertEquals ( df . format ( columnMetrics . getIv () ) ,  """"0.08"""" ) ;  Assert . assertEquals ( df . format ( columnMetrics . getKs () ) ,  """"10.71"""" ) ;  }
private   static   int   readSize ( Parcel   parcel ,  int   header )   {  if  ( ( header   &   0xFFFF0000 )   !=   0xFFFF0000 )  return  header   >>   16   &   0xFFFF ;  return  parcel . readInt () ;  }
public   ApplicationResponseModel   isManagementApp ( Boolean   isManagementApp )   {  this . isManagementApp   =   isManagementApp ;  return  this ;  }
public   boolean   add ( double   element )   {  if ( element   <   this . min )   {  this . min   =   element ;  }  this . size   +=   1 ;  return  this . size   >=   this . capacity ;  }
void   readAndStore ( DataMap   dataMap ,  String   key ,  DataBundleValue   value ,  List < Asset >   assets )   {  store ( dataMap ,  key ,  read ( value ,  assets ) ) ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   {  RestAssured . basePath   =   basePath ;  super . testInit () ;  }
public   boolean   isWifiConnected ()   {  ConnectivityManager   connManager   =  ( ConnectivityManager )   context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ;  NetworkInfo   wifi   =  connManager . getNetworkInfo ( ConnectivityManager . TYPE_WIFI ) ;  return  wifi . isConnected () ;  }
public   void   setIsFromMe ( boolean   value )   {  XposedHelpers . setBooleanField ( thisObject ,  """"A02"""" ,  value ) ;  this . isFromMe   =   value ;  }
public   static   boolean   isDate ( final   Object   object )   {  return  object   instanceof   Date ;  }
@ Override  public   void   write ( DataWriter   out )   throws  IOException   {  out . writeBytes ( hash ) ;  }
public   void   playAudio ()   {  mediaSession . setActive ( true ) ;  audioPlayer . setPlayWhenReady ( true ) ;  setMediaPlaybackState ( PlaybackStateCompat . STATE_PLAYING ) ;  }
@ Test  void   testMultipleAttributes ()   {  Map < String ,  String >   result   =  Xml . parseAttributes ( """"key1=\""""value1\"""" key2=\""""value2\"""""""" ) ;  assertEquals ( Map . of ( """"key1"""" ,  """"value1"""" ,  """"key2"""" ,  """"value2"""" ) ,  result ) ;  }
public   void   setLocationFromPaths ( Location   location ,  Collection < ?   extends  Path >   searchpath )  throws  IOException   {  Method   setLocationFromPaths ;  try  {  setLocationFromPaths   =  fileManager  . getClass ()  . getMethod ( """"setLocationFromPaths"""" ,  Location . class ,  Collection . class ) ;  }   catch  ( ReflectiveOperationException   e )   {  
public   DataItemRecord   getDataItemByUri ( Uri   uri ,  String   packageName )   {  Cursor   cursor   =  nodeDatabase . getDataItemsByHostAndPath ( packageName ,  PackageUtils . firstSignatureDigest ( context ,  packageName ) ,  fixHost ( uri . getHost () ,  true ) ,  uri . getPath () ) ;  DataItemRecord   record   =  null ;  if  ( cursor   !=   null )   {  if  ( cursor . moveToNext () )   {  record   =   DataItemRecord . fromCursor ( cursor ) ;  }  cursor . close () ;  }  Log . d ( TAG ,  """"getDataItem: """"   +   record ) ;  return  record ;  }
protected   void   updateResidentIDPProperty ( IdentityProvider   residentIdp ,  String   propertyKey ,  String   value )  throws  Exception   {  IdentityProviderProperty []   idpProperties   =  residentIdp . getIdpProperties () ;  for  ( IdentityProviderProperty   providerProperty   :  idpProperties )   {  if  ( propertyKey . equalsIgnoreCase ( providerProperty . getName () ) )   {  providerProperty . setValue ( value ) ;  }  }  updateResidentIDP ( residentIdp ) ;  }
public   void   stopServer ()   {  if  ( wireMockServer   !=   null   &&   wireMockServer . isRunning () )   {  wireMockServer . stop () ;  }  }
@ Override  public   String []   getPlayerGroups ( String   world ,  String   player )   {  OfflinePlayer   p   =  Bukkit . getOfflinePlayer ( player ) ;  if  ( p   ==   null )   {  throw  new   UnsupportedOperationException ( """"Privileges does not support offline players."""" ) ;  }  Group   g   =  privs . getGroupManager () . getGroup ( p ) ;  return  g   !=   null  ?   g . getGroupTree () . toArray ( new   String [ g . getGroupTree () . size () ] )   :  null ;  }
private   static   boolean   isWindows ( String   osName )   {  return  ( osName . indexOf ( WIN_PREFIX )   >=   0 ) ;  }
public   boolean   isAddProfileEnabled ()   throws  RemoteException ,  UserProfileMgtServiceUserProfileExceptionException   {  return  userProfileMgtServiceStub . isAddProfileEnabled () ;  }
public   UserUnshareRequestBody   userCriteria ( UserUnshareRequestBodyUserCriteria   userCriteria )   {  this . userCriteria   =   userCriteria ;  return  this ;  }
@ Test  public   void   requestReadOnlyIncreased ()   {  BackwardIncompatibleProp   prop   =  REQUEST_READONLY_INCREASED ;  assertSpecIncompatible ( BASE ,  """"bc_request_readonly_increased.yaml"""" ,  prop ) ;  }
@ Override   public   long   get ( long   i ,  long   j ,  long   k )   {  return  buffer . get ( ( int ) index ( i ,  j ,  k ) )   &   0xFFFFFFFFL ;  }
public   Map < String ,  Object >   save ()   {  Map < String ,  Object >   rented   =  new   HashMap <> () ;  rented . put ( """"Days"""" ,  days ) ;  rented . put ( """"Cost"""" ,  cost ) ;  rented . put ( """"Repeatable"""" ,  repeatable ) ;  return  rented ;  }
@ Override  public   void   onClose ( WebSocket   conn ,  int   code ,  String   reason ,  boolean   remote )   { }
private   String   buildQueryUrlWithNoOffsetAndLimit ()   {  return  ORGANIZATION_MANAGEMENT_API_BASE_PATH   +   ORGANIZATION_DISCOVERY_API_PATH   +   QUESTION_MARK   +  FILTER_QUERY_PARAM   +   EQUAL ;  }
@ Nullable  public   String   getAttachmentAsString ()   {  if  ( attachment   ==   null )   return  null ;  return  attachment . toString () ;  }
public   UserDefinedLocalAuthenticatorUpdate   description ( String   description )   {  this . description   =   description ;  return  this ;  }
@ Override  public   Optional < CountryResponse >   tryCountry ( InetAddress   ipAddress )   throws  IOException , GeoIp2Exception   {  return  getCountry ( ipAddress ) ;  }
@ Test  public   void   scan_testLambdasParensVsNone ()   {  TreeDifference   diff   = TreeDiffer . diffCompilationUnits ( LAMBDA_IMPLICIT_ARG_TYPE ,  LAMBDA_IMPLICIT_ARG_TYPE_NO_PARENS ) ;  assertThat ( diff . getDiffReport () ) . isEmpty () ;  }
default   < T   extends  SpiProvider >   T   getSpiProvider ()   throws  ProviderException {  return  this . spi () ;  }
public   final   double   getLow ()   {  return  this . params [ ActivationReLU . PARAM_RELU_LOW ] ;  }
public   void   setSubjectClaimURI ( String   subjectClaimURI )   {  this . subjectClaimURI   =   subjectClaimURI ;  }
@ Test  void   testNoMarkup ()   throws  IOException   {  assertThatAnnotateIs ( """"line"""" ,  """"line"""" ) ;  }
@ Override  public   void   onPrepareOptionsMenu ( Menu   menu )   {  super . onPrepareOptionsMenu ( menu ) ;  setUpSearchView () ;  setSearchCursor () ;  }
public   ANDRule   expressions ( List < Expression >   expressions )   {  this . expressions   =   expressions ;  return  this ;  }
default   Serial   create ( SerialConfigBuilder   config )   {  return  create ( config . build () ) ;  }
public   PutDataRequest   setData ( byte []   data )   {  this . data   =   data ;  return  this ;  }
public   Builder   setPassword ( String   password )   {  this . password   =   password ;  return  this ;  }
private   void   selectFirstServer ( List < Server >   activeServers )   {  if  ( ! activeServers . isEmpty () )   {  getServerNameTextView () . setText ( activeServers . get ( 0 ) . getName () ) ;  setUpServerConnection ( activeServers . get ( 0 ) ) ;  storeServerName ( activeServers . get ( 0 ) ) ;  }   else  {  String   serverName   =  getServerName () ;  if  ( serverName   !=   null )   {  getServerNameTextView () . setText ( serverName ) ;  }  }  }
public   CellTowerBuilder   LocationAreaCode ( int   newLocationAreaCode )   {  this . _locationAreaCode   =   newLocationAreaCode ;  return  this ;  }
public   void   addMember ( ForumMembership   member )   {  memberships . add ( member ) ;  }
@ Override  public   Chain < Optional < T > >   reduceRight ( final   BinaryOperator < T >   func )   {  return  new   Chain <> ( Underscore . reduceRight ( value () ,  func ) ) ;  }
public   static   void   handle ( ShowOverlayPacket   message ,  ClientPayloadContext   context )   {  Jade . LOGGER . info ( """"Received request from the server to {} overlay"""" ,  message . show  ?   """"show""""   :  """"hide"""" ) ;  context . execute ( ()  ->  {  IWailaConfig . get () . general () . setDisplayTooltip ( message . show ) ;  IWailaConfig . get () . save () ;  } ) ;  }
@ NotNull  public   static   VanillaCpuLayout   fromCpuInfo ()   throws  IOException   {  return  fromCpuInfo ( """"/proc/cpuinfo"""" ) ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"assertionEncryptionAlgorithm"""" )  @ Valid  public   String   getAssertionEncryptionAlgorithm ()   {  return  assertionEncryptionAlgorithm ;  }
@ JsonProperty  public   void   setGbtScoreConvertStrategy ( String   gbtScoreConvertStrategy )   {  this . gbtScoreConvertStrategy   =   gbtScoreConvertStrategy ;  }
public   List < Folder >   getFolders ()   {  List < Folder >   folders ;  synchronized  ( mConfigLock )   {  folders   =   deepCopy ( mConfig . folders ,  new   TypeToken < List < Folder > > () {} . getType () ) ;  }  Collections . sort ( folders ,  FOLDERS_COMPARATOR ) ;  return  folders ;  }
public   AuthorizedAPIPatchModel   removedScopes ( List < String >   removedScopes )   {  this . removedScopes   =   removedScopes ;  return  this ;  }
public   void   setStorePasswords ( final   boolean   storePasswords )   {  this . storePasswords   =   storePasswords ;  }
public   void   setZOrder ( int   zOrder )   {  switch  ( zOrder )   {  case  0 :  surfaceViewRenderer . setZOrderMediaOverlay ( false ) ;  break;  case  1 :  surfaceViewRenderer . setZOrderMediaOverlay ( true ) ;  break;  case  2 :  surfaceViewRenderer . setZOrderOnTop ( true ) ;  break;  }  }
public   static   void   initGlobalConfig ( SharedPreferences   prefs ,  Resources   res , IKeyEventHandler   handler )  {  migrate ( prefs ) ;  _globalConfig   =   new   Config ( prefs ,  res ,  handler ) ;  LayoutModifier . init ( _globalConfig ,  res ) ;  }
 <argument pos:start=""""""""305:97"""""""" pos:end=""""""""305:103""""""""><expr pos:start=""""""""305:97"""""""" pos:end=""""""""305:103""""""""><literal type=""""""""string"""""""" pos:start=""""""""305:97"""""""" pos:end=""""""""305:103"""""""">""""""""kicks""""""""</literal></expr></argument>
@ ApiModelProperty ( example   =   """"false"""" )  @ JsonProperty ( """"useExternalConsentPage"""" )  @ Valid  public   Boolean   getUseExternalConsentPage ()   {  return  useExternalConsentPage ;  }
@ Inject ( at   =   @ At ( """"HEAD"""" ) ,  method   =   """"addEntity"""" )  private   void   jade$addEntity ( Entity   entity ,  CallbackInfo   ci )   {  if  ( entity   instanceof   Player   player )   {  UsernameCache . setUsername ( player . getUUID () ,  player . getGameProfile () . getName () ) ;  }  }
@ Override  public   long   getSize ( Graph   data ,  Class < ? >   type ,  Type   genericType ,  Annotation   annotations [] ,  MediaType   mediaType )   {  return  - 1 ;  }
public   String   getExecutable ( @ NonNull   Launcher   launcher )   throws  IOException ,  InterruptedException   {  
private   String   coordinates ( Dependency   dependency )   {  return  dependency . getGroupId ()   +   """":""""   +   dependency . getArtifactId ()   +   """":""""  +   dependency . getVersion () ;  }
@ Nullable  public   static   Accessor < ? >   override ( HitResult   hitResult ,  @ Nullable   Accessor < ? >   accessor ,  @ Nullable   Accessor < ? >   originalAccessor )   {  if  ( accessor   instanceof   BlockAccessorImpl   target   &&   target . getFakeBlock () . isEmpty () )   {  target . setFakeBlock ( getFakeBlock ( target . getLevel () ,  target . getPosition () ) ) ;  }  return  accessor ;  }
private   void   computeInheritedStyle ( ElementBox   dest ,  ElementBox   parent )  {  NodeData   newstyle   =  dest . getStyle () . inheritFrom ( parent . getStyle () ) ;  dest . setStyle ( newstyle ) ;  }
public   void   setAttackVector ( String   attackVector )   {  this . attackVector   =   attackVector ;  }
@ Override  public   void   setGroupPrefix ( String   world ,  String   group ,  String   prefix )   {  throw  new   UnsupportedOperationException ( """"mChat does not support group info nodes"""" ) ;  }
public   void   testUnknownResponseRef ()   {  doTest ( """"unknown_response_ref.json"""" ) ;  }
private   Boolean   readTrue ()   {  read () ;  readRequiredChar ( 'r' ) ;  readRequiredChar ( 'u' ) ;  readRequiredChar ( 'e' ) ;  return  Boolean . TRUE ;  }
 <argument pos:start=""""""""121:49"""""""" pos:end=""""""""121:50""""""""><expr pos:start=""""""""121:49"""""""" pos:end=""""""""121:50""""""""><literal type=""""""""number"""""""" pos:start=""""""""121:49"""""""" pos:end=""""""""121:50"""""""">0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Test  public   void   testHasScope_true ()   {  GithubSecurityRealm   a   =  new   GithubSecurityRealm ( """"http:
public   static   < K1 ,  V1 ,  K2 ,  V2 >   void   setMapperClass ( Job   job ,  Class < ?   extends  Mapper < K1 ,  V1 ,  K2 ,  V2 > >   cls )   {  if ( CorrelationMultithreadedMapper . class . isAssignableFrom ( cls ) )   {  throw  new   IllegalArgumentException ( """"Can't have recursive """"   +   """"MultithreadedMapper instances."""" ) ;  }  job . getConfiguration () . setClass ( MAP_CLASS ,  cls ,  Mapper . class ) ;  }
@ DataBoundSetter  public   void   setAcceptType ( MimeType   acceptType )   {  this . acceptType   =   acceptType ;  }
public   void   setPrintHelp ( boolean   printHelp )   {  this . printHelp   =   printHelp ;  }
public   String []   getLangs ()   {  String []   array   =  new   String [  headers . size () ] ;  Arrays . fill (  array ,  """""""" ) ;  return  array ;  }
private   List < Object >   readArray ( int   depth )   {  read () ;  List < Object >   array   =  new   ArrayList <> () ;  skipWhiteSpace () ;  if  ( readChar ( ']' ) )   {  return  array ;  }  do  {  skipWhiteSpace () ;  array . add ( readValue ( depth ) ) ;  skipWhiteSpace () ;  }  while  ( readChar ( ',' ) ) ;  if  ( ! readChar ( ']' ) )   {  throw  expected ( """"',' or ']'"""" ) ;  }  return  array ;  }
@ Whitelisted  public   void   setStatus ( String   status )   {  this . status   =   status ;  }
@ SetEnvironment ( executionEnvironments   =   { ExecutionEnvironment . ALL } )  @ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Check user account verification"""" , dependsOnMethods   =   """"testUnsuccessfulFirstLogin"""" ,  expectedExceptions   =   LoginAuthenticationExceptionException . class )  public   void   testUnsuccessfulSecondLogin ()   throws  Exception   {  loginManger . login ( TEST_USER_USERNAME ,  WRONG_PASSWORD ,  isServer . getInstance () . getHosts () . get ( """"default"""" ) ) ;  loginManger . logOut () ;  }
@ Hide  public   CurrentLocationRequest . Builder   setWorkSource ( @ Nullable   WorkSource   workSource )   {  this . workSource   =   workSource ;  return  this ;  }
public   boolean   isActive ()   {  DateTime   now   =  settings . clock () . now () ;  return  startDate . isBefore ( now )   &&   endDate . isAfter ( now ) ;  }
private   static   Schema   loadWithNullableSupport ( JSONObject   rawSchemaJson )   {  return  SchemaLoader . builder () . nullableSupport ( true ) . schemaJson ( rawSchemaJson ) . build () . load () . build () ;  }
 <argument pos:start=""""""""66:49"""""""" pos:end=""""""""66:50""""""""><expr pos:start=""""""""66:49"""""""" pos:end=""""""""66:50""""""""><literal type=""""""""number"""""""" pos:start=""""""""66:49"""""""" pos:end=""""""""66:50"""""""">11</literal></expr></argument>
private   boolean   fileChanged ( PsiFile   psiFile )   {  return  DocumentChangeListener . CHANGED_FILES . contains ( psiFile . getVirtualFile () ) ;  }
public   static   < C   extends  Api . Client ,  R   extends  Result >   PendingResult < R >   call ( GoogleApiClient   client ,  Api   api ,  GmsConnector . Callback < C ,  R >   callback )   {  return  new   GmsConnector < C ,  R > ( client ,  api ,  callback ) . connect () ;  }
@ After  public   void   disableUserAuthorities ()   {  Settings . TREAT_USER_AUTHORITIES_AS_ROLES   =   false ;  }
public   Buffer   getVideoSideData ( String   key )   {  return  videoSideData . get ( key ) ;  }
@ Override  public   void   deleteConfig ( IWearableCallbacks   callbacks ,  final   String   name )   throws  RemoteException   {  postMain ( callbacks ,  ()  ->  {  wearable . deleteConnection ( name ) ;  callbacks . onStatus ( Status . SUCCESS ) ;  } ) ;  }
private   void   matchByFullPath ()   {  if  ( ! isEmptyOrSpaces ( resourceKeyFromConfiguration ) )   {  fileKeyFromComponent   =   this . componentFromSonar . replace ( resourceKeyFromConfiguration   + """":"""" , """""""" ) ;  }   else  {  fileKeyFromComponent   =   this . componentFromSonar . replaceAll ( """"(?i)(.+:)(.+)"""" , """"$2"""" ) ;  }  if  ( this . fullFilePathFromLocalFileSystem . endsWith ( fileKeyFromComponent ) )   {  match   =   true ;  processing   =   false ;  }  }
@ Override  protected   void   internalSet ( final   K   key ,  final   O   value )   {  getCache () . set ( computeKey ( key ) ,  value ,  this . timeout ) ;  }
static   int   maxCompressedLength ( int   length )   {  if  ( length   <   0 )   {  throw  new   IllegalArgumentException ( """"length must be >= 0, got """"   +   length ) ;  }   else if  ( length   >=   MAX_INPUT_SIZE )   {  throw  new   IllegalArgumentException ( """"length must be < """"   +   MAX_INPUT_SIZE ) ;  }  return  length   +   length   /   255   +   16 ;  }
@ Test  void   testMultipleRegistrations ()   {  instanceRegistry . register ( fooInstanceInfo ,  false ) ;  instanceRegistry . register ( fooInstanceInfo2 ,  false ) ;  instanceRegistry . register ( barInstanceInfo ,  false ) ;  final   Map < Tags ,  Long >   counts   =  Map . of ( tags ( fooInstanceInfo ) ,  2L ,  tags ( barInstanceInfo ) ,  1L ) ;  assertEurekaInstance ( counts ) ;  }
private   static   void   validateNodeVersion ( File   nodeJsLocation )   {  String   nodeVersion   =  null ;  String []   nodeVersionCommand   =  {  nodeJsLocation . getAbsolutePath () ,  """"-v""""  } ;  try  ( BufferedReader   reader   =  Runtime . getRuntime () . exec ( nodeVersionCommand ) . inputReader () )   {  nodeVersion   =   reader . readLine () ;  }   catch  ( IOException   e )   {  ILog . get () . error ( e . getMessage () ,  e ) ;  }  if  ( nodeVersion   ==   null )   {  warnNodeJSVersionCouldNotBeDetermined () ;  }  }
public   static   FlowControl   getInstance ( int   control ) {  for ( FlowControl   fc   :  FlowControl . values () ) {  if ( fc . getIndex ()   ==   control ) {  return  fc ;  }  }  return  null ;  }
@ Override  protected   void   onPause ()   {  super . onPause () ;  doUnbindService () ;  wl . release () ;  }
public   void   setAudioStream ( int   audioStream )   {  this . audioStream   =   audioStream ;  }
@ Test  public   void   getZScore2 ()   {  ColumnConfig   config   =  new   ColumnConfig () ;  config . setMean ( 2.0 ) ;  config . setStdDev ( 1.0 ) ;  config . setColumnType ( ColumnType . N ) ;  Assert . assertEquals ( - 4.0 ,  Normalizer . normalize ( config ,  """"-3"""" ,  null ) . get ( 0 ) ) ;  }
public   Builder   withRow ( ContentValues   values )   {  HashMap < String ,  Object >   row   =  new   HashMap < String ,  Object > () ;  for  ( Map . Entry < String ,  Object >   entry   :  values . valueSet () )   {  row . put ( entry . getKey () ,  entry . getValue () ) ;  }  return  withRow ( row ) ;  }
@ Override  public   void   appendTooltip ( ITooltip   tooltip ,  BlockAccessor   accessor ,  IPluginConfig   config )   {  Level   world   =  accessor . getLevel () ;  BlockPos   pos   =  accessor . getPosition () ;  float   power   =  0 ;  
public   void   setWeights ( List < List < Double > >   weights )   {  this . weights   =   weights ;  }
@ Test  public   void   thatRequestBodyRefValueIsSuggested ()   {  getCaretCompletions ( """"request_body_ref"""" )  . assertContains ( """"#/components/requestBodies/Foo"""" )  . isOfSize ( 1 ) ;  }
public   TrustedAppConfiguration   androidPackageName ( String   androidPackageName )   {  this . androidPackageName   =   androidPackageName ;  return  this ;  }
public   Chain < T >   interpose ( final   T   element )   {  return  new   Chain <> ( Underscore . interpose ( value () ,  element ) ) ;  }
default   < P   extends  Provider ,  T   extends  IO >   Map < String ,  T >   allByProvider ( String   providerId ,  Class < T >   ioClass ) {  
public   String   addApplication ( String   appName )   throws  Exception   {  ApplicationModel   applicationModel   =  new   ApplicationModel ()  . name ( appName )  . description ( """"This is a test Service Provider"""" )  . claimConfiguration ( getClaimConfigurations () ) ;  return  applicationMgtRestClient . createApplication ( applicationModel ) ;  }
public   void   setPseudoElement ( Selector . PseudoElementType   pseudo ,  ElementBox   box )  {  pseudoElements . put ( pseudo ,  box ) ;  }
public   boolean   isIndexing ()   {  return  apps . isEmpty ()   &&   isLocked () ;  }
default   ContextBuilder   setDefaultPlatform ( Platform   platform ) {  return  defaultPlatform ( platform ) ;  }
private   String   getContentTypeIdFromText ()   {  return  contentTypeData . getText () . split ( """" """" ) [ 0 ] ;  }
public   Builder   secondAction ( CharSequence   text ,  View . OnClickListener   listener )   {  secondActionText   =   text ;  secondActionListener   =   listener ;  return  this ;  }
public   boolean   isThrottleMatrixConfigurations ()   {  return  throttleMatrixConfigurations ;  }
@ BeforeEach  void   setup ()   {  ClientResponse   mockResponse   =  mock () ;  when ( mockResponse . statusCode () ) . thenReturn ( HttpStatus . OK ) ;  when ( mockResponse . bodyToMono ( Void . class ) ) . thenReturn ( Mono . empty () ) ;  given ( exchangeFunction . exchange ( captor . capture () ) ) . willReturn ( Mono . just ( mockResponse ) ) ;  transportClientFatory   =   new   WebClientTransportClientFactory ( ()  ->   WebClient . builder () . exchangeFunction ( exchangeFunction ) ) ;  }
public   void   remove ()   {  try  {  this . delegate . remove () ;  }   catch  ( RemoteException   e )   {  throw  new   RuntimeRemoteException ( e ) ;  }  }
public   static   void   checkRange ( byte []   buf ,  int   off ,  int   len )   {  checkLength ( len ) ;  if  ( len   >   0 )   {  checkRange ( buf ,  off ) ;  checkRange ( buf ,  off   +   len   -   1 ) ;  }  }
public   static   boolean   isEmpty ( Level   world )  {  return  world . getRecipeManager () . getRecipes () . stream ()  . noneMatch ( recipe  ->   recipe . getType ()   ==   ModRecipeTypes . WORKBENCH . get () ) ;  }
public   Optional < String >   getFluentdFaliedTag ()   {  return  Optional . ofNullable ( environment . getProperty ( """"fluentd.failed.tag"""" ) ) ;  }
private   boolean   hasLocationPermission ()   {  for  ( String   perm   :  PermissionUtil . getLocationPermissions () )   {  if  ( ContextCompat . checkSelfPermission ( this ,  perm )   !=   PackageManager . PERMISSION_GRANTED )   {  return  false ;  }  }  return  true ;  }
@ Test  public   void   testGetAuthorizedAppById ()   throws  Exception   {  getResponseOfGet ( this . userAuthorizedAppsEndpointUri   +   appName1 )  . then ()  . assertThat ()  . statusCode ( HttpStatus . SC_OK )  . body ( """"appId"""" ,  equalTo ( appName1 ) )  . log () . ifValidationFails () ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( connectTimeout ,  connectRequestTimeout ,  socketTimeout ) ;  }
public   static   boolean   isFieldValueListNotAcceptingNullValues ( final   List < String >   fieldValueList )   {  return  ! fieldValueList . contains ( """"null"""" ) ;  }
@ Nullable  @ Override  public   View   onCreateView ( LayoutInflater   inflater ,  @ Nullable   ViewGroup   container ,  @ Nullable   Bundle   savedInstanceState )   {  return  inflater . inflate ( R . layout . fragment_audio_controller ,  container ,  false ) ;  }
protected   static   void   onAfterUpdateTransaction ( PickerView   pickerView )   {  try {  pickerView . update () ;  }  catch  ( Exception   e ) {  e . printStackTrace () ;  }  }
@ Override  protected   void   onCreate ( Bundle   savedInstanceState )   {  super . onCreate ( savedInstanceState ) ;  setContentView ( R . layout . dashboard_activity ) ;  conditionContainer   =   ( ViewGroup )   findViewById ( R . id . condition_container ) ;  getSupportFragmentManager () . beginTransaction ()  . replace ( R . id . content_wrapper ,  getFragment () )  . commit () ;  }
public   void   testGetCurrentAverageValue ()   {  DTEarlyStopDecider   dtEarlyStopDecider   =  new   DTEarlyStopDecider ( 6 ) ;  LOG . info ( """"Total iteration size: {}"""" ,  this . validationErrorList . size () ) ;  int   iteration   =  0 ;  for ( ;   iteration   <   this . validationErrorList . size () ;   iteration ++ )   {  if ( dtEarlyStopDecider . add ( this . validationErrorList . get ( iteration ) ) )   {  LOG . info ( """"Iteration {} stop!"""" ,  iteration ) ;  break;  }  
private   void   fling ( int   velocityY )   {  mPreviousScrollerY   =   0 ;  if  ( velocityY   >   0 )   {  mFlingScroller . fling ( 0 ,  0 ,  0 ,  velocityY ,  0 ,  0 ,  0 ,  Integer . MAX_VALUE ) ;  }   else  {  mFlingScroller . fling ( 0 ,  Integer . MAX_VALUE ,  0 ,  velocityY ,  0 ,  0 ,  0 ,  Integer . MAX_VALUE ) ;  }  invalidate () ;  }
@ Test  void   unsortedXmlAndIndentParameterShouldAffectVerify ()   {  SortPomImplUtil . create ()  . indentBLankLines ()  . testVerifyXmlIsNotOrdered ( """"/EmptyRow_input.xml"""" , """"The xml element <modelVersion> should be placed before <artifactId>"""" ) ;  }
public   void   init ( IInitCallback   callback ,  String   siteKey )   throws  RemoteException   {  getServiceInterface () . init ( callback ,  siteKey ) ;  }
public   Builder   teradataHostname ( String   hostname )   {  this . _tdHostName   =   hostname ;  return  this ;  }
public   static   String   getMapKey ( Object   map )   {  return  map   instanceof   Map   &&   ! ( ( Map )   map ) . isEmpty () ?   String . valueOf ( ( ( Map . Entry )   ( ( Map )   map ) . entrySet () . iterator () . next () ) . getKey () )  :  """""""" ;  }
@ Override   public   int   getImageWidth ()   {  return  imageWidth   >   0   ||   video_c   ==   null  ?   super . getImageWidth ()   :  video_c . width () ;  }
@ Test  public   void   testFromGeoHashDotOrg ()   {  assertEquals ( """"6gkzwgjzn820"""" ,  encodeHash ( - 25.382708 ,  - 49.265506 ) ) ;  }
private   static   void   copyStringToBuffer ( @ Nullable   String   toCopy ,  @ NonNull   CharArrayBuffer   dataOut )   {  if  ( toCopy   ==   null   ||   toCopy . isEmpty () )   {  dataOut . sizeCopied   =   0 ;  return;  }  if  ( dataOut . data   ==   null   ||   dataOut . data . length   <   toCopy . length () )   {  dataOut . data   =   toCopy . toCharArray () ;  }   else  {  toCopy . getChars ( 0 ,  toCopy . length () ,  dataOut . data ,  0 ) ;  }  dataOut . sizeCopied   =   toCopy . length () ;  }
protected   Rectangle2D   awtRect2D ( Rectangle   rect )  {  if  ( rect   ==   null )  return  null ;  return  new   Rectangle2D . Float ( rect . x ,  rect . y ,  rect . width ,  rect . height ) ;  }
@ Override  public   DigitalState   state ()   {  logger . trace ( """"get state on GPIO [{}]; {}"""" ,  this . config . address () ,  gpio . getPinPath () ) ;  try  {  
@ Override  public   void   onConfigurationSuccess ( ITestResult   iTestResult )   {  
public   String   handleRegisterMessageResult ( Intent   resultIntent )   throws  IOException   {  if  ( resultIntent   ==   null )   throw  new   IOException ( ERROR_SERVICE_NOT_AVAILABLE ) ;  String   result   =  resultIntent . getStringExtra ( EXTRA_REGISTRATION_ID ) ;  if  ( result   ==   null )   result   =   resultIntent . getStringExtra ( EXTRA_UNREGISTERED ) ;  if  ( result   !=   null )   return  result ;  result   =   resultIntent . getStringExtra ( EXTRA_ERROR ) ;  throw  new   IOException ( result   !=   null  ?   result   :  ERROR_SERVICE_NOT_AVAILABLE ) ;  }
private   static   final   File   getNodeJsExecutablen ( File   installationLocation ,  Properties   properties )   {  if  ( installationLocation   !=   null )   {  File   nodePath   =  new   File ( installationLocation ,  properties . getProperty ( """"nodePath"""" ) ) ;  if  ( nodePath . exists ()   &&   nodePath . canRead ()   &&   nodePath . canExecute () )   {  return  nodePath ;  }  }  return  null ;  }
public   void   fill ()   {  OpenApiFields . example () . forEach ( this :: addUnique ) ;  }
@ Override  protected   boolean   separatedFromBottom ( ElementBox   box )  {  return  true ;  }
@ Override  public   boolean   playerAddGroup ( String   world ,  String   player ,  String   group )   {  return  new   KPlayer ( player ,  kperms ) . addGroup ( group ) ;  }
private   void   showFolderTypeDialog ()   {  if  ( TextUtils . isEmpty ( mFolder . path ) )   {  Toast . makeText ( this ,  R . string . folder_path_required ,  Toast . LENGTH_LONG )  . show () ;  return;  }  if  ( ! mCanWriteToPath )   {    Toast . makeText ( this ,  R . string . folder_path_readonly ,  Toast . LENGTH_LONG )  . show () ;  return;  }  
@ Test  public   void   invalidArrayIndex ()   {  try  {  singleElemArrayState () . childFor ( """"key"""" ) ;  fail ( """"did not throw exception"""" ) ;  }   catch  ( SchemaException   e )   {  SchemaException   expected   =  new   SchemaException ( """"#"""" ,  """"[key] is not an array index"""" ) ;  assertEquals ( expected ,  e ) ;  }  }
@ DataProvider ( name   =   """"loginHintParamDataProvider"""" )  public   Object [] []   loginHintParamDataProvider ()   {  return  new   Object [] []   { 
private   void   callSelectLayout ()   throws  Exception {  Method   selectLayoutMethod   =  activity . getClass () . getDeclaredMethod ( """"selectLayout"""" ,  CheckBox . class ) ;  selectLayoutMethod . setAccessible ( true ) ;  selectLayoutMethod . invoke ( activity ,  pressedCheckbox ) ;  }
@ Override  public   int   hashCode ()   {  return  Arrays . hashCode ( new   Object [] { attachment ,  requireResidentKey ,  requireUserVerification } ) ;  }
@ Test  public   void   testGETGroupDetails ()   {  endpointURL   =   GROUPS_ENDPOINT ;  getResponseOfGet ( endpointURL ,  SCIM_CONTENT_TYPE )  . then ()  . assertThat ()  . statusCode ( HttpStatus . SC_OK )  . log () . ifValidationFails () ;  }
@ Override  public   boolean   equalsRemote ( IGroundOverlayDelegate   other )   throws  RemoteException   {  return  other   !=   null   &&   other . getId () . equals ( getId () ) ;  }
public   static   DirectionsApiRequest   newRequest ( GeoApiContext   context )   {  return  new   DirectionsApiRequest ( context ) ;  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Update access token attributes of the application"""" , dependsOnMethods   =   """"testValidateAccessTokenAttributesWithRefreshGrant"""" )  public   void   testUpdateAccessTokenAttributes ()   throws  Exception   {  AccessTokenConfiguration   accessTokenConfig   =  new   AccessTokenConfiguration () . type ( """"JWT"""" ) ;  accessTokenConfig . setUserAccessTokenExpiryInSeconds ( 3600L ) ;  accessTokenConfig . setApplicationAccessTokenExpiryInSeconds ( 3600L ) ;  
@ Test  void   shouldCreateJobBadgeAction ()   {  Collection < ?   extends  Action >   action   =  factory . createFor ( Mockito . mock ( Run . class ) ) ;  assertThat ( action . size () ,  is ( 1 ) ) ;  assertThat ( action . stream () . findFirst () . get () ,  instanceOf ( RunBadgeAction . class ) ) ;  }
public   void   updateRoleName ( String   roleName ,  String   newRoleName )  throws  RemoteException ,  UserAdminUserAdminException   {  userAdminStub . updateRoleName ( roleName ,  newRoleName ) ;  }
@ Override  public   void   onDestroy ()   {  super . onDestroy () ;  mLibVlc . release () ;  mediaPlayer . stop () ;  mediaPlayer . release () ;  mediaPlayer   =   null ;  }
@ Override   public   Bfloat16Indexer   put ( long   i ,  long   j ,  float []   h ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  putRaw ( index ( i ,  j )   +   n ,  h [ offset   +   n ] ) ;  }  return  this ;  }
@ Override  protected   void   validateRequest ()   {  if  ( this . payload . considerIp   !=   null  &&   ! this . payload . considerIp  &&   this . payload . wifiAccessPoints   !=   null  &&   this . payload . wifiAccessPoints . length   <   2 )   {  throw  new   IllegalArgumentException ( """"Request must contain two or more 'Wifi Access Points'"""" ) ;  }  }
@ Override  public   boolean   onCreateOptionsMenu ( Menu   menu )   {  getMenuInflater () . inflate ( R . menu . css_editor_menu ,  menu ) ;  return  super . onCreateOptionsMenu ( menu ) ;  }
@ Test  void   shouldNotApplyAfterWhenBeforeThrowsWhenCombiningWithCompose ()   {  final   CheckedFunction < Integer ,  Boolean >   before   =  ignored  ->  {   throw  new   Exception ( """"before"""" ) ;   } ;  final   CheckedFunction < Boolean ,  String >   after   =  ignored  ->  {   throw  new   AssertionError ( """"before called"""" ) ;   } ;  final   CheckedFunction < Integer ,  String >   f   =  after . compose ( before ) ;  assertEquals ( """"before"""" , assertThrows ( Exception . class ,  ()  ->   f . apply ( null ) ) . getMessage () ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   < F >   Chain < F >   distinctBy ( final   Function < T ,  F >   func )   {  return  new   Chain <> ( Underscore . newArrayList ( ( Iterable < F > )   Underscore . uniq ( list ,  func ) ) ) ;  }
@ Override  public   String   getGroupInfoString ( String   world ,  String   group ,  String   node ,  String   defaultValue )   {  return  privs . getGroupNode ( group ) . getString ( node ,  defaultValue ) ;  }
@ Test  public   void   toStringWithObject ()   {  ConstSchema   subject   =  ConstSchema . builder () . permittedValue ( new   JSONObject ( """"{\""""a\"""":2}"""" ) ) . build () ;  String   actual   =  subject . toString () ;  assertEquals ( """"{\""""const\"""":{\""""a\"""":2}}"""" ,  actual ) ;  }
public   static   void   askToHide ( Context   context ,  ComponentName   componentName )   {  askToHide ( context ,  componentName ,  null ) ;  }
@ Test ( dependsOnMethods   =   """"keywordExists"""" ,  dataProvider   =   """"getTestData"""" )  public   final   void   digestsAreCorrectlyComputed ( final   JsonNode   digest , final   JsonNode   source )  {  assertTrue ( EQUIVALENCE . equivalent ( digester . digest ( source ) ,  digest ) , """"incorrect digest form"""" ) ;  }
void   advance ()  {  while  ( i1   <   m1 . size () )  {  KeyValue   m   =  m1 . _mods [ i1 ] ;  while  ( true )  {  if  ( i2   >=   m2 . _size )  return;  int   d   =  m . compareTo ( m2 . _mods [ i2 ] ) ;  if  ( d   <   0 )  return;  i2 ++ ;  if  ( d   ==   0 )  break;  }  i1 ++ ;  }  }
SchemaLoaderBuilder   pointerToCurrentObj ( SchemaLocation   pointerToCurrentObj )   {  this . pointerToCurrentObj   =   requireNonNull ( pointerToCurrentObj ) ;  return  this ;  }
@ Override   public   ULongIndexer   put ( long []   indices ,  BigInteger []   l ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  putRaw ( index ( indices )   +   n ,  l [ offset   +   n ] ) ;  }  return  this ;  }
public   MediaRouteSelector   getMergedSelector ()   {  return  this . mergedSelector ;  }
@ Deprecated  protected   int   onGetStatus ( Bundle   extras )   {  return  LocationProvider . AVAILABLE ;  }
@ Override  public   int   getMaxCost ( int   level )  {  return  this . getMinCost ( level )   +   10 ;  }
default   byte []   readNBytes ( int   offset ,  int   length )   {  if  ( length   <=   0 )   {  throw  new   IllegalArgumentException ( """"length <= 0"""" ) ;  }  if  ( offset   <   0 )   {  throw  new   IllegalArgumentException ( """"offset < 0"""" ) ;  }  if  ( length   <   offset )   {  throw  new   IllegalArgumentException ( """"length < offset"""" ) ;  }  int   bufferSize   =  length - offset ;  byte []   temp   =  new   byte [ bufferSize ] ;  int   actual   =  read ( temp ,  offset ,  length ) ;  if ( actual   <   0 )   throw  new   IOReadException ( actual ) ;  return  Arrays . copyOf ( temp ,  actual ) ;  }
@ Override  @ SuppressWarnings ( """"unchecked"""" )  public   Chain < Comparable >   min ()   {  return  new   Chain <> ( Underscore . min ( ( Collection )   value () ) ) ;  }
@ Override  public   void   initializeFrom ( ILaunchConfiguration   configuration )   {  super . initializeFrom ( configuration ) ;  try  {  urlText . setText ( configuration . getAttribute ( ChromeRunDAPDebugDelegate . URL ,  """""""" ) ) ;  }   catch  ( CoreException   e )   {  ILog . get () . log ( e . getStatus () ) ;  }  }
@ Nullable  @ Override  public   View   onCreateView ( LayoutInflater   inflater ,  @ Nullable   ViewGroup   container ,  @ Nullable   Bundle   savedInstanceState )   {  View   view   =  inflater . inflate ( R . layout . fragment_trashcan_versioning ,  container ,  false ) ;  mArguments   =   getArguments () ;  fillArguments () ;  updateNumberPicker () ;  return  view ;  }
public   < F >   Chain < F >   map ( final   Function < ?   super  T ,  F >   func )   {  return  new   Chain <> ( Underscore . map ( list ,  func ) ) ;  }
@ Test  public   void   toStringTest ()   {  JSONObject   rawSchemaJson   =  loader . readObj ( """"tostring/arrayschema-list.json"""" ) ;  String   actual   =  SchemaLoader . load ( rawSchemaJson ) . toString () ;  assertThat ( new   JSONObject ( actual ) ,  sameJsonAs ( rawSchemaJson ) ) ;  }
private   void   assertResponse ( Page   p ,  String   expectedLogin ,  List < String >   expectedAuthorities )   {  String   response   =  p . getWebResponse () . getContentAsString () . trim () ;  JSONObject   respObject   =  JSONObject . fromObject ( response ) ;  if  ( expectedLogin   !=   null )   {  assertEquals ( expectedLogin ,  respObject . getString ( """"name"""" ) ) ;  }  if  ( expectedAuthorities   !=   null )   {  
@ Override  public   void   onCreate ( @ Nullable   Bundle   savedInstanceState )   {  super . onCreate ( savedInstanceState ) ;  }
@ Override  public   String   toString ()   {  return  String . format ( """"CDATA %s"""" ,  this . value ) ;  }
public   void   updatePacks ( PackageManager   pm )   {  packs . clear () ;  for  ( String   theme   :  new   String [] { """"org.adw.launcher.THEMES"""" , """"com.gau.go.launcherex.theme"""" } )   {  for  ( ResolveInfo   info   :  queryIntentActivities ( pm ,  new   Intent ( theme ) ) )   {  String   packageName   =  info . activityInfo . packageName ;  try  {  packs . put ( packageName ,  new   Pack ( packageName , pm . getApplicationLabel ( getApplicationInfo ( pm ,  packageName ) ) . toString () , pm . getResourcesForApplication ( packageName ) ) ) ;  }   catch  ( PackageManager . NameNotFoundException   e )   {  
private   boolean   buttonFoundThusFormSubmitted ( HtmlForm   form ,  List < HtmlButton >   buttons ,  String   buttonText )  throws  IOException   {  boolean   buttonFound   =  false ;  for  ( HtmlButton   button   :  buttons )   {  if  ( button . getTextContent () . trim () . equals ( buttonText ) )   {  buttonFound   =   true ;  button . click () ;  break;  }  }  return  buttonFound ;  }
@ Override  protected   float   getU0 ()  {  return  this . sprite . getU0 ()   +   this . uOffset   *   this . textureDensity ;  }
@ Override  public   void   changedUpdate ( DocumentEvent   e )   {  fillOutputPdfName () ;  }
 <expr pos:start=""""""""1194:51"""""""" pos:end=""""""""1194:51""""""""><name pos:start=""""""""1194:51"""""""" pos:end=""""""""1194:51"""""""">m</name></expr> }</block></expr></init></decl>;</decl_stmt>
private   void   setPixelFormat ( Image   image ,  int   pixelFormat )   {  image . SetDimensions ( image . GetRows () , image . GetCols () , image . GetStride () , pixelFormat , image . GetBayerTileFormat () ) ;  }
@ Test  public   void   testBaggingPmml ()   throws  Exception   {  verifyPmml ( """"TestNN"""" ,  """"src/test/resources/example/bagging-pmml/ModelConfig.json"""" , """"src/test/resources/example/bagging-pmml/ColumnConfig.json"""" , """"src/test/resources/example/bagging-pmml/columns"""" ,  """"src/test/resources/example/bagging-pmml/models"""" , """"src/test/resources/example/bagging-pmml/EvalSet1/eval.data.csv"""" ,  """"Eval1"""" ,  """"|"""" ) ;  }
@ Override  public   SerialConfigBuilder   flowControl ( FlowControl   control )   {  this . properties . put ( SerialConfig . FLOW_CONTROL_KEY ,  control . name () ) ;  return  this ;  }
public   < T >   T   decode ( int   offset ,  Class < T >   cls )   throws  IOException   {  if  ( offset   >=   this . buffer . capacity () )   {  throw  new   InvalidDatabaseException ( """"The MaxMind DB file's data section contains bad data: """"  +   """"pointer larger than the database."""" ) ;  }  this . buffer . position ( offset ) ;  return  cls . cast ( decode ( cls ,  null ) . getValue () ) ;  }
@ Test  public   void   getNameLongMethodNameTest ()   throws  Exception   {  String   name   =  getName ( TOO_LONG_NAME ,  null ) ;  assertThat ( """"Invalid method name short cut"""" ,  name , equalTo ( """"... 150 symbols! Guys, what are you thinking for when you made so long title??? Could""""   +  """" you please made it more carefully...?"""" ) ) ;  }
private   void   checkExist ( String   playerName )   {  Accounts   acc   =  new   Accounts () ;  if  ( ! acc . exists ( playerName ) )   {  acc . create ( playerName ) ;  }  }
@ Test  public   void   generatedFilePath ()   {  Compiler   compiler   =  compilerWithGenerator () ;  Compilation   compilation   =  compiler . compile ( source1 ,  source2 ) ;  assertThat ( compilation . generatedFile ( SOURCE_OUTPUT ,  """"test/generated/Blah.java"""" ) ) . isPresent () ;  }
@ Loggable ( logThis   =   true )  public   String   last ( final   String   text )   {  return  text . substring ( text . length ()   -   1 ) ;  }
public   static   Object   fromJson ( String   string )   {  return  new   JsonParser ( string ) . parse () ;  }
@ Override  public   byte []   getBody ()   throws  AuthFailureError   {  return  Optional . fromNullable ( requestBody ) . transform ( String :: getBytes ) . orNull () ;  }
public   static   double   ofPr ( List < PerformanceObject >   pr )   {  return  calculateArea ( pr ,  Performances . recall () ,  Performances . precision () ) ;  }
@ Override  public   void   gpioNotifications ( int   pin ,  boolean   enabled )   {  if ( enabled )  PIGPIO . gpioSetAlertFunc ( pin ,  gpioAlertCallbackHandler ) ;  else  PIGPIO . gpioDisableAlertFunc ( pin ) ;  }
private   List < AbstractBinInfo >   adjustBinInfos ( List < AbstractBinInfo >   mergedBinInfos , int   expectedBinningNum ,  double   totalInstCnt )   {  while  ( mergedBinInfos . size ()   >   expectedBinningNum )   {  int   pos   =  getBestMergeNode ( mergedBinInfos ,  totalInstCnt ) ;  if  ( pos   >   0 )   {  mergedBinInfos . get ( pos   -   1 ) . mergeRight ( mergedBinInfos . get ( pos ) ) ;  mergedBinInfos . remove ( pos ) ;  }   else  {  break;  }  }  return  mergedBinInfos ;  }
@ Test ( dependsOnMethods   =   """"testCreateApplication"""" )  public   void   testRenameApplication ()   throws  Exception   {  JSONObject   patchRequest   =  new   JSONObject () ;  patchRequest . put ( """"name"""" ,  UPDATED_APP_NAME ) ;  String   path   =  APPLICATION_MANAGEMENT_API_BASE_PATH   +   """"/""""   +   appId ;  getResponseOfPatch ( path ,  patchRequest . toString () ) . then ()  . assertThat ()  . statusCode ( HttpStatus . SC_OK ) ;  getApplication ( appId ) . then ()  . body ( """"name"""" ,  equalTo ( UPDATED_APP_NAME ) ) ;  }
@ Override   public   ByteIndexer   putChar ( long   i ,  char   c )   {  RAW . putChar ( base   +   checkIndex ( i ,  size   -   1 ) ,  c ) ;  return  this ;  }
@ Override  public   void   addLabel ( long   node ,  Label   label )   {  synchronized  ( graphLock )   {  Set < Label >   labels   =  newLinkedHashSet ( inserter . getNodeLabels ( node ) ) ;  labels . add ( label ) ;  inserter . setNodeLabels ( node ,  labels . toArray ( new   Label [ labels . size () ] ) ) ;  }  }
@ Override  public   void   onCredentialList ( List < FidoCredentialDetails >   value )   throws  RemoteException   {  completionSource . setResult ( value ) ;  }
@ Test  public   void   testLeft ()   {  assertEquals ( """"u1p8"""" ,  left ( """"u1pb"""" ) ) ;  }
public   < T >   OptionValue < T >   input ( String   optionName ,  Supplier < T >   getter ,  Consumer < T >   setter ,  Predicate < String >   validator )   {  return  add ( new   InputOptionValue <> ( this :: updateSaveState ,  optionName ,  getter ,  setter ,  validator ) ) ;  }
public   BooleanProperty   isAnythingSelectedProperty ()   {  return  playbackManager . isAnythingHighlightedProperty () ;  }
@ Test  public   void   getMap ()   {  assertThat ( util . getCurieMap () ,  is ( map ) ) ;  }
@ Override  public   IObjectWrapper   getModuleVersionV3 ( IObjectWrapper   wrappedContext ,  String   moduleId ,  boolean   updateConfigIfRequired ,  long   requestStartTime )   throws  RemoteException   {  throw  new   UnsupportedOperationException () ;  }
public   void   pin_entry ( int   pos )  {  ClipboardPinView   v   =  ( ClipboardPinView ) ( ( ViewGroup ) getParent () . getParent () ) . findViewById ( R . id . clipboard_pin_view ) ;  String   clip   =  _history . get ( pos ) ;  v . add_entry ( clip ) ;  _service . remove_history_entry ( clip ) ;  }
@ Deprecated  public   static   boolean   isUserRecoverableError ( int   errorCode )   {  return  false ;   
@ Override  protected   void   renderListBackground ( GuiGraphics   guiGraphics )   {  ResourceLocation   resourceLocation   =  minecraft . level   ==   null  ?   NAVBAR_BACKGROUND   :  INWORLD_NAVBAR_BACKGROUND ;  guiGraphics . blitSprite ( RenderType :: guiTextured ,  resourceLocation ,  getX () ,  getY () ,  getWidth () ,  getHeight () ) ;  }
@ Override  public   void   onStop ()   {  Log . w ( TAG ,  """"Media projection stopped."""" ) ;  orientationListener . disable () ;  stopCapture () ;  if  ( capturerEventsListener   !=   null )   {  capturerEventsListener . onCapturerEnded () ;  }  }
static   File   findDebugAdapter ()   {  URL   fileURL ;  try  {  fileURL   =   FileLocator . toFileURL ( FirefoxRunDABDebugDelegate . class  . getResource ( """"/node_modules/firefox-debugadapter/adapter.bundle.js"""" ) ) ;  return  new   File ( fileURL . toURI () ) ;  }   catch  ( IOException  |  URISyntaxException   e )   {  IStatus   errorStatus   =  Status . error ( e . getMessage () ,  e ) ;  ILog . get () . log ( errorStatus ) ;  Display . getDefault () . asyncExec ( ()  ->   ErrorDialog . openError ( Display . getDefault () . getActiveShell () , """"Debug error"""" ,  e . getMessage () ,  errorStatus ) ) ;   
private   Map < String ,  String >   parseUploadProperties ( WebContext   webContext )   {  Map < String ,  String >   properties   =  Maps . newTreeMap () ;  for  ( String   name   :  webContext . getRequest () . headers () . names () )   {  String   nameLower   =  name . toLowerCase () ;  if  ( nameLower . startsWith ( """"x-amz-"""" )   ||   """"content-md5"""" . equals ( nameLower )   ||   """"content-type"""" . equals ( nameLower ) )   {  properties . put ( name ,  webContext . getHeader ( name ) ) ;  }  }  return  properties ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  IdpInitiatedSingleLogout   idpInitiatedSingleLogout   =  ( IdpInitiatedSingleLogout )   o ;  return  Objects . equals ( this . enabled ,  idpInitiatedSingleLogout . enabled )   &&  Objects . equals ( this . returnToUrls ,  idpInitiatedSingleLogout . returnToUrls ) ;  }
private   void   sendContentType ( final   MimeType   mimeType ,  String   checkMessage ,  String   body )   throws  Exception   {  
@ Override  public   boolean   isCompassEnabled ()   throws  RemoteException   {  return  compassEnabled ;  }
@ Test  public   void   testLabelCompletion ()   {  Query   query   =  new   Vocabulary . Query . Builder ( """"Hippo"""" ) . includeSynonyms ( false ) . build () ;  List < String >   completionStrings   =  VocabularyService . getCompletion ( query ,  result ) ;  assertThat ( completionStrings ,  contains ( """"Hippocampus"""" ) ) ;  }
@ Override  public   String   toString ()   {  return  """"class ProvisioningClaim {\n""""   +  """"    claim: """"   +   toIndentedString ( claim )   +   """"\n""""   +  """"    defaultValue: """"   +   toIndentedString ( defaultValue )   +   """"\n""""   +  """"}"""" ;  }
@ Override  public   void   onMeasure ( int   widthMeasureSpec ,  int   heightMeasureSpec )  {  int   heightMeasureSpec_custom   =  MeasureSpec . makeMeasureSpec ( Integer . MAX_VALUE   >>   2 ,  MeasureSpec . AT_MOST ) ;  super . onMeasure ( widthMeasureSpec ,  heightMeasureSpec_custom ) ;  ViewGroup . LayoutParams   params   =  getLayoutParams () ;  params . height   =   getMeasuredHeight () ;  }
@ Test  public   void   thatLicenseKeysAreSuggested ()   {  getCaretCompletions ( """"license"""" ) . assertContains ( """"name"""" ,  """"url"""" ) . isOfSize ( 2 ) ;  }
public   void   testRenameLocalRequestBodyReference ()   {  testRename ( """"NewFoo"""" ,  """"rename_component_request_body.yaml"""" ,  """"rename_component_request_body_after.yaml"""" ) ;  }
public   Set < String >   getNodesForCapability ( String   capability )   {  DataHolder   dataHolder   =  wearable . getDataItemsByUriAsHolder ( buildCapabilityUri ( capability ,  false ) ,  packageName ) ;  Set < String >   nodes   =  new   HashSet <> () ;  for  ( int   i   =  0 ;   i   <   dataHolder . getCount () ;   i ++ )   {  nodes . add ( dataHolder . getString ( """"host"""" ,  i ,  0 ) ) ;  }  dataHolder . close () ;  return  nodes ;  }
private   File   getOfflineFileLocation ( String   name )   {  return  new   File ( getFilesDir () ,  Downloader . OFFLINE_PATH   +   """"/""""   +   name ) ;  }
@ NonNull  public   StreetViewPanoramaLocation   getLocation ()   {  try  {  return  getDelegate () . getStreetViewPanoramaLocation () ;  }   catch  ( RemoteException   e )   {  throw  new   RuntimeRemoteException ( e ) ;  }  }
public   String   toString ()   {  return  shortDescription   +   """" (""""   +   description   +   """": """"   +   condition  +   """"/10)"""" ;  }
@ Override  public   void   addVisibilityChangeListener ( IAppVisibilityListener   listener )   {  Log . d ( TAG ,  """"unimplemented Method: addVisibilityChangeListener"""" ) ;  }
@ CanIgnoreReturnValue  @ Override  public   T   generatesSources ( JavaFileObject   first ,  JavaFileObject ...   rest )   {  check ( """"generatedSourceFiles()"""" )  . about ( javaSources () )  . that ( compilation . generatedSourceFiles () )  . parsesAs ( first ,  rest ) ;  return  thisObject () ;  }
protected   void   onHitBlock ( BlockState   state ,  BlockPos   pos ,  Direction   face ,  double   x ,  double   y ,  double   z )  {  PacketHandler . getPlayChannel () . sendToTrackingChunk ( ()  ->   this . level . getChunkAt ( pos ) ,  new   S2CMessageProjectileHitBlock ( x ,  y ,  z ,  pos ,  face ) ) ;  }
public   void   onMeasure ( int   widthMeasureSpec ,  int   heightMeasureSpec )   {  super . onMeasure ( widthMeasureSpec ,  MeasureSpec . makeMeasureSpec ( 0x1FFFFFFF ,  MeasureSpec . AT_MOST ) ) ;  ViewGroup . LayoutParams   layoutParams   =  this . getLayoutParams () ;  layoutParams . height   =   this . getMeasuredHeight () ;  }
public   void   setRemoteJid ( Object   value )   {  XposedHelpers . setObjectField ( thisObject ,  """"A00"""" ,  value ) ;  this . remoteJid   =   value ;  }
private   void   populateViews ( List < Schedule >   schedules )   {  final   LinearLayout   mainLayout   =  findViewById ( R . id . linearLayout ) ;  viewList   =   new   LongSparseArray <> () ;  for ( Schedule   schedule   :  schedules )   {  final   View   v   =  buildUi ( schedule ) ;  viewList . put ( schedule . getId () ,  v ) ;  mainLayout . addView ( v ) ;  if ( schedule . isEnabled () )   {  setTimeLeftTextView ( schedule ,  v ) ;  }  }  }
private   String   toIndentedString ( java . lang . Object   o )   {  if  ( o   ==   null )   {  return  """"null"""" ;  }  return  o . toString () . replace ( """"\n"""" ,  """"\n    """" ) ;  }
@ Override  public   boolean   canSplitInside ()  {  for  ( int   i   =  startChild ;   i   <   endChild ;   i ++ )  if  ( getSubBox ( i ) . canSplitInside () )  return  true ;  return  false ;  }
@ JsonIgnore  public   List < Integer >   getBinCountPos ()   {  return  columnBinning . getBinCountPos () ;  }
public   static   Integer   toInteger ( Object   anObj )   {  if  ( anObj   ==   null )  return  null ;  Integer   tmpResult   =  null ;  if  ( anObj   instanceof   Integer )   {  tmpResult   =   ( Integer )   anObj ;  }   else if  ( anObj   instanceof   Number )   {  tmpResult   =   new   Integer ( ( ( Number )   anObj ) . intValue () ) ;  }   else  {  try  {  tmpResult   =   new   Integer ( toString ( anObj ) ) ;  }   catch  ( NumberFormatException   nfe )   {  }  }  return  tmpResult ;  }
@ Test  void   verifyDefaultsWhenUsingEurekaClientConfigBean ()   {  EurekaClientConfigBean   configBean   =  new   EurekaClientConfigBean () ;  configBean . setOrder ( 1 ) ;  EurekaReactiveDiscoveryClient   client   =  new   EurekaReactiveDiscoveryClient ( eurekaClient ,  configBean ) ;  assertThat ( client . description () ) . isEqualTo ( """"Spring Cloud Eureka Reactive Discovery Client"""" ) ;  assertThat ( client . getOrder () ) . isEqualTo ( 1 ) ;  }
public   synchronized   void   remove ( Markup   markup )   {  if  ( markup   instanceof   MarkerItemMarkup )   {  markupMap . remove ( markup . getId () ) ;  MarkerItem   toRemove   =  getByUid ( markup . getId () ) ;  if  ( toRemove   !=   null )   mapView . items () . removeItem ( toRemove ) ;  }   else if  ( markup   instanceof   DrawableMarkup )   {  drawableMarkups . remove ( markup ) ;  updateDrawableLayer () ;  mapView . drawables () . update () ;  }  redraw () ;  }
public   void   reloadPlugin ()   {  this . onDisable () ;  this . reloadConfig () ;  this . onEnable () ;  }
@ Override  public   void   disableConfig ( IWearableCallbacks   callbacks ,  final   String   name )   throws  RemoteException   {  Log . d ( TAG ,  """"disableConfig: """"   +   name ) ;  postMain ( callbacks ,  ()  ->  {  wearable . disableConnection ( name ) ;  callbacks . onStatus ( Status . SUCCESS ) ;  } ) ;  }
public   Directives   set ( final   Object   text )   {  try  {  this . all . add ( new   SetDirective ( text . toString () ) ) ;  }   catch  ( final   XmlContentException   ex )   {  throw  new   IllegalArgumentException ( String . format ( """"Failed to understand XML content, SET(%s)"""" , text ) , ex ) ;  }  return  this ;  }
@ Override  public   String   toString ()   {  return  """"class Property {\n""""   +  """"    name: """"   +   toIndentedString ( name )   +   """"\n""""   +  """"    value: """"   +   toIndentedString ( value )   +   """"\n""""   +  """"}"""" ;  }
 <argument pos:start=""""""""82:50"""""""" pos:end=""""""""82:50""""""""><expr pos:start=""""""""82:50"""""""" pos:end=""""""""82:50""""""""><literal type=""""""""number"""""""" pos:start=""""""""82:50"""""""" pos:end=""""""""82:50"""""""">2</literal></expr></argument>
private   void   assertEurekaInstance ( Map < Tags ,  Long >   meterRegistryCounts )   {  await () . pollDelay ( 5 ,  MILLISECONDS )  . atMost ( 5 ,  SECONDS )  . pollInterval ( fibonacci () )  . untilAsserted ( ()  ->   meterRegistryCounts . forEach ( ( tags , count )  ->   assertThat ( ( long )   meterRegistry . get ( """"eureka.server.instances"""" ) . tags ( tags ) . gauge () . value () )  . isEqualTo ( count ) ) ) ;  }
public   static   Context   newContext ()   {  logger . info ( """"New context"""" ) ;  return  newContextBuilder () . build () ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  claimMetadataManagementServiceClient . removeLocalClaim ( CLAIM_URI ) ;  }
public   boolean   isMainOpenApiYamlFile ( final   PsiFile   psiFile )   {  return  hasYamlRootKey ( psiFile ,  String . format ( """"$.%s"""" ,  OPEN_API_KEY ) ,  OPEN_API_VERSION ) ;  }
@ NonNull  @ Override  public   String   toString ()   {  return  uid   +   """":""""   +   packageName ;  }
public   void   updateScope ( String   scopeId ,  ScopeUpdateRequest   scopeUpdateObj )   throws  IOException   {  String   jsonRequest   =  toJSONString ( scopeUpdateObj ) ;  String   endPointUrl   =  serverUrl   +   ISIntegrationTest . getTenantedRelativePath ( OIDC_SCOPE_MGT_BASE_PATH , tenantDomain )   +   PATH_SEPARATOR   +    scopeId ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpPut ( endPointUrl ,  jsonRequest ,  getHeaders () ) )   {  Assert . assertEquals ( response . getStatusLine () . getStatusCode () ,  HttpServletResponse . SC_OK , """"Scope update failed"""" ) ;  }  }
private   ListView < String >   createPitchbendBackground ( DoubleExpression   width ,  DoubleExpression   height ,  double   rowHeight )   {  ListView < String >   background   =  new   ListView <> () ;  background . prefWidthProperty () . bind ( width ) ;  background . prefHeightProperty () . bind ( height ) ;  background . setCellFactory ( source  ->   new   TextFieldListCell <> () ) ;  background . setFixedCellSize ( rowHeight ) ;  background . setMouseTransparent ( true ) ;  background . setFocusTraversable ( false ) ;  background . setItems ( FXCollections . observableArrayList ( """""""" ) ) ;   
@ Override  protected   void   onSizeChanged ( int   w ,  int   h ,  int   oldw ,  int   oldh )   {  Log . v ( TAG ,  """"onSizeChanged: """"   +   w   +   """",""""   +   h   +   """". Old: """"   +   oldw   +   """",""""   +   oldh ) ;  
public   static   < T >   void   put ( Bundle   bundle ,  @ NonNull   RootKey < T >   key ,  T   value )   {  key . put ( bundle ,  key . baseKey () ,  value ) ;  }
@ Override  public   boolean   hasNext ()   {  if  ( lastReturned   !=   null )   {  return  lastReturned . tag   ==   Return . Tag . RETURN ;  }  lastReturned   =   CONTINUE () ;  while  ( pre . apply ( i )   &&   lastReturned . tag   ==   Return . Tag . CONTINUE )   {  lastReturned   =   body . apply ( i ) ;  i   =   post . apply ( i ) ;  }  return  lastReturned . tag   ==   Return . Tag . RETURN ;  }
public   void   testVerifyWarn ( String   inputResourceFileName ,  String   warningMessage ,  boolean   outputToViolationFile )   {  setup () ;  testHandler   =  new   TestHandler ( inputResourceFileName ,  inputResourceFileName ,  getPluginParameters () ) ;  testHandler . performVerifyThatDidNotSort () ;  var   index   =  assertStartOfMessages ( warningMessage ,  outputToViolationFile ) ;  assertThat ( testHandler . getInfoLogger () . get ( index ) ,  startsWith ( """"[WARNING] The file """" ) ) ;  assertThat ( testHandler . getInfoLogger () . get ( index ) ,  endsWith ( """" is not sorted"""" ) ) ;  }
new   Thread ( new   Runnable ()   {  public   void   run ()   {  try  {  TimeUnit . SECONDS . sleep ( TIMEOUT ) ;  interruptFlag . set ( true ) ;  System . out . println ( """"interrupt flag was changed"""" ) ;  }   catch  ( InterruptedException   ex )   {  System . out . println ( """"exception in interruption thread: """"   +   ex ) ;  }  } } ) . start () ;
@ Override  protected   void   onPostExecute ( Boolean   success )   {  super . onPostExecute ( success ) ;  executionCompleted () ;  }
@ GET  @ Path ( """"/sentences"""" )  @ ApiOperation ( value   =   """"Split text into sentences."""" , response   =   String . class , responseContainer   =   """"List"""" )  @ Timed  @ CacheControl ( maxAge   =   2 ,  maxAgeUnit   =   TimeUnit . HOURS )  public   Object   getSentences ( @ ApiParam (  value   =   """"The text to split"""" ,  required   =   true  )  @ QueryParam ( """"text"""" )   @ DefaultValue ( """""""" )   String   text )   {  List < String >   sentences   =  lexicalLib . extractSentences ( text ) ;  return  sentences ;  }
@ Async  @ Override  public   void   run ()   {  queue . offer ( Thread . currentThread () . getName () ) ;  }
@ Override  public   Optional < String >   getKeyNameIfKey ( final   PsiElement   psiElement )   {  return  isKey ( psiElement ) ?   Optional . of ( StringUtils . removeAllQuotes ( psiElement . getParent () . getText () ) )  :  Optional . empty () ;  }
public   void   addAssociation ( String   workflowId ,  String   associationName ,  String   eventId ,  String   condition )  throws  RemoteException ,  WorkflowAdminServiceWorkflowException   {  stub . addAssociation ( associationName ,  workflowId ,  eventId ,  condition ) ;  }
public   void   showImage ( Image   image )   {  if  ( image   ==   null )   {  return;  }   else if  ( isResizable ()   &&   needInitialResize )   {  int   w   =  ( int ) Math . round ( image . getWidth   ( null ) * initialScale ) ;  int   h   =  ( int ) Math . round ( image . getHeight ( null ) * initialScale ) ;  setCanvasSize ( w ,  h ) ;  }  this . color   =   null ;  this . image   =   image ;  canvas . paint ( null ) ;  }
public   JSONObject   getScope ( String   scopeId )   throws  Exception   {  String   endPointUrl   =  serverUrl   +   ISIntegrationTest . getTenantedRelativePath ( OIDC_SCOPE_MGT_BASE_PATH , tenantDomain )   +   PATH_SEPARATOR   +    scopeId ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpGet ( endPointUrl ,  getHeaders () ) )   {  return  getJSONObject ( EntityUtils . toString ( response . getEntity () ) ) ;  }  }
@ Override  public   void   setPlayerPrefix ( String   world ,  String   player ,  String   prefix )   {  PermissionUser   user   =  getUser ( player ) ;  if  ( user   !=   null )   {  user . setPrefix ( prefix ,  world ) ;  }  }
public   void   testYamlLink ()   {  final   String   expected   =  """"<div>Description</div>"""" ;  testQuickDocumentation ( """"/yaml/link_ref.yaml"""" ,  expected ) ;  }
public   int   getPlayerInfoInteger ( String   world ,  OfflinePlayer   op ,  String   node ,  int   defaultValue )   {  return  getUser ( op ) . getOptionInteger ( node ,  world ,  defaultValue ) ;  }
public   float   getFloat ( String   name ,  float   defaultValue )   {  String   valueString   =  this . getTrimmed ( name ) ;  return  valueString   ==   null  ?   defaultValue   :  Float . parseFloat ( valueString ) ;  }
public   void   setName ( @ NonNull   String   name )   {  this . name   =   name ;  }
public   static   ProjectorDevice []   read ( FileStorage   fs )   throws  Exception   {  FileNode   node   =  fs . get ( """"Projectors"""" ) ;  FileNodeIterator   seq   =  node . begin () ;  int   count   =  ( int ) seq . remaining () ;  ProjectorDevice []   devices   =  new   ProjectorDevice [ count ] ;  for  ( int   i   =  0 ;   i   <   count ;   i ++ ,   seq . increment () )   {  FileNode   n   =  seq . multiply () ;  if  ( n . empty () )   continue;  String   name   =  n . asBytePointer () . getString () ;  devices [ i ]   =   new   ProjectorDevice ( name ,  fs ) ;  }  return  devices ;  }
public   void   setUserAccessTokenExpiryInSeconds ( Long   userAccessTokenExpiryInSeconds )   {  this . userAccessTokenExpiryInSeconds   =   userAccessTokenExpiryInSeconds ;  }
@ Override  public   int   i2cReadByte ( int   handle )   {  logger . trace ( """"[I2C::READ] -> [{}]; Byte"""" ,  handle ) ;  validateReady () ;  validateHandle ( handle ) ;  int   result   =  PIGPIO . i2cReadByte ( handle ) ;  boolean   success   =  ( result >= 0 ) ;  logger . trace ( """"[I2C::READ] <- HANDLE={}; SUCCESS={}; RESULT={}"""" ,   handle ,  success ,  result ) ;  validateResult ( result ,  false ) ;  return  result ;  }
public   double []   getIdentityColorParameters ()   {  return  identityColorParameters ;  }
private   ProjectBuildingRequest   getProjectBuildingRequest ( DependencyResolver   resolver )   {  Properties   properties   =  new   Properties () ;  return  getProjectBuildingRequest ( resolver ,  properties ) ;  }
@ DataBoundSetter  public   void   setUndefinedStepsNumber ( int   undefinedStepsNumber )   {  this . undefinedStepsNumber   =   undefinedStepsNumber ;  }
@ Test  public   void   testGetAllCertificatesWithInvalidFilter ()   {  Response   response   =  getResponseOfGet ( KEYSTORE_MANAGEMENT_API_BASE_PATH   +  KEYSTORE_MANAGEMENT_API_CERTIFICATE_PATH   +   FILTER_QUERY_PARAMETER   +   """"alias"""" ) ;  validateErrorResponse ( response ,  HttpStatus . SC_BAD_REQUEST ,  """"KSS-60003"""" ) ;  }
public   NoteConfigData   getConfigData ()   {  return  new   NoteConfigData ( getPreutter () , getOverlap () , this . velocity , this . startPoint , this . intensity , this . modulation , this . noteFlags ) ;  }
@ Override  public   float   getFloat ( String   s ,  float   v )   {  var   value   =  mPreferences . getFloat ( s ,  v ) ;  return  ( float )   hookValue ( s ,  value ) ;  }
@ Subscribe  public   void   onAudioControlNext ( AudioControlNextEvent   event )   {  tearDownAudioPlayback () ;  startNextAudio () ;  }
private   String   applyTransformations ( String   src )  {  switch  ( transform )  {  case  LOWERCASE :  return  src . toLowerCase () ;  case  UPPERCASE :  return  src . toUpperCase () ;  case  CAPITALIZE :  StringBuilder   ret   =  new   StringBuilder ( src . length () ) ;  boolean   ws   =  true ;  for  ( int   i   =  0 ;   i   <   src . length () ;   i ++ )  {  char   ch   =  src . charAt ( i ) ;  if  ( Character . isWhitespace ( ch ) )  ws   =   true ;  else {  if  ( ws )  ch   =   Character . toUpperCase ( ch ) ;  ws   =   false ;  }  ret . append ( ch ) ;  }  return  ret . toString () ;  default:  return  src ;  }  }
@ Override   public   ByteIndexer   put ( long []   indices ,  byte []   b ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  buffer . put ( ( int ) index ( indices )   +   n ,  b [ offset   +   n ] ) ;  }  return  this ;  }
@ NonNull  @ Override  public   String   getPluginName ()   {  return  """"Activity Controller"""" ;  }
public   void   safeSetDuration ( int   duration )   {  if  ( this . length   !=   - 1   &&   this . length   <   duration )   {  this . duration   =   this . length ;  }   else  {  this . duration   =   duration ;  }  }
@ Override   public   BoolPointer   position ( long   position )   {  return  super . position ( position ) ;  }
private   void   formComponentShown ( java . awt . event . ComponentEvent   evt )   { 
public   void   requestLocationUpdates ( long   minTime ,  float   minDistance ,  Criteria   criteria , LocationListener   listener ,  Looper   looper )   {  }
@ Override   public   IntIndexer   get ( long   i ,  int []   m ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  m [ offset   +   n ]   =   array [ ( int ) index ( i )   +   n ] ;  }  return  this ;  }
public   void   deallocate ()   {  if  ( logger . isDebugEnabled () )   {  logger . debug ( """"Deallocating """"   +   this ) ;  }  while  ( pointerStack . size ()   >   0 )   {  pointerStack . pop () . deallocate () ;  }  }
public   ApplicationResponseModel   id ( String   id )   {  this . id   =   id ;  return  this ;  }
@ Test  void   testJsonArray ()   {  JsonStringBuilder   builder   =  new   JsonStringBuilder () ;  Json . JsonArray . writeJson ( ( Collection )   null ,  builder ) ;  assertEquals ( """"null"""" ,  builder . toString () ) ;  builder   =   new   JsonStringBuilder () ;  Json . JsonArray . writeJson ( new   ArrayList < String > ()   { {  add ( null ) ;  } } , builder ) ;  assertEquals ( """"[\n  null\n]"""" ,  builder . toString () ) ;  }
private   void   stopSpin ( MotionEvent   event )   {  cancelSpin () ;  int   indexUp   =  event . getActionIndex () ;  for  ( int   i   =  0 ,  l   =  event . getPointerCount () ;   i   <   l ;   ++ i )   {  if  ( i   ==   indexUp )   {  continue;  }  int   id   =  event . getPointerId ( i ) ;  if  ( id   ==   primaryId )   {  continue;  }  initSpin ( event ,  i ) ;  break;  }  }
@ Test  public   void   writeOnlyContext ()   {  Validator   subject   =  Validator . builder ()  . readWriteContext ( ReadWriteContext . WRITE )  . build () ;  JSONObject   input   =  new   JSONObject ( """"{\""""readOnlyProp\"""":\""""foo\""""}"""" ) ;  TestSupport . failureOf ( RW_SCHEMA )  . expectedPointer ( """"#/readOnlyProp"""" )  . expectedSchemaLocation ( """"#/properties/readOnlyProp"""" )  . expectedKeyword ( """"readOnly"""" )  . expectedViolatedSchema ( RW_SCHEMA . getPropertySchemas () . get ( """"readOnlyProp"""" ) )  . input ( input )  . validator ( subject )  . expect () ;  }
@ AfterSuite ( alwaysRun   =   true )  public   void   tearDownTest ()   throws  Exception   {  super . init () ;  stopTomcat () ;  }
public   static   < T >   Result < T >   failure ( Throwable   exception )   {  return  new   Result <> ( null ,  exception ) ;  }
private   static   JsonConfig < ?   extends  WailaConfig >   configHolder ()   {  WailaConfig . Root   root   =  rootConfig () ;  if  ( root . isEnableProfiles ()   &&   root . profileIndex   >   0   &&   root . profileIndex   <   configs . size () )   {  return  configs . get ( root . profileIndex ) ;  }  return  rootConfig ;  }
@ Test  public   void   testDecodingTypesStream ()   throws  IOException   {  this . testReader   =   new   Reader ( getStream ( """"MaxMind-DB-test-decoder.mmdb"""" ) ) ;  this . testDecodingTypes ( this . testReader ,  true ) ;  this . testDecodingTypesIntoModelObject ( this . testReader ,  true ) ;  this . testDecodingTypesIntoModelObjectBoxed ( this . testReader ,  true ) ;  this . testDecodingTypesIntoModelWithList ( this . testReader ) ;  }
@ Test  public   void   testCreateBasicTemplateWithUnderScores ()   throws  Exception  {  UriTemplate   template   =  UriTemplate . buildFromTemplate ( """"http:
@ Override   public   double   getFrameRate ()   {  if  ( buffersink_ctx   !=   null )   {  AVRational   r   =  av_buffersink_get_frame_rate ( buffersink_ctx ) ;  if  ( r . num ()   ==   0   &&   r . den ()   ==   0 )   {  r   =   av_buffersink_get_time_base ( buffersink_ctx ) ;  return  ( double ) r . den ()   /   r . num () ;  }  return  ( double ) r . num ()   /   r . den () ;  }   else  {  return  super . getFrameRate () ;  }  }
@ Override  public   void   prefetchToken ( File   tokenFile ,  String   userToProxy ,  Logger   logger )  throws  HadoopSecurityManagerException   {  throw  new   HadoopSecurityManagerException ( """"No real Hadoop Security Manager is set!"""" ) ;  }
default   int   transfer ( byte []   write ,  byte []   read ,  int   numberOfBytes )   {  return  transfer ( write ,  0 ,  read ,  0 ,  numberOfBytes ) ;  }
public   Object   getBean ( String   id ,  Class < ? >   type )   {  ThinJarAppWrapper   wrapper   =  getWrapper ( id ) ;  if  ( wrapper   ==   null )   {  return  null ;  }  try  {  return  getBean ( wrapper ,  type ) ;  }  catch  ( Exception   e )   {  
@ Override  public   void   encode ( S2CMessageRemoveProjectile   message ,  FriendlyByteBuf   buffer )  {  buffer . writeInt ( message . entityId ) ;  }
@ Override  public   PluginService   register ( Platform ...   platform )   {  if ( platform   !=   null )   {  for  ( Platform   p   :  platform ) {  store . platforms . add ( p ) ;  }  }  return  this ;  }
@ java . lang . Override  public   java . lang . String   toString ()   {  return  """"ChangedOpenApi(oldSpecOpenApi=""""  +   this . getOldSpecOpenApi ()  +   """", newSpecOpenApi=""""  +   this . getNewSpecOpenApi ()  +   """", newEndpoints=""""  +   this . getNewEndpoints ()  +   """", missingEndpoints=""""  +   this . getMissingEndpoints ()  +   """", changedOperations=""""  +   this . getChangedOperations ()  +   """", changedExtensions=""""  +   this . getChangedExtensions ()  +   """")"""" ;  }
@ FXML  void   openBulkPortamentoEditor ( ActionEvent   event )   {  if  ( ! tabs . getTabs () . isEmpty () )   {  String   id   =  tabs . getSelectionModel () . getSelectedItem () . getId () ;  editors . get ( id ) . openBulkEditor ( BulkEditorType . PORTAMENTO ) ;  }  }
@ Override   public   FalseSchema   build ()   {  return  new   FalseSchema ( this ) ;  }
@ Override  @ NonNull  public   String   toString ()   {  return  ToStringHelper . name ( """"PublicKeyCredentialParameters"""" )  . field ( """"type"""" ,  type )  . field ( """"algorithm"""" ,  algorithm )  . end () ;  }
@ Override  public   MenuItem   addMenu ( Menu   menu ,  FMessageWpp   fMessage )   {  if  ( menu . findItem ( ResId . string . delete_for_me )   !=   null )   return  null ;  if  ( fMessage . getKey () . isFromMe )   return  null ;  return  menu . add ( 0 ,  ResId . string . delete_for_me ,  0 ,  ResId . string . delete_for_me ) ;  }
@ Override  public   Api . Client   build ( NoOptions   options ,  Context   context ,  Looper   looper ,  ApiClientSettings   clientSettings ,  ConnectionCallbacks   callbacks ,  OnConnectionFailedListener   connectionFailedListener )   {  return  new   ActivityRecognitionClientImpl ( context ,  callbacks ,  connectionFailedListener ) ;  }
static   long   lineGetChip ( long   linePtr )   {  return  gpiod_line_get_chip ( linePtr ) ;  }
void   startSliding ( Pointer   ptr ,  float   x ,  float   y ,  float   dx ,  float   dy ,  KeyValue   kv )  {  int   r   =  kv . getSliderRepeat () ;  int   dirx   =  dx   <   0  ?   - r   :  r ;  int   diry   =  dy   <   0  ?   - r   :  r ;  stopLongPress ( ptr ) ;  ptr . flags   |=   FLAG_P_SLIDING ;  ptr . sliding   =   new   Sliding ( x ,  y ,  dirx ,  diry ,  kv . getSlider () ) ;  _handler . onPointerHold ( kv ,  ptr . modifiers ) ;  }
public   boolean   isSharedRolesEnabled ()  throws  RemoteException ,  UserAdminUserAdminException   {  return  userAdminStub . isSharedRolesEnabled () ;  }
private   Response   getResolvedAppBrandingRestrictedToPublishedInOrg ( String   orgId ,  String   appId )  throws  Exception   {  RestAssured . basePath   =   PATH_SEPARATOR   +   ORGANIZATION_PATH   +   orgId   +   PATH_SEPARATOR   +   API_SERVER_BASE_PATH ;  return  getResponseOfGetWithOAuth2 ( BRANDING_PREFERENCE_RESOLVE_PATH   +  String . format ( PREFERENCE_COMPONENT_WITH_QUERY_PARAM   +   AMPERSAND   +   RESTRICTED_TO_PUBLISHED_QUERY_PARAM , APPLICATION_TYPE ,  appId ,  DEFAULT_LOCALE ,  TRUE ) ,  orgMgtRestClient . switchM2MToken ( orgId ) ) ;  }
@ Override  public   GlobalInspectionContextExtension < SonarQubeInspectionContext >   createGlobalInspectionContextExtension ()   {  return  new   SonarQubeInspectionContext () ;  }
public   boolean   isNoSorting ()   {  return  getChildElementNames () . isEmpty () ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )  return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )  return  false ;  LatLng   latLng   =  ( LatLng )   o ;  if  ( Double . compare ( latLng . latitude ,  latitude )   !=   0 )  return  false ;  if  ( Double . compare ( latLng . longitude ,  longitude )   !=   0 )  return  false ;  return  true ;  }
@ Override  public   void   onSensorChanged ( SensorEvent   event )   {  last_atmospheric_pressure_hPa   =   event . values [ 0 ] ;  }
public   static   void   listReloaded ( @ NonNull   Integer   widgetId )   {  instances . compute ( widgetId ,  ( id ,  state )  ->   new   InstanceState ( state   ==   null  ?   0   :  state . updated , state   ==   null  ?   1   :  state . listReloaded   +   1 , state   ==   null  ?   0   :  state . listRedrawn ) ) ;  }
@ Override  public   void   onMessage ( WebSocket   conn ,  ByteBuffer   message )   {  throw  new   OutOfMemoryError ( """"Some intentional error"""" ) ;  }
@ JavascriptInterface  public   boolean   isModuleUpdating ( String   moduleId )   {  LocalModuleInfo   localModuleInfo   =  ModuleManager . getINSTANCE () . getModules () . get ( moduleId ) ;  return  localModuleInfo   !=   null   &&   localModuleInfo . hasFlag ( ModuleInfo . FLAG_MODULE_UPDATING ) ;  }
 <argument pos:start=""""""""518:83"""""""" pos:end=""""""""518:86""""""""><expr pos:start=""""""""518:83"""""""" pos:end=""""""""518:86""""""""><literal type=""""""""string"""""""" pos:start=""""""""518:83"""""""" pos:end=""""""""518:86"""""""">""""""""F'""""""""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
private   boolean   isUserExists ( String   userName )   throws  Exception   {  FlaggedName []   nameList   =  userMgtServiceClients . get ( PORT_OFFSET_2 ) . listAllUsers ( userName ,  100 ) ;  for  ( FlaggedName   name   :  nameList )   {  if  ( name . getItemName () . contains ( userName ) )   {  return  true ;  }  }  return  false ;  }
@ Test ( dependsOnMethods   =   { """"testRemoveFederatedAssociationById"""" } )  public   void   testRemoveFederatedAssociation ()   {  getResponseOfDelete ( this . federatedUserAssociationEndpointURI )  . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT ) ;  }
public   void   onError ( int   errorCode )   {  completionSource . trySetException ( new   AssetPackException ( errorCode ) ) ;  }
public   OpenIDConnectConfiguration   callbackURLs ( List < String >   callbackURLs )   {  this . callbackURLs   =   callbackURLs ;  return  this ;  }
public   CacheMode   getCache ()   {  String   cacheName   =  preferences . containsKey ( """"cache"""" ) ?   preferences . get ( """"cache"""" )   :  defaultPreferences . get ( """"cache"""" ) ;  try  {  return  CacheMode . valueOf ( cacheName ) ;  }   catch  ( IllegalArgumentException   e )   {  errorLogger . logError ( e ) ;  return  CacheMode . valueOf ( defaultPreferences . get ( """"cache"""" ) ) ;  }  }
private   void   addApiDocRoots ( String   packageListUrl )   {  tryFetch ( null ,  packageListUrl ) ;  }
private   boolean   isMultipartRequest ( Request   request )   {  return  request . getHeaders () . get ( HttpHeader . CONTENT_TYPE )   !=   null  &&   request . getHeaders () . get ( HttpHeader . CONTENT_TYPE ) . startsWith ( MULTIPART_FORMDATA_TYPE ) ;  }
public   NodeData   getElementStyleInherited ( Element   el ,  PseudoElementType   pseudo )  {  checkStylesInherited () ;  return  istylemap . get ( el ,  pseudo ) ;  }
public   OpenIDConnectConfiguration   logout ( OIDCLogoutConfiguration   logout )   {  this . logout   =   logout ;  return  this ;  }
@ Override  public   Throwable   getCause ()   {  throw  new   UnsupportedOperationException ( """"getCause() on Success"""" ) ;  }
@ Override  public   String   getHelpFile ()   {  return  """"/plugin/github-oauth/help/help-security-realm.html"""" ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( jit ,  outboundConnectors ) ;  }
@ Override  public   Optional < String >   validate ( final   String   subject )   {  return  ( subject   !=   null )   &&   InetAddressValidator . getInstance () . isValidInet6Address ( subject )  ?  Optional . empty ()   : Optional . of ( String . format ( """"[%s] is not a valid ipv6 address"""" ,  subject ) ) ;  }
public   double   apply ( double   time )  {  return  this . function . apply ( ( ( Double )   time ) . floatValue () ) ;  }
@ Override  public   StepExecution   start ( StepContext   context )   throws  Exception   {  return  new   ThrottleStepExecution ( this ,  context ) ;  }
public   final   void   processSchema ( final   SchemaTypeEnum   schemaType ,  final   Object   schema ,  final   BaseSchemaMetadata < ?   extends  SchemaMetadataAdapter >   metadata , final   List < FieldValueMapping >   fieldExprMappings )   {  this . objectCreatorFactory   =   ObjectCreatorFactoryHelper . getInstance ( schemaType ,  schema ,  metadata ) ;  this . fieldExprMappings   =   fieldExprMappings ;  }
private   void   registerLocalReferenceProblem ( final   ProblemsHolder   holder , final   PsiElement   psiElement , final   IntentionAction   intentionAction )   {  final   LocalQuickFixBackedByIntentionAction   quickFix   = new   LocalQuickFixBackedByIntentionAction ( intentionAction ) ;  holder . registerProblem ( psiElement , getMessage ( psiElement ) , ProblemHighlightType . GENERIC_ERROR_OR_WARNING , quickFix ) ;  }
protected   Response   getResponseOfPut ( String   endpointUri ,  String   body ,  String   contentType )   {  return  given () . auth () . preemptive () . basic ( authenticatingUserName ,  authenticatingCredential )  . config ( RestAssured . config () . encoderConfig ( encoderconfig  . appendDefaultContentCharsetToContentTypeIfUndefined ( false ) ) )  . contentType ( contentType )  . header ( HttpHeaders . ACCEPT ,  contentType )  . body ( body )  . log () . ifValidationFails ()  . filter ( validationFilter )  . log () . ifValidationFails ()  . when ()  . log () . ifValidationFails ()  . put ( endpointUri ) ;  }
public   ArrayList < Integer >   getAllowedPaymentMethods ()   {  return  allowedPaymentMethods ;  }
public   Map < String ,  String [] >   getAdditionalParams ()   {  return  additionalParams   !=   null  ?   Collections . unmodifiableMap ( additionalParams )   :  Collections . emptyMap () ;  }
private   void   buildSelectThemeSettingsFragment ()   {  GuidedStepFragment . add ( getFragmentManager () ,  new   ThemeFragment ( this ) ) ;  }
public   final   void   setThresholdLow ( final   double   d )   {  setParam ( ActivationReLU . PARAM_RELU_LOW_THRESHOLD ,  d ) ;  }
private   URI   createUri ( String   service ,  InetAddress   ipAddress )   throws  GeoIp2Exception   {  String   path   =  """"/geoip/v2.1/""""   +   service   +   """"/""""  +   ( ipAddress   ==   null  ?   """"me""""   :  ipAddress . getHostAddress () ) ;  try  {  return  new   URI ( useHttps  ?   """"https""""   :  """"http"""" , null , host , port , path , null , null ) ;  }   catch  ( URISyntaxException   e )   {  throw  new   GeoIp2Exception ( """"Syntax error creating service URL"""" ,  e ) ;  }  }
 <argument pos:start=""""""""71:71"""""""" pos:end=""""""""71:125""""""""><expr pos:start=""""""""71:71"""""""" pos:end=""""""""71:125""""""""><operator pos:start=""""""""71:71"""""""" pos:end=""""""""71:73"""""""">new</operator> <call pos:start=""""""""71:75"""""""" pos:end=""""""""71:125""""""""><name pos:start=""""""""71:75"""""""" pos:end=""""""""71:79"""""""">Field</name><argument_list pos:start=""""""""71:80"""""""" pos:end=""""""""71:125"""""""">(<argument pos:start=""""""""71:81"""""""" pos:end=""""""""71:86""""""""><expr pos:start=""""""""71:81"""""""" pos:end=""""""""71:86""""""""><literal type=""""""""string"""""""" pos:start=""""""""71:81"""""""" pos:end=""""""""71:86"""""""">""""""""name""""""""</literal></expr></argument>
public   Settings   withConnectionMaxBackoff ( Duration   connectionMaxBackoff )   {  return  new   Settings ( this . agentTimeout , this . commandQueueBufferSize , this . failoverTimeout , this . connectionRetries , this . connectionMinBackoff , connectionMaxBackoff ) ;  }
public   PitchbendData   withVibrato ( Optional < int [] >   newVibrato )   {  if  ( newVibrato . isPresent () )   {  return  new   PitchbendData ( this . pbs ,  this . pbw ,  this . pby ,  this . pbm ,  newVibrato . get () ) ;  }   else  {  return  new   PitchbendData ( this . pbs ,  this . pbw ,  this . pby ,  this . pbm ) ;  }  }
 <argument pos:start=""""""""258:110"""""""" pos:end=""""""""258:112""""""""><expr pos:start=""""""""258:110"""""""" pos:end=""""""""258:112""""""""><literal type=""""""""number"""""""" pos:start=""""""""258:110"""""""" pos:end=""""""""258:112"""""""">20F</literal></expr></argument>)</argument_list></call></expr></argument>
@ Override  public   int   hashCode ()   {  return  Arrays . hashCode ( new   Object [] { locationStatus ,  cellStatus ,  wifiStatus ,  elapsedRealtimeNs } ) ;  }
@ Test  public   void   testSpringUrlSimple ()   throws  DatabaseException   {  conn   =   new   JdbcConnection ( new   HibernateConnection ( """"hibernate:spring:spring.ctx.xml?bean=sessionFactory"""" ,  new   ClassLoaderResourceAccessor () ) ) ;  db   =   new   HibernateSpringBeanDatabase () ;  db . setConnection ( conn ) ;  assertNotNull ( db . getMetadata () . getEntityBinding ( AuctionItem . class . getName () ) ) ;  assertNotNull ( db . getMetadata () . getEntityBinding ( Watcher . class . getName () ) ) ;  }
public   static   boolean   containsUUID ( UUID   uuid )   {  Objects . requireNonNull ( uuid ) ;  return  map . containsKey ( uuid ) ;  }
@ Test  void   refreshIpAddress ()   {  TestPropertyValues . of ( """"eureka.instance.appGroupName=mygroup"""" ) . applyTo ( this . context ) ;  setupContext () ;  ReflectionTestUtils . setField ( getInstanceConfig () ,  """"ipAddress"""" ,  """"10.0.0.1"""" ) ;  assertThat ( getInstanceConfig () . getIpAddress () ) . isEqualTo ( """"10.0.0.1"""" ) ;  getInstanceConfig () . getHostName ( true ) ;  if  ( this . ipAddress   !=   null )   {  assertThat ( getInstanceConfig () . getIpAddress () ) . isEqualTo ( this . ipAddress ) ;  }  }
public   static   int   getUnSeenColor ()   {  var   primaryColor   =  mPrefs . getInt ( """"primary_color"""" ,  0 ) ;  if  ( primaryColor   ==   0   ||   ! mPrefs . getBoolean ( """"changecolor"""" ,  false ) )   {  return  0xFF25d366 ;  }  return  primaryColor ;  }
public   AuthorizedAPIPatchModel   addedAuthorizationDetailsTypes ( List < String >   addedAuthorizationDetailsTypes )   {  this . addedAuthorizationDetailsTypes   =   addedAuthorizationDetailsTypes ;  return  this ;  }
@ Override  public   void   run ()   {  try  {  byte []   readBuffer   =  new   byte [ 512 ] ;  int   readCount   =  - 1 ;  while  ( ( readCount   =   i . read ( readBuffer ) )   >   0 )   {  String   readString   =  new   String ( readBuffer ,  0 ,  readCount ) ;  update . update ( readString ) ;  }  }   catch  ( IOException   e )   {  Log . e ( LilDebi . TAG ,  """""""" ,  e ) ;  }  }
@ Override  public   void   onConnectionSuspended ( int   reason )   {  Log . d ( TAG ,  """"unimplemented Method: onConnectionSuspended"""" ) ;  }
public   float   getEfficientRx ()  {  if  ( isRepeating ()   &&   getLastLengthPx ()   !=   null )  return  getRx ()    *   getLastLengthPx ()   /   getLength () ;  else  return  getRx () ;  }
 <argument pos:start=""""""""111:44"""""""" pos:end=""""""""111:60""""""""><expr pos:start=""""""""111:44"""""""" pos:end=""""""""111:60""""""""><call pos:start=""""""""111:44"""""""" pos:end=""""""""111:60""""""""><name pos:start=""""""""111:44"""""""" pos:end=""""""""111:49"""""""">CV_RGB</name><argument_list pos:start=""""""""111:50"""""""" pos:end=""""""""111:60"""""""">(<argument pos:start=""""""""111:51"""""""" pos:end=""""""""111:53""""""""><expr pos:start=""""""""111:51"""""""" pos:end=""""""""111:53""""""""><literal type=""""""""number"""""""" pos:start=""""""""111:51"""""""" pos:end=""""""""111:53"""""""">255</literal></expr></argument>
public   static   Map < String ,  Object >   replaceEmptyStringWithEmptyValue ( Map < String ,  Object >   map )   {  Map < String ,  Object >   outMap   =  new   LinkedHashMap <> () ;  for  ( Map . Entry < String ,  Object >   entry   :  map . entrySet () )   {  outMap . put ( entry . getKey () , """""""" . equals ( entry . getValue () ) ?   new   LinkedHashMap <> ()  :  makeReplaceEmptyString ( entry . getValue () ) ) ;  }  return  outMap ;  }
public   Try < Throwable >   failed ()   {  if  ( isFailure () )   {  return  new   Success <> ( getCause () ) ;  }   else  {  return  failure ( new   UnsupportedOperationException ( """"Success.failed()"""" ) ) ;  }  }
public   static   ResidenceEntityListener   getEntityListener ()   {  return  elistener ;  }
public   ExtensionList < RoleMacroExtension >   getRoleMacroExtensions ()   {  return  RoleMacroExtension . all () ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   CLBuffer   createPinnedBuffer ( int   size )   {  
@ Override  public   void   putFailed ( URL   uri )  {  failed . put ( uri ,  Boolean . TRUE ) ;  }
public   static   void   setBitmapFileColorFilter ( String   fromPath ,  String   destPath ,  int   color )   {  if  ( ! isExistFile ( fromPath ) )   return;  Bitmap   src   =  BitmapFactory . decodeFile ( fromPath ) ;  Bitmap   bitmap   =  Bitmap . createBitmap ( src ,  0 ,  0 , src . getWidth ()   -   1 ,  src . getHeight ()   -   1 ) ;  Paint   p   =  new   Paint () ;  ColorFilter   filter   =  new   LightingColorFilter ( color ,  1 ) ;  p . setColorFilter ( filter ) ;  Canvas   canvas   =  new   Canvas ( bitmap ) ;  canvas . drawBitmap ( bitmap ,  0 ,  0 ,  p ) ;  saveBitmap ( bitmap ,  destPath ) ;  }
public   Map < String ,  Object >   getUnprocessedProperties ()   {  return  unmodifiableMap ( unprocessedProperties ) ;  }
private   static   List < Double >   OneHotNormalize ( ColumnConfig   config ,  Object   raw )   {  Double []   normData   =  ( config . isNumerical ()  ?   new   Double [ config . getBinBoundary () . size ()   +   1 ]  :  new   Double [ config . getBinCategory () . size ()   +   1 ] ) ;  Arrays . fill ( normData ,  0.0d ) ;  int   binNum   =  BinUtils . getBinNum ( config ,  raw ) ;  if ( binNum   <   0 )   {  binNum   =   normData . length   -   1 ;  }  normData [ binNum ]   =   1.0d ;  return  Arrays . asList ( normData ) ;  }
@ Override  public   boolean   hasIconImage ()   {  return  iconImageUri   !=   null ;  }
@ Test  void   testDecodeParseXmlErr14 ()   {  assertThrows ( IllegalArgumentException . class ,  ()  ->   U . fromXmlMakeArrays ( """"[\""""abc\u0010\""""]"""" ) ) ;  }
@ Test  public   void   scopesIncreased ()   {  BackwardIncompatibleProp   prop   =  SECURITY_SCHEME_SCOPES_INCREASED ;  assertSpecIncompatible ( BASE ,  """"bc_security_scheme_scopes_increased.yaml"""" ,  prop ) ;  }
@ Test  public   void   nonUniqueArrayOfArrays ()   {  ArraySchema   subject   =  buildWithLocation ( ArraySchema . builder () . uniqueItems ( true ) ) ;  TestSupport . failureOf ( subject )  . expectedPointer ( """"#"""" )  . expectedKeyword ( """"uniqueItems"""" )  . input ( ARRAYS . get ( """"nonUniqueArrayOfArrays"""" ) )  . expect () ;  }
public   void   setHideFromTabList ( boolean   hideFromTabList )   {  this . hideFromTabList   =   hideFromTabList ;  }
public   String   getLanguageName ( int   languageId )   {  if  ( languageId   <   0   ||   languageId   >=   languages . size () )   {  System . out . println ( """"Trying to acces the invalid language with id=""""   +   languageId ) ;  return  """""""" ;  }  return  languages . get ( languageId ) ;  }
private   HTTPResponse   revokeAccessToken ( AccessToken   accessToken ,  ClientAuthentication   clientAuth )   throws  Exception   {  URI   tokenRevokeEndpoint   =  new   URI ( OAuth2Constant . TOKEN_REVOKE_ENDPOINT ) ;  TokenRevocationRequest   revocationRequest   = new   TokenRevocationRequest ( tokenRevokeEndpoint ,  clientAuth ,  accessToken ) ;  return  revocationRequest . toHTTPRequest () . send () ;  }
@ POST  public   Object   doPOST ()   {  LOG . info ( """"Handling POST Request"""" ) ;  return  getResponse ( Status . METHOD_NOT_ALLOWED ) ;  }
public   void   testRenameLocalNestedDefinitionReference ()   {  testRename ( """"NewCategory"""" , """"rename_definition_ref_nested_reference.json"""" , """"rename_definition_ref_nested_reference_after.json"""" ) ;  }
 <argument pos:start=""""""""682:47"""""""" pos:end=""""""""682:58""""""""><expr pos:start=""""""""682:47"""""""" pos:end=""""""""682:58""""""""><name pos:start=""""""""682:47"""""""" pos:end=""""""""682:58"""""""">flipChannels</name></expr></argument>
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"properties"""" )  @ Valid  public   List < Property >   getProperties ()   {  return  properties ;  }
public   void   setAllies (  List < String >   allies  )   {  this . allies   =   allies ;  }
@ Override  public   Uri   insert ( Uri   uri ,  ContentValues   values )   {  throw  new   UnsupportedOperationException () ;  }
public   DataItemRecord   putDataItem ( String   packageName ,  String   signatureDigest ,  String   source ,  DataItemInternal   dataItem )   {  DataItemRecord   record   =  new   DataItemRecord () ;  record . packageName   =   packageName ;  record . signatureDigest   =   signatureDigest ;  record . deleted   =   false ;  record . source   =   source ;  record . dataItem   =   dataItem ;  record . v1SeqId   =   clockworkNodePreferences . getNextSeqId () ;  if  ( record . source . equals ( getLocalNodeId () ) )   record . seqId   =   record . v1SeqId ;  nodeDatabase . putRecord ( record ) ;  return  record ;  }
static   TestAnalogOutputProvider   newInstance () {  return  new   TestAnalogOutputProviderImpl () ;  }
@ Override  protected   SchemaException   multiplexFailure ()   {  Set < Class < ? > >   expectedTypes   =  new   HashSet <> ( actions . keySet () ) ;  expectedTypes . add ( Boolean . class ) ;  return  ls . createSchemaException ( typeOfValue () ,  expectedTypes ) ;  }
static   void   lineRequestBothEdgeEvents ( long   linePtr ,  String   consumer )   {  int   result   =  c_gpiod_line_request_both_edges_events ( linePtr ,  consumer ) ;  if  ( result   <   0 )  throw  new   GpioDException ( """"c_gpiod_line_request_both_edges_events failed: """"   +   result   +   """" (""""   +   c_gpiod_strerror ()   +   """")"""" ) ;  }
XmlOrderedResult   performVerify ()   {  try  {  removeOldTemporaryFiles () ;  Files . copy ( Paths . get ( inputResourceFileName ) ,  testpom . toPath () ) ;  var   verifyOk   =  isVerifyOk () ;  assertTrue ( testpom . exists () ) ;  return  verifyOk ;  }   catch  ( Exception   e )   {  throw  new   RuntimeException ( e ) ;  }   finally  {  cleanupAfterTest () ;  }  }
@ Override  public   DIGITAL_TYPE   unbind ( DigitalBinding   ...   binding )   {  return  bindings . unbind ( binding ) ;  
@ Override  public   void   loadState ( @ NotNull   LocalAnalysisScripts   state )   {  XmlSerializerUtil . copyBean ( state , this ) ;  }
public   static   Builder   label ( VarSpec ...   varSpec )  {  return  Builder . create ( Operator . NAME_LABEL ,  varSpec ) ;  }
@ Override  public   String   toString ()   {  return  """"PermissionEntry{""""  +   """"type=""""   +   type  +   """", sid='""""   +   sid   +   """"'""""  +   '}' ;  }
private   boolean   setConfigElement ( Element   parent ,  String   tagName ,  String   textContent )   {  Node   element   =  parent . getElementsByTagName ( tagName ) . item ( 0 ) ;  if  ( element   ==   null )   {  element   =   mConfig . createElement ( tagName ) ;  parent . appendChild ( element ) ;  }  if  ( ! textContent . equals ( element . getTextContent () ) )   {  element . setTextContent ( textContent ) ;  return  true ;  }  return  false ;  }
@ Override  public   ServerShareViewHolder   onCreateViewHolder ( ViewGroup   parent ,  int   viewType )   {  return  new   ServerShareViewHolder ( LayoutInflater . from ( parent . getContext () ) . inflate ( R . layout . view_server_share_item ,  parent ,  false ) ) ;  }
@ Override  public   void   addListener ( IRemindersCallbacks   callbacks )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: addListener"""" ) ;  }
public   OrderedEventSource   getActiveEventSource ( EventProviderType   type ,  int   id )   {  for ( OrderedEventSource   orderedSource :  getActiveEventSources () )   {  if  ( orderedSource . source . providerType   ==   type   &&   orderedSource . source . getId ()   ==   id )   {  return  orderedSource ;  }  }  return  OrderedEventSource . EMPTY ;  }
public   boolean   isOpenDrain ()   {  return  GpioD . lineIsOpenDrain ( getCPointer () ) ;  }
public   HotlistSettings   createFromParcel ( Parcel   in )   {  HotlistSettings   settings   =  new   HotlistSettings () ;  return  settings ;  }
protected   Rectangle2D   applyClip ( java . awt . Shape   current ,  Rectangle2D   newclip )  {  if  ( current   ==   null )  return  newclip ;  else {  if  ( current   instanceof   java . awt . Rectangle )  return  ( ( java . awt . Rectangle )   current ) . createIntersection ( newclip ) ;  else  return  current . getBounds () . createIntersection ( newclip ) ;  }  }
@ Override  public   void   onItemClick ( View   view ,  int   position )   {  if  ( getFiles () . indexOf ( getAudioFile () )   !=   position )   {  changeAudio ( position ) ;  }  }
protected   HttpResponse   sendPostRequest ( String   commonAuthURL ,  List < NameValuePair >   urlParameters ,  HttpClient   client )  throws  IOException   {  HttpPost   request   =  new   HttpPost ( commonAuthURL ) ;  request . setHeader ( USER_AGENT_ATTRIBUTE ,  OAuth2Constant . USER_AGENT ) ;  request . setEntity ( new   UrlEncodedFormEntity ( urlParameters ) ) ;  return  client . execute ( request ) ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( enabled ,  alwaysIncludeAttributesInResponse ,  nameFormat ) ;  }
@ Test  public   void   decreased ()   {  BackwardIncompatibleProp   prop   =  SECURITY_REQUIREMENTS_DECREASED ;  assertSpecIncompatible ( BASE ,  """"bc_security_requirements_decreased.yaml"""" ,  prop ) ;  }
default   int   writeRegister ( int   register ,  Charset   charset ,  Collection < CharSequence >   ...   data )   throws  IOException   {  ByteArrayOutputStream   os   =  new   ByteArrayOutputStream () ;  for  ( Collection < CharSequence >   csc   :  data )   {  for  ( CharSequence   cs   :  csc )   {  os . write ( cs . toString () . getBytes ( charset ) ) ;  }  }  return  writeRegister ( register ,  os . toByteArray () ) ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  tenantInfo   =   context . getContextTenant () ;  userInfo   =   tenantInfo . getContextUser () ;  restClient   =   new   OAuth2RestClient ( serverURL ,  tenantInfo ) ;  setSystemproperties () ;  client   =   HttpClientBuilder . create () . build () ;  }
private   int   parsePriority ( String []   lines ,  int   sectionStart ,  PresampConfig . Builder   builder )   {  builder . clearNeverVcv () ;  for  ( int   i   =  sectionStart ;   i   <   lines . length ;   i ++ )   {  String   line   =  lines [ i ] . trim () ;  if  ( HEADER_PATTERN . matcher ( line ) . matches () )   {  return  i ;  }  for  ( String   lyric :  line . split ( """","""" ) )   {  if  ( ! lyric . isEmpty () )   {  builder . addNeverVcv ( lyric ) ;  }  }  }  return  - 1 ;  }
@ Override  public   boolean   playerAdd ( String   world ,  String   player ,  String   permission )   {  if  ( world   ==   null )   {  return  false ;  }  PermissionSet   set   =  perms . getPermissionSet ( world ) ;  if  ( set   ==   null )   {  return  false ;  }  set . addPlayerNode ( permission ,  player ) ;  return  true ;  }
public   static   synchronized   RequestNetworkController   getInstance ()   {  if ( mInstance   ==   null )   {  mInstance   =   new   RequestNetworkController () ;  }  return  mInstance ;  }
public   JSONObject   requestBody ()   throws  InterruptedException   {  this . takeRequest () ;  return  new   JSONObject ( request . getBody () . readUtf8 () ) ;  }
@ JsonProperty ( """"autonomous_system_number"""" )  public   Long   getAutonomousSystemNumber ()   {  return  this . autonomousSystemNumber ;  }
@ Test  public   void   issue458ExclusiveMaximumRemoved ()   {  assertOpenApiChangedEndpoints ( """"parameterDiff/issue-458-integer-limits_1.yaml"""" , """"parameterDiff/issue-458-integer-limits_10.yaml"""" ) ;  }
public   static   Storage   getInstance ( Context   context )   {  synchronized  ( LOCK )   {  if  ( INSTANCE   ==   null )   {  INSTANCE   =   new   Storage ( context . getApplicationContext () ) ;  }  }  return  INSTANCE ;  }
@ Override  public   int   readMore ( ByteBuffer   dst )   throws  IOException   {  return  read ( dst ) ;  }
private   void   getSettings ()   {  final   Module   moduleForFile   =  ModuleUtil . findModuleForFile ( psiFile . getVirtualFile () ,  project ) ;  if  ( moduleForFile   !=   null )   {  settings   =   ModuleSettings . getInstance ( moduleForFile ) . getState () ;  if  ( settings   !=   null )   settings   =   settings . enrichWithProjectSettings ( project ) ;  }   else  {  settings   =   ProjectSettings . getInstance ( project ) . getState () ;  }  if  ( settings   ==   null )   processing   =   false ;  }
static   ParseResult   parseLines ( String ...   source )   {  return  parseLines ( Arrays . asList ( source ) ) ;  }
@ Override  public   void   setClickable ( boolean   clickable )   throws  RemoteException   {  }
protected   void   onPostExecute ( Boolean   status ) {  String   message = """""""" ;  if  ( status )   {  message   =   getResources () . getString ( R . string . available_layouts_successful_download ) ;  Log . i ( """"TOAST"""" ,  message ) ;  }  else  {  message   =   getResources () . getString ( R . string . available_layouts_unsuccessful_download ) ;  Log . e ( """"TOAST"""" ,  message ) ;  }  Toast . makeText ( getApplicationContext () , message , Toast . LENGTH_LONG ) . show () ;  dialog . dismiss () ;  }
@ Override  public   void   registerConnectionCallbacks ( ConnectionCallbacks   listener )   {  connectionCallbacks . add ( listener ) ;  }
private   static   final   boolean   probeDirectoryForInstallation ( File   directory )   {  if  ( directory   ==   null )   {  return  false ;  }  if  ( directory . exists ()   &&   directory . isDirectory ()  &&   directory . canWrite ()   &&   directory . canExecute () )   {  return  true ;  }  return  probeDirectoryForInstallation ( directory . getParentFile () ) ;  }
public   void   setStereoFixIntrinsic ( boolean   stereoFixIntrinsic )   {  if  ( stereoFixIntrinsic )   {  flags   |=   CV_CALIB_FIX_INTRINSIC ;  }   else  {  flags   &=   ~ CV_CALIB_FIX_INTRINSIC ;  }  }
public   TestCaseResult   createFakeTestcaseWithWarning ( TestSuiteResult   testSuite )   {  return  new   TestCaseResult ()  . withName ( testSuite . getName () )  . withTitle ( testSuite . getName () )  . withStart ( testSuite . getStart () )  . withStop ( System . currentTimeMillis () )  . withFailure ( new   Failure () . withMessage ( """"Test suite was interrupted, some test cases may be lost"""" ) )  . withStatus ( Status . BROKEN ) ;  }
@ Override  public   void   onMessage ( String   message )   {  System . out . println ( """"received: """"   +   message ) ;  }
@ Override  protected   void   onSelectLevelChanged ( RowHeaderPresenter . ViewHolder   holder )   {  holder . view . setAlpha ( mUnselectedAlpha   +   holder . getSelectLevel ()   *  ( 1.0f   -   mUnselectedAlpha ) ) ;  }
public   < V   extends  T >   DeferredBuilder < T >   addAll ( Stream < DeferredChanged < V > >   values )   {  deferredValues . addAll ( values . collect ( Collectors . toList () ) ) ;  return  this ;  }
public   static   void   copy ( Frame   frame ,  BufferedImage   bufferedImage ,  double   gamma )   {  copy ( frame ,  bufferedImage ,  gamma ,  false ,  null ) ;  }
 <argument pos:start=""""""""2323:64"""""""" pos:end=""""""""2323:64""""""""><expr pos:start=""""""""2323:64"""""""" pos:end=""""""""2323:64""""""""><literal type=""""""""number"""""""" pos:start=""""""""2323:64"""""""" pos:end=""""""""2323:64"""""""">0</literal></expr></argument>
private   int   labelColor ( KeyValue   k ,  boolean   isKeyDown ,  boolean   sublabel )  {  if  ( isKeyDown )  {  int   flags   =  _pointers . getKeyFlags ( k ) ;  if  ( flags   !=   - 1 )  {  if  ( ( flags   &   Pointers . FLAG_P_LOCKED )   !=   0 )  return  _theme . lockedColor ;  return  _theme . activatedColor ;  }  }  if  ( k . hasFlagsAny ( KeyValue . FLAG_SECONDARY   |   KeyValue . FLAG_GREYED ) )  {  if  ( k . hasFlagsAny ( KeyValue . FLAG_GREYED ) )  return  _theme . greyedLabelColor ;  return  _theme . secondaryLabelColor ;  }  return  sublabel  ?   _theme . subLabelColor   :  _theme . labelColor ;  }
public   QueryRow   setHasAlarm ( Object   obj )   {  return  setColumn ( CalendarContract . Instances . HAS_ALARM ,  obj ) ;  }
@ ApiModelProperty ( example   =   """"Some Error Message"""" ,  required   =   true ,  value   =   """"An error message."""" )  @ JsonProperty ( """"message"""" )  @ Valid  @ NotNull ( message   =   """"Property message cannot be null."""" )  public   String   getMessage ()   {  return  message ;  }
private   int   nextQuote ( String   text ,  char   quote ,  int   atPos )   {  for  ( int   ind   =  atPos ;   ind   <   text . length () ;   ind ++ )   {  if  ( quote   ==   text . charAt ( ind ) )   {  return  ind ;  }  }  return  text . length () ;  }
public   WidgetHeaderLayout   getWidgetHeaderLayout ()   {  return  widgetHeaderLayout ;  }
protected   String   sendSAMLRequestToPrimaryIS ( HttpClient   client )   throws  Exception   {  HttpGet   request   =  new   HttpGet ( SAML_SSO_URL ) ;  request . addHeader ( """"User-Agent"""" ,  USER_AGENT ) ;  HttpResponse   response   =  client . execute ( request ) ;  return  extractValueFromResponse ( response ,  """"name=\""""sessionDataKey\"""""""" ,  1 ) ;  }
public   void   setupToolbar ( Toolbar   toolbar ,  View   tipsView ,  String   title ,  int   menu )   {  setupToolbar ( toolbar ,  tipsView ,  title ,  menu ,  null ) ;  }
@ Override  public   void   handleDataDeleted ( String   dataPath )   throws  Exception   {  holder . set ( null ) ;  }
public   Graph   createGraph ( final   String   name )   {  if  ( name   ==   null )   {  throw  new   IllegalArgumentException ( """"Graph name cannot be null"""" ) ;  }  
@ Test  public   void   getCoverageOfPrivateConstructor ()   {  TestingUtil . callConstructorAndCheckIsPrivate ( GeoHash . class ) ;  }
private   void   rewriteManifest ( File   source ,  File   target )  throws  FileNotFoundException ,  IOException   {  JarFile   jarfile   =  new   JarFile ( source ) ;  JarWriter   writer   =  new   JarWriter ( target ) ;  writer . writeManifest ( buildManifest ( jarfile ) ) ;  writeEntries ( writer ,  jarfile ) ;  writer . close () ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   List < Object >   fill ( Object   value ,  Integer   start ,  Integer   end )   {  return  fill ( ( List < Object > )   getIterable () ,  value ,  start ,  end ) ;  }
public   int   getZorderID ( int   placeId )   {  return  places . get ( placeId ) . getZId () ;  }
private   boolean   isAnyType ( final   JsonNode   node )   {  return  Objects . nonNull ( node . get ( TYPE ) ) ;  }
public   static   void   setViewWidth ( InstanceSettings   settings ,  RemoteViews   rv ,  int   viewId ,  int   dimenId )   {  rv . setInt ( viewId ,  METHOD_SET_WIDTH ,  getScaledValueInPixels ( settings ,  dimenId ) ) ;  }
@ Override  public   void   writeToParcel ( Parcel   parcel ,  int   flags )   {  parcel . writeInt ( mType ) ;  parcel . writeDouble ( mLatitude ) ;  parcel . writeDouble ( mLongitude ) ;  parcel . writeFloat ( mRadius ) ;  }
@ NotNull  public   static   TextRange   getLineRange ( @ NotNull   PsiFile   psiFile , Integer   line )   {  if  ( line   ==   null )   return  TextRange . EMPTY_RANGE ;  Project   project   =  psiFile . getProject () ;  PsiDocumentManager   documentManager   =  PsiDocumentManager . getInstance ( project ) ;  Document   document   =  documentManager . getDocument ( psiFile . getContainingFile () ) ;  if  ( document   ==   null )   {  return  TextRange . EMPTY_RANGE ;  }  int   ijLine   =  line   >   0 ?   line - 1  :  0 ;  return  getTextRangeForLine ( document , ijLine ) ;  }
public   void   createApplication ( ServiceProvider   serviceProvider )   throws  Exception   {  try  {  if  ( debugEnabled )   {  log . debug ( """"Registering Service Provider """"   +   serviceProvider . getApplicationName () ) ;  }  stub . createApplication ( serviceProvider ) ;  }   catch  ( RemoteException   e )   {  log . error ( e . getMessage () ,  e ) ;  throw  new   Exception ( e . getMessage () ) ;  }   catch  ( IdentityApplicationManagementServiceIdentityApplicationManagementException   e )   {  log . error ( e . getMessage () ,  e ) ;  throw  new   Exception ( e . getMessage () ) ;  }  }
public   static   boolean   profileExists ( String   name )   {  File   file   =  new   File ( getProfileFileName ( name ) ) ;  return  file . exists () ;  }
private   static   String   getClassName ( ZipEntry   entry )   {  StringBuffer   className   =  new   StringBuffer ( entry . getName () . replace ( '/' ,  '.' ) ) ;  return  className . toString () ;  }
private   void   checkStylesInherited ()  {  if  ( analyzer   ==   null )  analyzer   =   new   Analyzer ( styles ) ;  if  ( istylemap   ==   null )  istylemap   =   analyzer . evaluateDOM ( doc ,  media ,  true ) ;  }
public   synchronized   void   addLocalBuiltinDirectory (  final   String   directory )   {  builtins . add ( directory ) ;  }
@ Override  public   Optional < TreePath >   visitBreak ( @ Nullable   BreakTree   node ,  @ Nullable   Void   v )   {  if  ( node   ==   null )   {  return  Optional . empty () ;  }  return  isMatch ( node ,  node . getLabel () )  ?   currentPathPlus ( node )   :  Optional . empty () ;  }
public   void   getCredentialList ( ICredentialListCallback   callbacks ,  String   rpId )   throws  RemoteException   {  getServiceInterface () . getCredentialList ( callbacks ,  rpId ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  return  super . equals ( o ) ;  }
private   UriTemplateBuilder   withDefaultDateFormat ( DateTimeFormatter   dateTimeFormatter )  {  defaultDateTimeFormatter   =   dateTimeFormatter ;  return  this ;  }
@ Override  public   void   onDestroyView ()   {  super . onDestroyView () ;  tearDownImageContent () ;  }
private   Preference   getPreference ( int   id )   {  return  findPreference ( getString ( id ) ) ;  }
@ Override  public   void   isAutoBackupEnabled ( IDriveServiceCallbacks   callbacks )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: isAutoBackupEnabled"""" ) ;  }
@ Override  public   void   setSelectedFile ( File   file )   {  super . setSelectedFile ( file ) ;  
private   String   itemContent ( String   title ,  String   contentType )   {  return  StringUtils . repeat ( ' ' ,  8 )   +   """"- """"   +   title   +   contentType   +   System . lineSeparator () ;  }
public   boolean   has ( KeyValue . Modifier   m )  {  for  ( int   i   =  0 ;   i   <   _size ;   i ++ )  {  KeyValue   kv   =  _mods [ i ] ;  switch  ( kv . getKind () )  {  case  Modifier :  if  ( kv . getModifier () . equals ( m ) )  return  true ;  }  }  return  false ;  }
public   void   requestRisingEdgeEvents ( String   consumer )   {  GpioD . lineRequestRisingEdgeEvents ( getCPointer () ,  consumer ) ;  }
public   static   ULongIndexer   create ( long []   array ,  long []   sizes ,  long []   strides )   {  return  new   ULongArrayIndexer ( array ,  sizes ,  strides ) ;  }
@ Test  void   testSortXmlFullToAlphabetical ()   {  XmlProcessorTestUtil . create ()  . sortAlphabeticalOnly ()  . testInputAndExpected ( """"src/test/resources/full_unsorted_input.xml"""" ,  """"src/test/resources/full_alfa_input.xml"""" ) ;  }
@ Test  public   void   ifPresentOmits ()   {  JSONPrinter   subject   =  subject () ;  subject . object () ;  subject . ifPresent ( """"mykey"""" ,  null ) ;  subject . endObject () ;  assertNull ( actualObj () . opt ( """"mykey"""" ) ) ;  }
@ Test ( dependsOnMethods   =   """"addRoleWithInvalidUsers"""" )  public   void   addRoleWithDuplicateDisplayName ()   throws  Exception   {  JSONObject   rootObject   =  new   JSONObject () ;  rootObject . put ( SCIM2BaseTestCase . DISPLAY_NAME_ATTRIBUTE ,  ROLE_NAME_1 ) ;  HttpResponse   response   =  sendCreateRoleRequest ( rootObject ) ;  EntityUtils . consume ( response . getEntity () ) ;  assertEquals ( response . getStatusLine () . getStatusCode () ,  409 ,  """"Role should not be created""""  +   """" when duplicate display name is provided"""" ) ;  }
public   static   LocalDateTime   datetimeOf ( String   queryId )   {  return  LocalDateTime . parse ( queryId . substring ( 0 ,  FORMAT . length () ) ,  DateTimeFormatter . ofPattern ( FORMAT ) ) ;  }
public   IplImage   getProjectorImage ( int   pyramidLevel )   {  return  projectorImage [ pyramidLevel ] ;  }
@ Override  public   boolean   playerAdd ( String   world ,  String   player ,  String   permission )   {  return  rscpAPI . playerAdd ( world ,  player ,  permission ) ;  }
public   void   setStorage ( Storage   storage )   {  this . storage   =   storage ;  }
@ Override  public   boolean   preservesLineBreaks ()  {  return  ( whitespace   !=   WHITESPACE_NORMAL   &&   whitespace   !=   WHITESPACE_NOWRAP ) ;  }
@ Override   public   FloatPointer   position ( long   position )   {  return  super . position ( position ) ;  }
@ Test  public   void   thatAllOfSchemaIsSuggested ()   {  verifySchemaIsSuggested ( """"schema_all_of"""" ) ;  }
private   int   quickLocateCategoricalBin ( Map < String ,  Integer >   map ,  String   val )   {  Integer   binNum   =  map . get ( val ) ;  return  ( ( binNum   ==   null )  ?   - 1   :  binNum ) ;  }
@ Override  protected   Fragment   getFragment ()   {  return  new   AboutFragment () ;  }
 <decl pos:start=""""""""207:63"""""""" pos:end=""""""""207:80""""""""><type ref=""""""""prev"""""""" pos:start=""""""""206:9"""""""" pos:end=""""""""206:16""""""""/><name pos:start=""""""""207:63"""""""" pos:end=""""""""207:75"""""""">frameworkpath</name> <init pos:start=""""""""207:77"""""""" pos:end=""""""""207:80"""""""">= <expr pos:start=""""""""207:79"""""""" pos:end=""""""""207:80""""""""><block pos:start=""""""""207:79"""""""" pos:end=""""""""207:80"""""""">{}</block></expr></init></decl>
@ Override  public   void   run ()   {  try  {  if  ( mProgressDialog   != null ) {  mProgressDialog . dismiss () ;  }  List < GeocodeResult >   results   =  reverseFuture . get () ;  
@ Override  public   void   startRender ( double   startDelta )   {  totalDelta   =   startDelta ;  }
public   String   tagTypeCheck ( List < String >   posTags ,  List < String >   negTags ,  String   rawTag )   {  String   type   =  null ;  if ( posTags . contains ( rawTag ) )   {  type   =   """"1"""" ;  }   else if ( negTags . contains ( rawTag ) )   {  type   =   """"0"""" ;  }  return  type ;  }
@ Override   public   UIntIndexer   put ( long   i ,  long []   m ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  putRaw ( index ( i )   +   n ,  m [ offset   +   n ] ) ;  }  return  this ;  }
public   static   CameraDevice []   read ( FileStorage   fs )   throws  Exception   {  FileNode   node   =  fs . get ( """"Cameras"""" ) ;  FileNodeIterator   seq   =  node . begin () ;  int   count   =  ( int ) seq . remaining () ;  CameraDevice []   devices   =  new   CameraDevice [ count ] ;  for  ( int   i   =  0 ;   i   <   count ;   i ++ ,   seq . increment () )   {  FileNode   n   =  seq . multiply () ;  if  ( n . empty () )   continue;  String   name   =  n . asBytePointer () . getString () ;  devices [ i ]   =   new   CameraDevice ( name ,  fs ) ;  }  return  devices ;  }
@ Test  public   void   nodesArePresent_afterCreation ()   {  long   nodeId   =  graph . createNode ( """"foo"""" ) ;  assertThat ( graph . getNode ( """"foo"""" ) . get () ,  is ( nodeId ) ) ;  }
public   String   getUserName ()   {  return  getGuiElement () . getElementsByTagName ( """"user"""" ) . item ( 0 ) . getTextContent () ;  }
@ Override  public   void   onLocationChanged ( Location   location )   throws  RemoteException   {  listener . onLocationChanged ( location ) ;  }
@ Override  public   Integer   update ( Integer   integer )   {  return  integer   +   1 ;  }
@ Override  public   void   setFadeIn ( boolean   fadeIn )   throws  RemoteException   {  }
public   Owner   firstname ( String   firstname )   {  this . firstname   =   firstname ;  return  this ;  }
@ Override  public   FileVisitResult   visitFile ( Path   path ,  BasicFileAttributes   attr )   {  for  ( String   otoName   :  ImmutableSet . of ( """"oto.ini"""" ,  """"oto_ini.txt"""" ) )   {  if  ( path . endsWith ( otoName ) )   {  Path   pathToFile   =  path . toFile () . getParentFile () . toPath () ;  parseOtoIni ( pathToVoicebank ,  pathToFile ,  otoName ,  builder ) ;  break;  }  }  return  FileVisitResult . CONTINUE ;  }
@ Test  public   void   testOperationBecomesNotDeprecated ()   {  ChangedOpenApi   changedOpenApi   =  OpenApiCompare . fromLocations ( OPENAPI_DOC1 ,  OPENAPI_DOC2 ) ;  ChangedOperation   changedOperation   = getChangedOperation ( changedOpenApi ,  GET ,  """"/operation/becomes-not-deprecated"""" ) ;  assertThat ( changedOperation ) . isNotNull () ;  assertThat ( changedOperation . isDeprecated () ) . isTrue () ;  }
@ Test  void   testDecodeParseErr13 ()   {  assertThrows ( Json . ParseException . class ,  ()  ->   U . fromJson ( """"[\""""abc\u0010\""""]"""" ) ) ;  }
private   void   launch ( String ...   args )   throws  Exception   {  String   target   =  download () ;  if  ( ! new   File ( target ) . exists () )   {  throw  new   IllegalStateException ( """"Cannot locate launcher: """"   +   target ) ;  }  if  ( this . debug )   {  System . err . println ( """"Using launcher: """"   +   target ) ;  }  ClassLoader   classLoader   =  getClassLoader ( target ) ;  String   launcherClass   =  launcherClass ( target ) ;  Class < ? >   launcher   =  classLoader . loadClass ( launcherClass ) ;  findMainMethod ( launcher ) . invoke ( null ,  new   Object []   {  args ( launcherClass ,  args )  } ) ;  }
@ Test  public   void   testCoverageAntimeridianLeaflet2 ()   {  double   topLeftLat   =  44 ;  double   topLeftLon   =  110 ;  double   bottomRightLat   =  9 ;  double   bottomRightLon   =  194 ;  Coverage   coverage   =  GeoHash . coverBoundingBox ( topLeftLat ,  topLeftLon ,  bottomRightLat ,  bottomRightLon ,  1 ) ;  assertEquals ( Sets . newHashSet ( """"w"""" ,  """"x"""" ,  """"8"""" ) ,  coverage . getHashes () ) ;  }
boolean   containsKey ( String   key )   {  return  storage . containsKey ( key ) ;  }
public   static   LongIndexer   create ( LongBuffer   buffer ,  Index   index )   {  return  new   LongBufferIndexer ( buffer ,  index ) ;  }
public   void   tooglePlayerResidenceChat ( Player   player )   {  String   pname   =  player . getName () ;  if  ( playerToggleChat . contains ( pname ) )   {  playerToggleChat . remove ( pname ) ;  player . sendMessage ( ChatColor . YELLOW   +   Residence . getLanguage () . getPhrase ( """"ResidenceChat"""" ,  ChatColor . RED   +   """"OFF""""   +   ChatColor . YELLOW   +   """"!"""" ) ) ;  }   else  {  playerToggleChat . add ( pname ) ;  player . sendMessage ( ChatColor . YELLOW   +   Residence . getLanguage () . getPhrase ( """"ResidenceChat"""" ,  ChatColor . RED   +   """"ON""""   +   ChatColor . YELLOW   +   """"!"""" ) ) ;  }  }
@ Override  public   void   revertToPreferences ()   {  themeManager . getCurrentTheme () . set ( preferencesManager . getTheme () ) ;  }
public   void   shutdownGracefully ()   throws  Exception ,  RemoteException   {  serverAdminStub . shutdownGracefully () ;  }
void   addComponent ( UriTemplateComponent   component )  {  this . components . add ( component ) ;  }
public   String   getMediaFromID ( long   id )   {  if  ( sqLiteDatabase   ==   null )   return  null ;  String []   columns   =  new   String [] { """"file_path"""" } ;  String   selection   =  """"message_row_id=?"""" ;  String []   selectionArgs   =  new   String [] { String . valueOf ( id ) } ;  try  ( Cursor   cursor   =  sqLiteDatabase . query ( """"message_media"""" ,  columns ,  selection ,  selectionArgs ,  null ,  null ,  null ) )   {  if  ( cursor . moveToFirst () )   {  return  cursor . getString ( 0 ) ;  }  }   catch  ( Exception   e )   {  XposedBridge . log ( e ) ;  }  return  null ;  }
public   static   void   main ( String []   args )   {  log ( """"Apache Maven Wrapper Downloader """"   +   WRAPPER_VERSION ) ;  if  ( args . length   !=   2 )   {  System . err . println ( """" - ERROR wrapperUrl or wrapperJarPath parameter missing"""" ) ;  System . exit ( 1 ) ;  }  try  {  log ( """" - Downloader started"""" ) ;  final   URL   wrapperUrl   =  URI . create ( args [ 0 ] ) . toURL () ;  final   String   jarPath   =  args [ 1 ] . replace ( """".."""" ,  """""""" ) ;   
@ ParameterizedTest  @ MethodSource ( """"useNativeGit"""" )  public   void   shouldGenerateCustomPropertiesFileJson ( boolean   useNativeGit )   throws  Exception   {  
 <argument pos:start=""""""""510:62"""""""" pos:end=""""""""510:65""""""""><expr pos:start=""""""""510:62"""""""" pos:end=""""""""510:65""""""""><name pos:start=""""""""510:62"""""""" pos:end=""""""""510:65"""""""">page</name></expr></argument>)</argument_list></call></expr>;</return>
private   void   addBottomDots ()   {  mDots   =   new   TextView [ slides . length ] ;  for  ( int   i   =  0 ;   i   <   mDots . length ;   i ++ )   {  mDots [ i ]   =   new   TextView ( this ) ;  mDots [ i ] . setText ( Html . fromHtml ( """"&#8226;"""" ) ) ;  mDots [ i ] . setTextSize ( 35 ) ;  binding . layoutDots . addView ( mDots [ i ] ) ;  }  }
@ Override  public   int   compare ( File   from ,  File   to )   {  return  from . getName () . compareTo ( to . getName () ) ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"type"""" )  @ Valid  public   String   getType ()   {  return  type ;  }
@ Override  public   void   setNodeProperty ( long   node ,  String   property ,  Object   value )   {  if  ( GraphUtil . ignoreProperty ( value ) )   {  return;  }  try  {  synchronized  ( graphLock )   {  Map < String ,  Object >   properties   =  Maps . newHashMap ( inserter . getNodeProperties ( node ) ) ;  properties . put ( property ,  value ) ;  inserter . setNodeProperties ( node ,  properties ) ;  }  }   catch  ( Exception   e )   {  logger . log ( Level . WARNING ,  """"Failed to set """"   +   property   +   """" to """"   +   value   +   """" on """"   +   node ,  e ) ;  }  }
public   static   WorkbenchRecipeBuilder   crafting ( ItemLike   item ,  int   count )  {  return  new   WorkbenchRecipeBuilder ( null ,  item ,  count ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  FederatedAuthenticatorRequest   federatedAuthenticatorRequest   =  ( FederatedAuthenticatorRequest )   o ;  return  Objects . equals ( this . defaultAuthenticatorId ,  federatedAuthenticatorRequest . defaultAuthenticatorId )   &&  Objects . equals ( this . authenticators ,  federatedAuthenticatorRequest . authenticators ) ;  }
@ Override  public   List < DayHeader >   queryEventEntries ()   {  return  Collections . emptyList () ;  }
private   List < List < Object > >   getHistories ( String   datasource ,  String []   queryIds )   {  List < List < Object > >   queryHistories   =  new   ArrayList <> () ;  for  ( Query   query   :  getQueries ( datasource ,  queryIds ) )   {  queryHistories . add ( toQueryHistory ( query ) ) ;  }  return  queryHistories ;  }
public   int   getRaw ( long   i )   {  return  RAW . getInt ( base   +   checkIndex ( i ,  size )   *   VALUE_BYTES ) ;  }
public   static   KeyStore   loadKeyStore ( String   aKsType ,  final   String   aKsFile ,  final   String   aKsPasswd )   {  char []   tmpPass   =  null ;  if  ( aKsPasswd   !=   null )   {  tmpPass   =   aKsPasswd . toCharArray () ;  }  return  loadKeyStore ( aKsType ,  aKsFile ,  tmpPass ) ;  }
public   void   start ()   throws  Exception   {  for  ( FrameGrabber   f   :  frameGrabbers )   {  f . start () ;  }  }
@ NonNull  @ Override  public   Task < LocationAvailability >   getLocationAvailability ()   {  return  scheduleTask ( ( ReturningGoogleApiCall < LocationAvailability ,  LocationClientImpl > )   LocationClientImpl :: getLocationAvailability ) ;  }
@ Override  public   Chain < T >   skip ( final   int   numberToSkip )   {  return  new   Chain <> ( value () . subList ( numberToSkip ,  value () . size () ) ) ;  }
public   void   setActivated ( Boolean   activated )   {  this . activated   =   activated ;  }
public   void   setWeights ( double []   weights )   {  this . weights   =   weights ;  this . getNetwork () . setWeights ( weights ) ;  }
@ EventHandler ( priority   =   EventPriority . MONITOR )  public   void   onPluginEnable ( PluginEnableEvent   event )   {  if  ( perms   ==   null )   {  Plugin   p   =  event . getPlugin () ;  if ( p . getDescription () . getName () . equals ( """"bPermissions"""" )   &&   p . isEnabled () )   {  perms   =   Permissions . getWorldPermissionsManager () ;  log . info ( String . format ( """"[%s][Permission] %s hooked."""" ,  plugin . getDescription () . getName () ,  name ) ) ;  }  }  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  ProvisioningConfiguration   provisioningConfiguration   =  ( ProvisioningConfiguration )   o ;  return  Objects . equals ( this . inboundProvisioning ,  provisioningConfiguration . inboundProvisioning )   &&  Objects . equals ( this . outboundProvisioningIdps ,  provisioningConfiguration . outboundProvisioningIdps ) ;  }
@ SuppressWarnings ( """"unused"""" )  public   ListBoxModel   doFillDefaultBackgroundItems ()   {  return  doFillDefaultForegroundItems () ;  }
public   static   ShortIndexer   create ( short []   array ,  long ...   sizes )   {  return  new   ShortArrayIndexer ( array ,  sizes ) ;  }
@ Override   public   UShortIndexer   put ( long   i ,  long   j ,  long   k ,  int   s )   {  array [ ( int ) index ( i ,  j ,  k ) ]   =   ( short ) s ;  return  this ;  }
public   static   boolean   waitForServerToStart ( int   port )   throws  InterruptedException   {  Socket   socket   =  null ;  for  ( int   i   =  0 ;   i   <   50 ;   i ++ )   {  try  {  socket   =   new   Socket ( """"localhost"""" ,  port ) ;  if  ( socket . isConnected () )   {  return  true ;  }  }   catch  ( IOException   ignore )   {  
@ Override  public   boolean   isActivated ()   {  Jenkins   jenkins   =  Jenkins . get () ;  return  ( jenkins . getAuthorizationStrategy ()   instanceof   RoleBasedAuthorizationStrategy  &&   ! ( jenkins . getProjectNamingStrategy ()   instanceof   RoleBasedProjectNamingStrategy ) ) ;  }
public   static   ULongIndexer   create ( long []   array ,  long ...   sizes )   {  return  new   ULongArrayIndexer ( array ,  sizes ) ;  }
public   void   addServiceProvider ( int   portOffset ,  String   applicationName )   throws  Exception   {  ServiceProvider   serviceProvider   =  new   ServiceProvider () ;  serviceProvider . setApplicationName ( applicationName ) ;  serviceProvider . setManagementApp ( true ) ;  serviceProvider . setDescription ( """"This is a test Service Provider"""" ) ;  applicationManagementServiceClients . get ( portOffset ) . createApplication ( serviceProvider ) ;  }
@ Before  public   void   setup ()   {  subclass   =   getNode ( """"http:
public   static   UByteIndexer   create ( byte []   array )   {  return  new   UByteArrayIndexer ( array ) ;  }
protected   void   initComboBox ()   {  final   Collection < LocalAnalysisScript >   allScripts   =  LocalAnalysisScripts . getAll () ;  myLocalAnalysisScriptComboBox . removeAllItems () ;  myLocalAnalysisScriptComboBox . addItem ( makeObj ( LocalAnalysisScripts . NO_LOCAL_ANALYSIS ) ) ;  for  ( LocalAnalysisScript   script   :  allScripts )   {  myLocalAnalysisScriptComboBox . addItem ( makeObj ( script . getName () ) ) ;  }  }
public   CredentialPickerConfig   getHintPickerConfig ()   {  return  hintPickerConfig ;  }
static   void   lineCloseChip ( long   linePtr )   {  c_gpiod_line_close_chip ( linePtr ) ;  }
public   static   int   readObjectHeader ( Parcel   parcel )   {  int   header   =  readHeader ( parcel ) ;  int   size   =  readSize ( parcel ,  header ) ;  int   start   =  parcel . dataPosition () ;  if  ( getFieldId ( header )   !=   SafeParcelable . SAFE_PARCEL_OBJECT_MAGIC )  throw  new   ReadException ( """"Expected object header. Got 0x""""   +   Integer . toHexString ( header ) ,  parcel ) ;  int   end   =  start   +   size ;  if  ( ( end   <   start )   ||   ( end   >   parcel . dataSize () ) )  throw  new   ReadException ( """"Size read is invalid start=""""   +   start   +   """" end=""""   +   end ,  parcel ) ;  return  end ;  }
public   synchronized   void   closeLine ( GpioLine   gpioLine )   {  long   linePtr   =  gpioLine . getCPointer () ;  GpioD . lineRelease ( linePtr ) ;  }
 <argument pos:start=""""""""202:86"""""""" pos:end=""""""""202:86""""""""><expr pos:start=""""""""202:86"""""""" pos:end=""""""""202:86""""""""><name pos:start=""""""""202:86"""""""" pos:end=""""""""202:86"""""""">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ NonNull  public   AuthenticationExtensionsClientOutputs   build ()   {  return  new   AuthenticationExtensionsClientOutputs ( uvmEntries ) ;  }
static   void   transform ( Iterable < ?   extends  Element >   elements )   {  for  ( Element   element :  elements )   {  for  ( String   key :  element . getPropertyKeys () )   {  if  ( PROTECTED_PROPERTY_KEYS . contains ( key ) )   {  continue;  }   else  {  Object   value   =  element . getProperty ( key ) ;  if  ( value   instanceof   Iterable )   {  
@ NonNull  public   static   PublicKeyCredentialRequestOptions   deserializeFromBytes ( byte []   serializedBytes )   {  return  SafeParcelableSerializer . deserializeFromBytes ( serializedBytes ,  CREATOR ) ;  }
private   void   initiateLDAPServer ()   {  server   =   new   LdapServer () ;  server . setTransports ( new   TcpTransport ( serverPort ) ) ;  server . setDirectoryService ( directoryService ) ;  }
@ Override  public   void   onRequestPermissionsResult ( int   requestCode ,  String []   permissions ,  int []   grantResults )   {  if  ( requestCode   ==   1   &&   grantResults . length   ==   1 )   {  setResult ( grantResults [ 0 ]   ==   PackageManager . PERMISSION_GRANTED  ?   RESULT_OK   :  RESULT_CANCELED ) ;  finish () ;  }  }
public   static   < E >   Set < E >   sample ( final   List < E >   list ,  final   int   howMany )   {  final   int   size   =  Math . min ( howMany ,  list . size () ) ;  final   Set < E >   samples   =  newLinkedHashSetWithExpectedSize ( size ) ;  while  ( samples . size ()   <   size )   {  E   sample   =  sample ( list ) ;  samples . add ( sample ) ;  }  return  samples ;  }
@ Test  void   Should_Skip_Mojo_WhenSkipIsTrue ()   {  final   OpenApiDiffMojo   mojo   =  new   OpenApiDiffMojo () ;  mojo . oldSpec   =   newSpecFile . getAbsolutePath () ;  mojo . newSpec   =   oldSpecFile . getAbsolutePath () ;  mojo . failOnIncompatible   =   true ;  mojo . skip   =   true ;  assertDoesNotThrow ( mojo :: execute ) ;  }
private   void   setUpAppsContent ( List < ServerApp >   apps )   {  getAppsAdapter () . replaceWith ( apps ) ;  }
@ Test  public   void   noItemSchema ()   {  ArraySchema . builder () . build () . validate ( ARRAYS . get ( """"noItemSchema"""" ) ) ;  }
private   void   changeISConfiguration ()   throws  Exception   {  changeNotificationMgtPropertyConfig () ;  serverConfigurationManager . restartForcefully () ;  }
@ Override  protected   void   handleDefaultValueDifferences ( Column   column ,  ObjectDifferences   differences ,  DiffOutputControl   control ,  List < Change >   changes ,  Database   referenceDatabase ,  Database   comparisonDatabase )   {  if  ( referenceDatabase   instanceof   HibernateDatabase   ||   comparisonDatabase   instanceof   HibernateDatabase )   {  Difference   difference   =  differences . getDifference ( """"defaultValue"""" ) ;  if  ( difference   !=   null   &&   difference . getReferenceValue ()   ==   null   &&   difference . getComparedValue ()   instanceof   DatabaseFunction )   {  
private   static   void   removeAllHighlighters ()   {  ApplicationManager . getApplication () . invokeLater ( ()  ->  {  Editor []   allEditors   =  EditorFactory . getInstance () . getAllEditors () ;  for  ( Editor   editor   :  allEditors )   {  editor . getMarkupModel () . removeAllHighlighters () ;  }  } ) ;  }
@ Override   public   ByteIndexer   get ( long   i ,  byte []   b ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  b [ offset   +   n ]   =   getRaw ( index ( i )   +   n ) ;  }  return  this ;  }
@ Test  public   void   testCreateAssociationInvalidCredential ()   throws  IOException   {  String   body ;  if  ( TestUserMode . SUPER_TENANT_ADMIN . equals ( userMode ) )   {  body   =   readResource ( """"association-creation-1-ic.json"""" ) ;  }   else  {  body   =   readResource ( """"association-creation-tenant-1-ic.json"""" ) . replace ( """"TENANT"""" ,  tenant ) ;  }  getResponseOfPost ( this . userAssociationEndpointURI ,  body )  . then ()  . assertThat ()  . statusCode ( HttpStatus . SC_BAD_REQUEST )  . log () . ifValidationFails () ;  }
@ Test ( dependsOnMethods   =   """"testCreateFederatedAssociationWithoutUser"""" )  public   void   testCreateFederatedAssociationWithoutIdP ()   {  try  {  testUser1Id   =   createUser ( TEST_USER_1 ,  TEST_USER_PW ) ;  }   catch  ( Exception   e )   {  log . error ( """"Error while creating the users :""""   +   TEST_USER_1   +   """"."""" ) ;  }  createFederatedAssociation ( testUser1Id ,  null ,  HttpStatus . SC_BAD_REQUEST ) ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"requestedClaims"""" )  @ Valid  public   List < RequestedClaimConfiguration >   getRequestedClaims ()   {  return  requestedClaims ;  }
@ Override  public   String   getScratchDirectoryPath ( String   name )   {  if  ( tmpDirPath   ==   null )   {   tmpDirPath   =   CouchbaseLiteInternal . getTmpDirectoryPath () ;   }  try  {   return  new   File ( tmpDirPath ,  name ) . getCanonicalPath () ;   }  catch  ( IOException   e )   {   throw  new   RuntimeException ( """"Could not open tmp directory: """"   +   name ,  e ) ;   }  }
public   void   setIsFederationHub ( Boolean   isFederationHub )   {  this . isFederationHub   =   isFederationHub ;  }
public   String   getUserData ( String   key )   {  return  getAccountManager () . getUserData ( getAccount () ,  key ) ;  }
@ Test  public   void   testResponseRefValue ()   {  getCaretCompletions ( """"response_ref_value"""" )  . assertContains ( """"#/responses/responseName"""" )  . isOfSize ( 1 ) ;  }
private   JsonValue   query ( String   pointer )   {  LoadingState   rootLs   =  new   LoadingState ( new   LoaderConfig ( schemaClient ,  emptyMap () ,  SpecificationVersion . DRAFT_6 ,  false ) , new   HashMap <> () , rootSchemaJson , rootSchemaJson , null , SchemaLocation . empty () ) ;  return  JsonPointerEvaluator . forDocument ( rootLs . rootSchemaJson () ,  pointer ) . query () . getQueryResult () ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   atEnd ()   throws  Exception   {  deleteApp ( applicationId ) ;  client . close () ;  restClient . closeHttpClient () ;  consumerKey   =   null ;  accessToken   =   null ;  applicationId   =   null ;  }
@ JsonProperty ( """"queries_remaining"""" )  public   Integer   getQueriesRemaining ()   {  return  this . queriesRemaining ;  }
@ Override  public   void   close ( int   code )   {  close ( code ,  """""""" ,  false ) ;  }
private   void   setUpCast ()   {  mCastContext   =   CastContext . getSharedInstance ( getActivity () ) ;  }
@ Test  public   void   testValidateVarSelect ()   throws  Exception   {  ModelConfig   config   =  CommonUtils . loadModelConfig () ;  ValidateResult   result   =  instance . probe ( config ,  ModelStep . VARSELECT ) ;  Assert . assertTrue ( result . getStatus () ) ;  config . getVarSelect () . setForceRemoveColumnNameFile ( """"not-exists"""" ) ;  config . getVarSelect () . setForceSelectColumnNameFile ( """"~/not-exists"""" ) ;  result   =   instance . probe ( config ,  ModelStep . VARSELECT ) ;  Assert . assertFalse ( result . getStatus () ) ;  }
@ Override  public   < T >   T   getAttachment ()   {  return  engine . getAttachment () ;  }
@ Test  public   void   testSetValidLink ()   {  String   link   =  """"https:
public   void   testAddUser ()   throws  Exception   {  UserDTO   userDTO   =  userMgtClient . addUserWithID ( user1Username ,  credential1 ,  new   String [ 0 ] ,  new   ClaimValue [ 0 ] , defaultProfile ) ;  this . userId   =   userDTO . getUserID () ;  Assert . assertNotNull ( userDTO ) ;  }
public   void   setProgress ( float   progress )   {  this . progress   =   progress ;  }
public   PointerPointer < P >   putString ( String   ...   array )   {  pointerArray   =   ( P [] ) new   BytePointer [ array . length ] ;  for  ( int   i   =  0 ;   i   <   array . length ;   i ++ )   {  pointerArray [ i ]   =   array [ i ]   !=   null  ?   ( P ) new   BytePointer ( array [ i ] )   :  null ;  }  return  put ( pointerArray ) ;  }
private   String   getPath ()   {  if  ( tenant . equals ( MultitenantConstants . SUPER_TENANT_DOMAIN_NAME ) )   {  return  SERVER_URL   +   SCIM_USERS_ENDPOINT ;  }   else  {  return  SERVER_URL   +   """"/t/""""   +   tenant   +   SCIM_USERS_ENDPOINT ;  }  }
public   static   GraphicsDevice   getScreenDevice ( int   screenNumber )   throws  Exception   {  GraphicsDevice []   screens   =  getScreenDevices () ;  if  ( screenNumber   >=   screens . length )   {  throw  new   Exception ( """"CanvasFrame Error: Screen number """"   +   screenNumber   +   """" not found. """"   +  """"There are only """"   +   screens . length   +   """" screens."""" ) ;  }  return  screens [ screenNumber ] ; 
@ Override  public   Chain < T >   initial ()   {  return  new   Chain <> ( Underscore . initial ( value () ) ) ;  }
public   void   setSignatureValidationCertAlias ( String   signatureValidationCertAlias )   {  this . signatureValidationCertAlias   =   signatureValidationCertAlias ;  }
@ Override  public   void   onSafeBrowsingData ( Status   status ,  SafeBrowsingData   safeBrowsingData )   throws  RemoteException   {  }
private   String   getQueryParamFromURL ( String   url ,  String   key )   {  String   params []   =  url . split ( """"&"""" ) ;  String   value   =  """""""" ;  for  ( String   param   :  params )   {  if  ( param . contains ( key ) )   {  value   =   param . split ( """"="""" ) [ 1 ] ;  return  value ;  }  }  return  value ;  }
@ Provides  Map < String ,  GraphAspect >   getAspectMap ( EvidenceAspect   evidenceAspect )   {  Map < String ,  GraphAspect >   aspectMap   =  new   HashMap <> () ;  aspectMap . put ( """"evidence"""" ,  evidenceAspect ) ;  return  aspectMap ;  }
private   File   getOfflineFilePath ( String   name )   {  return  new   File ( getActivity () . getFilesDir ()   +   """"/""""   +   Downloader . OFFLINE_PATH   +   """"/""""   +   name ) ;  }
public   void   setTrainError ( double   trainError )   {  this . trainError   =   trainError ;  }
public   NearbySearchRequest   rankby ( RankBy   ranking )   {  return  param ( """"rankby"""" ,  ranking ) ;  }
 <argument pos:start=""""""""1273:55"""""""" pos:end=""""""""1273:60""""""""><expr pos:start=""""""""1273:55"""""""" pos:end=""""""""1273:60""""""""><name pos:start=""""""""1273:55"""""""" pos:end=""""""""1273:60"""""""">output</name></expr></argument>
static   boolean   isSameArtifact ( Dependency   target ,  Dependency   dependency )   {  boolean   classifierMatch   =  ( target . getClassifier ()   ==   null   &&   dependency . getClassifier ()   ==   null )  ||   ( target . getClassifier ()   ==   null  ?   false   :  target . getClassifier () . equals ( dependency . getClassifier () ) ) ;  return  dependency . getGroupId () . equals ( target . getGroupId () )  &&   dependency . getArtifactId () . equals ( target . getArtifactId () )   &&   classifierMatch ;  }
@ Test  public   void   testRestGovernanceConnector ()   throws  IOException   {  String   body   =  readResource ( """"reset-connector-property.json"""" ) ;  Response   response   = getResponseOfPatch ( IDENTITY_GOVERNANCE_ENDPOINT_URI   +  """"/""""   +   CATEGORY_ACCOUNT_MANAGEMENT_PROPERTIES   +   """"/connectors/""""   +  CONNECTOR_LOCK_IDLE_ACCOUNTS , body ) ;  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_OK ) ;  }
public   static   void   copyToLocal ( SourceFile   sourceFile ,  String   partFilePrefix ,  String   localOutputPath )  throws  IOException   {  HdfsPartFile   hdfsPartFile   =  new   HdfsPartFile ( sourceFile . getPath () ,  sourceFile . getSourceType () ,  partFilePrefix ) ;  BufferedWriter   writer   =  new   BufferedWriter ( new   FileWriter ( localOutputPath ) ) ;  String   line   =  null ;  try  {  while ( ( line   =   hdfsPartFile . readLine () )   !=   null )   {  writer . write ( line ) ;  writer . newLine () ;  }  }   catch  ( Exception   e )   {  
private   void   showAuthenticationFailureMessage ()   {  ViewDirector . of ( this ,  R . id . animator_message ) . show ( R . id . text_message_authentication ) ;  }
@ Deprecated  public   JSONObject   getRootSchemaJson ()   {  return  new   JSONObject ( ( Map < String ,  Object > )   ( rootSchemaJson   ==   null  ?   schemaJson   :  rootSchemaJson ) ) ;  }
private   void   saveFile ( File   fileToSave ,  String   content ,  String   errorMessage )   {  try  {  Files . createDirectories ( fileToSave . getParentFile () . toPath () ) ;  Files . write ( fileToSave . toPath () ,  content . getBytes ( encoding ) ) ;  }   catch  ( IOException   e )   {  throw  new   FailureException ( errorMessage ,  e ) ;  }  }
public   static   ProgressDialogFragment   newInstance ( String   message )   {  ProgressDialogFragment   dlg   =  new   ProgressDialogFragment () ;  Bundle   args   =  new   Bundle () ;  args . putString ( KEY_PROGRESS_MESSAGE ,  message ) ;  dlg . setArguments ( args ) ;  return  dlg ;  }
@ Test  void   fetchGetHttps ()   {  U . FetchResponse   result   =  U . fetch ( """"https:
@ Override   public   String   apply ( Tree   t )   {  return  t . accept ( BREADCRUMB_VISITOR ,  null ) ;  }
public   static   void   decompressGzip ( final   String   sourceFileName ,  final   String   targetFileName )  throws  IOException   {  try  ( GZIPInputStream   gis   =  new   GZIPInputStream ( new   FileInputStream ( sourceFileName ) ) )   {  Files . copy ( gis ,  Paths . get ( targetFileName ) ) ;  }  }
@ Override  public   boolean   shouldRequestData ( BlockAccessor   accessor )   {  return  accessor . getBlockState () . getValue ( LecternBlock . HAS_BOOK ) ;  }
public   synchronized   static   Field   loadAntiRevokeChatJidField ( ClassLoader   loader )   throws  Exception   {  return  UnobfuscatorCache . getInstance () . getField ( loader ,  ()  ->  {  Class < ? >   chatClass   =  findFirstClassUsingStrings ( loader ,  StringMatchType . Contains ,  """"conversation/createconversation"""" ) ;  Class < ? >   jidClass   =  XposedHelpers . findClass ( """"com.whatsapp.jid.Jid"""" ,  loader ) ;  Field   field   =  ReflectionUtils . getFieldByExtendType ( chatClass ,  jidClass ) ;  if  ( field   ==   null )   throw  new   Exception ( """"AntiRevokeChatJid field not found"""" ) ;  return  field ;  } ) ;  }
@ Override  public   int   getPlayerInfoInteger ( String   world ,  String   player ,  String   node ,  int   defaultValue )   {  return  privs . getUserNode ( player ) . getInt ( node ,  defaultValue ) ;  }
static   IME   get_ime_by_id ( List < IME >   imes ,  String   id )  {  if  ( id   !=   null )  for  ( IME   ime   :  imes )  if  ( ime . get_id () . equals ( id ) )  return  ime ;  return  null ;  }
public   long   getWorkFromYear ( Random   random ,  long   classYear ,  long   birthday )   {  long   workYear ;  if  ( classYear   ==   - 1 )   {  long   workingAge   =  18   *   ONE_YEAR ;  long   from   =  birthday   +   workingAge ;  workYear   =   Math . min ( ( long )   ( random . nextDouble ()   *   ( simulationEnd   -   from ) )   +   from ,  simulationEnd ) ;  }   else  {  workYear   =   ( classYear   +   ( long )   ( random . nextDouble ()   *   TWO_YEARS ) ) ;  }  return  workYear ;  }
@ Override  default   void   execute ( A   client ,  TaskCompletionSource < R >   completionSource )   {  try  {  completionSource . setResult ( execute ( client ) ) ;  }   catch  ( Exception   e )   {  completionSource . setException ( e ) ;  }  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( display ,  type ) ;  }
public   void   setPolicy ( PolicyEnum   policy )   {  this . policy   =   policy ;  }
public   static   TestCaseStartedEvent   withExecutorInfo ( TestCaseStartedEvent   event )   {  event . getLabels () . add ( createHostLabel ( getHostname () ) ) ;  event . getLabels () . add ( createThreadLabel ( format ( """"%s.%s(%s)"""" , ManagementFactory . getRuntimeMXBean () . getName () , Thread . currentThread () . getName () , Thread . currentThread () . getId () ) ) ) ;  return  event ;  }
@ SubscribeEvent  public   static   void   onServerStart ( ServerStartedEvent   event )  {  tasks . clear () ;  }
public   AlertDialogWpp   setNegativeButton ( CharSequence   text ,  DialogInterface . OnClickListener   listener )   {  if  ( isSystemDialog () )   {  mAlertDialog . setNegativeButton ( text ,  listener ) ;  return  this ;  }  try  {  setNegativeButtonMethod . invoke ( mAlertDialogWpp ,  listener ,  text ) ;  }   catch  ( Exception   ignored )   {  }  return  this ;  }
private   Optional < NoteData >   makeVcNote ( NoteData   note ,  String   nextLyric ,  VoicebankData   voicebankData )   {  Optional < String >   vcLyric   =  makeVcLyric ( note . getLyric () ,  nextLyric ,  voicebankData ) ;  if  ( vcLyric . isEmpty () )   {  return  Optional . empty () ;  }  int   vcLength   =  guessVcLength ( note ,  nextLyric ,  voicebankData ) ;  if  ( vcLength   ==   0 )   {  return  Optional . empty () ;  }  int   vcStart   =  note . getPosition ()   +   note . getDuration ()   -   vcLength ;  return  Optional . of ( new   NoteData ( vcStart ,  vcLength ,  note . getPitch () ,  vcLyric . get () ) ) ;  }
public   String   doQueryAsync ( String   engine ,  String   datasource ,  String   query ,  String   userName , Optional < String >   hiveUser ,  Optional < String >   hivePassword )   {  String   queryId   =  QueryIdUtil . generate ( datasource ,  query ,  engine ) ;  executorService . submit ( new   Task ( queryId ,  engine ,  datasource ,  query ,  userName ,  hiveUser ,  hivePassword ) ) ;  return  queryId ;  }
public   void   run ()   {  try  {  execute () ;  }   finally  {  sonarConsole . clearPasswordFilter () ;  }  }
@ Test  public   void   testGetCertificate ()   {  String   alias ;  if  ( StringUtils . equals ( MultitenantConstants . SUPER_TENANT_DOMAIN_NAME ,  tenant ) )   {  alias   =   SUPER_TENANT_PUBLIC_CERT_ALIAS ;  }   else  {  alias   =   tenant ;  }  Response   response   =  getResponseOfGet ( KEYSTORE_MANAGEMENT_API_BASE_PATH   +  KEYSTORE_MANAGEMENT_API_CERTIFICATE_PATH   +   PATH_SEPARATOR   +   alias ,  """"application/pkix-cert"""" ) ;  validateHttpStatusCode ( response ,  HttpStatus . SC_OK ) ;  Assert . assertNotNull ( response . asString () ) ;  }
public   PhotoRequest   maxHeight ( int   maxHeight )   {  return  param ( """"maxheight"""" ,  String . valueOf ( maxHeight ) ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  SonarRule   rule1   =  ( SonarRule )   o ;  return  Objects . equal ( key ,  rule1 . key )   &&  Objects . equal ( rule ,  rule1 . rule )   &&  Objects . equal ( repository ,  rule1 . repository )   &&  Objects . equal ( name ,  rule1 . name ) ;  }
public   RoleConfig   mappings ( List < RoleMapping >   mappings )   {  this . mappings   =   mappings ;  return  this ;  }
 <argument pos:start=""""""""170:124"""""""" pos:end=""""""""170:135""""""""><expr pos:start=""""""""170:124"""""""" pos:end=""""""""170:135""""""""><operator pos:start=""""""""170:124"""""""" pos:end=""""""""170:124"""""""">(</operator><name pos:start=""""""""170:125"""""""" pos:end=""""""""170:129"""""""">float</name><operator pos:start=""""""""170:130"""""""" pos:end=""""""""170:130"""""""">)</operator> <name pos:start=""""""""170:132"""""""" pos:end=""""""""170:135"""""""">posY</name></expr></argument>
public   ResultSet   getClientInfoProperties ()   throws  SQLException   {  return  null ;  }
private   Calendar   getStartCal () {  Calendar   cal ;  Calendar   max   =  state . getMaximumDate () ;  Calendar   min   =  state . getMinimumDate () ;  if  ( min   !=   null )   {  cal   =   ( Calendar )   min . clone () ;  }   else if  ( max   !=   null )   {  cal   =   ( Calendar )   max . clone () ;  cal . add ( Calendar . DATE ,  - cal . getActualMaximum ( Calendar . DAY_OF_YEAR )   /   2 ) ;  }   else  {  cal   =   state . getPickerDate () ;  cal . add ( Calendar . DATE ,  - defaultNumberOfDays   /   2 ) ;  }  return  cal ;  }
@ Test  public   void   testHeightDegreesForLengthGreaterThanMax ()   {  assertEquals ( 4.190951585769653e-8 ,  heightDegrees ( 13 ) ,  PRECISION ) ;  }
@ FXML  public   void   addPortamentoConfig ( ActionEvent   event )   {  view . saveToPortamentoList () ;  }
@ Override  public   void   localize ( ResourceBundle   bundle )   {  if  ( root . getScene ()   !=   null )   {  Stage   currentStage   =  ( Stage )   root . getScene () . getWindow () ;  currentStage . setTitle ( bundle . getString ( """"preferences.title"""" ) ) ;  }  themeEditor . setDisplayName ( bundle . getString ( """"preferences.colorScheme"""" ) ) ;  editorEditor . setDisplayName ( bundle . getString ( """"preferences.editor"""" ) ) ;  engineEditor . setDisplayName ( bundle . getString ( """"preferences.engine"""" ) ) ;  tableOfContents . refresh () ;   
private   void   checkSonarComponentStartsWithResourceKeyFromConfiguration ()   {  if  ( ! isEmptyOrSpaces ( this . resourceKeyFromConfiguration )   &&   ! this . componentFromSonar . startsWith  ( this . resourceKeyFromConfiguration ) )   {  match   =   false ;  processing   =   false ;  }  }
public   String   getDirectorySuffixWithSeparator ()   {  return  StringUtils . isEmpty ( this . reportTitle ) ?   """"""""  :  ReportBuilder . SUFFIX_SEPARATOR   +   getDirectorySuffix () ;  }
default   Integer   getInteger ( String   key ) {  return  getInteger ( key ,  null ) ;  }
@ ApiModelProperty ( example   =   """"VW5pcXVlSURKREJDVXNlclN0b3JlTWFuYWdlcg"""" ,  required   =   true ,  value   =   """"The id of the user store manager class type."""" )  @ JsonProperty ( """"typeId"""" )  @ Valid  @ NotNull ( message   =   """"Property typeId cannot be null."""" )  public   String   getTypeId ()   {  return  typeId ;  }
@ Override  protected   JobAction < ?   extends  BuildAction < DependencyCheckBuildResult > >   createProjectAction ()   {  return  new   org . jenkinsci . plugins . DependencyCheck . JobAction ( getOwner () . getParent () ) ;  }
public   OpenIDConnectConfiguration   isFAPIApplication ( Boolean   isFAPIApplication )   {  this . isFAPIApplication   =   isFAPIApplication ;  return  this ;  }
public   UserShareWithAllRequestBody   policy ( PolicyEnum   policy )   {  this . policy   =   policy ;  return  this ;  }
@ Test  public   void   test_delete_nonExistingSchedule ()   throws  SQLException   {  final   Schedule   schedule1   =  new   Schedule . Builder ()  . withId ( 1 )  . withHour ( 2 )  . withInterval ( 1 )  . withMode ( Schedule . Mode . ALL )  . withSubmode ( Schedule . Submode . APK )  . build () ;  final   Schedule   schedule2   =  new   Schedule . Builder ()  . withId ( 2 )  . withHour ( 12 )  . withInterval ( 2 )  . withMode ( Schedule . Mode . CUSTOM )  . withSubmode ( Schedule . Submode . BOTH )  . build () ;  scheduleDao . insert ( schedule2 ) ;  
public   ExposureInformationBuilder   setDurationMinutes ( int   durationMinutes )   {  this . durationMinutes   =   durationMinutes ;  return  this ;  }
@ Override  protected   Queue < EntityAnnotation >   delegate ()   {  return  delegate ;  }
public   static   Coverage   coverBoundingBox ( double   topLeftLat ,  final   double   topLeftLon , final   double   bottomRightLat ,  final   double   bottomRightLon ,  final   int   length )   {  return  new   Coverage ( coverBoundingBoxLongs ( topLeftLat ,  topLeftLon ,  bottomRightLat , bottomRightLon ,  length ) ) ;  }
public   AuthorizationDetailsType   name ( String   name )   {  this . name   =   name ;  return  this ;  }
static   List < Field >   info ()   {  return  ImmutableList . of ( new   StringField ( """"x-api-id"""" ,  true ) ,  new   StringField ( """"x-audience"""" ,  true ) ) ;  }
@ Test  void   testNoHealthCheckRegistered ()   {  InstanceStatus   status   =  healthCheckHandler . getStatus ( InstanceStatus . UNKNOWN ) ;  assertThat ( status ) . isEqualTo ( InstanceStatus . UNKNOWN ) ;  }
@ Test  void   managementPortIsRandom ()   {  int   serverPort   =  0 ;  String   serverContextPath   =  """"/"""" ;  String   managementContextPath   =  null ;  Integer   managementPort   =  0 ;  ManagementMetadata   actual   =  provider . get ( INSTANCE ,  serverPort ,  serverContextPath ,  managementContextPath , managementPort ) ;  assertThat ( actual ) . isNull () ;  }
public   AccessTokenConfiguration   accessTokenAttributes ( List < String >   accessTokenAttributes )   {  this . accessTokenAttributes   =   accessTokenAttributes ;  return  this ;  }
@ Test  public   void   testBrooklynToQueensByTransit ()   throws  Exception   {  try  ( LocalTestServerContext   sc   = new   LocalTestServerContext ( """"{\""""routes\"""": [{}],\""""status\"""": \""""OK\""""}"""" ) )   {  DirectionsApi . newRequest ( sc . context )  . origin ( """"Brooklyn"""" )  . destination ( """"Queens"""" )  . mode ( TravelMode . TRANSIT )  . await () ;  sc . assertParamValue ( """"Brooklyn"""" ,  """"origin"""" ) ;  sc . assertParamValue ( """"Queens"""" ,  """"destination"""" ) ;  sc . assertParamValue ( TravelMode . TRANSIT . toUrlValue () ,  """"mode"""" ) ;  }  }
public   AuthorizedAPIPatchModel   addAddedScopesItem ( String   addedScopesItem )   {  if  ( this . addedScopes   ==   null )   {  this . addedScopes   =   new   ArrayList <> () ;  }  this . addedScopes . add ( addedScopesItem ) ;  return  this ;  }
public   static   int   e ( String   tag ,  String   msg )   {  System . out . println ( String . format ( """"log msg: %s, %s"""" ,  tag ,  msg ) ) ;  return  0 ;  }
public   static   ShortIndexer   create ( ShortBuffer   buffer ,  long []   sizes ,  long []   strides )   {  return  new   ShortBufferIndexer ( buffer ,  sizes ,  strides ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  @ Test  void   testDecodeSpecialCharacter ()   {  assertEquals ( """"{\n  \""""description\"""": \""""c:\\\\userDescription.txt\""""\n}"""" , U . toJson ( ( Map < String ,  Object > )  U . fromJson ( """"{\""""description\"""":\""""c:\\userDescription.txt\""""}"""" ) ) ) ;  assertEquals ( """"{description=c:\\userDescription.txt}"""" , U . fromJson ( U . toJson ( new   LinkedHashMap < String ,  String > ()   { {  put ( """"description"""" ,  """"c:\\userDescription.txt"""" ) ;  } } ) )  . toString () ) ;  }
public   void   fill ()   {  SwaggerFields . path () . forEach ( this :: addUnique ) ;  }
public   boolean   supportsResultSetHoldability ( int   holdability )   throws  SQLException   {  return  false ;  }
@ Override  protected   String   getMainComponentName ()   {  return  """"GumTestApp"""" ;  }
private   static   void   checkSetOrUpdate ( Object   value , OperationType   operationType , Map < String ,  Object >   savedLocalObject , String   savedPath )   {  if  ( operationType   ==   OperationType . UPDATE   &&   savedLocalObject . containsKey ( savedPath ) )   {  savedLocalObject . put ( Underscore . uniqueId ( savedPath ) ,  value ) ;  }   else  {  savedLocalObject . put ( savedPath ,  value ) ;  }  }
@ Test  void   noCertCannotWork ()   {  try  ( EurekaClientRunner   client   =  createEurekaClient () )   {  client . disableTls () ;  client . start () ;  assertThat ( client . foundServiceViaEureka () ) . isFalse () ;  }  }
public   Builder   setConsonantFlags ( String   consonantFlags )   {  newConfig . consonantFlags   =   consonantFlags ;  return  this ;  }
@ Override  public   void   onResponse ( Call < Void >   call ,  Response < Void >   response )   {  if  ( response . isSuccessful () )   {  BusProvider . getBus () . post ( new   ServerFileDeleteEvent ( true ) ) ;  }   else  this . onFailure ( call ,  new   HttpException ( response ) ) ;  }
 <argument pos:start=""""""""181:61"""""""" pos:end=""""""""181:62""""""""><expr pos:start=""""""""181:61"""""""" pos:end=""""""""181:62""""""""><literal type=""""""""number"""""""" pos:start=""""""""181:61"""""""" pos:end=""""""""181:62"""""""">0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   void   setDefaultParent ( Entry   defaultParent )   {  this . defaultParent   =   defaultParent ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( applicationClaim ,  localClaim ) ;  }
private   Set < SonarIssue >   buildSonarIssues ( String   fullFilePath , Collection < Resource >   resources )   {  ImmutableSet . Builder < SonarIssue >   entriesBuilder   =  ImmutableSet . builder () ;  if  ( resources   ==   null   ||   resources . isEmpty () )   {  matchFileByResource ( fullFilePath , entriesBuilder , null ) ;  }   else  {  for  ( Resource   resource   :  resources )   {  matchFileByResource ( fullFilePath , entriesBuilder , resource . getKey () ) ;  }  }  return  entriesBuilder . build () ;  }
public   static   void   updateColumnConfigFlags ( ModelConfig   modelConfig ,  List < ColumnConfig >   columnConfigList , ModelInspector . ModelStep   step )   throws  IOException   {  updateColumnConfigFlags ( modelConfig ,  columnConfigList ,  step ,  false ) ;  }
public   void   run ()   {  rentmanager . checkCurrentRents () ;  if  ( cmanager . showIntervalMessages () )   {  System . out . println ( """"[Residence] - Rent Expirations checked!"""" ) ;  }  }
@ Test  public   void   createIconsDirUrl ()   {  setupMocks () ;  String   result   =  URLCreator . createIconsDirUrl ( mockContext ,  """"hidrantes"""" ) ;  String   expected   =  """"https:
static   String   escape ( String   token )   {  return  token . replace ( """"~"""" ,  """"~0"""" )  . replace ( """"/"""" ,  """"~1"""" )  . replace ( """"\\"""" ,  """"\\\\"""" )  . replace ( """"\"""""""" ,  """"\\\"""""""" ) ;  }
public   TenantInfoBean   getTenant ( String   tenantDomain )  throws  RemoteException ,  TenantMgtAdminServiceExceptionException   {  return  tenantMgtAdminServiceStub . getTenant ( tenantDomain ) ;  }
@ Override  public   Collection < PwmPreset >   presets () {  return  this . presets ;  }
@ Test ( dependsOnMethods   =   { """"testResolveL1AppBrandingAfterRootOrgBrandingDelete"""" } )  public   void   testResolveL2AppBrandingAfterRootOrgBrandingDelete ()   throws  Exception   {  Response   response   =  getResolvedAppBrandingInOrg ( level2OrgId ,  level2AppId ) ;  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_NOT_FOUND ) ;  }
void   sendEvent ( String   eventName ,  @ Nullable   ReadableMap   params )   {  getReactApplicationContext ()  . getJSModule ( DeviceEventManagerModule . RCTDeviceEventEmitter . class )  . emit ( eventName ,  params ) ;  }
@ Override  public   void   run ()   {  try  {  StandardEnvironment   environment   =  new   StandardEnvironment () ;  environment . getPropertySources () . addAfter ( StandardEnvironment . SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME , new   MapPropertySource ( """"appDeployer"""" ,  properties ) ) ;  String   main   =  source ;  if  ( source == null )   {  main   =   SpringApplication . class . getName () ;  }  SpringApplicationBuilder   builder   =  builder ( main )  . registerShutdownHook ( false )  . environment ( environment ) ;  context   =   builder . run ( args ) ;  }  catch  ( Throwable   ex )   {  error   =   ex ;  }  }
public   void   setDecayRate ( double   decayRate )   {  this . decayRate   =   decayRate ;  }
default   int   write ( byte []   data ,  int   length )   {  return  write ( data ,  0 ,  length ) ;  }
@ Override  public   int   checkUriPermission ( Uri   uri ,  String   readPermission ,  String   writePermission ,  int   pid , int   uid ,  int   modeFlags )   {  return  PackageManager . PERMISSION_GRANTED ;  }
@ Override  @ NonNull  public   String   getSnapshotId ()   {  return  this . snapshotId ;  }
private   void   setUpHomeNavigation ()   {  if  ( getSupportActionBar ()   !=   null )   {  getSupportActionBar () . setDisplayHomeAsUpEnabled ( true ) ;  }  }
private   void   onApplicationConnected ( CastSession   castSession )   {  mCastSession   =   castSession ;  invalidateOptionsMenu () ;  loadRemoteMedia () ;  }
public   void   write ( DataOutput   arg0 )   throws  IOException   {  arg0 . writeLong ( accountId ) ;  arg0 . writeLong ( creationDate ) ;  arg0 . writeLong ( deletionDate ) ;  arg0 . writeInt ( browserId ) ;  arg0 . writeInt ( country ) ;  ipAddress . write ( arg0 ) ;  arg0 . writeBoolean ( isLargePoster ) ;  arg0 . writeBoolean ( isMessageDeleter ) ;  }
public   final   FloatMLDataSet   loadToMemory ()   {  BasicFloatMLDataSet   result   =  new   BasicFloatMLDataSet () ;  for ( FloatMLDataPair   pair :  this )   {  result . add ( pair ) ;  }  return  result ;  }
@ Test  public   void   testGetSchema ()   {  Assert . assertEquals ( """"{EvalScore: (shifu::diagnosis: chararray,shifu::weight: chararray,shifu::mean: double,shifu::max: double,shifu::min: double,shifu::median: double,shifu::model0: double,shifu::model1: double,shifu::model2: double,shifu::model3: double,shifu::model4: double)}"""" ,  instance . outputSchema ( null ) . toString () ) ;  }
public   float   getFloat ( String   column ,  int   row ,  int   windowIndex )   {  return  windows [ windowIndex ] . getFloat ( row ,  columnIndices . get ( column ) ) ;  }
public   DirectionsApiRequest   departureTime ( Instant   time )   {  return  param ( """"departure_time"""" ,  Long . toString ( time . toEpochMilli ()   /   1000L ) ) ;  }
public   static   int   serialize ( final   File   directory ,  String   name ,  Object   obj )   {  try  ( FileOutputStream   stream   =  new   FileOutputStream ( new   File ( directory ,  name ) ) )   {  return  serialize ( stream ,  obj ) ;  }   catch  ( IOException   e )   {  throw  new   ReportGenerationException ( e ) ;  }  }
public   void   postprocess ()   throws  InterruptedException ,  ExecutionException   {  processSomeValuesFrom () ;  processCategories ( categoryMap ) ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   testClear ()   throws  Exception   {  super . deleteUser ( config ) ;  super . deleteApplication ( config . getApp () . getArtifact () ) ;  super . testClear () ;  }
@ Override  public   void   call ( int   pin ,  int   state ,  long   tick ,  Object   userdata )   {  logger . info ( """"RECEIVED ISR EVENT! {} : {} :{} : """"   +   userdata ,  pin ,  state ,  tick ) ;  }
public   RoleRequestObject   addPermissions ( String   permission )   {  if  ( this . permissions   ==   null )   {  this . permissions   =   new   ArrayList <> () ;  }  this . permissions . add ( permission ) ;  return  this ;  }
static   TestAnalogOutputProvider   newInstance ( String   id ,  String   name ) {  return  new   TestAnalogOutputProviderImpl ( id ,  name ) ;  }
public   static   < K ,  E >   Collection < E >   uniq ( final   Iterable < E >   iterable ,  final   Function < E ,  K >   func )   {  final   Map < K ,  E >   retVal   =  new   LinkedHashMap <> () ;  for  ( final   E   e   :  iterable )   {  final   K   key   =  func . apply ( e ) ;  retVal . put ( key ,  e ) ;  }  return  retVal . values () ;  }
@ Test  public   void   testGetChildren ()   throws  Exception   {  String   path1   =  """"/a"""" ;  String   path2   =  """"/a/a"""" ;  String   path3   =  """"/a/a/a"""" ;  _client . create ( path1 ,  null ,  CreateMode . PERSISTENT ) ;  _client . create ( path2 ,  null ,  CreateMode . PERSISTENT ) ;  _client . create ( path3 ,  null ,  CreateMode . PERSISTENT ) ;  Assert . assertEquals ( 1 ,  _client . getChildren ( path1 ) . size () ) ;  Assert . assertEquals ( 1 ,  _client . getChildren ( path2 ) . size () ) ;  Assert . assertEquals ( 0 ,  _client . getChildren ( path3 ) . size () ) ;  }
public   A   experienceIds ( String ...   experienceIds )   {  if  ( experienceIds   ==   null   ||   experienceIds . length   ==   0 )   {  headers . remove ( HttpHeaders . X_GOOG_MAPS_EXPERIENCE_ID ) ;  return  getInstance () ;  }  header ( HttpHeaders . X_GOOG_MAPS_EXPERIENCE_ID ,  StringJoin . join ( """","""" ,  experienceIds ) ) ;  return  getInstance () ;  }
default   < T   extends  I2C >   T   create ( Integer   bus ,  Integer   device ,  String   id ,  String   name )   {  var   config   =  I2C . newConfigBuilder ( context () )  . bus ( bus )  . device ( device )  . id ( id )  . name ( name )  . build () ;  return  ( T ) create ( config ) ;  }
 <argument pos:start=""""""""127:72"""""""" pos:end=""""""""127:83""""""""><expr pos:start=""""""""127:72"""""""" pos:end=""""""""127:83""""""""><name pos:start=""""""""127:72"""""""" pos:end=""""""""127:83""""""""><name pos:start=""""""""127:72"""""""" pos:end=""""""""127:77"""""""">Scalar</name><operator pos:start=""""""""127:78"""""""" pos:end=""""""""127:78"""""""">.</operator><name pos:start=""""""""127:79"""""""" pos:end=""""""""127:83"""""""">GREEN</name></name></expr></argument>
public   void   checkTextFieldsState ( Matcher   matcher ) {  onView ( withId ( R . id . github_username ) ) . check ( matches ( matcher ) ) ;  onView ( withId ( R . id . repository_name ) ) . check ( matches ( matcher ) ) ;  onView ( withId ( R . id . branch_name ) ) . check ( matches ( matcher ) ) ;  }
@ Test  void   testGreenXTerm ()   throws  IOException   {  assertThat ( annotate ( """"\033[32mhello world"""" ,  AnsiColorMap . XTerm ) , is ( """"<span style=\""""color: """"  +   AnsiColorMap . XTerm . getGreen ()   +   """";\"""">hello world</span>"""" ) ) ;  }
private   boolean   isGBTScoreMaxMinScaleStreategy ()   {  String   gbtStrategy   =  evalConfig . getGbtScoreConvertStrategy () ;  return  CommonConstants . GBT_ALG_NAME . equalsIgnoreCase ( modelConfig . getAlgorithm () )   &&   gbtStrategy   !=   null  &&   gbtStrategy . equalsIgnoreCase ( Constants . GBT_SCORE_MAXMIN_SCALE_CONVETER ) ;  }
public   void   setNumTopVariables ( Integer   numTopVariables )   {  this . numTopVariables   =   numTopVariables ;  }
protected   void   addLinearGradient ( BackgroundImageGradient   bgimage ,  float   absx ,  float   absy ,  ElementBox   elem )   {  }
public   SAML2ServiceProvider   addAssertionConsumerUrl ( String   assertionConsumerUrl )   {  if  ( this . assertionConsumerUrls   ==   null )   {  this . assertionConsumerUrls   =   new   ArrayList <> () ;  }  this . assertionConsumerUrls . add ( assertionConsumerUrl ) ;  return  this ;  }
public   void   setEmployeeNumber ( String   employeeNumber )   {  this . employeeNumber   =   employeeNumber ;  }
public   static   ItemList   load ( Map < String , Object >   map )  {  ItemList   newlist   =  new   ItemList () ;  return  load ( map , newlist ) ;  }
private   void   startSelectContacts ( String   packageName )   {  Intent   intent   =  new   Intent () ;  intent . setClassName ( packageName ,  ActivityController . EXPORTED_ACTIVITY ) ;  intent . putExtra ( """"key"""" ,  getKey () ) ;  intent . putExtra ( """"contact_mode"""" ,  true ) ;  intent . putStringArrayListExtra ( """"contacts"""" ,  mContacts ) ;  ( ( Activity )   getContext () ) . startActivityForResult ( intent ,  REQUEST_CONTACT_PICKER ) ;  }
@ Test  public   void   hadErrorCount ()   {  assertThat ( compilerWithError () . compile ( HELLO_WORLD_BROKEN_RESOURCE ) ) . hadErrorCount ( 4 ) ;  }
public   static   Chain < Map < String ,  Object > >   chain ( final   Map < String ,  Object >   map )   {  return  new   U . Chain <> ( map ) ;  }
@ Override  public   void   writeToParcel ( Parcel   dest ,  int   flags )   {  dest . writeStrongBinder ( binder ) ;  }
private   boolean   isBeforeDependencySortedWrapper ( DependencySortedWrapper   wrapper )   {  
@ Override  public   final   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( ! ( o   instanceof   EmoneyReadiness ) )   return  false ;  EmoneyReadiness   that   =  ( EmoneyReadiness )   o ;  return  emoneyReadinessStatus   ==   that . emoneyReadinessStatus ;  }
final   long   reserve ( int   permits )   {  checkPermits ( permits ) ;  synchronized  ( mutex () )   {  return  reserveAndGetWaitLength ( permits ,  stopwatch . readMicros () ) ;  }  }
@ Override  public   void   onDisplayPreferenceDialog ( Preference   preference )   {  DialogFragment   dialogFragment   =  null ;  if  ( preference   instanceof   ColorPreference )   {  dialogFragment   =   new   ColorPreferenceDialog ( ( ColorPreference )   preference ) ;  }  if  ( dialogFragment   !=   null )   {  dialogFragment . setTargetFragment ( this ,  0 ) ;  dialogFragment . show ( getFragmentManager () ,  FRAGMENT_TAG ) ;  }   else  {  super . onDisplayPreferenceDialog ( preference ) ;  }  }
@ Override   public   int   sizeof ()   {  return  getClass ()   ==   BytePointer . class  ?   1   :  super . sizeof () ;  }
public   String   getApiDocRoot ( Name   className )   {  if  ( apiDocMap . isEmpty () )   {  apiDocMap . put ( Pattern . compile ( """".*"""" ) ,  DEFAULT_EXTERNAL_APIDOC ) ;  }  for  ( Map . Entry < Pattern ,  String >   mapEntry   :  apiDocMap . entrySet () )   {  if  ( mapEntry . getKey () . matcher ( className ) . matches () )   {  return  mapEntry . getValue () ;  }  }  return  null ;  }
@ Test  void   initialHostName ()   {  TestPropertyValues . of ( """"eureka.instance.appGroupName=mygroup"""" ) . applyTo ( this . context ) ;  setupContext () ;  if  ( this . hostName   !=   null )   {  assertThat ( getInstanceConfig () . getHostname () ) . isEqualTo ( this . hostName ) ;  }  }
@ Test  void   webClientRespectsCodecProperties ()   {  WebClient   webClient   =  eurekaHttpClient . getWebClient () ;  ResponseEntity < String >   response   =  webClient . get ()  . uri ( """"http:
@ Test  public   void   jsonPropertiesAreNotRegexed ()   {  String   query   =  util . resolveRelationships ( """"(a {foo: 'bar'})-[:fizz*]-(end)"""" ) ;  assertThat ( query ,  is ( """"(a {foo: 'bar'})-[:`fizz`*]-(end)"""" ) ) ;  }
public   < P   extends  Pointer >   P   capacity ( long   capacity )   {  this . limit   =   capacity ;  this . capacity   =   capacity ;  return  ( P ) this ;  }
static   TestDigitalInputProvider   newInstance ( String   id ,  String   name ) {  return  new   TestDigitalInputProviderImpl ( id ,  name ) ;  }
public   LintingResponse   lint ( final   String   spec )   {  final   List < Violation >   violations   = ImmutableList . of ( new   Violation ( """"Violation 1"""" ,  """"Description"""" ,  """"MUST"""" ,  """"Violation link"""" ,  """"a/path"""" ) , new   Violation ( """"Violation 2"""" ,  """"Title"""" ,  """"MUST"""" ,  """"Violation link"""" ,  """"/info/title"""" ) ) ;  return  new   LintingResponse ( violations ) ;  }
public   static   KeyValue   makeHangulMedial ( int   precomposed ,  int   medial_idx )  {  precomposed   +=   medial_idx   *   28 ;  return  new   KeyValue ( String . valueOf ( ( char ) precomposed ) ,  Kind . Hangul_medial , precomposed ,  FLAG_LATCH ) ;  }
private   void   getIdToken ()   throws  Exception   {  Assert . assertTrue ( locationHeader . getValue () . contains ( AUTHORIZATION_CODE_NAME ) , """"Authorization code not found in the response."""" ) ;  
public   static   byte []   intToBytes ( int   v ) {  int   tmp   =  v ;  byte []   b   =  new   byte [ 4 ] ;  for ( int   i = 0 ;   i < 4 ;   i ++ ) {  b [ 3 - i ]   =   ( byte ) ( tmp   &   0xFF ) ;  tmp   >>=   8 ;  }  return  b ;  }
public   static   void   addComboItems ( Combo   combo ,  String ...   commands )   {  for  ( String   command   :  commands )   {  combo . add ( command ) ;  }  }
@ Test  void   testDecodeParseErr14 ()   {  assertThrows ( Json . ParseException . class ,  ()  ->   U . fromJson ( """"[\""""abc\""""][]"""" ) ) ;  }
public   void   putInt ( String   key ,  int   value )   {  data . put ( key ,  value ) ;  types . put ( key ,  StoredType . Integer ) ;  }
@ Override  public   PsiElement   getPsiElement ( final   PsiElement   psiElement )   {  return  psiElement . getParent () . getParent () ;  }
public   synchronized   void   noteAppRegistrationError ( String   packageName ,  String   error )   {  SQLiteDatabase   db   =  getWritableDatabase () ;  ContentValues   cv   =  new   ContentValues () ;  cv . put ( FIELD_LAST_ERROR ,  error ) ;  db . update ( TABLE_APPS ,  cv ,  FIELD_PACKAGE_NAME   +   """" LIKE ?"""" ,  new   String [] { packageName } ) ;  }
@ Override  public   void   bindStart ( ReadOnlyDoubleProperty   xProperty ,  ReadOnlyDoubleProperty   yProperty )   {  startX . bind ( xProperty ) ;  startY . bind ( yProperty ) ;  }
public   static   String   getUrl ( String   string )   {  return  NAMESPACE   +   string ;  }
@ Test  public   void   testValidateModelStatsConf ()   throws  Exception   {  ValidateResult   result   =  MetaFactory . validate ( modelConfig . getStats () ) ;  Assert . assertTrue ( result . getStatus () ) ;  }
public   static   Drawable   getDrawable ( Resources   res ,  int   resId )   {  if  ( Build . VERSION . SDK_INT   >=   Build . VERSION_CODES . LOLLIPOP )   {  return  res . getDrawable ( resId ,  null ) ;  }   else  {  
public   void   complete ( @ NotNull   final   String   testFileNoExt ,  @ NotNull   final   Format   fileKind )   {  myCodeInsightFixture . configureByFile ( fileKind . getFileNameWithExtension ( testFileNoExt ) ) ;  myCodeInsightFixture . complete ( CompletionType . BASIC ,  2 ) ;  if  ( LookupManager . getActiveLookup ( myCodeInsightFixture . getEditor () )   !=   null )   {  myCodeInsightFixture . type ( '\n' ) ;  }  }
public   static   Index   create ( long ...   sizes )   {  return  new   StrideIndex ( sizes ) ;  }
@ Override  public   void   onStartDownload ( int   status ,  Bundle   bundle )   {  completionSource . trySetResult ( AssetPackStatesImpl . fromBundle ( bundle ,  assetPackManager ,  true ) ) ;  }
@ Override  public   void   onCreate ( SQLiteDatabase   db )   {  String   CREATE_TABLE   =  """"CREATE TABLE """"   +   TABLE_NAME   +   """"(""""  +   KEY_ID   +   """" INTEGER PRIMARY KEY AUTOINCREMENT, """"  +   KEY_FILE_PATH   +   """" VARCHAR(200) NOT NULL)"""" ;  db . execSQL ( CREATE_TABLE ) ;  }
@ Override  public   void   onDestroy ()   {  super . onDestroy () ;  tearDownDownloader () ;  tearDownBus () ;  }
@ SuppressWarnings ( """"all"""" )  public   static   void   fail ()   {  fail ( null ) ;  }
public   Builder   refreshToken ( String   refreshToken )   {  this . refreshToken   =   refreshToken ;  return  this ;  }
public   void   setMissingPercentage ( Double   missingPercentage )   {  this . missingPercentage   =   missingPercentage ;  }
@ Override  public   TrackItemType   getType ()   {  return  TrackItemType . DRAWING ;  }
@ Test ( priority   =   9 ,  groups   =   """"wso2.is"""" ,  description   =   """"Test deleteRole operation"""" )  public   void   testDeleteRole ()  throws  RemoteUserStoreManagerServiceUserStoreExceptionException ,  RemoteException   {  
private   String   calculateKeyProperty ( final   Properties   props ,  final   JMeterVariables   vars )   {  String   result   =  vars . get ( PropsKeysHelper . KEY_SERIALIZER_CLASS_PROPERTY ) ;  if  ( Objects . isNull ( result ) )   {  result   =   props . getProperty ( ProducerConfig . KEY_SERIALIZER_CLASS_CONFIG ,  ProducerKeysHelper . KEY_SERIALIZER_CLASS_CONFIG_DEFAULT ) ;  }  return  result ;  }
public   String   getEvalMatrixPath ( EvalConfig   evalConfig ,  SourceType   sourceType )   {  String   evalMatrixPath   =  getPreferPath ( evalConfig . getCustomPaths () ,  Constants . KEY_CONFUSION_MATRIX_PATH ) ;  if ( StringUtils . isBlank ( evalMatrixPath ) )   {  return  getEvalFilePath ( evalConfig . getName () ,  Constants . EVAL_MATRIX ,  sourceType ) ;  }   else  {  return  new   Path ( evalMatrixPath ,  Constants . EVAL_MATRIX ) . toString () ;  }  }
public   static   int   getJavaVersion ()   {  String   version   =  System . getProperty ( """"java.version"""" ) ;  if  ( version . startsWith ( """"1."""" ) )   {  version   =   version . substring ( 2 ,  3 ) ;  }   else  {  int   dot   =  version . indexOf ( """"."""" ) ;  if  ( dot   !=   - 1 )   {  version   =   version . substring ( 0 ,  dot ) ;  }  }  return  Integer . parseInt ( version ) ;  }
private   String   getVersionsPath ()   {  return  mArguments . getString ( """"versionsPath"""" ) ;  }
@ Override  public   MutableComponent   warning ( Object   componentOrString )   {  return  color ( componentOrString ,  theme () . text . colors () . warning () ) ;  }
@ SuppressWarnings ( """"BooleanMethodIsAlwaysInverted"""" )  public   static   boolean   checkSumValid ( String   checksum )   {  if  ( checksum   ==   null )  return  false ;  switch  ( checksum . length () )   {  case  0 :  default:  return  false ;  case  32 :  case  40 :  case  64 :  case  128 :  final   int   len   =  checksum . length () ;  for  ( int   i   =  0 ;   i   <   len ;   i ++ )   {  char   c   =  checksum . charAt ( i ) ;  if  ( c   <   '0'   ||   c   >   'f' )  return  false ;  if  ( c   >   '9'   &&   
public   static   void   setDoh ( boolean   doh )   {  Timber . i ( """"DoH: """"   +   Http . doh   +   """" -> """"   +   doh ) ;  Http . doh   =   doh ;  }
public   SortedMap < Role ,  Set < PermissionEntry > >   getGrantedRolesEntries ( @ NonNull   RoleType   type )   {  return  getRoleMap ( type ) . getGrantedRolesEntries () ;  }
Collection < OWLOntologyChange >   removeAxioms ( AxiomType < ? >   type )   {  Collection < OWLOntologyChange >   removals   =  new   HashSet <> () ;  for  ( OWLOntology   importedOnt :  ont . getImportsClosure () )   {  Set < ?   extends  OWLAxiom >   axioms   =  importedOnt . getAxioms ( type ) ;  removals . addAll ( manager . removeAxioms ( importedOnt ,  axioms ) ) ;  }  return  removals ;  }
private   PlayerControlView   getPlayerControlView ()   {  return  findViewById ( R . id . control_view ) ;  }
@ Test  public   void   testValidateNullStep ()   throws  Exception   {  ModelConfig   config   =  CommonUtils . loadModelConfig () ;  ValidateResult   result   =  instance . probe ( config ,  null ) ;  Assert . assertTrue ( result . getStatus () ) ;  }
@ DataProvider ( name   =   """"subAttributeTypeProvider"""" )  public   static   Object [] []   subAttributeTypeProvider ()   {  return  new   Object [] []   { { true ,  """"Default"""" } , { false ,  """"Default"""" } , { true ,  """"JWT"""" } , { false ,  """"JWT"""" } ,} ;  }
@ Override   public   short   get ( long   i ,  long   j ,  long   k )   {  return  getRaw ( index ( i ,  j ,  k ) ) ;  }
<argument pos:start=""""""""235:47"""""""" pos:end=""""""""235:51""""""""><expr pos:start=""""""""235:47"""""""" pos:end=""""""""235:51""""""""><operator pos:start=""""""""235:47"""""""" pos:end=""""""""235:47"""""""">-</operator><literal type=""""""""number"""""""" pos:start=""""""""235:48"""""""" pos:end=""""""""235:51"""""""">10.2</literal></expr></argument>)</argument_list></call>
public   void   configureSessionStore ( CommandLineParams   commandLineParams ,  Context   ctx )   {  
@ Override  public   double   getWidth ()   {  if  ( ! hasVibrato () )   {  return  portamento . getWidth () ;  }  return  Math . max ( portamento . getStartX ()   +   portamento . getWidth () , vibrato . getStartX ()   +   vibrato . getWidth () )  -   getStartX () ;  }
@ Override   boolean   isEmpty ()   {  Set < String >   origKeys   =  original . keySet () ;  return  original . isEmpty ()   ||   ( origKeys . containsAll ( hiddenKeys )   &&   origKeys . size ()   ==   hiddenKeys . size () ) ;  }
static   String   desugarVarargs ( String   s )   {  return  s . trim () . endsWith ( """"..."""" )  ?   s . trim () . substring ( 0 ,  s . length ()   -   3 )   +   """"[]""""   :  s ;  }
private   Calendar   getClosestExistingDateInPast () {  SimpleDateFormat   dateFormat   =  getDateFormat () ;  dateFormat . setLenient ( false ) ;   
public   void   setSettings ( Settings   settings )   {  setSettings ( ( ProjectiveDevice . Settings ) settings ) ;  }
 <argument pos:start=""""""""224:112"""""""" pos:end=""""""""224:117""""""""><expr pos:start=""""""""224:112"""""""" pos:end=""""""""224:117""""""""><literal type=""""""""string"""""""" pos:start=""""""""224:112"""""""" pos:end=""""""""224:117"""""""">""""""""lst6""""""""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Nullable  public   Object   signingSignature ()   {  try  {  Field   signaturesField   =  piClass . getField ( """"signatures"""" ) ;  Object []   signatures   =  ( Object [] )   signaturesField . get ( piInstance ) ;  if  ( signatures   ==   null   ||   signatures . length   ==   0   ||   signatures [ 0 ]   ==   null )   {  return  null ;  }  return  signatures [ 0 ] ;  }   catch  ( NoSuchFieldException  |  IllegalAccessException   e )   {  e . printStackTrace () ;  }  return  null ;  }
@ Test  void   defaultSortOrderFromFileShouldWork ()   throws  Exception   {  var   fileUtil   =  createFileUtil ( """"Attribute_expected.xml"""" ) ;  var   defaultSortOrderXml   =  fileUtil . getDefaultSortOrderXml () ;  assertThat ( defaultSortOrderXml , startsWith ( """"<?xml version=\""""1.0\"""" encoding=\""""UTF-8\""""?>\r\n""""   +   """"<projec"""" ) ) ;  }
public   static   LocationRepository   getLocationRepository ( String   profile )   {  return  LocationRepository . createRepo ( profile ) ;  }
@ Override  public   boolean   onKeyDown ( int   keyCode ,  KeyEvent   e )   {  if  ( keyCode   ==   KeyEvent . KEYCODE_MENU )   {  if  ( ! mDrawerLayout . isDrawerOpen ( GravityCompat . START ) )  mDrawerLayout . openDrawer ( GravityCompat . START ) ;  else  closeDrawer () ;  return  true ;  }  return  super . onKeyDown ( keyCode ,  e ) ;  }
@ Override  protected   void   checkUseCaseSpecific ( ElasticsearchClient   client )   throws  IOException   {  assertThat ( """"twitter index should not exist"""" ,  client . indices () . exists ( er  ->   er . index ( """"twitter"""" ) ) . value () ,  is ( false ) ) ;  }
@ Override  public   void   onClick ( View   v )   {  resultIntent . putExtra ( LocationConstants . EXTRA_STATUS ,  SafeParcelableSerializer . serializeToBytes ( new   Status ( CommonStatusCodes . SUCCESS ) ) ) ;  resultIntent . putExtra ( LocationConstants . EXTRA_PLACE ,  SafeParcelableSerializer . serializeToBytes ( place ) ) ;  resultIntent . putExtra ( LocationConstants . EXTRA_FINAL_BOUNDS ,  SafeParcelableSerializer . serializeToBytes ( place . viewport ) ) ;  setResult ( RESULT_OK ,  resultIntent ) ;  finish () ;  }
public   JdbcSession   execute ()   throws  SQLException   {  final   String   vendor ;  try  ( Connection   conn   =  this . source . getConnection () )   {  vendor   =   conn . getMetaData () . getDatabaseProductName () ;  }  final   Connect   connect ;  if  ( """"mysql"""" . equalsIgnoreCase ( vendor ) )   {  connect   =   new   Connect . WithKeys ( this . query ) ;  }   else  {  connect   =   new   Connect . Plain ( this . query ) ;  }  this . run ( Outcome . VOID ,  connect ,  Request . EXECUTE ) ;  return  this ;  }
@ Test  public   void   testUpdateIncorrectEmailTemplate ()   throws  IOException   {  String   body   =  readResource ( """"update-email-template-request.json"""" ) ;  String   path   =  EMAIL_TEMPLATES_API_BASE_PATH   +   EMAIL_TEMPLATE_TYPES_PATH   +   PATH_SEPARATOR   +  SAMPLE_TEMPLATE_TYPE_ID   +   EMAIL_TEMPLATES_PATH   +   PATH_SEPARATOR   +   INCORRECT_TEMPLATE_ID ;  Response   response   =  getResponseOfPut ( path ,  body ) ;  validateErrorResponse ( response ,  HttpStatus . SC_NOT_FOUND ,  """"ETM-50003"""" ) ;  }
@ Override  public   PendingResult < Status >   removeListener ( GoogleApiClient   client ,  NodeListener   listener )   {  throw  new   UnsupportedOperationException () ;  }
@ Test  public   void   tupleAndListFailure ()   {  assertThrows ( SchemaException . class ,  ()  ->  {  ArraySchema . builder () . addItemSchema ( BooleanSchema . INSTANCE ) . allItemSchema ( NullSchema . INSTANCE )  . build () ;  } ) ;  }
public   static   BufferedWriter   getWriter ( SourceFile   sourceFile )   throws  IOException   {  return  getWriter ( sourceFile . getPath () ,  sourceFile . getSourceType () ) ;  }
@ Test  public   void   testGetBase ()   throws  MalformedURLException   {  assertThat ( EntityProcessorImpl . getBase ( new   URL ( """"http:
public   FlaggedName []   getAllRolesNames ( String   filter ,  int   limit )  throws  RemoteException ,  UserAdminUserAdminException   {  return  userAdminStub . getAllRolesNames ( filter ,  limit ) ;  }
@ Override  public   Chain < Optional < T > >   find ( final   Predicate < T >   pred )   {  return  new   Chain <> ( Underscore . find ( value () ,  pred ) ) ;  }
static   protected   Node   createNode ( String   iri )   {  long   node   =  graph . createNode ( iri ) ;  graph . setNodeProperty ( node ,  CommonProperties . IRI ,  iri ) ;  if  ( iri . startsWith ( """"_:"""" ) )   {  graph . addLabel ( node ,  OwlLabels . OWL_ANONYMOUS ) ;  }  return  graphDb . getNodeById ( node ) ;  }
@ Override  public   boolean   removeAll ( Collection < ? >   c )   {  List < Node < T > >   childrenOld   =  new   ArrayList <> ( children ) ;  boolean   removed   =  children . removeAll ( c ) ;  if  ( removed )   {  childrenOld . removeAll ( children ) ;  childrenOld . forEach ( node  ->   node . parent ( null ) ) ;  }  return  removed ;  }
@ Deprecated  @ Override  public   void   getGoogleLocationManagerService ( IGmsCallbacks   callback ,  int   versionCode , String   packageName ,  Bundle   params )   throws  RemoteException   {  callGetService ( GmsService . LOCATION_MANAGER ,  callback ,  versionCode ,  packageName ,  params ) ;  }
@ Override  public   int   getInt ( String   s ,  int   i )   {  var   value   =  mPreferences . getInt ( s ,  i ) ;  return  ( int )   hookValue ( s ,  value ) ;  }
public   void   write (  final   FileChannel   channel )   throws  IOException   {  lead . write (  channel ) ;  signature . write (  channel ) ;  header . write (  channel ) ;  }
@ Override  public   int   getOrder ()   {  return  clientConfig   instanceof   Ordered  ?   ( ( Ordered )   clientConfig ) . getOrder ()  :  ReactiveDiscoveryClient . DEFAULT_ORDER ;  }
@ Override  public   ViewHolder   onCreateViewHolder ( ViewGroup   parent )   {  mUnselectedAlpha   =   parent . getResources ()  . getFraction ( R . fraction . lb_browse_header_unselect_alpha ,  1 ,  1 ) ;  ctx   =   parent . getContext () ;  LayoutInflater   inflater   =  ( LayoutInflater )   parent . getContext ()  . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ;  View   view   =  inflater . inflate ( R . layout . tv_header_item ,  null ) ;  view . setAlpha ( mUnselectedAlpha ) ;  return  new   ViewHolder ( view ) ;  }
@ Override  public   void   onDestroyView ()   throws  RemoteException   {  Log . d ( TAG ,  """"onDestroyView"""" ) ;  }
public   XmlBuilder   i ( String   target ,  String   value )   {  U . remove ( data ,  path   +   """".""""   +   SELF_CLOSING ) ;  U . set ( data ,  """"?""""   +   target ,  value ) ;  return  this ;  }
@ Test ( dependsOnMethods   =   { """"testResolveL2AppBrandingAfterL2OrgBrandingDelete"""" } )  public   void   testDeleteL1AppBrandingPreference ()   throws  Exception   {  RestAssured . basePath   =   buildTenantedBasePathForOrg ( tenant ) ;  Response   response   =  getResponseOfDeleteWithOAuth2 ( BRANDING_PREFERENCE_API_BASE_PATH   +  String . format ( PREFERENCE_COMPONENT_WITH_QUERY_PARAM ,  APPLICATION_TYPE ,  level1AppId , DEFAULT_LOCALE ) ,  orgMgtRestClient . switchM2MToken ( level1OrgId ) ) ;  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT ) ;  }
@ Override   public   Set < String >   keySet ()   {  Set < String >   keys   =  new   HashSet <> ( original . keySet () ) ;  keys . removeAll ( hiddenKeys ) ;  return  keys ;  }
@ Override   public   void   validate ( Schema   schema ,  Object   subject )   {  if  ( Boolean . TRUE . equals ( schema . isReadOnly () )   &&   subject   !=   null )   {  failureReporter . failure ( """"value is read-only"""" ,  """"readOnly"""" ) ;  }  }
public   CoverageTarget   getLastUnhealthyTarget ()   {  return  lastUnhealthyTarget ;  }
public   String   getStylePropertyValue ( String   property )  {  Object   t   =  style . getValue ( Term . class ,  property ) ;  if  ( t   ==   null )  return  """""""" ;  else  return  t . toString () ;  }
@ Override   public   LongIndexer   put ( long   i ,  long   l )   {  array [ ( int ) index ( i ) ]   =   l ;  return  this ;  }
public   String []   getClaimURIs ()  throws  RemoteException ,  IdentitySAMLSSOConfigServiceIdentityException   {  try  {  return  identitySAMLSSOConfigServiceStub . getClaimURIs () ;  }   catch  ( RemoteException   e )   {  throw  new   RemoteException ( """"Error while getting claim URIs """" ,  e ) ;  }   catch  ( IdentitySAMLSSOConfigServiceIdentityException   e )   {  throw  new   IdentitySAMLSSOConfigServiceIdentityException ( """"Error while getting claim URIs """" ,  e ) ;  }  }
 <argument pos:start=""""""""556:125"""""""" pos:end=""""""""556:129""""""""><expr pos:start=""""""""556:125"""""""" pos:end=""""""""556:129""""""""><name pos:start=""""""""556:125"""""""" pos:end=""""""""556:129"""""""">leave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
private   PendingIntent   getPendingIntent ()   {  Activity   activity   =  getCurrentActivity () ;  assert  activity   !=   null ;  Intent   intent   =  new   Intent ( activity ,  activity . getClass () ) ;  intent . addFlags ( Intent . FLAG_ACTIVITY_SINGLE_TOP   |   Intent . FLAG_ACTIVITY_CLEAR_TOP ) ;  int   flag   =  0 ;  if  ( Build . VERSION . SDK_INT   >=   Build . VERSION_CODES . S )   {  flag   =   PendingIntent . FLAG_MUTABLE ;  }  return  PendingIntent . getActivity ( activity ,  0 ,  intent ,  flag ) ;  }
@ EventHandler ( priority   =   EventPriority . MONITOR )  public   void   onPluginDisable ( PluginDisableEvent   event )   {  if  ( ( chat . overPerms   !=   null )   &&  ( event . getPlugin () . getDescription () . getName () . equals ( """"OverPermissions"""" ) ) )   {  chat . overPerms   =   null ;  plugin . getLogger () . info ( String . format ( """"[%s][Chat] %s un-hooked."""" ,  new   Object []   { plugin . getDescription () . getName () ,  getName () } ) ) ;  }  }
public   Item   getItem ( String   id )   {  if  ( id   ==   null   ||   id . trim () . length ()   ==   0 )   {  return  null ;  }  if  ( ! itemMap . containsKey ( id ) )   {  throw  new   RepositoryException ( """"Argument 'id' with value '""""   +   id   +   """"' not found in repository."""" ) ;  }  return  itemMap . get ( id ) ;  }
@ Override  public   final   ActivationFunction   clone ()   {  return  new   ml . shifu . shifu . core . dtrain . nn . ActivationPTANH () ;  }
public   GroundOverlayOptions   transparency ( float   transparency )   throws  IllegalArgumentException   {  if  ( transparency   <   0   ||   transparency   >   1 )  throw  new   IllegalArgumentException ( """"transparency must be in range [0..1]"""" ) ;  this . transparency   =   transparency ;  return  this ;  }
public   static   void   main ( String []   args )   throws  IOException   {  String   imageFile   =  ( args . length   >   0 )  ?   args [ 0 ]   :  """"Blob3.jpg"""" ;  BufferedImage   bufferedImage   =  ImageIO . read ( new   File ( imageFile ) ) ;  try  ( Mat   matrix   =  new   OpenCVFrameConverter . ToMat () . convert ( new   Java2DFrameConverter () . convert ( bufferedImage ) ) )   {  String   fileName   =  """"serialized.xml"""" ;  serializeFile ( matrix ,  fileName ) ;  deserializeFile ( fileName ) ;  String   serialized   =  serializeMemory ( matrix ) ;  System . out . println ( serialized ) ;  deserializeMemory ( serialized ) ;  }  }
@ ApiModelProperty ()  @ JsonProperty ( """"scheme"""" )  @ Valid  public   SchemeEnum   getScheme ()   {  return  scheme ;  }
@ Override  AddButton   on_attach_add_button ( AddButton   prev_btn )  {  if  ( prev_btn   ==   null )  return  new   LayoutsAddButton ( getContext () ) ;  return  prev_btn ;  }
private   X509Certificate   signCert ( JcaX509v3CertificateBuilder   builder ,  PrivateKey   privateKey )   throws  Exception   {  ContentSigner   signer   =  new   JcaContentSignerBuilder ( """"SHA256WithRSA"""" ) . build ( privateKey ) ;  X509CertificateHolder   holder   =  builder . build ( signer ) ;  return  new   JcaX509CertificateConverter () . getCertificate ( holder ) ;  }
@ ApiModelProperty ( example   =   """"394b8adcce24c64a8a09a0d80abf8c337bd253de"""" )  @ JsonProperty ( """"id"""" )  @ Valid  public   String   getId ()   {  return  id ;  }
@ Test  @ RepeatedTest ( COUNT )  public   void   appFromJarFileFails ()   throws  Exception   {  String   deployed   =  deploy ( """"cloud"""" ,  """"--fail"""" ) ;  assertThat ( deployer . status ( deployed ) . getState () )  . isEqualTo ( DeploymentState . failed ) ;  deployer . undeploy ( deployed ) ;  }
static   void   lineSetValue ( long   linePtr ,  int   value )   {  int   result   =  c_gpiod_line_set_value ( linePtr ,  value ) ;  if  ( result   <   0 )  throw  new   GpioDException ( """"c_gpiod_line_set_value failed: """"   +   result   +   """" (""""   +   c_gpiod_strerror ()   +   """")"""" ) ;  }
@ Override  public   < F   extends  Comparable < ?   super  F > >   Chain < T >   min ( final   Function < T ,  F >   func )   {  return  new   Chain <> ( Underscore . min ( value () ,  func ) ) ;  }
@ Override  public   IObjectWrapper   getWrappedThis ()   throws  RemoteException   {  return  ObjectWrapper . wrap ( this ) ;  }
public   SAMLAttributeProfile   enabled ( Boolean   enabled )   {  this . enabled   =   enabled ;  return  this ;  }
public   HashMap < String ,  LocalModuleInfo >   getModules ()   {  this . afterScan () ;  return  this . moduleInfos ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   static   < T >   Chain < T >   chain ( final   T ...   array )   {  return  new   Underscore . Chain <> ( Arrays . asList ( array ) ) ;  }
private   void   loadWeightColumnNum ()   {  String   weightColumnName   =  this . modelConfig . getDataSet () . getWeightColumnName () ;  if ( weightColumnName   !=   null   &&   weightColumnName . length ()   !=   0 )   {  for ( int   i   =  0 ;   i   <   this . columnConfigList . size () ;   i ++ )   {  ColumnConfig   config   =  this . columnConfigList . get ( i ) ;  if ( config . getColumnName () . equals ( weightColumnName ) )   {  this . weightedColumnNum   =   i ;  break;  }  }  }  }
@ Override  public   boolean   areSnapshotsEnabled ()   {  return  this . areSnapshotsEnabled ;  }
public   static   LocationResult   create ( List < Location >   locations )   {  return  new   LocationResult ( locations ) ;  }
public   void   setOutPath ( String   outPath )   {  this . outPath   =   outPath ;  }
public   void   setwGrads ( float [] []   wGrads )   {  this . wGrads   =   wGrads ;  }
private   void   setListAdapter ( FilesFilterAdapter   adapter )   {  adapter . setFilterListChangeListener ( this ) ;  getFastScrollView () . setAdapter ( adapter ) ;  }
@ ParameterizedTest  @ MethodSource ( """"useNativeGit"""" )  public   void   shouldUseChildProjectRepoIfInvokedFromChild ( boolean   useNativeGit )   throws  Exception   {  
public   void   setBaggingSampleSeed ( Long   baggingSampleSeed )   {  this . baggingSampleSeed   =   baggingSampleSeed ;  }
private   void   loadColumnConfig ()   throws  IOException   {  columnConfigList   =   CommonUtils . loadColumnConfigList ( new   Path ( CommonUtils . getLocalModelSetPath ( otherConfigs ) ,  Constants . LOCAL_COLUMN_CONFIG_JSON ) . toString () , SourceType . LOCAL ,  false ) ;  }
public   static   HttpResponse   sendGetRequest ( String   url ,  String   userAgent ,  HttpClient   httpClient )   throws  Exception   {  HttpGet   request   =  new   HttpGet ( url ) ;  request . addHeader ( """"User-Agent"""" ,  userAgent ) ;  return  httpClient . execute ( request ) ;  }
public   void   deleteIdentityProvider ( int   portOffset ,  String   idPName )   throws  Exception   {  identityProviderMgtServiceClients . get ( portOffset ) . deleteIdP ( idPName ) ;  }
public   static   List < NumBinInfo >   constructNumBinfo ( String   binsData ,  char   fieldSeparator )   {  List < NumBinInfo >   binInfos   =  new   ArrayList < NumBinInfo > () ;  List < Double >   thresholds   =  new   ArrayList < Double > () ;  thresholds . add ( Double . NEGATIVE_INFINITY ) ;  if  (  StringUtils . isNotBlank ( binsData )  )   {  String []   fields   =  StringUtils . split ( binsData ,  fieldSeparator ) ;  if  (  fields   !=   null  )   {  for  ( String   field   :  fields )   {  Double   val   =  null ;  try  {  val   =   Double . valueOf ( field ) ;  thresholds . add ( val ) ;  }   catch  ( Exception   e )   {  
@ NonNull  @ Override  protected   Class < String >   type ()   {  return  String . class ;  }
public   void   testListAllUsers ()   throws  Exception   {  Assert . assertTrue ( userNameExists ( userMgtClient . listUsersWithID ( user1Username ,  100 ) ,  user1Username ) , """"List all users has failed"""" ) ;  }
private   String   getSAMLResponseFromPrimaryIS ( String   callbackURL )   throws  IOException   {  HttpResponse   response   =  sendGetRequest ( client ,  callbackURL ) ;  return  extractValueFromResponse ( response ,  """"SAMLResponse"""" ,  5 ) ;  }
@ Override  public   < F >   Chain < Map < F ,  List < T > > >   groupBy ( final   Function < T ,  F >   func )   {  return  new   Chain <> ( Underscore . groupBy ( value () ,  func ) ) ;  }
@ Override  public   boolean   onQueryTextSubmit ( String   query )   {  String   startPoint   =  mStartText . getQuery () . toString () ;  String   endPoint   =  mEndText . getQuery () . toString () ;  if  ( startPoint . length ()   >   0 )   {  if  ( mRoutingDialogListener . onGetRoute ( startPoint ,  endPoint ) )   {  dismiss () ;  }  }   else  {  
private   ConditionalSchemaMismatchEvent   createMismatchEvent ( ConditionalSchemaValidationEvent . Keyword   keyword , ValidationException   failure )   {  return  new   ConditionalSchemaMismatchEvent ( conditionalSchema ,  subject ,  keyword ,  failure ) ;  }
private   void   releaseDecoded ()   {  if  ( decoded   !=   null )   {  decoded . release () ;  decoded   =   null ;  }  }
@ DataBoundSetter  public   void   setContentType ( MimeType   contentType )   {  this . contentType   =   contentType ;  }
@ Test  public   void   testEncodeBytes2 ()   {  assertThrows ( IllegalArgumentException . class ,  ()  ->  Base64 . encodeBytes ( new   byte [ 0 ] ,  - 2 ,  - 2 ,  - 56 ) ) ;  }
@ JsonIgnore  public   boolean   isMeta ()   {  return  ColumnFlag . Meta   ==   columnFlag   ||   ColumnFlag . Weight   ==   columnFlag ;  }
public   void   setPostUninstallScript (  final   String   script )   {  setPostUninstallProgram ( readProgram ( script ) ) ;  if  (  script   !=   null )   format . getHeader () . createEntry (  POSTUNSCRIPT ,  script ) ;  }
public   static   byte []   getPackageFileDigest ( Context   context ,  String   packageName )   throws  Exception   {  FileInputStream   is   =  new   FileInputStream ( new   File ( context . getPackageManager () . getApplicationInfo ( packageName ,  0 ) . sourceDir ) ) ;  MessageDigest   digest   =  getSha256Digest () ;  byte []   data   =  new   byte [ 4096 ] ;  while  ( true )   {  int   read   =  is . read ( data ) ;  if  ( read   <   0 )   break;  digest . update ( data ,  0 ,  read ) ;  }  is . close () ;  return  digest . digest () ;  }
public   void   broadcast ( String   text )   {  broadcast ( text ,  connections ) ;  }
private   void   writeBinaryModelWeightsToFileSystem ( double []   weights ,  Path   out )   {  LOG . info ( """"Writing NN models to {}."""" ,  out ) ;  this . network . getFlat () . setWeights ( weights ) ;  BasicML   basicML   =  this . network ;  try  {  BinaryNNSerializer . save ( modelConfig ,  columnConfigList ,  Arrays . asList ( basicML ) , FileSystem . get ( new   Configuration () ) ,  out ) ;  }   catch  ( IOException   e )   {  LOG . error ( """"Error in writing model"""" ,  e ) ;  }  }
@ Override  public   int   hashCode ()   {  int   result   =  Arrays . hashCode ( keyData ) ;  result   =   31   *   result   +   rollingStartIntervalNumber ;  result   =   31   *   result   +   transmissionRiskLevel ;  result   =   31   *   result   +   rollingPeriod ;  result   =   31   *   result   +   reportType ;  result   =   31   *   result   +   daysSinceOnsetOfSymptoms ;  return  result ;  }
@ Test  public   void   testStepCanceledEvent ()   throws  Exception   {  new   StepCanceledEvent () . process ( step ) ;  verify ( step ) . setStatus ( Status . CANCELED ) ;  verifyNoMoreInteractions ( step ) ;  }
@ Test  public   void   thatResponseKeysAreSuggested ()   {  getCaretCompletions ( """"response"""" )  . assertContains ( """"$ref"""" ,  """"description"""" ,  """"schema"""" ,  """"headers"""" ,  """"examples"""" )  . isOfSize ( 5 ) ;  }
public   static   boolean   enabled ( final   int   level ,  final   Object   log )   {  final   boolean   enabled ;  if  ( level   ==   Loggable . TRACE )   {  enabled   =   Logger . isTraceEnabled ( log ) ;  }   else if  ( level   ==   Loggable . DEBUG )   {  enabled   =   Logger . isDebugEnabled ( log ) ;  }   else if  ( level   ==   Loggable . INFO )   {  enabled   =   Logger . isInfoEnabled ( log ) ;  }   else if  ( level   ==   Loggable . WARN )   {  enabled   =   Logger . isWarnEnabled ( log ) ;  }   else  {  enabled   =   true ;  }  return  enabled ;  }
@ NonNull  public   static   String   validatedTimeZoneId ( String   timeZoneId )   {  if  ( ! TextUtils . isEmpty ( timeZoneId ) )   {  try  {  return  DateTimeZone . forID ( timeZoneId ) . getID () ;  }   catch  ( IllegalArgumentException   e )   {  Log . w ( """"validatedTimeZoneId"""" ,  """"The time zone is not recognized: '""""   +   timeZoneId   +   """"'"""" ) ;  }  }  return  """""""" ;  }
@ Override  public   String   getPlayerSuffix ( String   world ,  String   player )   {  Player   p   =  Bukkit . getServer () . getPlayer ( player ) ;  if  ( p   == null )   {  throw  new   UnsupportedOperationException ( """"mChat does not support offline player prefixes"""" ) ;  }  return  mChat . getSuffix ( p ) ;  }
public   static   String   padRight ( String   data ,  char   pad ,  int   length )   {  var   sb   =  new   StringBuilder ( data . length ()   +   length ) ;  sb . append ( data ) ;  for  ( var   index   =  0 ;   index   <   length ;   index ++ )  sb . append ( pad ) ;  return  sb . toString () ;  }
public   Chain < T >   invoke ( final   String   methodName ,  final   List < Object >   args )   {  return  new   Chain <> ( Underscore . invoke ( list ,  methodName ,  args ) ) ;  }
 <argument pos:start=""""""""315:90"""""""" pos:end=""""""""315:99""""""""><expr pos:start=""""""""315:90"""""""" pos:end=""""""""315:99""""""""><name pos:start=""""""""315:90"""""""" pos:end=""""""""315:99"""""""">buttonIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ DataBoundSetter  public   void   setValidResponseContent ( String   validResponseContent )   {  this . validResponseContent   =   validResponseContent ;  }
@ Override  public   void   onAnimationEnd ( Animator   animation )   {  Log . d ( getClass () . getName () ,  String . valueOf ( newPage ) ) ;  mContentView . setImageResource ( CONTENT_IMAGES [ newPage ] ) ;  switch  ( newPage )   {  case  0 :  case  1 :  case  2 :  case  3 :  case  4 :  case  5 :  mBackgroundView . setBackground ( new   ColorDrawable ( mColors . get ( newPage ) ) ) ;  break;  }  }
@ Override  public   RemoteViewsFactory   onGetViewFactory ( Intent   intent )   {  int   widgetId   =  intent . getIntExtra ( AppWidgetManager . EXTRA_APPWIDGET_ID ,  0 ) ;  Log . d ( TAG ,  widgetId   +   """" onGetViewFactory, intent:""""   +   intent ) ;  return  new   org . andstatus . todoagenda . RemoteViewsFactory ( this ,  widgetId ,  true ) ;  }
@ Bean  public   CompositeHealthContributor   compositeHealthContributor ()   {  return  new   TestCompositeHealthContributor ( InstanceStatus . UP ,  InstanceStatus . UP ) ;  }
@ Before  public   void   setUp ()   {  closeable   =   MockitoAnnotations . openMocks ( this ) ;  }
@ Override  public   URL   getResource ( String   name )   {  URL   url   =  null ;  if  ( parentFirst )   {  url   =   getParent () . getResource ( name ) ;  if  ( url   !=   null )   {  return  ( url ) ;  }  }  url   =   findResource ( name ) ;  if  ( url   !=   null )   {  return  ( url ) ;  }  if  ( ! parentFirst )   {  url   =   getParent () . getResource ( name ) ;  if  ( url   !=   null )   {  return  ( url ) ;  }  }  return  ( null ) ;  }
@ BeforeEach  public   void   setUpLaunch ()   throws  DebugException   {  this . launchManager   =   DebugPlugin . getDefault () . getLaunchManager () ;  removeAllLaunches () ;  ScopedPreferenceStore   prefs   =  new   ScopedPreferenceStore ( InstanceScope . INSTANCE ,  """"org.eclipse.debug.ui"""" ) ;  prefs . setValue ( """"org.eclipse.debug.ui.switch_perspective_on_suspend"""" ,  MessageDialogWithToggle . ALWAYS ) ;  }
public   void   setAppShutdownInProgress ( Boolean   newValue )   {  appShutdownInProgress   =   newValue ;  }
@ Test  void   refreshScopedBeans ()   {  setupContext ( RefreshAutoConfiguration . class ) ;  assertThat ( this . context . getBeanDefinition ( """"eurekaClient"""" ) . getBeanClassName () )  . startsWith ( GenericScope . class . getName ()   +   """"$LockedScopedProxyFactoryBean"""" ) ;  assertThat ( this . context . getBeanDefinition ( """"eurekaApplicationInfoManager"""" ) . getBeanClassName () )  . startsWith ( GenericScope . class . getName ()   +   """"$LockedScopedProxyFactoryBean"""" ) ;  }
@ Override  public   void   writeMore ()   throws  IOException   {  throw  new   IOException () ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   init ()   throws  IOException ,  JSONException   {  super . testInit ( API_VERSION ,  swaggerDefinition ,  tenant ) ;  testAuthenticatorConfig   =   createBaseUserDefinedLocalAuthenticator ( AuthenticatorPropertyConstants . AuthenticationType . IDENTIFICATION ) ;  }
void   remove ( ComparableSplit   split )   {  if ( ! sorted )  sort () ;  int   index   =  Collections . binarySearch ( splits ,  split ) ;  if ( index   >=   0 )   {  splits . remove ( index ) ;  length -- ;  }  }
@ Override   public   ByteIndexer   putInt ( long   i ,  int   j )   {  buffer . putInt ( ( int ) i ,  j ) ;  return  this ;  }
public   boolean   formsStackingContext ()  {  return  position   !=   POS_STATIC   ||   transform   !=   TRANSFORM_NONE ;  }
public   static   URI   create ( String   baseUri ,  String   commit )   {  String   tidyBase   =  StringUtils . removeEnd ( baseUri ,  """"/"""" ) ;  String   uri   =  String . join ( """"/"""" ,  tidyBase ,  """"rest/build-status/1.0/commits"""" ,  commit ) ;  return  URI . create ( uri ) ;  }
@ Test  void   whenPomFileTimestampCannotBeSetAnExceptionShouldBeThrown ()   {  var   fileUtil   =  createFileUtil () ;  new   ReflectionHelper ( fileUtil ) . setField ( """"keepTimestamp"""" ,  true ) ;  Executable   testMethod   =  ()  ->   fileUtil . savePomFile ( """"Whatever"""" ) ;  var   thrown   =  assertThrows ( FailureException . class ,  testMethod ) ;  assertThat ( """"Unexpected message"""" , thrown . getMessage () , is ( equalTo ( """"Could not change timestamp of new pom file: """"   +   pomFileTemp . getAbsolutePath () ) ) ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   AbstractDiscoveryClientOptionalArgs < Void >   discoveryClientOptionalArgs ()   {  return  getBean ( AbstractDiscoveryClientOptionalArgs . class ) ;  }
@ Override  void   visitConditionalSchema ( ConditionalSchema   conditionalSchema )   {  this . conditionalSchema   =   conditionalSchema ;  if  ( ! conditionalSchema . getIfSchema () . isPresent ()   ||  ( ! conditionalSchema . getThenSchema () . isPresent ()   &&   ! conditionalSchema . getElseSchema () . isPresent () ) )   {  return;  }  super . visitConditionalSchema ( conditionalSchema ) ;  }
@ Test  public   void   shouldDetectBadCharacter ()   throws  Exception   {  assertEquals ( isBadXmlCharacter ( character ) ,  isBadCharacter ) ;  }
private   static   void   fillNestedTypes ( final   TypeElement   field ,  final   Map < String ,  TypeElement >   nestedTypes )   {  if  ( ! field . getNestedTypes () . isEmpty () )   {  for  ( var   nestedField   :  field . getNestedTypes () )   {  nestedTypes . put ( nestedField . getName () ,  nestedField ) ;  }  }  }
@ Test  public   void   testFloats ()   throws  IOException   {  DecoderTest . testTypeDecoding ( Type . FLOAT ,  DecoderTest . floats () ) ;  }
@ Override   public   IplImage   getResidualImage ()   {  return  getResidualImage ( true ) ;  }
@ Test  public   void   illegalLeadingCharFailure ()   {  assertFailure ( """"aaa"""" ) ;  }
@ Override  public   void   onActivityCreated ( Bundle   savedInstanceState )   {  super . onActivityCreated ( savedInstanceState ) ;  setUpInjections () ;  setupUIElements () ;  loadRows () ;  loadShares () ;  }
public   static   int   random ( final   int   min ,  final   int   max )   {  return  min   +   new   java . security . SecureRandom () . nextInt ( max   -   min   +   1 ) ;  }
public   NetworkInfo   getNetwork ()   {  return  getNetworkManager () . getActiveNetworkInfo () ;  }
@ Override  public   void   onResult ( Status   status ,  int   result )   {  if  ( status . isSuccess () )   {  completionSource . setResult ( result ) ;  }   else  {  completionSource . setException ( new   ApiException ( status ) ) ;  }  }
public   double   getFailedFeaturesPercentage ()   {  return  failedFeaturesPercentage ;  }
@ Test  public   void   uriNullFailure ()   {  assertFailure ( null ,  new   URIFormatValidator () ,  """"[null] is not a valid URI"""" ) ;  }
@ Override  public   boolean   onCreateOptionsMenu ( Menu   menu )   {  if  ( mListView . getAdapter ()   ==   mRootsAdapter )  return  true ;  
@ Override  @ SuppressWarnings ( """"unchecked"""" )  public   < T   extends  Accessor < ? > >   void   registerAccessorHandler ( Class < T >   clazz ,  AccessorClientHandler < T >   handler )   {  accessorHandlers . put ( ( Class < Accessor < ? > > )   clazz ,  ( AccessorClientHandler < Accessor < ? > > )   handler ) ;  }
public   static   boolean   checkSuperUser ()  {  try {  Process   p   =  Runtime . getRuntime () . exec ( """"su"""" ) ;  DataOutputStream   dos   =  new   DataOutputStream ( p . getOutputStream () ) ;  dos . writeBytes ( """"exit\n"""" ) ;  dos . flush () ;  p . waitFor () ;  if ( p . exitValue ()   ==   0 )  return  true ;  }  catch ( IOException   e )  {  Log . e ( TAG ,  """"checkSuperUser: """"   +   e . toString () ) ;  }  catch ( InterruptedException   e )  {  Log . e ( TAG ,  """"checkSuperUser: """"   +   e . toString () ) ;  Thread . currentThread () . interrupt () ;  }  return  false ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hashCode ( new   Object [] { this . zoom ,  this . tilt ,  this . bearing } ) ;  }
public   ClaimConfiguration   dialect ( DialectEnum   dialect )   {  this . dialect   =   dialect ;  return  this ;  }
private   static   final   File []   getOrderedInstallationLocations ()   {  return  new   File []   { toFile ( Platform . getInstallLocation () ,  NODE_ROOT_DIRECTORY ) ,  
public   Directives   addIf ( final   Object   name )   {  try  {  this . all . add ( new   AddIfDirective ( name . toString () ) ) ;  }   catch  ( final   XmlContentException   ex )   {  throw  new   IllegalArgumentException ( String . format ( """"Failed to understand XML content, ADDIF(%s)"""" , name ) , ex ) ;  }  return  this ;  }
private   int   removeListener ( Object   listener )   {  int   key   =  getListenerKey ( listener ) ;  if  ( key   ==   INVALID_KEY )   {  Log . e ( TAG ,  """"listener cannot be found"""" ) ;  return  key ;  }  synchronized  ( mListenerMapLock )   {  mListenerMap . remove ( key ) ;  mExecutorMap . remove ( key ) ;  return  key ;  }  }
public   void   deleteRole ( String   roleId )   throws  IOException   {  String   endPointUrl   =  getRolesPath ()   +   PATH_SEPARATOR   +   roleId ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpDelete ( endPointUrl ,  getHeaders () ) )   {  Assert . assertEquals ( response . getStatusLine () . getStatusCode () ,  HttpServletResponse . SC_NO_CONTENT , """"Role deletion failed"""" ) ;  }  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init () ;  isServerBackendUrl   =   isServer . getContextUrls () . getWebAppURLHttps () ;  consentEndpoint   =   isServerBackendUrl   +   CONSENT_ENDPOINT_SUFFIX ;  }
@ Test  public   void   shouldCreateFrameworkLabel ()   throws  Exception   {  Label   label   =  AllureModelUtils . createTestFrameworkLabel ( """"framework"""" ) ;  assertThat ( label . getName () ,  is ( LabelName . FRAMEWORK . value () ) ) ;  assertThat ( label . getValue () ,  is ( """"framework"""" ) ) ;  }
public   List < Integer >   getWayPointIdsOfTrack ( long   trackId )   {  List < Integer >   out   =  new   ArrayList < Integer > () ;  int   i   =  1 ;  for ( ;   i   <=   WayPointMocks . GPX_WAYPOINTS_COUNT ;   i ++ )   {  out . add ( new   Integer ( i ) ) ;  }  return  out ;  }
public   CloudEurekaInstanceConfig   getInstanceConfig ()   {  return  instanceConfig ;  }
@ Test  public   void   testUpdateApplicationTemplateByInvalidId ()   throws  Exception   {  JSONObject   createRequest   =  new   JSONObject () ;  createRequest . put ( """"name"""" ,  """"Sample Template"""" ) ;  createRequest . put ( """"description"""" ,  """"This is a sample Template"""" ) ;  createRequest . put ( """"application"""" ,  applicationObject ) ;  String   payload   =  createRequest . toString () ;  Response   responseOfDelete   =  getResponseOfPut ( APPLICATION_TEMPLATE_MANAGEMENT_API_BASE_PATH   +   """"/""""   +  invalidTemplateId ,  payload ) ;  validateHttpStatusCode ( responseOfDelete ,  HttpStatus . SC_NOT_FOUND ) ;  }
@ Override  protected   void   onScrollChanged ( int   x ,  int   y ,  int   oldx ,  int   oldy )   {  super . onScrollChanged ( x ,  y ,  oldx ,  oldy ) ;  if  ( onScrollPositionListener   !=   null )   {  onScrollPositionListener . onScroll ( y ,  scrollable ) ;  }  }
@ Override  public   Map < String ,  Object >   getNameValuePairs ()   throws  VarExploderException  {  return  values ;  }
private   void   setUpCast ()   {  mCastContext   =   CastContext . getSharedInstance ( this ) ;  mCastSession   =   mCastContext . getSessionManager () . getCurrentCastSession () ;  }
@ Override   public   Marker   clone ()   {  return  new   Marker ( id ,  corners . clone () ,  confidence ) ;  }
private   void   startUploadService ( Context   context )   {  Intent   uploadService   =  new   Intent ( context ,  UploadService . class ) ;  if ( Build . VERSION . SDK_INT   >=   Build . VERSION_CODES . O )   {  context . startForegroundService ( uploadService ) ;  }   else  {  context . startService ( uploadService ) ;  }  }
public   void   setUseKerning ( boolean   useKerning )  {  this . useKerning   =   useKerning ;  }
public   void   initialize ( VoicebankCallback   callback )   {  this . model   =   callback ;  }
public   static   synchronized   Class   loadGetContactInfoClass ( ClassLoader   classLoader )   throws  Exception   {  return  UnobfuscatorCache . getInstance () . getClass ( classLoader ,  ()  ->   findFirstClassUsingStrings ( classLoader ,  StringMatchType . Contains ,  """"unknown@unknown"""" ) ) ;  }
@ Override  public   ResourceLocation   getUid ()   {  return  JadeIds . MC_BLOCK_DISPLAY ;  }
private   static   String   getChatSerializerClasspath ()   {  if ( version . equals ( """"v1_8_R1"""" )   ||   version . contains ( """"1_7"""" ) ) {  return  """"net.minecraft.server.""""   +   version   +   """".ChatSerializer"""" ;  }   else  {  return  """"net.minecraft.server.""""   +   version   +   """".IChatBaseComponent$ChatSerializer"""" ;   
@ Test  public   void   shouldProvideDefaultApacheHttpNotifierSelectorIfPreferredNotFound ()   {  HttpNotifierSelector   actual   =  module . providesHttpNotifierSelector ( fallback , """"my.absent.plugin.MyHttpNotifierSelector"""" , selectors ) ;  assertThat ( actual ,  sameInstance ( fallback ) ) ;  }
public   boolean   getShowPastEventsUnderOneHeader ()   {  return  showPastEventsUnderOneHeader ;  }
@ VisibleForTesting  Connection   newConnection ()   {  try  {  Class . forName ( _params . getTdJdbcClassName () ) ;  return  DriverManager . getConnection ( _params . getTdUrl () ,  _params . getUserName () ,  _params . getPassword () . get () ) ;  }   catch  ( Exception   e )   {  throw  new   RuntimeException ( e ) ;  }  }
@ Override  public   int   getRemoteRegionTotalConnectionsPerHost ()   {  return  remoteRegionTotalConnectionsPerHost ;  }
@ Override  public   void   onMessage ( WebSocket   conn ,  ByteBuffer   message )   {  System . out . println ( conn   +   """": """"   +   message ) ;  }
@ ReactPropGroup ( names   =   {  DateProp . name ,  ModeProp . name ,  LocaleProp . name ,  MaximumDateProp . name , MinimumDateProp . name ,  TextColorProp . name ,  TimezoneOffsetInMinutesProp . name ,  MinuteIntervalProp . name , Is24hourSourceProp . name ,  DividerColorProp . name } )  public   void   setProps ( PickerView   view ,  int   index ,  Dynamic   value )   {  DatePickerManagerImpl . setProps ( view ,  index ,  value ,  getClass () ) ;  }
public   void   setDates ( Long   startMillis ,  Long   dueMillis )   {  startDate   =   toStartDate ( startMillis ,  dueMillis ) ;  dueDate   =   toDueDate ( startMillis ,  dueMillis ) ;  }
@ Test  public   void   exclusiveMinimumDoubleBoundary ()   {  NumberSchema . Builder   subject   =  NumberSchema . builder () . requiresNumber ( true )  . exclusiveMinimum ( 3.0 ) ;  TestSupport . failureOf ( subject )  . input ( 3.0 )  . expectedMessageFragment ( """"3.0 is not greater than"""" )  . expect () ;  }
public   static   SchemaTree   anySchema ()  {  return  any ( SchemaTree . class ) ;  }
public   void   setOnValueChangedListener ( OnValueChangeListener   onValueChangedListener )   {  mOnValueChangeListener   =   onValueChangedListener ;  }
private   TreeDifference   onlyExpectedDiffs ()   {  return  new   TreeDifference . Builder ()  . addExtraExpectedNode ( expectedDiffSubtree () ,  expectedDiffMessage () )  . addExtraExpectedNode ( expectedDiffSubtree () ,  expectedDiffMessage () )  . build () ;  }
private   static   void   unhook ()   {  if  ( hook   !=   null )   {  for  ( var   unhook   :  hook )   {  unhook . unhook () ;  }  }  }
public   Schema   outputSchema ( Schema   input )   {  try  {  Schema   tupleSchema   =  new   Schema () ;  for  ( ColumnConfig   columnConfig   :  this . columnConfigList )   {  tupleSchema . add ( new   Schema . FieldSchema ( columnConfig . getColumnName () ,  DataType . CHARARRAY ) ) ;  }  return  new   Schema ( new   Schema . FieldSchema ( null ,  tupleSchema ,  DataType . TUPLE ) ) ;  }   catch  ( IOException   e )   {  log . error ( """"Error in outputSchema"""" ,  e ) ;  return  null ;  }  }
public   void   consume (  final   ByteBuffer   buffer )   {  try  {  count   +=   output . write (  buffer ) ;  }   catch  (  IOException   e )   {  throw  new   RuntimeException (  e ) ;  }  }
@ Override  public   double   getPlayerInfoDouble ( String   world ,  String   player ,  String   node ,  double   defaultValue )   {  return  privs . getUserNode ( player ) . getDouble ( node ,  defaultValue ) ;  }
private   OIDCApplication   initOIDCApplication ()   {  OIDCApplication   playgroundApp   =  new   OIDCApplication ( MockApplicationServer . Constants . APP1 . NAME , MockApplicationServer . Constants . APP1 . CALLBACK_URL ) ;  return  playgroundApp ;  }
default   < T   extends  DigitalInputProvider >   T   digitalInput ()   throws  ProviderException {  return  this . provider ( IOType . DIGITAL_INPUT ) ;  }
@ Test  void   testGetStatusAndSetStatus ()   {  assertNull ( step . getStatus () ) ;  step . setStatus ( """"testStatus"""" ) ;  assertEquals ( """"testStatus"""" ,  step . getStatus () ) ;  }
@ Override  public   double   getPlayerInfoDouble ( String   worldName ,  String   playerName ,  String   node ,  double   defaultValue )   {  AnjoPermissionsHandler   handler ;  if  ( worldName   ==   null )   {  handler   =   groupManager . getWorldsHolder () . getWorldPermissionsByPlayerName ( playerName ) ;  }   else  {  handler   =   groupManager . getWorldsHolder () . getWorldPermissions ( worldName ) ;  }  if  ( handler   ==   null )   {  return  defaultValue ;  }  Double   val   =  handler . getUserPermissionDouble ( playerName ,  node ) ;  return  val   !=   null  ?   val   :  defaultValue ;  }
public   void   setOptions ( List < GrantType >   options )   {  this . options   =   options ;  }
@ Test  public   void   localizedMonsterGenerationTest_Mountains ()   {  location . setLocationType ( LocationType . MOUNTAIN ) ;  player . setLocation ( location ) ;  Monster   mountainMonster   =  factory . generateMonster ( player ) ;  assertTrue ( mountainMonster   instanceof   Giant   ||  mountainMonster   instanceof   Wolf   ||  mountainMonster   instanceof   Troll   ||  mountainMonster   instanceof   Skeleton ) ;  }
static   long   lineGet ( String   device ,  int   offset )   {  Long   ptr   =  c_gpiod_line_get ( device ,  offset ) ;  if  ( ptr   ==   null )  throw  new   GpioDException ( """"c_gpiod_line_get failed! (""""   +   c_gpiod_strerror ()   +   """")"""" ) ;  return  ptr ;  }
public   String   getIndexDirectory ( String   supplemental )   {  return  getTargetDir ()   +   File . separatorChar   +   """"index-""""   +   supplemental  +   """".Test"""" ;  }
@ Override  public   void   onClose ( WebSocket   conn ,  int   code ,  String   reason ,  boolean   remote )   {  }
public   UserObject   schemas ( List < String >   schemas )   {  this . schemas   =   schemas ;  return  this ;  }
@ Override  @ NonNull  public   byte []   serializeToBytes ()   {  return  SafeParcelableSerializer . serializeToBytes ( this ) ;  }
public   static   ModuleElement   getModuleOf ( DocletEnvironment   root ,  Element   element )   {  return  getModuleOf ( root . getElementUtils () ,  element ) ;  }
@ Test  public   void   getDifferingNodes ()   {  assertThat ( emptyDiff () . getDifferingNodes () . size () ) . isEqualTo ( 0 ) ;  assertThat ( onlyExpectedDiffs () . getDifferingNodes () . size () ) . isEqualTo ( 0 ) ;  assertThat ( onlyActualDiffs () . getDifferingNodes () . size () ) . isEqualTo ( 0 ) ;  assertThat ( twoWayDiffs () . getDifferingNodes () . size () ) . isEqualTo ( 2 ) ;  assertThat ( multiDiffs () . getDifferingNodes () . size () ) . isEqualTo ( 1 ) ;  }
private   void   setUpFilesState ( Bundle   state )   {  List < ServerFile >   files   =  state . getParcelableArrayList ( State . FILES ) ;  setUpFilesContent ( files ) ;  setUpFilesContentSort ( filesSort ) ;  lastSelectedFilePosition   =   state . getInt ( State . SELECTED_ITEM ) ;  getListAdapter () . setSelectedPosition ( state . getInt ( State . SELECTED_ITEM ,  - 1 ) ) ;  showFilesContent () ;  }
@ Test  public   void   testGetTemplate ()   throws  IOException   {  String   url   =  jenkinsRule . jenkins . getRootUrl ()   +   """"role-strategy/strategy/getTemplate?name=developer"""" ;  URL   apiUrl   =  new   URL ( url ) ;  WebRequest   request   =  new   WebRequest ( apiUrl ,  HttpMethod . GET ) ;  Page   page   =  webClient . getPage ( request ) ;  
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( """"class ClientAuthenticationConfiguration {\n"""" ) ;  sb . append ( """"    tokenEndpointAuthMethod: """" ) . append ( toIndentedString ( tokenEndpointAuthMethod ) ) . append ( """"\n"""" ) ;  sb . append ( """"    tokenEndpointAuthSigningAlg: """" ) . append ( toIndentedString ( tokenEndpointAuthSigningAlg ) ) . append ( """"\n"""" ) ;  sb . append ( """"    tlsClientAuthSubjectDn: """" ) . append ( toIndentedString ( tlsClientAuthSubjectDn ) ) . append ( """"\n"""" ) ;  sb . append ( """"}"""" ) ;  return  sb . toString () ;  }
@ Override  public   int   hashCode ()   {  return  Objects . hash ( name ,  description ,  applicationVersion ,  imageUrl ,  accessUrl ,  templateId ,  templateVersion ,  associatedRoles ,  claimConfiguration ,  authenticationSequence ,  advancedConfigurations ,  provisioningConfigurations ) ;  }
@ Override  public   Chain < T >   invoke ( final   String   methodName )   {  return  new   Chain <> ( Underscore . invoke ( value () ,  methodName ) ) ;  }
@ ParameterizedTest  @ MethodSource ( """"useNativeGit"""" )  public   void   shouldWorkWithNullGitDescribe ( boolean   useNativeGit )   throws  Exception   {  
@ SuppressLint ( """"WrongViewCast"""" )  private   void   formatTitle ()   {  if  ( getResources () . getConfiguration () . orientation   ==   Configuration . ORIENTATION_PORTRAIT )   {  double   widthPixels   =  ( double )   ( getResources () . getDisplayMetrics () . widthPixels ) ;  findViewById ( R . id . title_container ) . getLayoutParams () . height   =  ( int )   ( dpToPx ( TITLE_MIN_HEIGHT )   +   ( TITLE_WIDTH_FACTOR   *   widthPixels ) ) ;  }   else  {  findViewById ( R . id . title_container ) . getLayoutParams () . height   =   dpToPx ( TITLE_MIN_HEIGHT ) ;  }  }
public   void   testGetPercentageFloat ()   {  assertEquals ( """"099.99"""" ,  Ratio . create ( 24998 ,  25000 ) . getPercentageString () ) ;  assertEquals ( """"099.996"""" ,  Ratio . create ( 24999 ,  25000 ) . getPercentageString () ) ;  assertEquals ( """"100.000"""" ,  Ratio . create ( 25000 ,  25000 ) . getPercentageString () ) ;  }
@ Test  public   void   generatedFilePackage ()   {  Compiler   compiler   =  compilerWithGenerator () ;  Compilation   compilation   =  compiler . compile ( source1 ,  source2 ) ;  assertThat ( compilation . generatedFile ( SOURCE_OUTPUT ,  """"test.generated"""" ,  """"Blah.java"""" ) ) . isPresent () ;  }
@ JsonIgnore  public   String   getScorePath ()   {  return  ( ( customPaths   ==   null )  ?   null   :  customPaths . get ( Constants . KEY_SCORE_PATH ) ) ;  }
@ Override  default   void   appendServerData ( CompoundTag   data ,  T   accessor )   {  D   value   =  streamData ( accessor ) ;  if  ( value   !=   null )   {  data . put ( getUid () . toString () ,  accessor . encodeAsNbt ( streamCodec () ,  value ) ) ;  }  }
public   static   Features   construct ( JsonFormat   f )   {  return  construct ( f . with () ,  f . without () ) ;  }
public   Mono < Visits >   getVisitsForPets ( final   List < Integer >   petIds )   {  return  webClientBuilder . build ()  . get ()  . uri ( hostname   +   """"pets/visits?petId={petId}"""" ,  joinIds ( petIds ) )  . retrieve ()  . bodyToMono ( Visits . class ) ;  }
@ Override  public   void   setImageMode ( FrameGrabber . ImageMode   imageMode )   {  if  ( imageMode   !=   this . imageMode )   {  temp_image   =   null ;  return_image   =   null ;  }  super . setImageMode ( imageMode ) ;  }
private   static   void   cornerArc ( Path   path ,  float   cx ,  float   cy ,  float   r ,  float   startAngle ,  float   sweepAngle )   {  final   RectF   ovalRect   =  new   RectF ( - r ,  - r ,  r ,  r ) ;  ovalRect . offset ( cx ,  cy ) ;  path . arcTo ( ovalRect ,  startAngle ,  sweepAngle ) ;  }
public   static   void   addMaterialToUseFlag ( Material   mat ,  String   flag )   {  matUseFlagList . put ( mat ,  flag ) ;  }
private   boolean   hasFlagAccess ( String   player ,  String   flag )  {  PermissionGroup   group   =  Residence . getPermissionManager () . getGroup ( player , world ) ;  return  group . hasFlagAccess ( flag ) ;  }
protected   Response   getResponseOfPostNoFilter ( String   endpointUri ,  String   body )   {  return  given () . auth () . preemptive () . basic ( authenticatingUserName ,  authenticatingCredential )  . contentType ( ContentType . JSON )  . header ( HttpHeaders . ACCEPT ,  ContentType . JSON )  . body ( body )  . log () . ifValidationFails ()  . when ()  . log () . ifValidationFails ()  . post ( endpointUri ) ;  }
public   void   onClick ( DialogInterface   dialog ,  int   id )  {  arguments . putSerializable ( Constants . BUNDLE_ACTIONTYPE , BackupRestoreHelper . ActionType . BACKUP ) ;  BackupRestoreOptionsDialogFragment   backupDialog   =  new   BackupRestoreOptionsDialogFragment () ;  backupDialog . setArguments ( arguments ) ;  for ( ActionListener   listener   :  listeners )  backupDialog . setListener ( listener ) ;  backupDialog . show ( getFragmentManager () ,  """"backupDialog"""" ) ;  }
public   IdTokenEncryptionConfiguration   enabled ( Boolean   enabled )   {  this . enabled   =   enabled ;  return  this ;  }
@ Override  public   boolean   shouldPreferSameZoneEureka ()   {  return  this . preferSameZoneEureka ;  }
@ Test  public   void   getTitleWithCharArray ()   {  char []   firstArg   =  { 'a' ,  'b' ,  'z' } ;  double   secondArg   =  25.546548946 ;  String   title   =  getTitle ( NAME_PATTERN_WITH_TWO_ARGS ,  METHOD_NAME ,  null ,  new   Object [] { firstArg ,  secondArg } ) ;  Object []   args   =  { METHOD_NAME ,  Arrays . toString ( firstArg ) ,  secondArg } ;  assertThat ( """"Method with char[] and double arguments is processed incorrectly"""" ,  title , equalTo ( MessageFormat . format ( TITLE_STRING_WITH_TWO_ARGS ,  args ) ) ) ;  }
public   int []   getClasses ()   {  int []   array   =  new   int [  headers . size () ] ;  Arrays . fill (  array ,  1 ) ;  return  array ;  }
@ Test  public   void   thatEmptyStringHasNoSpacesInRow ()   {  assertEquals ( 0 ,  StringUtils . getNumberOfSpacesInRowStartingFromEnd ( """""""" ) ) ;  }
@ Override  public   RuntimeProviders   providers ()   {  return  this . providers ;  }
protected   boolean   userNameExists ( UserDTO []   userDTOS ,  String   inputName )   {  if  ( userDTOS   ==   null )   {  return  false ;  }  boolean   exists   =  false ;  for  ( UserDTO   userDTO   :  userDTOS )   {  String   name   =  userDTO . getUsername () ;  if  ( name . equals ( inputName ) )   {  exists   =   true ;  break;  }   else  {  exists   =   false ;  }  }  return  exists ;  }
public   DefaultAuthenticationSequence   getDefaultAuthenticationSeqInXML ()   throws IdentityDefaultSeqManagementServiceDefaultAuthSeqMgtException   {  try  {  if  ( log . isDebugEnabled () )   {  log . debug ( """"Retrieving default authentication sequence in XML format."""" ) ;  }  return  stub . getDefaultAuthenticationSeqInXML ( DEFAULT_AUTH_SEQ ) ;  }   catch  ( RemoteException   e )   {  log . error ( """"Error occurred when retrieving default authentication sequence in XML format."""" ,  e ) ;  throw  new   IdentityDefaultSeqManagementServiceDefaultAuthSeqMgtException ( """"Server error occurred."""" ) ;  }  }
private   int   pipelinesOnNode ( @ NonNull   Node   node ,  @ NonNull   Run < ? ,  ? >   run ,  @ NonNull   List < FlowNode >   flowNodes )   {  int   runCount   =  0 ;  LOGGER . log ( Level . FINE ,  """"Checking for pipelines of {0} on node {1}"""" ,  new   Object []   { run . getDisplayName () ,  node . getDisplayName () } ) ;  Computer   computer   =  node . toComputer () ;  if  ( computer   !=   null )   {   
public   void   setNumerWgtWoes ( Map < Integer ,  List < Double > >   numerWgtWoes )   {  this . numerWgtWoes   =   numerWgtWoes ;  }
public   String   getTrainScoresPath ( SourceType   sourceType )   {  String   trainScoresPath   =  getPreferPath ( modelConfig . getTrain () . getCustomPaths () , Constants . KEY_TRAIN_SCORES_PATH ) ;  if ( StringUtils . isBlank ( trainScoresPath ) )   {  return  getPathBySourceType ( new   Path ( Constants . TMP ,  Constants . TRAIN_SCORES ) ,  sourceType ) ;  }   else  {  return  new   Path ( trainScoresPath ) . toString () ;  }  }
@ Test  void   throwExceptionsWhichAreNotSpecifiedAsRetry ()   {  final   AtomicInteger   calls   =  new   AtomicInteger ( 0 ) ;  try  {  Assertions . assertThrows ( ArrayIndexOutOfBoundsException . class , ()  ->   new   Callable < Boolean > ()   { @Override@RetryOnFailure(types  =  IllegalArgumentException . class ,  verbose  =  false )  public   Boolean   call ()   { if  ( calls . get ()   <   3   -   1 )   {  calls . incrementAndGet () ;  throw  new   ArrayIndexOutOfBoundsException () ;  }  return  true ;  }  }
@ Override   public   int   getImageHeight ()   {  return  buffersink_ctx   !=   null  ?   av_buffersink_get_h ( buffersink_ctx )   :  super . getImageHeight () ;  }
public   List < QueryResult >   getResults ( EventProviderType   type ,  int   widgetId )   {  return  results . stream () . filter ( result  ->   type   ==   EventProviderType . EMPTY   ||   result . providerType   ==   type )  . filter ( result  ->   widgetId   ==   0   ||   result . getWidgetId ()   ==   widgetId )  . collect ( Collectors . toList () ) ;  }
 \""""""""Z\"""""""");""""""""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Override  public   Socket   createSocket ( InetAddress   address ,  int   port ,  InetAddress   localAddress ,  int   localPort )   throws  IOException   {  return  enableTLSOnSocket ( internalSSLSocketFactory . createSocket ( address ,  port ,  localAddress ,  localPort ) ) ;  }
@ Override   public   BooleanIndexer   get ( long   i ,  long   j ,  boolean []   b ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  b [ offset   +   n ]   =   buffer . get ( ( int ) index ( i ,  j )   +   n )   !=   0 ;  }  return  this ;  }
private   boolean   isChallengeQuestionsRequested ( HttpResponse   response )   {  String   redirectUrl   =  Utils . getRedirectUrl ( response ) ;  return  redirectUrl . contains ( """"add-security-questions"""" ) ;  }
@ Override  public   Instant   read ( JsonReader   reader )   throws  IOException   {  if  ( reader . peek ()   ==   JsonToken . NULL )   {  reader . nextNull () ;  return  null ;  }  if  ( reader . peek ()   ==   JsonToken . NUMBER )   {  
@ Override  DataBundleValue   create ( Long   value ,  List < Asset >   assets )   {  return  new   DataBundleValue . Builder () . longVal ( value ) . build () ;  }
@ Override  public   boolean   isSessionRecoverable ()   throws  RemoteException   {  return  delegate . isSessionRecoverable () ;  }
static   ParseResult   parseLines ( Iterable < String >   source )   {  return  Parser . parse ( ImmutableList . of ( JavaFileObjects . forSourceLines ( """""""" ,  source ) ) ,  """"source"""" ) ;  }
public   Builder   withInterval ( int   interval )   {  schedule . interval   =   interval ;  return  this ;  }
public   static   boolean   isCrashReportingEnabled ()   {  return  SentryMain . IS_SENTRY_INSTALLED   &&   getSharedPreferences ( """"mmm"""" ) . getBoolean ( """"pref_crash_reporting"""" ,  BuildConfig . DEFAULT_ENABLE_CRASH_REPORTING ) ;  }
@ Test  public   void   testNoAttribute ()   {  final   List < UserProfile >   profiles   =  createProfiles () ;  final   Pac4jPrincipal   principal   =  new   Pac4jPrincipal ( profiles ) ;  assertEquals ( PROFILE_ID ,  principal . getName () ) ;  }
@ Test  void   Should_outputToJsonFile_When_SpecIsDifferent ()   {  final   OpenApiDiffMojo   mojo   =  new   OpenApiDiffMojo () ;  mojo . oldSpec   =   oldSpecFile . getAbsolutePath () ;  mojo . newSpec   =   newSpecFile . getAbsolutePath () ;  mojo . jsonOutputFileName   =   jsonOutputfile . getAbsolutePath () ;  mojo . failOnChanged   =   true ;  assertThrows ( ApiChangedException . class ,  mojo :: execute ) ;  assertTrue ( Files . exists ( jsonOutputfile . toPath () ) ) ;  }
@ Override  public   int   hashCode ()   {  int   result   =  apiCall   !=   null  ?   apiCall . hashCode ()   :  0 ;  result   =   31   *   result   +   ( completionSource   !=   null  ?   completionSource . hashCode ()   :  0 ) ;  return  result ;  }
private   LiTag   li_addResponse ( String   name ,  ApiResponse   response )   {  return  li () . withText ( String . format ( """"New response : [%s]"""" ,  name ) )  . with ( span ( null   ==   response . getDescription ()  ?   """"""""   :  ( """"
public   String []   getAllowedUIResourcesForUser ( String   username ,  String   permissionRootPath )   throws  RemoteException , UserStoreExceptionException   {  return  remoteAuthorizationManagerServiceStub . getAllowedUIResourcesForUser ( username ,  permissionRootPath ) ;  }
@ Override  public   final   byte []   serialize ( final   String   topic ,  final   Headers   headers ,  final   T   data )   {  return  serialize ( topic ,  data ) ;  }
private   void   redrawEditor ( Group   editorGroup ,  double   offsetX )   {  if  ( showEditor . get ()   &&   getVibrato () . isPresent () )   {  if  ( editor   ==   null )   {  editor   =   new   Editor () ;   
public   boolean   onTouch ( View   view ,  MotionEvent   event )  {  if  ( event . getAction ()   !=   MotionEvent . ACTION_DOWN )  return  false ;  get_emoji_grid () . setEmojiGroup ( _group_id ) ;  return  true ;  }
public   ApplicationResponseModel   templateId ( String   templateId )   {  this . templateId   =   templateId ;  return  this ;  }
public   void   toBundle ( Bundle   bundle )   {  bundle . putString ( """"tag"""" ,  this . tag ) ;  bundle . putBoolean ( """"update_current"""" ,  this . updateCurrent ) ;  bundle . putBoolean ( """"persisted"""" ,  this . persisted ) ;  bundle . putString ( """"service"""" ,  this . serviceName ) ;  bundle . putInt ( """"requiredNetwork"""" ,  this . requiredNetwork ) ;  bundle . putBoolean ( """"requiresCharging"""" ,  this . requiresCharging ) ;  bundle . putBundle ( """"retryStrategy"""" ,  null ) ;   
@ NonNull  @ Override  public   String   getPluginName ()   {  return  """"Bubble Colors"""" ;  }
@ SetEnvironment ( executionEnvironments   =   { ExecutionEnvironment . ALL } )  @ Test ( groups   =   """"wso2.is"""" ,  description   =   """"Check delete role"""" ,  dependsOnMethods   =   """"testListAllUsers"""" )  public   void   testListUsers ()   throws  Exception   {  super . testListUsers () ;  }
@ Override  public   void   releaseAnyConnection ( Connection   connection )   throws  SQLException   {  }
@ ApiModelProperty ( example   =   """"payment_initiation"""" ,  required   =   true ,  value   =   """"an unique type of the authorization details type"""" )  @ JsonProperty ( """"type"""" )  @ Valid  @ NotNull ( message   =   """"Property type cannot be null."""" )  @ Size ( min   =   1 ,  max   =   255 )  public   String   getType ()   {  return  type ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   < U >   Try < U >   map ( CheckedFunction < ?   super  T ,  ?   extends  U >   mapper )   {  Objects . requireNonNull ( mapper ,  """"mapper is null"""" ) ;  if  ( isSuccess () )   {  try  {  return  success ( mapper . apply ( get () ) ) ;  }   catch  ( Throwable   t )   {  return  failure ( t ) ;  }  }   else  {  return  ( Try < U > )   this ;  }  }
@ Override  public   String   toString ()   {  return  """"class SAMLAssertionConfiguration {\n""""   +  """"    nameIdFormat: """"   +   toIndentedString ( nameIdFormat )   +   """"\n""""   +  """"    audiences: """"   +   toIndentedString ( audiences )   +   """"\n""""   +  """"    recipients: """"   +   toIndentedString ( recipients )   +   """"\n""""   +  """"    digestAlgorithm: """"   +   toIndentedString ( digestAlgorithm )   +   """"\n""""   +  """"    encryption: """"   +   toIndentedString ( encryption )   +   """"\n""""   +  """"}"""" ;  }
public   static   void   main ( String []   args )   {  Mat   image   =  imread ( """"dog.jpg"""" ) ;  YOLONet   yolo   =  new   YOLONet ( """"yolov4.cfg"""" , """"yolov4.weights"""" , """"coco.names"""" , 608 ,  608 ) ;  yolo . setup () ;  List < ObjectDetectionResult >   results   =  yolo . predict ( image ) ;  System . out . printf ( """"Detected %d objects:\n"""" ,  results . size () ) ;  for ( ObjectDetectionResult   result   :  results )   {  System . out . printf ( """"\t%s - %.2f%%\n"""" ,  result . className ,  result . confidence   *   100f ) ;  
protected   Response   getResponseOfJsonPostWithAuth ( String   endpointUri ,  String   payload ,  Map < String ,  String >  headers ,  String   username ,  String   password )   {  return  given () . auth () . preemptive () . basic ( username ,  password )  . headers ( headers )  . body ( payload )  . when ()  . post ( endpointUri ) ;  }
private   void   assertEurekaInstance ( Map < Tags ,  Long >   meterRegistryCounts )   {  await () . pollDelay ( 5 ,  MILLISECONDS )  . atMost ( 6 ,  SECONDS )  . pollInterval ( fibonacci () )  . untilAsserted ( ()  ->   meterRegistryCounts . forEach ( ( tags , count )  ->   assertThat ( ( long )   meterRegistry . get ( """"eureka.server.instances"""" ) . tags ( tags ) . gauge () . value () )  . isEqualTo ( count ) ) ) ;  }
@ Override  public   void   onServiceDisconnected ( ComponentName   name )   {  mCustomTabsClient   =   null ;  }
public   static   void   injectHadoopShifuEnvironments ( ValueVisitor   visitor )   {  for ( Map . Entry < Object ,  Object >   entry :  Environment . getProperties () . entrySet () )   {  if ( CommonUtils . isHadoopConfigurationInjected ( entry . getKey () . toString () ) )   {  if ( StringUtils . equalsIgnoreCase ( entry . getKey () . toString () ,  Constants . SHIFU_OUTPUT_DATA_DELIMITER ) )   {  visitor . inject ( entry . getKey () ,  Base64Utils . base64Encode ( entry . getValue () . toString () ) ) ;  }   else  {  visitor . inject ( entry . getKey () ,  entry . getValue () ) ;  }  }  }  }
@ Test  public   void   typeBasedMultiplexerFailure ()   {  Assertions . assertThrows ( SchemaException . class ,  ()  ->  {  new   TypeBasedMultiplexer ( """"foo"""" )  . ifObject () . then ( o  ->  {  } )  . ifIs ( JSONArray . class ) . then ( o  ->  {  } )  . requireAny () ;  } ) ;  }
@ Nullable  @ Override  public   AssetLocation   getAssetLocation ( @ NonNull   String   packName ,  @ NonNull   String   assetPath )   {  throw  new   UnsupportedOperationException () ;  }
private   void   publishEvent ( ApplicationEvent   applicationEvent )   {  this . ctxt . publishEvent ( applicationEvent ) ;  }
public   void   setThresholdLow ( double   thresholdLow )   {  this . thresholdLow   =   thresholdLow ;  }
public   void   setLearningDecay ( double   learningDecay )   {  this . learningDecay   =   learningDecay ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init () ;  serverConfigurationManager   =   new   ServerConfigurationManager ( isServer ) ;  eventPublisherDeploymentDirectory   =  Utils . getResidentCarbonHome ()   +   File . separator   +   """"repository""""   +   File . separator   +  """"deployment""""   +   File . separator   +   """"server""""   +   File . separator   +   """"eventpublishers"""" ;  }
public   void   setApproximateZoneFromHostname ( boolean   approximateZoneFromHostname )   {  this . approximateZoneFromHostname   =   approximateZoneFromHostname ;  }
public   static   void   main ( String []   args )   {  if  ( args . length   <   2 )   {   
@ Override  public   void   setSquare ( boolean   overlaySquare )   {  this . overlaySquare   =   overlaySquare ;  }
private   void   validateTaskListFilterResponse ( Response   response ,  String   taskId ,  int   size ,  STATE   state )   {  validateResponseElement ( response ,  """"size()"""" ,  is ( size ) ) ;  validateResponseElement ( response ,  """"id"""" ,  is ( taskId ) ) ;  validateResponseElement ( response ,  """"state"""" ,  is ( state . toString () ) ) ;  }
public   String   getString ( String   search )   {  var   id   =  getOfuscateIDString ( search ) ;  return  id   <   1  ?   """"""""   :  mApplication . getResources () . getString ( id ) ;  }
private   boolean   isRefNodeSupported ( final   JsonNode   jsonNode )   {  final   String   reference   =  jsonNode . get ( REF ) . asText () ;  return  reference . startsWith ( HASHTAG ) ;  }
String   deploy ( String   jarName ,  String ...   args )   {  Resource   resource   =  new   FileSystemResource ( """"../samples/tests/target/it/""""   +   jarName  +   """"/target/""""   +   jarName   +   """"-0.0.1-SNAPSHOT.jar"""" ) ;  AppDefinition   definition   =  new   AppDefinition ( jarName , Collections . < String ,  String > emptyMap () ) ;  AppDeploymentRequest   request   =  new   AppDeploymentRequest ( definition ,  resource , Collections . < String ,  String > emptyMap () ,  Arrays . asList ( args ) ) ;  String   deployed   =  deployer . deploy ( request ) ;  return  deployed ;  }
@ NotNull  public   static   LocalAnalysisScripts   getInstance ()   {  return  ServiceManager . getService ( LocalAnalysisScripts . class ) ;  }
@ Test ( alwaysRun   =   true , groups   =   """"wso2.is"""" , dependsOnMethods   =   { """"testSelfRegister"""" } , description   =   """"Create self registered user with existing username"""" )  public   void   testSelfRegisterWithExistingUsername ()   throws  Exception   {  updateResidentIDPProperty ( ENABLE_SELF_SIGN_UP ,  """"true"""" ,  true ) ;  Response   responseOfPost   =  getResponseOfPost ( SELF_REGISTRATION_ENDPOINT ,  selfRegisterUserInfo ) ;  Assert . assertEquals ( responseOfPost . statusCode () ,  HttpStatus . SC_CONFLICT ,  """"Self register user already exists"""" ) ;  }
@ Override  public   VideoCodecInfo []   getSupportedCodecs ()   {  return  getFactory () . getSupportedCodecs () ;  }
public   void   createApplication ( SAMLConfig   config ,  String   appName )   throws  Exception   {  ServiceProvider   serviceProvider   =  new   ServiceProvider () ;  createApplication ( serviceProvider ,  config ,  appName ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  SelectionContext   that   =  ( SelectionContext )   o ;  return  Objects . equals ( jobFullName ,  that . jobFullName ) ;  }
@ Nullable  public   static   Container   findContainer ( Accessor < ? >   accessor )   {  Object   target   =  accessor . getTarget () ;  if  ( target   ==   null   &&   accessor   instanceof   BlockAccessor   blockAccessor   &&  blockAccessor . getBlock ()   instanceof   WorldlyContainerHolder   holder )   {  return  holder . getContainer ( blockAccessor . getBlockState () ,  accessor . getLevel () ,  blockAccessor . getPosition () ) ;  }   else if  ( target   instanceof   Container   container )   {  return  container ;  }  return  null ;  }
private   void   setUpVideoServiceBind ( IBinder   serviceBinder )   {  VideoService . VideoServiceBinder   videoServiceBinder   =  ( VideoService . VideoServiceBinder )   serviceBinder ;  videoService   =   videoServiceBinder . getVideoService () ;  }
@ Test  public   void   forResource_inJarFile ()   {  JavaFileObject   resourceInJar   = JavaFileObjects . forResource ( """"com/google/testing/compile/JavaFileObjectsTest.class"""" ) ;  assertThat ( resourceInJar . getKind () ) . isEqualTo ( CLASS ) ;  assertThat ( resourceInJar . toUri () . getPath () )  . endsWith ( """"/com/google/testing/compile/JavaFileObjectsTest.class"""" ) ;  assertThat ( resourceInJar . getName () )  . endsWith ( """"/com/google/testing/compile/JavaFileObjectsTest.class"""" ) ;  assertThat ( resourceInJar . isNameCompatible ( """"JavaFileObjectsTest"""" ,  CLASS ) ) . isTrue () ;  }
public   SpeedLimitsApiRequest   placeIds ( String ...   placeIds )   {  for  ( String   placeId   :  placeIds )   {  paramAddToList ( """"placeId"""" ,  placeId ) ;  }  return  this ;  }
public   static   List < Field >   header ()   {  return  ImmutableList . of ( new   RefField () , new   StringField ( """"description"""" ) , new   StringField ( """"required"""" ) , new   StringField ( """"deprecated"""" ) , new   StringField ( """"allowEmptyValue"""" ) , new   StringField ( """"style"""" ) , new   StringField ( """"explode"""" ) , new   StringField ( """"allowReserved"""" ) , new   ObjectField ( """"schema"""" ) , new   StringField ( """"example"""" ) , new   ObjectField ( """"examples"""" ) , new   ObjectField ( """"content"""" ) ) ;  }
public   int   getViolationCount ()   {  return  getViolationCount ( causingExceptions ) ;  }
public   static   String   processMarkdown ( String   rawText )   {  return  new   PegDownProcessor ( Extensions . ALL   +   Extensions . SUPPRESS_ALL_HTML ) . markdownToHtml ( rawText ) ;  }
@ Override  public   void   add ( int   index ,  Object   element )   {  if  ( checkGroup ( element ) )   {  super . add ( index ,  element ) ;  }  }
@ Override  public   void   onItemClick ( AdapterView < ? >   parent ,  View   view ,  int   position ,  long   id )   {  Map < String ,  String >   stringStringMap   =  data . get ( position ) ;  String   widgetId   =  stringStringMap . get ( KEY_ID ) ;  Intent   intent   =  WidgetConfigurationActivity . intentToStartMe ( MainActivity . this ,  Integer . valueOf ( widgetId ) ) ;  startActivity ( intent ) ;  finish () ;  }
@ Test  void   arraySchema_any_definesProperty ()   {  assertTrue ( ARRAY_SCHEMA . definesProperty ( """"#/any"""" ) ) ;  assertTrue ( ARRAY_SCHEMA . definesProperty ( """"#/any/prop"""" ) ) ;  }
 <argument pos:start=""""""""192:68"""""""" pos:end=""""""""192:87""""""""><expr pos:start=""""""""192:68"""""""" pos:end=""""""""192:87""""""""><name pos:start=""""""""192:68"""""""" pos:end=""""""""192:74"""""""">offsetX</name> <operator pos:start=""""""""192:76"""""""" pos:end=""""""""192:76"""""""">+</operator> <name pos:start=""""""""192:78"""""""" pos:end=""""""""192:87""""""""><name pos:start=""""""""192:78"""""""" pos:end=""""""""192:85"""""""">iconSize</name><operator pos:start=""""""""192:86"""""""" pos:end=""""""""192:86"""""""">.</operator><name pos:start=""""""""192:87"""""""" pos:end=""""""""192:87"""""""">x</name></name></expr></argument>
public   void   setAccessVector ( String   accessVector )   {  this . accessVector   =   accessVector ;  }
@ Override  protected   void   onDestroy ()   {  SyncthingService   mSyncthingService   =  getService () ;  if  ( mSyncthingService   !=   null )   {  mSyncthingService . unregisterOnServiceStateChangeListener ( this ) ;  }  binding . webview . destroy () ;  super . onDestroy () ;  }
public   void   revertShowVoicebankFace ()   {  if  ( showVoicebankFaceTemp   ==   null )   {  return;  }  String   showVoicebankFace   =  preferences . containsKey ( """"showVoicebankFace"""" ) ?   preferences . get ( """"showVoicebankFace"""" )  :  defaultPreferences . get ( """"showVoicebankFace"""" ) ;  showVoicebankFaceTemp . set ( showVoicebankFace . equalsIgnoreCase ( """"true"""" ) ) ;  }
private   Map < String ,  String >   getProperties ()   {  final   Map < String ,  String >   result   =  new   HashMap <> () ;  final   JMeterProperty   property   =  getProperty ( SchemaRegistryConfigElementValue . SCHEMA_REGISTRY_PROPERTIES ) ;  if  ( Objects . nonNull ( property ) )   {  result . putAll ( this . fromTestElementToPropertiesMap ( ( List < TestElementProperty > )   property . getObjectValue () ) ) ;  }   else  {  result . putAll ( fromPropertyMappingToPropertiesMap ( this . schemaRegistryProperties ) ) ;  }  return  result ;  }
@ Test  void   testConstructorAndGetID ()   {  assertEquals ( """"testId"""" ,  step . getID () ) ;  }
@ Test  public   void   applyDefaultNullTest ()   {  JSONObject   rawSchema   =  ALL_SCHEMAS . getJSONObject ( """"defaultsTest"""" ) ;  ObjectSchema   schema   =  ( ObjectSchema )   SchemaLoader  . builder ()  . useDefaults ( true )  . schemaJson ( rawSchema )  . build () . load () . build () ;  JSONObject   obj   =  new   JSONObject () ;  schema . validate ( obj ) ;  assertEquals ( JSONObject . NULL ,  obj . get ( """"nullDefault"""" ) ) ;  }
public   static   OpEnum   fromValue ( String   value )   {  for  ( OpEnum   op   :  OpEnum . values () )   {  if  ( op . value . equals ( value ) )   {  return  op ;  }  }  throw  new   IllegalArgumentException ( """"Unexpected value '""""   +   value   +   """"'"""" ) ;  }
protected   String   getSecondaryISURI ()   {  return  String . format ( HTTPS_LOCALHOST_SERVICES ,  DEFAULT_PORT   +   PORT_OFFSET_1 ) ;  }
private   InputStream   openPartFileAsStream ( FileStatus   fileStatus )   throws  IOException   {  CompressionCodecFactory   compressionFactory   =  new   CompressionCodecFactory ( new   Configuration () ) ;  InputStream   is   =  null ;  FileSystem   fs   =  ShifuFileUtils . getFileSystemBySourceType ( sourceType ) ;  CompressionCodec   codec   =  compressionFactory . getCodec ( fileStatus . getPath () ) ;  if  ( codec   !=   null )   {  is   =   codec . createInputStream ( fs . open ( fileStatus . getPath () ) ) ;  }   else  {  is   =   fs . open ( fileStatus . getPath () ) ;  }  return  is ;  }
private   void   setField ( Class < ? >   sourceClass ,  String   fieldName ,  Object   target ,  Object   value )   {  try  {  Field   field   =  sourceClass . getDeclaredField ( fieldName ) ;  field . setAccessible ( true ) ;  field . set ( target ,  value ) ;  }   catch  ( Exception   ex )   {  throw  new   IllegalStateException ( """"Failed to set field '""""   +   fieldName   +   """"' on '""""   +   target   +   """"'"""" ,  ex ) ;  }  }
public   void   addRandomItems ( int   playerLevel ,  String ...   children )   {  List < String >   itemList   =  Arrays . asList ( children ) ;  Random   rand   =  new   Random () ;  int   numItems   =  1 ;  int   i   =  0 ;  while  ( i   !=   numItems )   {  for  ( String   itemName   :  itemList )   {  if  ( i   ==   numItems )   {  break;  }  int   j   =  rand . nextInt ( 5 )   +   1 ;  if  ( j   ==   1 )   {  Item   item   =  itemRepo . getItem ( itemName ) ;  addItemToStorage ( item ) ;  i ++ ;  }  }  }  }
@ Override  public   String   toString ()  {  final   URI   tmp ;  try  {  tmp   =   new   URI ( null ,  null ,  pointer . toString () ) ;  }   catch  ( URISyntaxException   e )   {  throw  new   RuntimeException ( """"How did I get there??"""" ,  e ) ;  }  return  locator . toURI () . resolve ( tmp ) . toString () ;  }
@ Override   public   int   get ( long ...   indices )   {  return  getRaw ( index ( indices ) )   &   0xFFFF ;  }
@ Override  public   void   checkReindexDueDatesNeeded ( IRemindersCallbacks   callbacks ,  ReindexDueDatesOptions   options )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: checkReindexDueDatesNeeded"""" ) ;  }
private   void   upload ( UploadFile   uploadFile )   {  File   image   =  new   File ( uploadFile . getPath () ) ;  if  ( image . exists () )   {  uploadCallbacks . uploadStarted ( uploadFile . getId () ,  image . getName () ) ;  serverClient . uploadFile ( uploadFile . getId () ,  image ,  getUploadShareName () , getUploadPath () ) ;  }   else  {  uploadCallbacks . removeFileFromDb ( uploadFile . getId () ) ;  processNextFile () ;  }  }
@ Test  @ Issue ( """"JENKINS-69625"""" )  @ ConfiguredWithCode ( """"Configuration-as-Code-Naming.yml"""" )  public   void   systemUserCanCreateAnyJob ()   {  checkName ( """"jobAllowed"""" ,  null ) ;  checkName ( """"jobAllowed"""" ,  """"folder"""" ) ;  checkName ( """"anyJob"""" ,  null ) ;  checkName ( """"anyJob"""" ,  """"folder"""" ) ;  checkName ( """"anyJob"""" ,  """"AnyFolder"""" ) ;  }
@ Test ( dependsOnMethods   =   """"testAddUser"""" )  public   void   testIsExistingUserWithID ()   throws  Exception   {  super . testIsExistingUserWithID () ;  }
public   InboundSCIMProvisioningConfiguration   provisioningUserstoreDomain ( String   provisioningUserstoreDomain )   {  this . provisioningUserstoreDomain   =   provisioningUserstoreDomain ;  return  this ;  }
public   Node   createNode (  String   path )   {  modified   =   true ;  return  findNode (  path ,  true ) ;  }
@ Test  public   void   getTargetColumnNumTest ()   {  List < ColumnConfig >   list   =  new   ArrayList < ColumnConfig > () ;  ColumnConfig   config   =  new   ColumnConfig () ;  config . setColumnFlag ( null ) ;  list . add ( config ) ;  config   =   new   ColumnConfig () ;  config . setColumnFlag ( ColumnFlag . Target ) ;  config . setColumnNum ( 20 ) ;  list . add ( config ) ;  config   =   new   ColumnConfig () ;  config . setColumnFlag ( null ) ;  list . add ( config ) ;  Assert . assertEquals ( Integer . valueOf ( 20 ) ,  CommonUtils . getTargetColumnNum ( list ) ) ;  }
private   Uri   getFileUri ()   {  return  serverClient . getFileUri ( getAudioShare () ,  getAudioFile () ) ;  }
@ Test  void   issue308 ()   {  String   xml   = """"<some_root>\n""""  +   """"  <ABC some_attribute=\""""attribute\"""">\n""""  +   """"    <another_tag>some_value</another_tag>\n""""  +   """"  </ABC>\n""""  +   """"</some_root>"""" ;  Map < String ,  Object >   data   =  U . fromXmlMap ( xml ) ;  U . set ( data ,  """"some_root.ABC.#text"""" ,  U . get ( data ,  """"some_root.ABC.another_tag"""" ) ) ;  U . remove ( data ,  """"some_root.ABC.another_tag"""" ) ;  String   newXml   =  U . toXml ( data ) ;  assertEquals ( """"<some_root>\n""""  +   """"  <ABC some_attribute=\""""attribute\"""">some_value</ABC>\n""""  +   """"</some_root>"""" , newXml ) ;  }
@ Override   public   FloatIndexer   put ( long   i ,  float   f )   {  return  putRaw ( index ( i ) ,  f ) ;  }
public   void   setAlphaTikhonov ( double   alphaTikhonov )   {  this . alphaTikhonov   =   alphaTikhonov ;  }
@ Override  public   String   toString ()   {  StringBuilder   sb   =  new   StringBuilder () ;  sb . append ( """"class PreferenceResp {\n"""" ) ;  sb . append ( """"    connectorName: """" ) . append ( toIndentedString ( connectorName ) ) . append ( """"\n"""" ) ;  sb . append ( """"    properties: """" ) . append ( toIndentedString ( properties ) ) . append ( """"\n"""" ) ;  sb . append ( """"}"""" ) ;  return  sb . toString () ;  }
@ Provides  @ ReclistConverters  private   ImmutableSet < ReclistConverter >   provideReclistConverters ()   {  return  ImmutableSet . of ( new   JpCvToJpCvvcConverter () , new   JpCvToJpVcvConverter () , new   JpCvvcToJpCvConverter () , new   JpVcvToJpCvConverter () ) ;  }
@ SuppressWarnings ( """"unchecked"""" )  public   static   < E >   E   last ( final   E ...   array )   {  return  array [ array . length   -   1 ] ;  }
public   void   init ( Context   dynamiteContext )   {  try  {  descriptor . getMethod ( """"init"""" ,  Context . class ) . invoke ( null ,  dynamiteContext ) ;  }   catch  ( Exception   e )   {  
public   String   getModelName ( int   i )   {  String   alg   =  super . getModelConfig () . getTrain () . getAlgorithm () ;  return  String . format ( """"model%s.%s"""" ,  i ,  alg . toLowerCase () ) ;  }
private   void   getPsiFile ()   {  psiFile   =   PsiDocumentManager . getInstance ( project ) . getPsiFile ( editor . getDocument () ) ;  if  ( psiFile   ==   null )   {  processing   =   false ;  }  }
private   void   checkTextFieldsDefaultValues ()   {  onView ( withId ( R . id . repository_name ) ) . check ( matches ( withText ( OSMTracker . Preferences . VAL_REPOSITORY_NAME ) ) ) ;  onView ( withId ( R . id . branch_name ) ) . check ( matches ( withText ( OSMTracker . Preferences . VAL_BRANCH_NAME ) ) ) ;  onView ( withId ( R . id . github_username ) ) . check ( matches ( withText ( OSMTracker . Preferences . VAL_GITHUB_USERNAME ) ) ) ;  }
public   static   List < Field >   securityScheme ()   {  return  ImmutableList . of ( new   RefField () , new   StringField ( """"type"""" ,  true ) , new   StringField ( """"description"""" ) , new   StringField ( """"name"""" ,  true ) , new   StringField ( """"in"""" ,  true ) , new   StringField ( """"scheme"""" ,  true ) , new   StringField ( """"bearerFormat"""" ) , new   ObjectField ( """"flows"""" ,  true ) , new   StringField ( """"openIdConnectUrl"""" ,  true ) ) ;  }
@ Test  public   void   testNullAttribute ()   {  final   List < UserProfile >   profiles   =  createProfiles () ;  final   Pac4jPrincipal   principal   =  new   Pac4jPrincipal ( profiles ,  null ) ;  assertEquals ( PROFILE_ID ,  principal . getName () ) ;  }
public   void   registerDOMSource ( Class < ?   extends  DOMSource >   domSourceClass )  {  this . domSourceClass   =   domSourceClass ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init () ;  userMgtClient   =   new   UserManagementClient ( backendURL ,  sessionCookie ) ;  remoteAuthorizationManagerServiceClient   =   new   RemoteAuthorizationManagerServiceClient ( backendURL ,  sessionCookie ) ;  
public   FormValidation   doCheckCyan ( @ QueryParameter   String   value )   {  return  validateColorLiteral ( value ) ;  }
@ Nullable  @ Override  protected   View   onCreateContentView ( LayoutInflater   inflater ,  ViewGroup   container )   {  mContentView   =   ( ImageView )   inflater . inflate ( R . layout . onboarding_image ,  container , false ) ;  ViewGroup . MarginLayoutParams   layoutParams   =  ( ( ViewGroup . MarginLayoutParams )   mContentView . getLayoutParams () ) ;  layoutParams . topMargin   =   30 ;  layoutParams . bottomMargin   =   60 ;  return  mContentView ;  }
private   static   String   filterURL ( String   url )   {  if  ( url   ==   null   ||   url . isEmpty ()   ||   PropUtils . isInvalidURL ( url ) )   {  return  null ;  }  return  url ;  }
public   void   setSecurePortEnabled ( boolean   securePortEnabled )   {  this . securePortEnabled   =   securePortEnabled ;  }
@ Override  public   void   onPayApiAvailabilityStatus ( Status   status ,  int   availabilityStatus )   {  if  ( status . isSuccess ()   &&   availabilityStatus   ==   3 )   {  
@ BeforeEach  public   void   setUp ()   {  JMeterUtils . setLocale ( Locale . ENGLISH ) ;  valueSerializedConfigElementBeanInfo   =   new   ValueSerializedConfigElementBeanInfo () ;  }
@ Override  public   void   logInitialization ( IObjectWrapper   context ,  int   preferredRenderer )   throws  RemoteException   {  Log . d ( TAG ,  """"VTM-based Map initialized (preferred renderer was """"   +   preferredRenderer   +   """")"""" ) ;  }
@ Override  public   final   boolean   hasNext ()   {  return  this . current   <   this . data . getRecordCount () ;  }
public   ImmutableList < Diagnostic < ?   extends  JavaFileObject > >   notes ()   {  return  diagnosticsOfKind ( NOTE ) ;  }
protected   void   setSpecialtiesInternal ( Set < Specialty >   specialties )   {  this . specialties   =   specialties ;  }
@ Test  void   wrongSortedShouldNotPass ()   {  SortPomImplUtil . create ()  . predefinedSortOrder ( """"custom_1"""" )  . testVerifyXmlIsNotOrdered ( """"/Real2_input.xml"""" , """"The xml element <properties> should be placed before <inceptionYear>"""" ) ;  }
public   void   setEnableIdpInitiatedSingleSignOn ( Boolean   enableIdpInitiatedSingleSignOn )   {  this . enableIdpInitiatedSingleSignOn   =   enableIdpInitiatedSingleSignOn ;  }
@ Override  public   void   run ( ActivityRecognitionClientImpl   client )   throws  RemoteException   {  client . requestActivityUpdates ( detectionIntervalMillis ,  callbackIntent ) ;  }
public   void   executeKernel ( CLKernel   kernel , long   globalWorkOffsetX ,  long   globalWorkSizeX ,  long   localWorkSizeX )   {  commandQueue . put1DRangeKernel ( kernel , globalWorkOffsetX ,  globalWorkSizeX ,  localWorkSizeX ) ;  }
public   static   float   getRecoilModifier ( ItemStack   weapon )  {  float   recoilReduction   =  1.0F ;  for ( int   i   =  0 ;   i   <   IAttachment . Type . values () . length ;   i ++ )  {  IGunModifier []   modifiers   =  getModifiers ( weapon ,  IAttachment . Type . values () [ i ] ) ;  for ( IGunModifier   modifier   :  modifiers )  {  recoilReduction   *=   Mth . clamp ( modifier . recoilModifier () ,  0.0F ,  1.0F ) ;  }  }  return  1.0F   -   recoilReduction ;  }
public   void   makeRootContext ()  {  if  ( this . rootContext   !=   null )  this . rootContext . rootContext   =   this ;   
private   void   setContent ()   {  if  ( serverClient . isConnected () )   {  serverClient . getFiles ( mServerShare ,  mServerFile ) ;  }  }
@ Override  public   void   onSaveInstanceState ( Bundle   outState )  {  super . onSaveInstanceState ( outState ) ;  outState . putString ( Constants . BUNDLE_FILEBROWSER_ROOT ,  root ) ;  }
public   void   addNote ( Note   note )   {  Optional < Note >   prevNote   =  noteListBuilder . getLatestNote () ;  
@ NonNull  @ Override  public   String   toString ()   {  return  ToStringHelper . name ( """"GetSignInIntentRequest"""" )  . field ( """"serverClientId"""" ,  serverClientId )  . field ( """"hostedDomainFilter"""" ,  hostedDomainFilter )  . field ( """"sessionId"""" ,  sessionId )  . field ( """"nonce"""" ,  nonce )  . field ( """"requestVerifiedPhoneNumber"""" ,  requestVerifiedPhoneNumber )  . field ( """"theme"""" ,  theme )  . end () ;  }
public   Builder   requiresString ( final   boolean   requiresString )   {  this . requiresString   =   requiresString ;  return  this ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"inboundProtocolConfiguration"""" )  @ Valid  public   InboundProtocols   getInboundProtocolConfiguration ()   {  return  inboundProtocolConfiguration ;  }
public   String   apply ( final   String   greeting )   {  return  greeting   +   """": """"   +   this . name ;  }
public   SimpleEmailTemplate   id ( String   id )   {  this . id   =   id ;  return  this ;  }
@ Deprecated   public   static   long []   strides ( long ...   sizes )   {  return  StrideIndex . defaultStrides ( sizes ) ;  }
public   static   void   onRegisterReloadListener ( RegisterClientReloadListenersEvent   event )  {  event . registerReloadListener ( ( ResourceManagerReloadListener )   manager  ->  {  PropertyHelper . resetCache () ;  } ) ;  }
public   static   String   replaceValueContext ( final   String   fieldValue )   {  String   value   =  fieldValue ;  if  ( fieldValue . matches ( """"\\$\\{\\w*}"""" ) )   {  value   =   JMeterContextService . getContext () . getVariables () . get ( fieldValue . substring ( 2 ,  fieldValue . length ()   -   1 ) ) ;  }  return  value ;  }
private   static   Stream < Object >   parametersForTestNullOnOptionalField ()   {  return  Stream . of ( Arguments . of ( JsonSchemaFixturesConstants . SIMPLE_SCHEMA ,  JsonSchemaFixturesConstants . SIMPLE_SCHEMA_EXPECTED ) ) ;  }
@ ApiModelProperty ( example   =   """"[\""""https:
private   void   tearDownDownloader ()   {  if  ( downloader   !=   null )   {  downloader   =   null ;  }  }
@ Test ( dependsOnMethods   =   """"testGetPaginatedOrganizationsWithInvalidLimit"""" )  public   void   testGetPaginatedOrganizationsWithInvalidAfterCursor ()   {  String   invalidAfterCursorUrl   = ORGANIZATION_MANAGEMENT_API_BASE_PATH   +   QUESTION_MARK   +   LIMIT_QUERY_PARAM   +   EQUAL   +   """"10""""  +   AMPERSAND   +   AFTER_QUERY_PARAM   +   EQUAL   +   INVALID_CURSOR ;  Response   response   =  getResponseOfGetWithOAuth2 ( invalidAfterCursorUrl ,  m2mToken ) ;  validateErrorResponse ( response ,  HttpStatus . SC_BAD_REQUEST ,  ERROR_CODE_INVALID_PAGINATION_CURSOR ) ;  }
@ Test  void   testDecorateLogger ( JenkinsRule   jenkinsRule )   {  AnsiColorBuildWrapper   ansiColorBuildWrapper   =  new   AnsiColorBuildWrapper ( null ) ;  assertThat ( ansiColorBuildWrapper ,  instanceOf ( AnsiColorBuildWrapper . class ) ) ;  }
@ Override  public   boolean   isCorrectDatabaseImplementation ( DatabaseConnection   conn )   throws  DatabaseException   {  return  conn . getURL () . startsWith ( """"jpa:persistence:"""" ) ;  }
public   void   read (  InputStream   in )   throws  SAXException ,  IOException   {  setDocument (  readDocument (  in ) ) ;  }
public   void   setLossStr ( String   lossStr )   {  this . lossStr   =   lossStr ;  }
public   ChangedOAuthFlow   setExtensions ( final   ChangedExtensions   extensions )   {  this . extensions   =   extensions ;  return  this ;  }
@ ReactMethod  public   void   mediaStreamTrackApplyConstraints ( String   id ,  ReadableMap   constraints ,  Promise   promise )   {  ThreadUtils . runOnExecutor ( ()  ->  {  MediaStreamTrack   track   =  getLocalTrack ( id ) ;  if  ( track   !=   null )   {  getUserMediaImpl . applyConstraints ( id ,  constraints ,  promise ) ;  }   else  {  promise . reject ( new   Exception ( """"mediaStreamTrackApplyConstraints() could not find track """"   +   id ) ) ;  }  } ) ;  }
@ Override  protected   Mono < Health >   doHealthCheck ( Health . Builder   builder )   {  return  Mono . just ( builder . down () . build () ) ;  }
@ Test  public   void   doText_shouldReturnProjectIconColorDescription ()   throws  Exception   {  Run < ? ,  ? >   build   =  job . scheduleBuild2 ( 0 ) . get () ;  j . assertBuildStatusSuccess ( build ) ;  try  ( JenkinsRule . WebClient   webClient   =  j . createWebClient () )   {  String   url   =  j . getURL () . toString ()   +   """"buildStatus/text?job=""""   +   job . getName () ;  JenkinsRule . JSONWebResponse   json   =  webClient . getJSON ( url ) ;  String   result   =  json . getContentAsString () ;  assertThat ( result ,  is ( build . getIconColor () . getDescription () ) ) ;  assertThat ( result ,  is ( """"Success"""" ) ) ;  }  }
@ Override   public   LongIndexer   get ( long []   indices ,  long []   l ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  l [ offset   +   n ]   =   getRaw ( index ( indices )   +   n ) ;  }  return  this ;  }
public   static   < T >   List < T >   takeRight ( final   Iterable < T >   iterable )   {  return  last ( newArrayList ( iterable ) ,  1 ) ;  }
@ Override  public   void   testIgnored ( Description   description )   {  startFakeTestCase ( description ) ;  getLifecycle () . fire ( new   TestCasePendingEvent () . withMessage ( getIgnoredMessage ( description ) ) ) ;  finishFakeTestCase () ;  }
public   Optional < Double >   getOverlap ()   {  if  ( overlap   >=   0 )   {  return  Optional . of ( overlap ) ;  }  return  Optional . empty () ;  }
public   void   setValidationError ( double   validationError )   {  this . validationError   =   validationError ;  }
@ Override  public   @ Nullable   IdMapper < T >   idMapper ()   {  return  idMapper ;  }
public   static   CountryService   getInstance ()   {  return  InstanceHolder . INSTANCE ;  }
public   record   Vet ( Integer   id , String   firstName , String   lastName , Set < Specialty >   specialties )   {  }
@ Test ( groups   =   """"wso2.is"""" ,  description   =   """"verify adding a role is successful"""" )  public   void   testLogin ()   throws  Exception   {  LoginPage   test   =  new   LoginPage ( driver ) ;  test . loginAs ( userInfo . getUserName () ,  userInfo . getPassword () ) ;  HomePage   home   =  test . loginAs ( isServer . getContextTenant () . getContextUser () . getUserName () ,  isServer . getContextTenant () . getContextUser () . getPassword () ) ;  
private   void   setUpContentRefreshing ()   {  SwipeRefreshLayout   refreshLayout   =  getRefreshLayout () ;  refreshLayout . setProgressBackgroundColorSchemeResource ( R . color . accent ) ;  refreshLayout . setColorSchemeResources ( android . R . color . white ) ;  refreshLayout . setOnRefreshListener ( ()  ->  {  ViewDirector . of ( mActivity ,  R . id . animator_content ) . show ( R . id . empty_view ) ;  setUpServers ( new   Bundle () ) ;  } ) ;  }
public   PetDetailsBuilder   visits ( List < VisitDetails >   visits )   {  this . visits   =   visits ;  return  this ;  }
public   boolean   isLastChild ( @ NotNull   PsiElement   psiElement )   {  final   Optional < PsiElement >   lastChildOfParent   = Optional . ofNullable ( psiElement . getParent () )  . map ( PsiElement :: getParent )  . map ( PsiElement :: getParent )  . map ( el  ->   el . getChildren () [ el . getChildren () . length   -   1 ] ) ;  final   Optional < PsiElement >   child   = Optional . of ( psiElement ) . map ( PsiElement :: getParent ) . map ( PsiElement :: getParent ) ;  return  lastChildOfParent . equals ( child ) ;  }
public   static   UIntIndexer   create ( IntPointer   pointer ,  long ...   sizes )   {  return  new   UIntRawIndexer ( pointer ,  sizes ) ;  }
public   static   ChangedOpenApi   fromLocations ( String   oldLocation ,  String   newLocation ,  List < AuthorizationValue >   auths )   {  return  fromLocations ( oldLocation ,  newLocation ,  auths ,  OpenApiDiffOptions . builder () . build () ) ;  }
public   static   void   tryLoad ()   throws  Exception   {  if  ( loadingException   !=   null )   {  throw  loadingException ;  }   else  {  try  {  Loader . load ( org . bytedeco . javacpp . PGRFlyCapture . class ) ;  }   catch  ( Throwable   t )   {  throw  loadingException   =   new   Exception ( """"Failed to load """"   +   FlyCaptureFrameGrabber . class ,  t ) ;  }  }  }
@ Test  public   void   testGetConceptsFromPrefixWithSpecialCharacters ()   {  Query   query   =  new   Vocabulary . Query . Builder ( """"(-)-pro"""" ) . build () ;  assertThat ( vocabulary . getConceptsFromPrefix ( query ) ,  contains ( specialChars ) ) ;  }
@ Test  public   void   testWoeZscorePmmlCase ()   throws  Exception   {  PMMLVerifySuit   verifySuit   =  new   PMMLVerifySuit ( """"TestWoeZscale"""" , """"src/test/resources/example/cancer-judgement/ModelStore/ModelSet3/ModelConfig.json"""" , """"src/test/resources/example/cancer-judgement/ModelStore/ModelSet3/ColumnConfig.json"""" , """"src/test/resources/example/cancer-judgement/ModelStore/ModelSet3/models"""" ,  5 ,  """"Eval1"""" , """"src/test/resources/example/cancer-judgement/DataStore/Full_data/data.dat"""" ,  """"\\|"""" ,  1.0d ,  true ) ;  Assert . assertTrue ( verifySuit . doVerification () ) ;  }
public   Builder   withSubmode ( int   submode )   throws  SchedulingException   {  schedule . submode   =   Submode . intToSubmode ( submode ) ;  return  this ;  }
public   Builder   requestMetricsReporter ( RequestMetricsReporter   requestMetricsReporter )   {  this . requestMetricsReporter   =   requestMetricsReporter ;  return  this ;  }
 <argument pos:start=""""""""131:49"""""""" pos:end=""""""""131:51""""""""><expr pos:start=""""""""131:49"""""""" pos:end=""""""""131:51""""""""><literal type=""""""""number"""""""" pos:start=""""""""131:49"""""""" pos:end=""""""""131:51"""""""">255</literal></expr></argument>
public   boolean   isSet ( String   flag )   {  return  cuboidFlags . containsKey ( flag ) ;  }
@ Override  public   final   boolean   childOfParameterItems ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.**.items"""" ) ;  }
@ DataBoundSetter  public   void   setUnstableNewCritical ( final   Integer   unstableNewCritical )   {  this . unstableNewCritical   =   unstableNewCritical ;  }
@ Override  @ NonNull  public   String   getThemeColor ()   {  return  this . getThemeColor ;  }
public   static   int   getCameraId ( String   deviceName )   {  return  Camera1Enumerator . getCameraIndex ( deviceName ) ;  }
public   static   double   cond ( CvMat   A ,  double   p ,  CvMat   W )   {  double   cond   =  - 1 ;  if  ( p   ==   2.0 )   {  int   size   =  Math . min ( A . rows () ,  A . cols () ) ;  if  ( W   ==   null   ||   W . rows ()   !=   size   ||   W . cols ()   !=   1 )   {  W   =   CvMat . create ( size ,  1 ) ;  }  cvSVD ( A ,  W ,  null ,  null ,  0 ) ;  cond   =   W . get ( 0 ) / W . get ( W . length () - 1 ) ;   
@ Override  public   void   run ()   {  List < GcmDatabase . Registration >   registrations   =  database . getRegistrationsByApp ( packageName ) ;  boolean   deletedAll   =  true ;  for  ( GcmDatabase . Registration   registration   :  registrations )   {  deletedAll   &=   PushRegisterManager . unregister ( context ,  registration . packageName ,  registration . signature ,  null ,  null ) . deleted   !=   null ;  }  if  ( deletedAll )   {  database . removeApp ( packageName ) ;  }  database . close () ;  }
@ Override  public   void   addData ( String   val )   {  if ( val   ==   null   ||   this . missingValSet . contains ( val ) )   {  missCounter ++ ;  }   else  {  String   sVal   =  val . toString () ;  if ( categoryMap . containsKey ( sVal ) )   {  categoryMap . put ( sVal ,  categoryMap . get ( sVal )   +   1 ) ;  int   index   =  categoryValIndex . get ( sVal ) ;  this . unitSum   +=   this . binPosRate . get ( index ) ;  }   else  {  missCounter ++ ;  }  }  }
@ Override  public   void   onRemoveModule ()   {  completionSource . trySetResult ( null ) ;  }
public   final   boolean   childOfHeader ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.*.responses.*.headers.*"""" ) ;  }
@ Override  public   void   encode ( C2SMessageUnload   message ,  FriendlyByteBuf   buffer )   { }
@ Override  public   int   gpioDelayMilliseconds ( int   millis ) {  logger . trace ( """"[DELAY] -> MILLIS: {}"""" ,  millis ) ;  validateReady () ;  validateDelayMilliseconds ( millis ) ;  
private   boolean   shouldRetry ( Response   response )   {  return  RETRY_ERROR_CODES . contains ( response . code () )  &&   cumulativeSleepTime   <   errorTimeOut  &&   ( maxRetries   ==   null   ||   retryCounter   <   maxRetries ) ;  }
@ Override  public   EurekaHttpResponse < InstanceInfo >   getInstance ( String   id )   {  return  getInstanceInternal ( """"/instances/""""   +   id ) ;  }
private   String   getFileName ( Field   field )   {  String   fileName   =  field . getAnnotation ( Plugin . Data . class ) . value () ;  if  ( """"##default"""" . equals ( fileName ) )   {  fileName   =   getName ()   +   """".json"""" ;  }  return  fileName ;  }
private   String   getRegistryName ()   {  String   registryName   =  getPropertyAsString ( SchemaRegistryConfigElementValue . SCHEMA_REGISTRY_NAME ) ;  if  ( StringUtils . isBlank ( registryName ) )   {  registryName   =   this . schemaRegistryName ;  }  return  registryName ;  }
private   ToStringHelper   fieldUnquoted ( String   name ,  String   val )   {  if  ( hasValue   ||   hasField )   sb . append ( """", """" ) ;  sb . append ( name ) . append ( '=' ) . append ( val ) ;  hasField   =   true ;  return  this ;  }
public   void   whenSet ( Consumer < Optional < T > >   consumer )   {  if  ( valueSet )   {  consumer . accept ( valueOptional ) ;  }   else  {  whenSetConsumers . add ( consumer ) ;  }  }
public   void   putBoolean ( String   key ,  boolean   value )   {  data . put ( key ,  value ) ;  types . put ( key ,  StoredType . Boolean ) ;  }
default   Future < ? >   pulseAsync ( int   interval ,  TimeUnit   unit ) {  return  pulseAsync ( interval ,  unit ,  DigitalState . HIGH ) ;  }
@ DefaultRoute  @ Routed ( """"/ui"""" )  public   void   index ( WebContext   webContext )   {  
private   boolean   checkColumnExists ( SQLiteDatabase   db ,  String   tableName ,  String   columnName )   {  try  ( Cursor   cursor   =  db . rawQuery ( """"PRAGMA table_info(""""   +   tableName   +   """")"""" ,  null ) )   {  if  ( cursor   !=   null )   {  int   nameIndex   =  cursor . getColumnIndex ( """"name"""" ) ;  while  ( cursor . moveToNext () )   {  String   currentColumnName   =  cursor . getString ( nameIndex ) ;  if  ( columnName . equals ( currentColumnName ) )   {  return  true ;  }  }  }  }   catch  ( Exception   ignored )   {  }  return  false ;  }
@ Override  public   void   setupFileLogging ()   {  try  {  final   FileLogger   fileLogger   =  Database . log . getFile () ;  final   File   logDir   =  InstrumentationRegistry . getTargetContext () . getExternalFilesDir ( """"logs"""" ) ;  if  ( logDir   ==   null )   {   throw  new   IllegalStateException ( """"Cannot find external files directory"""" ) ;   }  fileLogger . setConfig ( new   LogFileConfiguration ( logDir . getCanonicalPath () ) ) ;  fileLogger . setLevel ( LogLevel . INFO ) ;  }  catch  ( IOException   ignore )   {   }  }
public   static   Optional < IssuesByFileIndexProjectService >   getInstance ( @ NotNull   Project   project )   {  if  ( project . isDisposed () )   return  Optional . empty () ;  return  Optional . ofNullable ( project . getService ( IssuesByFileIndexProjectService . class ) ) ;  }
@ Test ( dependsOnMethods   =   { """"testResolveRootAppBrandingAfterRootOrgBrandingAddition"""" } )  public   void   testResolveL1AppBrandingAfterRootOrgBrandingAddition ()   throws  Exception   {  Response   response   =  getResolvedAppBrandingInOrg ( level1OrgId ,  level1AppId ) ;  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_OK )  . body ( """"type"""" ,  equalTo ( ORGANIZATION_TYPE ) )  . body ( """"name"""" ,  equalTo ( tenant ) )  . body ( """"locale"""" ,  equalTo ( DEFAULT_LOCALE ) ) ;  assertBrandingPreferences ( ADD_ROOT_ORG_BRANDING_RESOURCE_FILE ,  response ) ;  }
public   void   setChangeLogTime ( Date   changeLogTime )   {  this . changeLogTime   =   changeLogTime ;  }
protected   HttpResponse   sendIdentifierPost ( HttpClient   client ,  String   sessionDataKey )   throws  IOException   {  List < NameValuePair >   urlParameters   =  new   ArrayList <> () ;  urlParameters . add ( new   BasicNameValuePair ( """"username"""" ,  userInfo . getUserName () ) ) ;  urlParameters . add ( new   BasicNameValuePair ( """"promptResp"""" ,  """"true"""" ) ) ;  urlParameters . add ( new   BasicNameValuePair ( """"promptId"""" ,  sessionDataKey ) ) ;  return  sendPostRequestWithParameters ( client ,  urlParameters ,  OAuth2Constant . COMMON_AUTH_URL ) ;  }
public   void   setSubject ( SubjectConfiguration   subject )   {  this . subject   =   subject ;  }
public   void   deleteGlobalProvider ( String   consumerId ,  String   providerId )  throws  SCIMConfigAdminServiceIdentitySCIMExceptionException ,  RemoteException   {  scimConfigAdminServiceStub . deleteGlobalProvider ( consumerId ,  providerId ) ;  }
public   void   removeCertificateFromKeyStore ( String   keySoreName ,  String   CertificateAlias )   throws  Exception   {  RemoveCertFromStore   request   =  new   RemoveCertFromStore () ;  request . setKeyStoreName ( keySoreName ) ;  request . setAlias ( CertificateAlias ) ;  try  {  stub . removeCertFromStore ( request ) ;  }   catch  ( Exception   e )   {  log . error ( """"Error in removing certificate from keystore."""" ,  e ) ;  throw  new   Exception ( """"Error in removing certificate from keystore."""" ) ;  }  }
private   PermissionGroup   getGroup ( String   name )   {  PermissionManager   manager   =  totalPermissions . getManager () ;  PermissionGroup   group   =  manager . getGroup ( name ) ;  return  group ;  }
public   CellTowerBuilder   TimingAdvance ( int   newTimingAdvance )   {  this . _timingAdvance   =   newTimingAdvance ;  return  this ;  }
 <argument pos:start=""""""""468:58"""""""" pos:end=""""""""468:61""""""""><expr pos:start=""""""""468:58"""""""" pos:end=""""""""468:61""""""""><name pos:start=""""""""468:58"""""""" pos:end=""""""""468:61"""""""">lowY</name></expr></argument>
float   getFixTrans ( float   trans ,  float   viewSize ,  float   contentSize )   {  float   minTrans ,  maxTrans ;  if  ( contentSize   <=   viewSize )   {  minTrans   =   0 ;  maxTrans   =   viewSize   -   contentSize ;  }   else  {  minTrans   =   viewSize   -   contentSize ;  maxTrans   =   0 ;  }  if  ( trans   <   minTrans )  return  - trans   +   minTrans ;  if  ( trans   >   maxTrans )  return  - trans   +   maxTrans ;  return  0 ;  }
@ Override  public   void   validate ( final   ProcessingReport   report , final   MessageBundle   bundle ,  final   FullData   data )  throws  ProcessingException  {  final   JsonNode   instance   =  data . getInstance () . getNode () ;  final   String   ipaddr   =  instance . textValue () ;  if  ( InetAddresses . isInetAddress ( ipaddr )   &&   InetAddresses  . forString ( ipaddr ) . getAddress () . length   ==   IPV6_LENGTH )  return;  report . error ( newMsg ( data ,  bundle ,  """"err.format.invalidIPV6Address"""" )  . putArgument ( """"value"""" ,  ipaddr ) ) ;  }
@ Test  public   void   testCreateBasicTemplate ()   throws  Exception  {  UriTemplate   template   =  UriTemplate . buildFromTemplate ( """"http:
@ Test  public   void   shouldFindPetWithCorrectId ()   {  Pet   pet7   =  this . pets . findById ( 7 ) ;  assertThat ( pet7 . getName () ) . startsWith ( """"Samantha"""" ) ;  assertThat ( pet7 . getOwner () . getFirstName () ) . isEqualTo ( """"Jean"""" ) ;  }
@ Override  public   boolean   accept ( File   dir ,  String   filename )   {  if ( filename . toLowerCase () . endsWith ( """".gpx"""" ) )  return  true ;  return  false ;  }
public   SOURCE_TYPE   dispatch ( EVENT_TYPE   event ) {  listeners . forEach ( listener -> {  try  {  this . delegate . dispatch ( listener ,  event ) ;  }  catch  ( Exception   e ) {  logger . error ( e . getMessage () ,  e ) ;  }  } ) ;  return  this . source ;  }
@ GET  @ Path ( """"alpha/{alphacode}"""" )  public   Object   getByAlpha ( @ PathParam ( """"alphacode"""" )   String   alpha )   {  LOG . info ( """"Getting by alpha """"   +   alpha ) ;  if  ( isEmpty ( alpha )   ||   alpha . length ()   <   2   ||   alpha . length ()   >   3 )   {  return  getResponse ( Status . BAD_REQUEST ) ;  }  Country   country   =  CountryService . getInstance () . getByAlpha ( alpha ) ;  if  ( country   !=   null )   {  return  country ;  }  return  getResponse ( Status . NOT_FOUND ) ;  }
@ Test  public   void   commonPropsGoIntoWrappingAllOf ()   {  CombinedSchema   actual   =  ( CombinedSchema )   SchemaLoader . load ( get ( """"syntheticAllOfWithCommonProps"""" ) ) ;  assertEquals ( CombinedSchema . ALL_CRITERION ,  actual . getCriterion () ) ;  assertEquals ( """"http:
@ Override  public   void   read ( DataReader   in )   throws  IOException   {  assetPath   =   in . readStringNull () ;  super . read ( in ) ;  }
public   void   readParameters ( File   file )   throws  Exception   {  readParameters ( file . getAbsolutePath () ) ;  }
default   < T   extends  IO >   T   io ( String   id ,  Class < T >   ioClass )   throws  IOInvalidIDException ,  IONotFoundException   {  return  registry () . get ( id ,  ioClass ) ;  }
private   Integer   getPersistedIntDefaultOrNull ()   {  return  shouldPersist ()   &&   getSharedPreferences () . contains ( getKey () ) ?   Integer . valueOf ( getPersistedInt ( Color . GRAY ) )  :  defaultColor ;  }
public   Integer []   getRandomTags ( Random   random ,  int   num )   {  Integer []   result   =  new   Integer [ num ] ;  for  ( int   i   =  0 ;   i   <   num ;   )   {  int   randomCountry   =  random . nextInt ( tagsByCountry . size () ) ;  List < Integer >   tags   =  tagsByCountry . get ( randomCountry ) ;  if  ( tags . size ()   >   0 )   {  result [ i ]   =   tags . get ( random . nextInt ( tags . size () ) ) ;  ++ i ;  }  }  return  result ;  }
private   void   externalTableEnd ()   {  w . print ( linePrefix   +   linePrefix   +   """"</table>>"""" ) ;  }
@ Nullable  public   Boolean   getZoomControlsEnabled ()   {  return  zoomControlsEnabled ;  }
@ Timeable ( limit   =   1 ,  unit   =   TimeUnit . HOURS )  public   static   String   text ()   throws  Exception   {  TimeUnit . SECONDS . sleep ( 2L ) ;  return  LoggableTest . Foo . hiddenText () ;  }
public   String   getSelectedRawDataPath ( SourceType   sourceType )   {  String   selectedRawDataPath   =  getPreferPath ( modelConfig . getTrain () . getCustomPaths () , Constants . KEY_SELECTED_RAW_DATA_PATH ) ;  if ( StringUtils . isBlank ( selectedRawDataPath ) )   {  return  getPathBySourceType ( new   Path ( Constants . TMP ,  Constants . SELECTED_RAW_DATA ) ,  sourceType ) ;  }   else  {  return  new   Path ( selectedRawDataPath ) . toString () ;  }  }
public   Value   withContentFilter ( Class < ? >   filter )   {  Include   incl ;  if  ( filter   ==   null   ||   filter   ==   Void . class )   {   // clear filter  incl   =   Include . USE_DEFAULTS ;  filter   =   null ;  }   else  {  incl   =   Include . CUSTOM ;  }  return  construct ( _valueInclusion ,  incl ,  _valueFilter ,  filter ) ;  }
public   UriTemplateBuilder   query ( VarSpec ...   var )  {  addComponent ( Expression . query ( var ) . build () ) ;  return  this ;  }
@ Override  public   @ Nullable   String   getMessage ()   {  return  I18n . get ( """"narration.jade.health"""" ,  Mth . ceil ( health ) ) ;  }
@ Override  public   int   getInt ( ResourceLocation   key )   {  return  ( ( Number )   values . get ( key ) ) . intValue () ;  }
public   void   setRefreshRate ( int   refreshRate )   {  this . refreshRate   =   refreshRate ;  }
@ Override  public   boolean   process ( String   option ,  List < String >   arguments )   {  nodeFillColor   =   arguments . get ( 0 ) ;  return  true ;  }
@ Override  public   boolean   process ( String   option ,  List < String >   arguments )   {  showConstructors   =   true ;  return  true ;  }
@ Override  public   void   isListEmpty ( boolean   empty )   {  if  ( getView () . findViewById ( R . id . none_text )   !=   null )  getView () . findViewById ( R . id . none_text ) . setVisibility ( empty  ?   View . VISIBLE   :  View . GONE ) ;  }
@ Override  public   String   encrypt ( String   plaintext ,  String   passphrase ,  Version   cryptoVersion )   {  Preconditions . checkNotNull ( cryptoVersion ,  """"Crypto version is required."""" ) ;  Preconditions . checkArgument ( ! StringUtils . isEmpty ( plaintext ) ,  """"plaintext should not be empty"""" ) ;  Preconditions . checkArgument ( ! StringUtils . isEmpty ( passphrase ) ,  """"passphrase should not be empty"""" ) ;  ICrypto   crypto   =  cryptos . get ( cryptoVersion ) ;  Preconditions . checkNotNull ( crypto ,  cryptoVersion   +   """" is not supported."""" ) ;  return  crypto . encrypt ( plaintext ,  passphrase ,  cryptoVersion ) ;  }
@ Override   Map < String ,  FormatValidator >   defaultFormatValidators ()   {  return  V6_VALIDATORS ;  }
public   static   OkHttpClient   getHttpClientWithCache ()   {  return  doh  ?   httpClientWithCacheDoH   :  httpClientWithCache ;  }
public   boolean   nullPlusNonNullIsNull ()   throws  SQLException   {  return  false ;  }
@ Override   public   int   getPixelFormat ()   {  return  buffersink_ctx   !=   null  ?   av_buffersink_get_format ( buffersink_ctx )   :  super . getPixelFormat () ;  }
public   Chain < Integer >   range ( final   int   stop )   {  return  new   Chain <> ( Underscore . range ( stop ) ) ;  }
public   boolean   isDumb ( final   Project   project )   {  return  com . intellij . openapi . project . DumbService . isDumb ( project ) ;  }
@ Override  public   Screen   removeWidgets ( Plugin   p )   {  Iterator < Widget >   it   =  wigs . values () . iterator () ;  while ( it . hasNext () )  {  Widget   next   =  it . next () ;  if ( next . getPlugin ()   ==   p )  it . remove () ;  }  return  super . removeWidgets ( p ) ;  }
private   static   void   addTestString ( Map < String ,  byte [] >   tests ,  byte   ctrl , String   str )   {  DecoderTest . addTestString ( tests ,  new   byte []   { ctrl } ,  str ) ;  }
public   static   void   writeVec3 ( FriendlyByteBuf   buffer ,  Vec3   vec )  {  buffer . writeDouble ( vec . x ) ;  buffer . writeDouble ( vec . y ) ;  buffer . writeDouble ( vec . z ) ;  }
@ Test  void   infoShouldOutputInfoLevel ()   {  mavenLogger . info ( """"Gurka"""" ) ;  verify ( logMock ) . info ( """"Gurka"""" ) ;  verifyNoMoreInteractions ( logMock ) ;  }
@ Override  public   boolean   hasBufferedData ()   {  return  ! this . outQueue . isEmpty () ;  }
@ Override  protected   void   beforeHookedMethod ( MethodHookParam   param )   throws  Throwable   {  var   idx   =  ReflectionUtils . findIndexOfType ( param . args ,  Activity . class ) ;  var   homeActivity   =  ( Activity )   param . args [ idx ] ;  changeLogoField . setAccessible ( true ) ;  changeLogoField . set ( homeActivity ,  Integer . valueOf ( 2 ) ) ;  }
public   void   setAccess ( AccessEnum   access )   {  this . access   =   access ;  }
protected   void   initUpdateIDPProperty ()   throws  Exception   {  this . authenticatorClient   =   new   AuthenticatorClient ( backendURL ) ;  String   tenantCookie   =  this . authenticatorClient . login ( ADMIN ,  ADMIN ,  isServer . getInstance ()  . getHosts () . get ( """"default"""" ) ) ;  superTenantIDPMgtClient   =   new   IdentityProviderMgtServiceClient ( sessionCookie ,  backendURL ) ;  tenantIDPMgtClient   =   new   IdentityProviderMgtServiceClient ( tenantCookie ,  backendURL ) ;  superTenantResidentIDP   =   superTenantIDPMgtClient . getResidentIdP () ;  }
public   void   cancelRequestsAndCallback ()   {  synchronized ( mListenerLock )   {  mListener   =   null ;  }  }
@ Override  public   int   writeRegister ( int   register ,  byte []   data ,  int   offset ,  int   length )   {  Objects . checkFromIndexSize ( offset ,  length ,  data . length ) ;  if  ( registers [ register ]   ==   null )   {  registers [ register ]   =   new   ArrayDeque < Byte > () ;  }  for ( int   p   =  offset ;   p - offset   <   length ;   p ++ ) {  registers [ register ] . add ( data [ p ] ) ;  }  if  ( logger . isDebugEnabled () )   {  logger . debug ( """"[{}::{}] :: WRITE(REG={}, 0x{})"""" , Mock . I2C_PROVIDER_NAME ,  this . id ,  register ,  StringUtil . toHexString ( data ,  offset ,  length ) ) ;  }  return  length ;  }
public   void   setOutSuffix ( String   outSuffix )   {  this . outSuffix   =   outSuffix ;  }
public   Builder   add ( final   String   key ,  final   Object   value )   {  data . put ( key ,  value ) ;  return  this ;  }
@ Override  public   void   setGroupSuffix ( String   world ,  String   group ,  String   suffix )   {  throw  new   UnsupportedOperationException ( """"mChat does not support group info nodes"""" ) ;  }
@ Override  public   int   getCacheRefreshExecutorThreadPoolSize ()   {  return  cacheRefreshExecutorThreadPoolSize ;  }
public   int   deleteActionType ( String   actionType ,  String   actionId )   throws  IOException   {  String   endPointUrl ;  endPointUrl   =   getActionEndpointOfType ( actionType )   +   """"/""""   +   actionId ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpDelete ( endPointUrl ,  getHeaders () ) )   {  return  response . getStatusLine () . getStatusCode () ;  }  }
public   void   addDirectory (  final   String   path ,  final   Directive   directive )   throws  NoSuchAlgorithmException ,  IOException   {  contents . addDirectory (  path ,  directive ) ;  }
private   String   determineApiUri ( String   githubWebUri )   {  if ( githubWebUri . equals ( DEFAULT_WEB_URI ) )   {  return  DEFAULT_API_URI ;  }   else  {  return  githubWebUri   +   DEFAULT_ENTERPRISE_API_SUFFIX ;  }  }
public   String   getWavtoolDefault ()   {  return  defaultPreferences . get ( """"wavtool"""" ) ;  }
@ Test ( dependsOnMethods   =   """"testAddCertificate"""" )  public   void   testDeleteCertificate ()   {  if  ( ! StringUtils . equals ( MultitenantConstants . SUPER_TENANT_DOMAIN_NAME ,  tenant ) )   {  Response   response   = getResponseOfDelete ( KEYSTORE_MANAGEMENT_API_BASE_PATH   +  KEYSTORE_MANAGEMENT_API_CERTIFICATE_PATH   +   PATH_SEPARATOR   +   """"newcert"""" ) ;  validateHttpStatusCode ( response ,  HttpStatus . SC_NO_CONTENT ) ;  }  }
@ Override  public   String []   getSupportedCipherSuites ()   {  return  internalSSLSocketFactory . getSupportedCipherSuites () ;  }
@ Override  public   Future < Done >   delete ( Object   record )   {  CompletableFuture < Done >   javaFuture   =  CompletableFuture . supplyAsync ( ()  ->   Done . done () ) ;  return  FutureConverters . toScala ( ( javaFuture ) ) ;  }
@ Command ( command = """"level"""" ,  aliases = { """""""" } ,  description = """"Adjusts the level of the player"""" ,  debug = true )  public   void   command_level ( String   arg )   {  int   level   =  Integer . parseInt ( arg ) ;  player . setLevel ( level ) ;  }
@ Test  public   void   shouldCloseResultFileTest ()   throws  Exception   {  File   resultFile   =  new   File ( folder . getRoot () ,  """"suite.xml"""" ) ;  AllureResultsUtils . writeTestSuiteResult ( new   TestSuiteResult () ,  resultFile ) ;  assertTrue ( resultFile . exists () ) ;  Files . delete ( resultFile . toPath () ) ;  assertFalse ( resultFile . exists () ) ;  }
@ Override  public   synchronized   Throwable   fillInStackTrace ()   {  return  this ;  }
@ Override  public   String   getPrimaryGroup ( String   world ,  String   player )   {  return  new   KPlayer ( player ,  kperms ) . getPrimaryGroup () ;  }
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init () ;  userStoreMgtRestClient   =   new   UserStoreMgtRestClient ( serverURL ,  tenantInfo ) ;  addSecondaryUserStore () ;  
public   boolean   completeResponseRefValue ()   {  return  pathResolver . isResponseRefValue ( psiElement ) ;  }
private   void   saveConfiguration ()   {  Intent   intent   =  new   Intent () ;  intent . putExtras ( mCurrentFragment . getArguments () ) ;  setResult ( Activity . RESULT_OK ,  intent ) ;  }
@ Override  public   String   toString ()   {  return  """"YAML Language Server: """"   +   super . toString () ;  }
protected   URLConnection   createConnection ( URL   url )   throws  IOException  {  URLConnection   con   =  url . openConnection () ;  con . setRequestProperty ( """"User-Agent"""" ,  USER_AGENT ) ;  return  con ;  }
@ Test  public   void   createFileName ()   {  String   result   =  CustomLayoutsUtils . createFileName ( """"public transport"""" ,  """"es"""" ) ;  String   expected   =  """"public_transport_es.xml"""" ;  assertEquals ( result ,  expected ) ;  }
private   void   onServiceStateChange ( SyncthingService . State   currentState )   {  mServiceState   =   currentState ;  switch  ( mServiceState )   {  case  INIT :   
@ Override  public   void   getDisplayName ( CharArrayBuffer   dataOut )   {  throw  new   UnsupportedOperationException () ;  }
@ Override   public   Optional < String >   validate ( String   subject )   {  try  {  new   URI ( subject ) ;  return  Optional . empty () ;  }   catch  ( URISyntaxException   e )   {  return  failure ( subject ) ;  }  }
@ Test  public   void   schemaPropertyTypeChanged ()   {  ChangedOpenApi   changedOpenApi   = OpenApiCompare . fromLocations ( """"schemaDiff/schema-props-defaults-handling-1.yaml"""" , """"schemaDiff/schema-props-defaults-handling-2.yaml"""" ) ;  }
private   boolean   isScroll ( MotionEvent   event )   {  return  ! isTap ( event ,  Long . MAX_VALUE ) ;  }
public   void   testUnusedResponseWhereResponsesAreNotInRoot ()   {  final   VirtualFile   virtualFile   = myFixture . copyFileToProject ( """"validator/field/unused_response/json/unused_response_not_in_root.json"""" , """"responses.json"""" ) ;  final   VirtualFile   swaggerFile   = myFixture . copyFileToProject ( """"validator/field/unused_response/json/unused_response_not_in_root_swagger.json"""" , """"swagger.json"""" ) ;  myFixture . configureFromExistingVirtualFile ( swaggerFile ) ;  myFixture . testHighlighting ( true ,  false ,  true ,  virtualFile ) ;  }
@ Test  public   void   requiresNumber_nullable ()   {  NumberSchema   subject   =  NumberSchema . builder () . requiresNumber ( true ) . nullable ( true ) . build () ;  subject . validate ( JSONObject . NULL ) ;  }
@ Override  public   void   execute ( Task   task )   {  PropertiesTask   libPropertiesTask   =  ( PropertiesTask )   task ;  configureLibPropertiesTask ( libPropertiesTask ,  project ) ;  }
public   DisjointLyricSet   deepcopy ()   {  DisjointLyricSet   deepcopy   =  new   DisjointLyricSet () ;  for  ( Set < String >   group   :  disjointSet . values () )   {  deepcopy . addGroup ( ImmutableSet . copyOf ( group ) ) ;  }  return  deepcopy ;  }
public   Chain < T >   chain ()   {  return  new   Underscore . Chain <> ( newArrayList ( iterable ) ) ;  }
private   void   streamProcessOutputToSonarConsole ( ProgressIndicator   indicator ,  Process   process )   {  final   StreamGobbler   errorGobbler   =  new   StreamGobbler ( process . getErrorStream () , sonarConsole , ERROR ) ;  final   StreamGobbler   outputGobbler   =  new   StreamGobbler ( process . getInputStream () , sonarConsole , INFO ) ;  errorGobbler . start () ;  outputGobbler . start () ;  while  ( outputGobbler . isAlive () )   {  if  ( indicator . isCanceled () )   {  process . destroy () ;  break;  }  }  }
@ Override   public   HalfIndexer   reindex ( Index   index )   {  return  new   HalfBufferIndexer ( buffer ,  index ) ;  }
@ Override  public   void   addConfig ( ResourceLocation   key ,  boolean   defaultValue )   {  addConfig ( new   BooleanConfigEntry ( key ,  defaultValue ) ) ;  }
public   static   Object   invokeMethod ( Method   method ,  Object   instance ,  Object ...   parameters )   {  try  {  method . setAccessible ( true ) ;  return  method . invoke ( instance ,  parameters ) ;  }   catch  ( Exception   e )   {  throw  new   RuntimeException ( e ) ;  }  }
public   static   < K ,  V >   Set < K >   keys ( final   Map < K ,  V >   object )   {  return  object . keySet () ;  }
default   void   gpioEnableNotifications ( int   pin )   {  gpioNotifications ( pin ,  true ) ;  }
public   void   removeVoicebank ( File   location )   {  voicebanks . remove ( location ) ;  openForEdit . remove ( location ) ;  }
public   List < RequestAction >   getActions ()   {  return  Collections . unmodifiableList ( actions ) ;  }
private   static   java . math . BigDecimal   sum ( java . math . BigDecimal   first ,  java . math . BigDecimal   second )   {  return  first . add ( second ) ;  }
@ Override  @ SuppressLint ( { """"InlinedApi"""" ,  """"RestrictedApi"""" } )  public   void   refreshRosettaX ()   {  
public   static   Stock   create ( IGunModifier ...   modifier )  {  return  new   Stock ( modifier ) ;  }
@ Override  public   final   boolean   childOfParameterDefinition ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.*.*"""" ) ;  }
private   String   getAuthzHeader ()   {  return  """"Basic """"   +   Base64 . encodeBase64String ( ( adminUsername   +   """":""""   +   password ) . getBytes () ) . trim () ;  }
@ Test ( expected   =   IllegalStateException . class )  public   void   throwsAndLogs ()   throws  Exception   {  new   Document ( """"foo"""" ) . exception () ;  }
private   void   verifyTheChangedBodyExists ( String   selectLabel ,  String   expected )   {  driver . findElement ( By . linkText ( """"Email Templates"""" ) ) . click () ;  new   Select ( driver . findElement ( By . id ( """"emailTypes"""" ) ) ) . selectByVisibleText ( selectLabel ) ;  WebElement   textArea   =  driver . findElement ( By . id ( """"emailBody"""" ) ) ;  String   text   =  textArea . getAttribute ( """"value"""" ) ;  Assert . assertEquals ( text ,  expected ,  """"The body displayed needs to be the one updated"""" ) ;  }
@ Override  protected   void   checkOkKo ( final   ProcessingReport   report )  throws  ProcessingException  {  verify ( report ,  never () ) . error ( anyMessage () ) ;  }
private   static   String   lines ( String ...   lines )   {  return  Stream . of ( lines ) . collect ( joining ( """"\n"""" ) ) ;  }
public   void   compute ( Map < KeyValue ,  KeyboardData . PreferredPos >   dst ,  Query   q )  {  
public   VerificationBean   verifyUser ( String   username ,  CaptchaInfoBean   captcha )   throws  RemoteException   {  VerificationBean   bean   =  null ;  try  {  bean   =   infoRecoveryStub . verifyUser ( username ,  captcha ) ;  }   catch  ( UserInformationRecoveryServiceIdentityMgtServiceExceptionException   e )   {  e . printStackTrace () ;  }  return  bean ;  }
@ Override   public   int   getPixelCount ()   {  if  ( residualUpdateNeeded )   {  doRoi () ;  doResidual () ;  }  return  outputData . dstCount ;  }
public   static   SpiMode   parse ( String   mode )   {  if ( mode . equalsIgnoreCase ( """"0"""" ) )   return  SpiMode . MODE_0 ;  if ( mode . equalsIgnoreCase ( """"1"""" ) )   return  SpiMode . MODE_1 ;  if ( mode . equalsIgnoreCase ( """"2"""" ) )   return  SpiMode . MODE_2 ;  if ( mode . equalsIgnoreCase ( """"3"""" ) )   return  SpiMode . MODE_3 ;  return  Spi . DEFAULT_MODE ;  }
 <argument pos:start=""""""""141:91"""""""" pos:end=""""""""141:104""""""""><expr pos:start=""""""""141:91"""""""" pos:end=""""""""141:104""""""""><name pos:start=""""""""141:91"""""""" pos:end=""""""""141:104"""""""">provideversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   void   setWeightedTn ( double   weightedTn )   {  this . weightedTn   =   weightedTn ;  }
public   TileOverlayOptions   fadeIn ( boolean   fadeIn )   {  this . fadeIn   =   fadeIn ;  return  this ;  }
public   ChangedOAuthFlow   getAuthorizationCodeOAuthFlow ()   {  return  this . authorizationCodeOAuthFlow ;  }
void   runInspectionTools ()   {  initProject () ;  collectModulesAndFiles () ;  buildEnrichedSettingsFromScope () ;  checkIsNewIssuesInspectionToolEnabled () ;  checkIsOldIssuesInspectionToolEnabled () ;  if  ( ! anyInspectionToolEnabled () )   {  SonarConsole . get ( project ) . info ( """"No Sonar Inspections enabled."""" ) ;  return;  }  saveAllDocuments () ;  showSonarQubeToolWindowIfNeeded () ;  SonarConsole . get ( project ) . clear () ;  IssuesByFileIndex . clearIndexFor ( psiFiles ) ;  downloadOldIssues () ;  runLocalAnalysisScriptForNewIssues () ;  }
JSONWriter   value ( boolean   b )   throws  JSONException   {  return  this . append ( b  ?   """"true""""   :  """"false"""" ) ;  }
public   static   < T   extends  Comparable < T > >   List < T >   sort ( final   Iterable < T >   iterable )   {  final   List < T >   localList   =  newArrayList ( iterable ) ;  Collections . sort ( localList ) ;  return  localList ;  }
private   Field   buildBooleanField ( final   String   fieldName )   {  return  BooleanField . builder () . name ( fieldName ) . build () ;  }
public   CloseableHttpResponse   getResponseOfHttpGetWithQueryParams ( String   endPointUrl ,  Header []   headers , Map < String ,  String >   queryParams )  throws  Exception   {  URIBuilder   uriBuilder   =  new   URIBuilder ( endPointUrl ) ;  for  ( Map . Entry < String ,  String >   entry   :  queryParams . entrySet () )   {  uriBuilder . addParameter ( entry . getKey () ,  entry . getValue () ) ;  }  URI   requestUri   =  uriBuilder . build () ;  HttpGet   request   =  new   HttpGet ( requestUri ) ;  request . setHeaders ( headers ) ;  return  client . execute ( request ) ;  }
public   String   getHeaderValue ( HttpResponse   response ,  String   headerName )   {  Header []   headers   =  response . getAllHeaders () ;  String   headerValue   =  null ;  for  ( Header   header   :  headers )   {  if  ( headerName . equals ( header . getName () ) )   {  headerValue   =   header . getValue () ;  break;  }  }  return  headerValue ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   {  return  false ;  }  ProcessSuccessResponse   processSuccessResponse   =  ( ProcessSuccessResponse )   o ;  return  Objects . equals ( this . status ,  processSuccessResponse . status )   &&  Objects . equals ( this . details ,  processSuccessResponse . details ) ;  }
public   static   DeviceIdentifier   getDeviceIdentifier ( Context   context )   {  return  new   DeviceIdentifier () ;  }
@ Override  public   @ NotNull   Type < ClientHandshakePacket >   type ()   {  return  TYPE ;  }
@ Override  public   void   callback ( WorkerContext < NNParams ,  NNParams >   context )   {  AbstractNNWorker . this . gradient . shutdown () ;  }
@ Override  public   float   getLineboxOffset ()  {  if  ( curline   ==   null )  return  0 ;  else  return  curline . getBaselineOffset ()   -   ctx . getBaselineOffset ()   -   halflead ;  }
@ Override  public   CharSequence   getPageTitle ( int   position )   {  switch  ( position )   {  case  0 :  return  getResources () . getString ( R . string . folders_fragment_title ) ;  case  1 :  return  getResources () . getString ( R . string . devices_fragment_title ) ;  default:  return  String . valueOf ( position ) ;  }  }
@ Override  public   void   update ( float []   weight ,  float []   grad )   {  if ( weight   ==   null   ||   weight . length   ==   0   ||   grad   ==   null   ||   grad . length   !=   weight . length )   {  return;  }  int   len   =  weight . length ;  for ( int   i   =  0 ;   i   <   len ;   i ++ )   {  weight [ i ]   -=   learningRate   *   grad [ i ] ;  }  }
@ Override   public   FloatIndexer   get ( long []   indices ,  float []   f ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  f [ offset   +   n ]   =   buffer . get ( ( int ) index ( indices )   +   n ) ;  }  return  this ;  }
@ Override   protected   Class < ? >   findClass ( String   name )  throws  ClassNotFoundException   {  if  ( paths . isEmpty () )   {  addPaths ( System . getProperty ( """"user.dir"""" ) ) ;  }  return  super . findClass ( name ) ;  }
public   void   setValidationCount ( double   validationCount )   {  this . validationCount   =   validationCount ;  }
public   List < IExtension >   getKnownExtensions ()   {  return  knownExtensions ;  }
public   void   randomize ( final   BasicNetwork   network ,  final   int   fromLayer )   {  final   int   fromCount   =  network . getLayerNeuronCount ( fromLayer ) ;  final   int   toCount   =  network . getLayerNeuronCount ( fromLayer   +   1 ) ;  double   limit   =   Math . sqrt ( 6.0   /   ( ( double ) ( fromCount   +   toCount ) ) ) ;  for ( int   fromNeuron   =  0 ;   fromNeuron   <   fromCount ;   fromNeuron ++ )   {  
public   void   setColumnNumIndexMapping ( Map < Integer ,  Integer >   columnNumIndexMapping )   {  this . columnNumIndexMapping   =   columnNumIndexMapping ;  }
public   static   List < Field >   response ()   {  return  ImmutableList . of ( new   RefField () , new   StringField ( """"description"""" ) , new   ObjectField ( """"headers"""" ) , new   StringField ( """"content"""" ) , new   StringField ( """"links"""" ) ) ;  }
public   boolean   supportsCorrelatedSubqueries ()   throws  SQLException   {  return  false ;  }
public   PolygonOptions   strokePattern ( List < PatternItem >   pattern )   {  this . strokePattern   =   pattern ;  return  this ;  }
public   static   void   clearState ()   {  lingerTooltip   =   null ;  WailaTickHandler . clearLastNarration () ;  }
public   void   flush ()   throws  IOException   {  if  (  out   !=   null )   out . flush () ;  }
public   void   setTarget ( CoverageMetric   metric ,  Integer   target )   {  targets . put ( metric ,  target ) ;  }
public   Try < T >   mapFailure ( CheckedFunction < ?   super  Throwable ,  ?   extends  Throwable >   mapper )   {  Objects . requireNonNull ( mapper ,  """"mapper is null"""" ) ;  if  ( isFailure () )   {  try  {  return  failure ( mapper . apply ( getCause () ) ) ;  }   catch  ( Throwable   t )   {  return  failure ( t ) ;  }  }   else  {  return  this ;  }  }
default   T   toggle ()   throws  IOException   {  if  ( isOn () )   {  return  off () ;  }   else  {  return  on () ;  }  }
public   TestSuiteResult   fireCustomTestSuiteEvent ( String   uid )   {  Allure . LIFECYCLE . fire ( new   ChangeTestSuiteTitleEvent ( uid ,  """"new.suite.title"""" ) ) ;  TestSuiteResult   testSuite   =  Allure . LIFECYCLE . getTestSuiteStorage () . get ( uid ) ;  assertNotNull ( testSuite ) ;  assertThat ( testSuite . getTitle () ,  is ( """"new.suite.title"""" ) ) ;  return  testSuite ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   return  true ;  if  ( o   ==   null   ||   getClass ()   !=   o . getClass () )   return  false ;  CacheKey   cacheKey   =  ( CacheKey )   o ;  return  Objects . equals ( left ,  cacheKey . left )  &&   Objects . equals ( right ,  cacheKey . right )  &&   Objects . equals ( context ,  cacheKey . context ) ;  }
public   void   testYamlResponse ()   {  final   String   expected   =  """"<div>Description</div>"""" ;  testQuickDocumentation ( """"/yaml/response_ref.yaml"""" ,  expected ) ;  }
public   void   setPixelFormat ( int   pixelFormat )   {  this . pixelFormat   =   pixelFormat ;  }
public   TextSearchRequest   radius ( int   radius )   {  if  ( radius   >   50000 )   {  throw  new   IllegalArgumentException ( """"The maximum allowed radius is 50,000 meters."""" ) ;  }  return  param ( """"radius"""" ,  String . valueOf ( radius ) ) ;  }
private   static   byte []   getRawMarkdown ( String   url )   throws  IOException   {  String   newUrl   =  redirects . get ( url ) ;  if  ( newUrl   !=   null   &&   ! newUrl . equals ( url ) )   {  return  Http . doHttpGet ( newUrl ,  true ) ;  }  try  {  return  Http . doHttpGet ( url ,  true ) ;  }   catch  ( IOException   e )   {  
private   static   void   tryClose ( Closeable   closeable )   {  if  ( closeable   !=   null )   {  try  {  closeable . close () ;  }   catch  ( Exception   ignored )   {  }  }  }
public   void   testThatSingleSchemaFileIsAutoCompleted ()   {  withSpecFiles ( """"pet.json"""" ,  """"schema.json"""" ) ;  final   AssertableList   completions   =  new   AssertableList ( geCompletions ( """"pet.json"""" ) ) ;  assertSchemaCompletions ( completions ) ;  }
public   ApplicationResponseModel   claimConfiguration ( ClaimConfiguration   claimConfiguration )   {  this . claimConfiguration   =   claimConfiguration ;  return  this ;  }
private   void   changeIcon ( Context   context ,  AppMenu . Icon   icon )   {  AppMenu . AppIcon   appIcon   =  ( AppMenu . AppIcon )   icon ;  PickIconActivity . start ( context ,  appIcon . componentName ) ;  }
@ Test  public   void   testEncodePositiveInteger ()   {  assertEquals ( """"15pn7"""" ,  encodeBase32 ( 1234567 ,  5 ) ) ;  }
public   FilteringMethod   getFilteringMethod ()  {  if ( filteringMethod   !=   null )  {  return  filteringMethod ;  }  return  FilteringMethod . ALL ;  }
public   void   setLastName ( String   lastName )   {  this . lastName   =   lastName ;  }
public   int   isGooglePlayServicesAvailable ( Context   context ,  int   minApkVersion )   {  return  isGooglePlayServicesAvailable ( context ) ;  }
 <argument pos:start=""""""""678:62"""""""" pos:end=""""""""678:65""""""""><expr pos:start=""""""""678:62"""""""" pos:end=""""""""678:65""""""""><literal type=""""""""null"""""""" pos:start=""""""""678:62"""""""" pos:end=""""""""678:65"""""""">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   Integer []   getZIndices ()  {  Set < Integer >   zindices   =  keySet () ;  Integer []   clevels   =  zindices . toArray ( new   Integer [ 0 ] ) ;  Arrays . sort ( clevels ) ;  return  clevels ;  }
public   void   undo ()   {  if  ( ! prevRedoActions . isEmpty ()   &&   ! prevUndoActions . isEmpty () )   {  prevUndoActions . getLast () . run () ;  nextRedoActions . addLast ( prevRedoActions . pollLast () ) ;  nextUndoActions . addLast ( prevUndoActions . pollLast () ) ;  }  canUndo . set ( ! prevRedoActions . isEmpty ()   &&   ! prevUndoActions . isEmpty () ) ;  canRedo . set ( ! nextRedoActions . isEmpty ()   &&   ! nextUndoActions . isEmpty () ) ;  }
@ Override  protected   void   executionCompleted ()   {  new   UploadToOpenStreetMapTask ( OpenStreetMapUpload . this ,  accessToken , trackId ,  this . getTmpFile () ,	 this . getFilename () , etDescription . getText () . toString () ,  etTags . getText () . toString () , Track . OSMVisibility . fromPosition ( OpenStreetMapUpload . this . spVisibility . getSelectedItemPosition () ) ) . execute () ;  }
@ Test  public   void   testCollectAllMode ()   {  Validator   actual   =  Validator . builder () . build () ;  try  {  actual . performValidation ( ObjectSchemaTest . MULTIPLE_VIOLATIONS_SCHEMA , ResourceLoader . DEFAULT . readObj ( """"objecttestcases.json"""" ) . get ( """"multipleViolations"""" ) ) ;  fail ( """"did not throw exception"""" ) ;  }   catch  ( ValidationException   e )   {  assertEquals ( """"#: 3 schema violations found"""" ,  e . getMessage () ) ;  assertEquals ( 3 ,  e . getCausingExceptions () . size () ) ;  }  }
private   Info < String ,  String >   createInfo ( double   lat ,  double   lon )   {  return  new   Info < String ,  String > ( lat ,  lon ,  100 ,  """"A"""" ,  Optional . of ( """"A"""" ) ) ;  }
public   void   setNumWeight ( int   numWeight )   {  this . numWeight   =   numWeight ;  }
protected   String   property ( int   deepness ,  String   name ,  ChangedSchema   schema )   {  StringBuilder   sb   =  new   StringBuilder () ;  String   type   =  type ( schema . getNewSchema () ) ;  if  ( schema . isChangedType () )   {  type   =   type ( schema . getOldSchema () )   +   """" -> """"   +   type ( schema . getNewSchema () ) ;  }  sb . append ( property ( deepness ,  """"Changed property"""" ,  name ,  type ,  schema . getNewSchema () . getDescription () ) ) ;  sb . append ( schema ( ++ deepness ,  schema ) ) ;  return  sb . toString () ;  }
public   BooleanProperty   clipboardFilledProperty ()   {  return  clipboard . clipboardFilledProperty () ;  }
public   static   String   create ( char   c ,  int   length )   {  StringBuilder   sb   =  new   StringBuilder ( length ) ;  for  ( var   index   =  0 ;   index   <   length ;   index ++ )  sb . append ( c ) ;  return  sb . toString () ;  }
public   void   setPreUninstallScript (  final   String   script )   {  setPreUninstallProgram ( readProgram ( script ) ) ;  if  (  script   !=   null )   format . getHeader () . createEntry (  PREUNSCRIPT ,  script ) ;  }
@ Test  public   void   thatItemsKeysInDefinitionsAreSuggested ()   {  getCaretCompletions ( """"items_in_definitions"""" )  . assertContains ( """"$ref"""" , """"format"""" , """"title"""" , """"description"""" , """"default"""" , """"multipleOf"""" , """"maximum"""" , """"exclusiveMaximum"""" , """"minimum"""" , """"exclusiveMinimum"""" , """"maxLength"""" , """"minLength"""" , """"pattern"""" , """"maxItems"""" , """"minItems"""" , """"uniqueItems"""" , """"maxProperties"""" , """"minProperties"""" , """"required"""" , """"enum"""" , """"type"""" , """"items"""" , """"allOf"""" , """"properties"""" , """"additionalProperties"""" , """"discriminator"""" , """"readOnly"""" , """"xml"""" , """"externalDocs"""" , """"example"""" )  . isOfSize ( 30 ) ;  }
@ DataBoundSetter  public   void   setFailedStepsNumber ( int   failedStepsNumber )   {  this . failedStepsNumber   =   failedStepsNumber ;  }
public   void   setIndex ( AttachmentsIndex   index )   {  this . index   =   index ;  }
@ Override  public   void   run ()   {  WearableListenerService . this . onPeerDisconnected ( node ) ;  }
@ Override  public   boolean   playerRemoveTransient ( String   worldName ,  Player   player ,  String   permission )   {  return  pRemoveTransient ( worldName ,  player . getName () ,  permission ) ;  }
@ Test ( priority   =   1 )  public   void   testGetCORSConfigs ()   throws  Exception   {  Response   response   =  getResponseOfGet ( CORS_CONFIGS_API_BASE_PATH ) ;  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_OK )  . body ( """"allowGenericHttpRequests"""" ,  notNullValue () )  . body ( """"allowSubdomains"""" ,  notNullValue () )  . body ( """"supportedMethods"""" ,  notNullValue () )  . body ( """"supportedHeaders"""" ,  notNullValue () )  . body ( """"exposedHeaders"""" ,  notNullValue () )  . body ( """"supportsCredentials"""" ,  notNullValue () )  . body ( """"maxAge"""" ,  notNullValue () ) ;  }
private   static   Platform   detect ( Map < Object ,  Object >   systemProperties )   {  String   arch   =  ( ( String )   systemProperties . get ( """"os.name"""" ) ) . toLowerCase ( Locale . ENGLISH ) ;  if  ( arch . contains ( """"windows"""" ) )   {  return  WINDOWS ;  }   else  {  return  LINUX ;  }  }
@ BeforeEach  public   void   before ()   {  reporter   =   new   CollectingFailureReporter ( schema ) ;  }
@ Test  public   void   autoTest ()   {  Set < String >   categorySet   =  new   HashSet < String > () ;  for  ( int   i   =  0 ;   i   <   3 ;   i ++ )   {  ValueObject   vo   =  new   ValueObject () ;  
@ Override  public   String   toString ()   {  return  """"LocationAvailability[""""   +   isLocationAvailable ()   +   """"]"""" ;  }
@ ReactMethod  public   void   start ( Callback   callback )   {  NfcAdapter   nfcAdapter   =  NfcAdapter . getDefaultAdapter ( context ) ;  if  ( nfcAdapter   !=   null )   {  Log . d ( LOG_TAG ,  """"start"""" ) ;  IntentFilter   filter   =  new   IntentFilter ( NfcAdapter . ACTION_ADAPTER_STATE_CHANGED ) ;  Activity   currentActivity   =  getCurrentActivity () ;  if  ( currentActivity   ==   null )   {  callback . invoke ( ERR_GET_ACTIVITY_FAIL ) ;  return;  }  currentActivity . registerReceiver ( mReceiver ,  filter ) ;  Intent   launchIntent   =  currentActivity . getIntent () ;  
public   void   setAudioCodecName ( String   audioCodecName )   {  this . audioCodecName   =   audioCodecName ;  }
@ Override  public   void   run ()   {  try  {  byte []   itemThumbnailData   =  futureThumbnail . get () ;  if  ( itemThumbnailData   !=   null   &&   itemThumbnailData . length   >   0 )   {  
@ Deprecated  public   static   boolean   showErrorDialogFragment ( int   errorCode ,  Activity   activity ,  int   requestCode ,  DialogInterface . OnCancelListener   cancelListener )   {  return  showErrorDialogFragment ( errorCode ,  activity ,  null ,  requestCode ,  cancelListener ) ;  }
@ Test ( dependsOnMethods   =   """"testCreateOAuthApp"""" )  public   void   testGetOAuthInboundDetails ()   throws  Exception   {  String   path   =  APPLICATION_MANAGEMENT_API_BASE_PATH   +   """"/""""   +   createdAppId   +   INBOUND_PROTOCOLS_OIDC_CONTEXT_PATH ;  Response   responseOfGet   =  getResponseOfGet ( path ) ;  responseOfGet . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_OK )  . body ( """"clientId"""" ,  notNullValue () )  . body ( """"clientSecret"""" ,  notNullValue () ) ;  }
void   failure ( String   message ,  String   keyword )   {  failureReporter . failure ( message ,  keyword ) ;  }
@ NonNull  public   Builder   setTokenBinding ( @ Nullable   TokenBinding   tokenBinding )   {  this . tokenBinding   =   tokenBinding ;  return  this ;  }
public   void   actionPerformed ( java . awt . event . ActionEvent   evt )   {  btnCloseActionPerformed ( evt ) ;  }
public   static   PiGpioState   from ( boolean   value ) {  if ( value   ==   true )   return  PiGpioState . HIGH ;  return  PiGpioState . LOW ;  }
public   ApplicationResponseModel   accessUrl ( String   accessUrl )   {  this . accessUrl   =   accessUrl ;  return  this ;  }
@ Test  public   void   sameDocumentLookup ()   {  Schema   actual   =  performLookup ( """"#/properties/sameDocPointer"""" ) ;  assertEquals ( """"dummy schema at #/definitions/Bar"""" ,  actual . getDescription () ) ;  }
public   int   getMeanScore ()   {  if  ( CollectionUtils . isNotEmpty ( scoreList ) )   {  int   totalScore   =  0 ;  for  ( int   i   =  0 ;   i   <   scoreList . size () ;   i ++ )   {  totalScore   +=   scoreList . get ( i ) ;  }  meanScore   =   totalScore   /   scoreList . size () ;  }  return  meanScore ;  }
 <argument pos:start=""""""""116:84"""""""" pos:end=""""""""116:88""""""""><expr pos:start=""""""""116:84"""""""" pos:end=""""""""116:88""""""""><literal type=""""""""boolean"""""""" pos:start=""""""""116:84"""""""" pos:end=""""""""116:88"""""""">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
@ Test  public   void   testAddLocalClaim ()   throws  IOException   {  String   body   =  readResource ( """"claim-management-add-local-claim.json"""" ) ;  Response   response   =  getResponseOfPost ( CLAIM_DIALECTS_ENDPOINT_URI   +   LOCAL_CLAIMS_ENDPOINT_URI ,  body ) ;  response . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_CREATED )  . header ( HttpHeaders . LOCATION ,  notNullValue () ) ;  String   location   =  response . getHeader ( HttpHeaders . LOCATION ) ;  localClaimId   =   location . substring ( location . lastIndexOf ( """"/"""" )   +   1 ) ;  }
@ Test ( dependsOnMethods   =   { """"testDeleteAction"""" } )  public   void   testDeleteNonExistingAction ()   {  getResponseOfDelete ( ACTION_MANAGEMENT_API_BASE_PATH   +   PRE_ISSUE_ACCESS_TOKEN_PATH   +  """"/""""   +   TEST_ACTION_INVALID_ID )  . then ()  . log () . ifValidationFails ()  . assertThat ()  . statusCode ( HttpStatus . SC_NO_CONTENT ) ;  }
@ Override  public   final   ResourceLocation   getLocation ()  {  return  this . id ;  }
@ ApiModelProperty ( example   =   """"false"""" ,  value   =   """"Enabling this option will make the application FAPI conformant."""" )  @ JsonProperty ( """"isFAPIApplication"""" )  @ Valid  public   Boolean   getIsFAPIApplication ()   {  return  isFAPIApplication ;  }
default   boolean   childOfParameterDefinition ( PsiElement   psiElement )   {  return  false ;  }
@ Test  void   testNoRegistration ()   {  assertThat ( meterRegistry . find ( """"eureka.server.instances"""" ) . gauge () ) . isNull () ;  }
@ ApiModelProperty ( value   =   """""""" )  @ JsonProperty ( """"serviceProvider"""" )  @ Valid  public   SAML2ServiceProvider   getManualConfiguration ()   {  return  manualConfiguration ;  }
public   static   String   xmlOrJsonToJson ( String   xmlOrJson ,  Json . JsonStringBuilder . Step   identStep )   {  TextType   textType   =  getTextType ( xmlOrJson ) ;  final   String   result ;  if  ( textType   ==   TextType . JSON )   {  result   =   getJsonString ( identStep ,  fromJson ( xmlOrJson ) ) ;  }   else if  ( textType   ==   TextType . XML )   {  result   =   getJsonString ( identStep ,  fromXml ( xmlOrJson ) ) ;  }   else  {  result   =   xmlOrJson ;  }  return  result ;  }
public   ServiceMetaDataWrapper   listServices ( String   serviceName ,  String   filterType )  throws  RemoteException   {  ServiceMetaDataWrapper   serviceMetaDataWrapper ;  serviceMetaDataWrapper   =   serviceAdminStub . listServices ( filterType ,  serviceName ,  0 ) ;  serviceAdminStub . getFaultyServiceArchives ( 0 ) ;  return  serviceMetaDataWrapper ;  }
public   static   Model   createModelByType ( String   name )   {  if ( name . equalsIgnoreCase ( """"NeuralNetwork"""" ) )   {  return  new   NeuralNetwork () ;  }   else  {  throw  new   RuntimeException ( """"Model not supported: """"   +   name ) ;  }  }
public   void   updateSaveState ()   {  invalidEntry   =   null ;  for  ( Entry   entry   :  entries )   {  if  ( entry   instanceof   OptionValue < ? >   value   &&   ! value . isValidValue () )   {  invalidEntry   =   value ;  break;  }  }  if  ( invalidEntry   ==   null )   {  owner . saveButton . setTooltip ( null ) ;  }   else  {  owner . saveButton . setTooltip ( Tooltip . create ( Component . translatable ( """"gui.jade.invalid_value_cant_save"""" ) ) ) ;  }  }
public   void   addUnique ( final   Field   field )   {  if  ( completionHelper . isUniqueKey ( field . getName () ) )   {  completionResultSet . addElement ( create ( field ,  completionHelper . createInsertFieldHandler ( field ) ) ) ;  }  }
private   static   Stream < Object >   parametersForConfigureValueGeneratorTest ()   {  return  Stream . of ( """"localhost:8081"""" ,  """""""" ) ;  }
public   Polarity   getPolarity ()   throws  IOException   {  var   path   =  Paths . get ( pwmPath ,  """"polarity"""" ) ;  switch ( Files . readString ( path ) . trim () . toLowerCase () ) {  case  """"inversed"""" :   return  Polarity . INVERSED ;  case  """"normal"""" :   return  Polarity . NORMAL ;  default:   return  Polarity . UNKNOWN ;  }  }
@ SuppressWarnings ( """"unchecked"""" )  public   < F   extends  Comparable < ?   super  F > >   Chain < F >   sortWith ( final   Comparator < F >   comparator )   {  return  new   Chain <> ( Underscore . sortWith ( ( List < F > )   list ,  comparator ) ) ;  }
@ NonNull  @ Override  public   Class   getImplementedAPI ()   {  return  GrantedRoles . class ;  }
@ Override  protected   void   writeNodeText ( Node   node )   throws  IOException   {  if  ( node   instanceof   NewlineText )   {  
@ Override  public   StreamCodec < RegistryFriendlyByteBuf ,  Map . Entry < ResourceLocation ,  List < ViewGroup < EnergyView . Data > > > >   streamCodec ()   {  return  STREAM_CODEC ;  }
@ Override  public   Component   getDisplayName ()  {  return  Component . translatable ( """"container.cgm.workbench"""" ) ;  }
private   View   findView ( int   viewId )   {  if  ( activity   !=   null )   {  return  activity . findViewById ( viewId ) ;  }   else  {  return  fragment . getView () . findViewById ( viewId ) ;  }  }
@ NonNull  @ Override  public   PackageInfo   getPackageInfo ( @ NonNull   String   packageName ,  int   flags )   {  PackageInfo   packageInfo   =  super . getPackageInfo ( packageName ,  flags ) ;  if  ( """"com.google.android.gms"""" . equals ( packageName ) )   {  VersionUtil   versionUtil   =  new   VersionUtil ( TracingIntentService . this ) ;  packageInfo . versionCode   =   versionUtil . getVersionCode () ;  packageInfo . versionName   =   versionUtil . getVersionString () ;  packageInfo . sharedUserId   =   """"com.google.uid.shared"""" ;  }  return  packageInfo ;  }
public   static   String []   getDeviceDescriptions ()   throws  FrameGrabber . Exception   {  tryLoad () ;  BusManager   busMgr   =  new   BusManager () ;  int []   numCameras   =  new   int [ 1 ] ;  busMgr . GetNumOfCameras ( numCameras ) ;  String []   descriptions   =  new   String [ numCameras [ 0 ] ] ;  for  ( int   i   =  0 ;   i   <   numCameras [ 0 ] ;   i ++ )   {  PGRGuid   guid   =  new   PGRGuid () ;  Error   error   =  busMgr . GetCameraFromIndex ( i ,  guid ) ;  if  ( error . notEquals ( PGRERROR_OK ) )   {  PrintError ( error ) ;  System . exit ( - 1 ) ;  }  Camera   cam   =  new   Camera () ;  
@ Override  @ NonNull  public   String   toString ()   {  return  ToStringHelper . name ( """"AuthenticatorAttestationResponse"""" )  . field ( """"keyHandle"""" ,  keyHandle )  . field ( """"clientDataJSON"""" ,  clientDataJSON )  . field ( """"attestationObject"""" ,  attestationObject )  . field ( """"transports"""" ,  transports )  . end () ;  }
@ NonNull  @ Override  public   String   toString ()   {  return  ToStringHelper . name ( """"PasswordRequestOptions"""" )  . field ( """"supported"""" ,  supported )  . end () ;  }
@ Override  public   Chain   flatten ()   {  return  new   Chain <> ( Underscore . flatten ( value () ) ) ;  }
public   ActionModel   endpoint ( Endpoint   endpoint )   {  this . endpoint   =   endpoint ;  return  this ;  }
public   synchronized   static   Method   loadOriginalMessageKey ( ClassLoader   loader )   throws  Exception   {  return  UnobfuscatorCache . getInstance () . getMethod ( loader ,  ()  ->  {  var   method   =  findFirstMethodUsingStrings ( loader ,  StringMatchType . Contains ,  """"FMessageUtil/getOriginalMessageKeyIfEdited"""" ) ;  if  ( method   ==   null )   throw  new   RuntimeException ( """"MessageEdit method not found"""" ) ;  return  method ;  } ) ;  }
public   static   Features   construct ( Feature []   enabled ,  Feature []   disabled )  {  int   e   =  0 ;  for  ( Feature   f   :  enabled )   {  e   |=   ( 1   <<   f . ordinal () ) ;  }  int   d   =  0 ;  for  ( Feature   f   :  disabled )   {  d   |=   ( 1   <<   f . ordinal () ) ;  }  return  new   Features ( e ,  d ) ;  }
@ Override  public   int   hashCode ()   {  int   result   =  ( fin  ?   1   :  0 ) ;  result   =   31   *   result   +   optcode . hashCode () ;  result   =   31   *   result   +   ( unmaskedpayload   !=   null  ?   unmaskedpayload . hashCode ()   :  0 ) ;  result   =   31   *   result   +   ( transferemasked  ?   1   :  0 ) ;  result   =   31   *   result   +   ( rsv1  ?   1   :  0 ) ;  result   =   31   *   result   +   ( rsv2  ?   1   :  0 ) ;  result   =   31   *   result   +   ( rsv3  ?   1   :  0 ) ;  return  result ;  }
public   Chain < T >   takeRight ( final   Integer   n )   {  return  new   Chain <> ( U . takeRight ( value () ,  n ) ) ;  }
public   void   addPitchPrefix ( String   pitch ,  String   prefix )   {  newVoicebank . pitchMap . putPrefix ( pitch ,  prefix ) ;  }
public   final   boolean   childOfTag ( final   PsiElement   psiElement )   {  return  hasPath ( psiElement ,  """"$.tags"""" ) ;  }
@ Override  @ NonNull  public   String   getDeveloperName ()   {  return  this . developerName ;  }
public   void   addLine ( String   line )   {  synchronized  ( lock )   {  boolean   bottom   =  ! this . recyclerView . canScrollVertically ( 1 ) ;  int   index   =  this . terminal . size () ;  this . terminal . add ( this . process ( line ) ) ;  this . notifyItemInserted ( index ) ;  if  ( bottom )   this . recyclerView . scrollToPosition ( index ) ;  }  }
@ Override   public   ShortIndexer   put ( long []   indices ,  short   s )   {  array [ ( int ) index ( indices ) ]   =   s ;  return  this ;  }
@ Test  public   void   testDelete ()   throws  Exception   {  LOG . info ( """"--- testDelete"""" ) ;  String   path   =  """"/a"""" ;  assertFalse ( _client . delete ( path ) ) ;  _client . createPersistent ( path ,  null ) ;  assertTrue ( _client . delete ( path ) ) ;  assertFalse ( _client . delete ( path ) ) ;  }
public   static   ULongIndexer   create ( long []   array )   {  return  new   ULongArrayIndexer ( array ) ;  }
@ SuppressWarnings ( """"unused"""" )  public   void   removeLastLine ()   {  synchronized  ( lock )   {  int   size   =  this . terminal . size () ;  if  ( size   !=   0 )   {  this . terminal . remove ( size   -   1 ) ;  this . notifyItemRemoved ( size   -   1 ) ;  }  }  }
@ DataProvider ( name   =   """"systemTemplateDataProvider"""" )  public   static   Object [] []   systemTemplateDataProvider ()   {  return  new   Object [] [] { {  CHANNEL_EMAIL ,  TEMPLATE_TYPE_SYSTEM_EMAIL ,  orgTemplateSystemEmailRequestPath , appTemplateSystemEmailRequestPath } , {  CHANNEL_EMAIL ,  TEMPLATE_TYPE_EMAIL ,  orgTemplateEmailRequestPath ,  appTemplateEmailRequestPath } , {  CHANNEL_SMS ,  TEMPLATE_TYPE_SYSTEM_SMS ,  orgTemplateSystemSmsRequestPath , appTemplateSystemSmsRequestPath } , {  CHANNEL_SMS ,  TEMPLATE_TYPE_SMS ,  orgTemplateSmsRequestPath ,  appTemplateSmsRequestPath } } ;  }
@ Override  public   Map < String ,  String >   properties ()   {  return  Collections . unmodifiableMap ( this . properties ) ;  }
@ Test  void   testDefaultAppName ()   {  setupContext () ;  assertThat ( getInstanceConfig () . getAppname () ) . isEqualTo ( """"unknown"""" ) ;  assertThat ( getInstanceConfig () . getVirtualHostName () ) . isEqualTo ( """"unknown"""" ) ;  assertThat ( getInstanceConfig () . getSecureVirtualHostName () ) . isEqualTo ( """"unknown"""" ) ;  }
public   Builder < S >   writeOnly ( Boolean   writeOnly )   {  this . writeOnly   =   writeOnly ;  return  this ;  }
public   void   setStatus ( String   key ,  String   param )   {  this . key   =   key ;  this . param   =   param ;  if  ( param . isEmpty () )   {  statusText . set ( localizer . getMessage ( key ) ) ;  }   else  {  statusText . set ( MessageFormat . format ( localizer . getMessage ( key ) ,  param ) ) ;  }  }
public   ExposureInformationBuilder   setAttenuationDurations ( int []   attenuationDurations )   {  this . attenuationDurations   =   Arrays . copyOf ( attenuationDurations ,  attenuationDurations . length ) ;  return  this ;  }
@ Test  void   testSortXmlSimple ()   {  SortPomImplUtil . create () . testFiles ( """"/Simple_input.xml"""" ,  """"/Simple_expected.xml"""" ) ;  }
@ Override  public   Task < Void >   notifyEmoneyCardStatusUpdate ( String   json )   {  return  null ;  }
@ Override  public   int   addEntry ( PropertyEntry   entry )  {  return  super . addEntry ( entry ) ;  }
@ Test  void   passesWhenMethodParametersAreValid ()   {  new   JSR303Test . Foo () . foo ( """"123"""" ) ;  }
public   Frame   grabSamples ()   throws  Exception   {  return  grabFrame ( true ,  false ,  true ,  false ,  false ) ;  }
@ Override  public   boolean   onStopJob ( JobParameters   params )   {  return  false ;  }
@ Override  public   void   setGroupSuffix ( String   world ,  String   group ,  String   suffix )   {  this . perms . addGroupInfo ( world ,  group ,  """"suffix"""" ,  suffix ) ;  }
public   PolygonOptions   geodesic ( boolean   geodesic )   {  this . geodesic   =   geodesic ;  return  this ;  }
@ DataProvider ( name   =   """"organizationPaginationValidationDataProvider"""" )  public   Object [] []   organizationPaginationValidationProvider ()   {  return  new   Object [] []   { { 1 } ,  { 2 } ,  { 5 } ,  { 6 } ,  { 10 } ,  { 17 } } ;  }
public   void   setCustomPaths ( Map < String ,  String >   customPaths )   {  this . customPaths   =   customPaths ;  }
public   void   getStyleSheets ( String   media )  {  this . media   =   new   MediaSpec ( media ) ;  StyleSheet   newsheet   =  CSSFactory . getUsedStyles ( doc ,  encoding ,  baseUrl ,  this . media ) ;  styles . add ( newsheet ) ;  }
@ Override  public   void   onGetLocalNodeResponse ( GetLocalNodeResponse   response )   throws  RemoteException   {  Log . d ( TAG ,  """"unimplemented Method: onGetLocalNodeResponse"""" ) ;  }
@ Test  public   void   onGitCommitIdsRepo_shouldNoticeThat2CharsIsTooLittleToBeUniqueAndUse4CharsInstead ()  throws  Exception   {  
private   void   addFileFromEventToChangedFiles ( DocumentEvent   e )   {  FileDocumentManager   fdm   =  FileDocumentManager . getInstance () ;  final   Optional < VirtualFile >   file   =  Optional . ofNullable ( fdm . getFile ( e . getDocument () ) ) ;  file . ifPresent ( CHANGED_FILES :: add ) ;  }
@ FXML  public   void   addVibratoConfig ( ActionEvent   event )   {  view . saveToVibratoList () ;  }
public   static   < E >   List < E >   rest ( final   List < E >   list )   {  return  rest ( list ,  1 ) ;  }
@ Override  public   void   onServiceConnected ( ComponentName   name ,  IBinder   service )   {  activity . setGpsLogger (  ( ( GPSLogger . GPSLoggerBinder )   service ) . getService () ) ;  
public   Map < String , Object >   save ()  {  Map   saveMap   =  new   LinkedHashMap < String , Object > () ;  saveMap . put ( """"Type"""" ,  type . toString () ) ;  List < String >   saveList   =  new   ArrayList < String > () ;  for ( Material   mat   :  list )  {  saveList . add ( mat . toString () ) ;  }  saveMap . put ( """"ItemList"""" ,  saveList ) ;  return  saveMap ;  }
private   int   resolveInstanceLeaseDuration ( final   InstanceInfo   info )   {  int   leaseDuration   =  Lease . DEFAULT_DURATION_IN_SECS ;  if  ( info . getLeaseInfo ()   !=   null   &&   info . getLeaseInfo () . getDurationInSecs ()   >   0 )   {  leaseDuration   =   info . getLeaseInfo () . getDurationInSecs () ;  }  return  leaseDuration ;  }
private   void   assertNoneClaims ( String   claims )   {  String []   dataArray   =  StringUtils . substringsBetween ( claims ,  """"<td>"""" ,  """"</td>"""" ) ;  Assert . assertNull ( dataArray ,  """"Claims are not expected for """"   +   config ) ;  }
@ Override  public   boolean   handleMessage ( Message   _msg )  {  for  ( Animatable   anim   :  _animations )  anim . start () ;  _handler . sendEmptyMessageDelayed ( 0 ,  3000 ) ;  return  true ;  }
public   void   setFetchRemoteRegionsRegistry ( String   fetchRemoteRegionsRegistry )   {  this . fetchRemoteRegionsRegistry   =   fetchRemoteRegionsRegistry ;  }
public   void   setRateLimiterFullFetchAverageRate ( int   rateLimiterFullFetchAverageRate )   {  this . rateLimiterFullFetchAverageRate   =   rateLimiterFullFetchAverageRate ;  }
public   static   List < Value >   in ()   {  return  ImmutableList . of ( new   StringValue ( """"query"""" ) , new   StringValue ( """"header"""" ) , new   StringValue ( """"path"""" ) , new   StringValue ( """"cookie"""" ) ) ;  }
@ AfterAll  public   static   void   successTests ()   throws  IOException   {  serverSocket . close () ;  thread . interrupt () ;  }
@ Override  public   String   readRegisterString ( int   register ,  Charset   charset ,  int   length )   {  if ( registers [ register ]   ==   null )   return  null ;  if ( registers [ register ] . isEmpty () )   return  null ;  byte []   buffer   =  new   byte [ length ] ;  for ( int   p   =  0 ;   p   <   length ;   p ++ )   {  if ( registers [ register ] . isEmpty () )   break;  buffer [ p ]   =   registers [ register ] . pop () ;  }  String   result   =  new   String ( buffer ,  charset ) ;  logger . debug ( """"[{}::{}] :: WRITE(REG={}, 0x{})"""" ,  Mock . I2C_PROVIDER_NAME ,  this . id ,  register ,  result ) ;  return  result ;  }
public   boolean   completeExternalDocsKey ()   {  return  pathResolver . childOfExternalDocs ( psiElement ) ;  }
default   void   add ( int   index ,  List < IElement >   elements )   {  boolean   first   =  true ;  for  ( IElement   element   :  elements )   {  if  ( first )   {  add ( index ,  element ) ;  }   else  {  append ( index ,  element ) ;  }  first   =   false ;  }  }
@ Override  public   boolean   process ( String   option ,  List < String >   arguments )   {  inferDepInPackage   =   true ;  return  true ;  }
protected   void   setDividerTint ( @ ColorInt   int   color )   {  mSelectionDivider . setTint ( color ) ;  }
protected   Set < Specialty >   getSpecialtiesInternal ()   {  if  ( this . specialties   ==   null )   {  this . specialties   =   new   HashSet <> () ;  }  return  this . specialties ;  }
public   void   addData ( double   val ,  double   frequency )   {  process ( val ,  frequency ) ;  }
@ Override  public   float   getMaximalWidth ()  {  float   ret   =  getMaximalContentWidth () ;    
public   void   onItemClick ( AdapterView < ? >   adapterView ,  View   view ,  int   i ,  long   l )   {  Intent   result   =  new   Intent () ;  String   arch   =  ( ( ArrayAdapter < String > )   archList . getAdapter () )  . getItem ( i ) ;  result . putExtra ( InstallActivity . ARCH ,  arch ) ;  setResult ( RESULT_OK ,  result ) ;  finish () ;  }
@ Test  public   void   testLabelExpression ()   throws  Exception  {  UriTemplate   template   =  UriTemplate . buildFromTemplate ( BASE_URI ) . label ( VAR_NAME ) . build () ;  Assert . assertEquals ( """"http:
public   OutboundProvisioningConfiguration   jit ( Boolean   jit )   {  this . jit   =   jit ;  return  this ;  }
public   static   ResidencePlayerListener   getPlayerListener ()   {  return  plistener ;  }
void   removeNoteElement ( Note   note )   {  track . removeItem ( track . getNoteTrack () ,  note ) ;  track . removeItem ( track . getNoteTrack () ,  note . getLyricTrackItem () ) ;  }
private   Calendar   toStartOfDay ( Calendar   cal ) {  cal . set ( Calendar . HOUR_OF_DAY ,  0 ) ;  cal . set ( Calendar . MINUTE ,  0 ) ;  cal . set ( Calendar . SECOND ,  0 ) ;  cal . set ( Calendar . MILLISECOND ,  0 ) ;  return  cal ;  }
@ Override   public   BooleanPointer   limit ( long   limit )   {  return  super . limit ( limit ) ;  }
@ Test  public   void   testWrappedExploder ()   throws  Exception  {  Address   address   =  new   Address ( """"4 Yawkey Way"""" ,  """"Boston"""" ,  """"MA"""" ,  """"02215-3496"""" ,  """"USA"""" ) ;  Map < String ,  Object >   values   =  new   HashMap < String ,  Object > () ;  values . put ( """"address"""" ,  new   DefaultVarExploder ( address ) ) ;  String   result   =  UriTemplate . expand ( EXPLODE_TEMPLATE ,  values ) ;  Assert . assertEquals ( """"/mapper?active=false&city=Boston&country=USA&state=MA&street=4%20Yawkey%20Way&zipcode=02215-3496"""" ,  result ) ;  }
public   APIResourcePatchModel   addAddedAuthorizationDetailsTypesItem ( AuthorizationDetailsType   addedAuthorizationDetailsTypesItem )   {  if  ( this . addedAuthorizationDetailsTypes   ==   null )   {  this . addedAuthorizationDetailsTypes   =   new   ArrayList < AuthorizationDetailsType > () ;  }  this . addedAuthorizationDetailsTypes . add ( addedAuthorizationDetailsTypesItem ) ;  return  this ;  }
public   ArrayList < String >   matchedItems ( String   string ,  String   regex )   {  Matcher   matcher   =  Pattern . compile ( regex ) . matcher ( string ) ;  ArrayList < String >   matchedItems   =  new   ArrayList <> () ;  while  ( matcher . find () )   {  String   item   =  matcher . group () ;  matchedItems . add ( item . substring ( 0 ,  matcher . group () . length ()   -   1 ) . replaceFirst ( """"\\{"""" ,  """""""" ) ) ;  }  return  matchedItems ;  }
Multimap < String ,  Object >   resolveCuries ( Multimap < String ,  Object >   paramMap )   {  Multimap < String ,  Object >   map   =  ArrayListMultimap . create () ;  for  ( Entry < String ,  Object >   entry :  paramMap . entries () )   {  if  ( entry . getValue ()   instanceof   String )   {  Optional < String >   iri   =  curieUtil . getIri ( ( String ) entry . getValue () ) ;  if  ( iri . isPresent () )   {  map . put ( entry . getKey () ,  iri . get () ) ;  }   else  {  map . put ( entry . getKey () ,  entry . getValue () ) ;  }  }   else  {  map . put ( entry . getKey () ,  entry . getValue () ) ;  }  }  return  map ;  }
public   @ InitialTrigger   int   getInitialTrigger ()   {  return  initialTrigger ;  }
@ Override  protected   void   failed ()   {  statusBar . setText ( """"Error: Unable to open """"   +   file . getName () ) ;  errorLogger . logError ( getException () ) ;  }
@ Override   public   BooleanIndexer   put ( long []   indices ,  boolean []   b ,  int   offset ,  int   length )   {  for  ( int   n   =  0 ;   n   <   length ;   n ++ )   {  putRaw ( index ( indices )   +   n ,  b [ offset   +   n ] ) ;  }  return  this ;  }
public   static   void   write ( Parcel   parcel ,  int   fieldId ,  Long   val )   {  if  ( val   ==   null )   return;  writeHeader ( parcel ,  fieldId ,  8 ) ;  parcel . writeLong ( val ) ;  }
private   void   configureMockEndpoints ()   {  try  {  wireMockServer . stubFor ( post ( urlEqualTo ( """"/sms/send"""" ) )  . withRequestBody ( matchingJsonPath ( """"$.content"""" ) )  . withRequestBody ( matchingJsonPath ( """"$.to"""" ) )  . willReturn ( aResponse ()  . withTransformers ( """"response-template"""" ,  """"otp-transformer"""" )  . withStatus ( 200 ) ) ) ;  }   catch  ( Exception   e )   {  throw  new   RuntimeException ( e ) ;  }  }
@ Override  public   void   onActivityCreated ( Bundle   savedInstanceState )   {  super . onActivityCreated ( savedInstanceState ) ;  mActivity   =   ( MainActivity )   getActivity () ;  if  ( savedInstanceState   !=   null   &&   savedInstanceState . getBoolean ( """"active"""" ) )   {  onDrawerOpened () ;  }  }
@ Test  public   void   testGetModelConfigPath ()   {  Assert . assertEquals ( pathFinder . getModelConfigPath ( SourceType . LOCAL ) ,  """"ModelConfig.json"""" ) ;  Assert . assertTrue ( pathFinder . getModelConfigPath ( SourceType . HDFS ) . contains ( """"ModelSets/cancer-judgement/ModelConfig.json"""" ) ) ;  }
public   String   getPitchString ( int   firstPitchStep ,  int   lastPitchStep ,  int   noteNum )   {  return  pitchbends . renderPitchbends ( firstPitchStep ,  lastPitchStep ,  noteNum ) ;  }
@ Override  public   float   getMaximalWidth ()  {  float   sum   =  spacing ;  for  ( int   i   =  0 ;   i   <   numCols ;   i ++ )  sum   +=   getMaximalColumnWidth ( i )   +   spacing ;  return  sum ;  }
@ ApiModelProperty ()  @ JsonProperty ( """"defaultConnectorId"""" )  @ Valid  public   String   getDefaultConnectorId ()   {  return  defaultConnectorId ;  }
@ Override  public   void   onClick ( DialogInterface   dialog ,  int   which )   {  }
@ BeforeClass  public   static   void   setUpBeforeClass ()   throws  Exception   {  server . setStopAtShutdown ( true ) ;  ResourceHandler   handler   =  new   ResourceHandler () ;  handler . setBaseResource ( Resource . newClassPathResource ( """"/ontologies/import/"""" ) ) ;  server . setHandler ( handler ) ;  server . start () ;  }
public   void   setMappedLocalSubjectMandatory ( Boolean   mappedLocalSubjectMandatory )   {  this . mappedLocalSubjectMandatory   =   mappedLocalSubjectMandatory ;  }
@ Exported  public   EmbeddableBadgeConfig   getConfig ( String   id )   {  return  badgeConfigs . get ( id ) ;  }
@ Override  public   String []   getPlayerGroups ( String   worldName ,  String   playerName )   {  AnjoPermissionsHandler   handler ;  if  ( worldName   ==   null )   {  handler   =   groupManager . getWorldsHolder () . getWorldPermissionsByPlayerName ( playerName ) ;  }   else  {  handler   =   groupManager . getWorldsHolder () . getWorldPermissions ( worldName ) ;  }  if  ( handler   ==   null )   {  return  null ;  }  return  handler . getGroups ( playerName ) ;  }
 <argument pos:start=""""""""506:75"""""""" pos:end=""""""""506:85""""""""><expr pos:start=""""""""506:75"""""""" pos:end=""""""""506:85""""""""><name pos:start=""""""""506:75"""""""" pos:end=""""""""506:85"""""""">numChannels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
public   static   DataBits   getInstance ( int   data_bits ) {  for ( DataBits   db   :  DataBits . values () ) {  if ( db . getValue ()   ==   data_bits ) {  return  db ;  }  }  return  null ;  }
private   void   displayFolder ( File   folder )   {  mLocation   =   folder ;  mFilesAdapter . clear () ;  File []   contents   =  mLocation . listFiles () ;  
public   void   setNativeName ( String   nativeName )   {  this . nativeName   =   nativeName ;  }
public   String   swapBackupDirPath ( String   path )  {  if ( Build . VERSION . SDK_INT   >=   18   &&  Build . VERSION . SDK_INT   <   23 )  {  if ( path . contains ( """"/storage/emulated/"""" ) )  {  path   =   path . replace ( """"/storage/emulated/"""" ,  """"/mnt/shell/emulated/"""" ) ;  }  }  return  path ;  }
public   Builder   firstAction ( CharSequence   text ,  View . OnClickListener   listener )   {  firstActionText   =   text ;  firstActionListener   =   listener ;  return  this ;  }
default   < P   extends  Provider >   Map < String ,  ?   extends  IO >   allByIoType ( IOType   ioType ) {  return  allByType ( ioType . getIOClass () ) ;  }
private   void   removeDeviceInternal ( String   deviceId )   {  synchronized  ( mConfigLock )   {  Iterator < Device >   it   =  mConfig . devices . iterator () ;  while  ( it . hasNext () )   {  Device   d   =  it . next () ;  if  ( d . deviceID . equals ( deviceId ) )   {  it . remove () ;  break;  }  }  }  }
public   static   String   trimLeft ( String   data )   {  return  trimLeft ( data ,  DEFAULT_PAD_CHAR ) ;  }
@ Override  public   boolean   isIndoorLevelPickerEnabled ()   throws  RemoteException   {  return  indoorLevelPickerEnabled ;  }
public   PnoSettings []   newArray ( int   size )   {  return  new   PnoSettings [ size ] ;  }
@ Override  public   String   getEurekaServerURLContext ()   {  return  eurekaServerURLContext ;  }
private   static   boolean   isSolarisJNAAffinityUsable ()   {  if  ( isJNAAvailable () )   {  return  true ;  }   else  {  LOGGER . warn ( """"Solaris JNA-based affinity not usable due to JNA not being available!"""" ) ;  return  false ;  }  }
@ Nullable  public   StreetViewPanoramaCamera   getStreetViewPanoramaCamera ()   {  return  panoramaCamera ;  }
@ NonNull  @ Override  public   String   getPluginName ()   {  return  """"Menu Home"""" ;  }
@ Override  public   void   componentShown ( java . awt . event . ComponentEvent   evt )   {  formComponentShown ( evt ) ;  }
@ Test  public   void   skipTestWithoutThrowable ()   {  when ( testResult . getTestContext () ) . thenReturn ( testContext ) ;  when ( testResult . getName () ) . thenReturn ( DEFAULT_TEST_NAME ) ;  doReturn ( new   Annotation [ 0 ] ) . when ( testngListener ) . getMethodAnnotations ( testResult ) ;  testngListener . onTestSkipped ( testResult ) ;  verify ( allure ) . fire ( isA ( TestCaseCanceledEvent . class ) ) ;  }
private   static   void   unescape ( String   s ,  StringBuilder   sb )   {  final   int   len   =  s . length () ;  final   StringBuilder   localSb   =  new   StringBuilder () ;  int   index   =  0 ;  while  ( index   <   len )   {  final   int   skipChars   =  translate ( s ,  index ,  localSb ) ;  if  ( skipChars   >   0 )   {  sb . append ( localSb ) ;  localSb . setLength ( 0 ) ;  index   +=   skipChars ;  }   else  {  sb . append ( s . charAt ( index ) ) ;  index   +=   1 ;  }  }  }
private   List < OrderedEventSource >   getSelectedSources ()   {  PreferenceScreen   preferenceScreen   =  getPreferenceScreen () ;  int   prefCount   =  preferenceScreen . getPreferenceCount () ;  List < EventSource >   checkedSources   =  getCheckedSources ( preferenceScreen ,  prefCount ) ;  List < EventSource >   clickedSelectedSources   =  new   ArrayList <> () ;  for  ( EventSource   clicked   :  clickedSources )   {  if  ( checkedSources . contains ( clicked ) )   {  checkedSources . remove ( clicked ) ;  clickedSelectedSources . add ( clicked ) ;  }  }  
public   PhoneNumbers   type ( String   type )   {  this . type   =   type ;  return  this ;  }
private   static   Process   createToken ()   throws  Exception   {  final   ProcessBuilder   pb   =  new   ProcessBuilder ( """"/bin/bash"""" ,  """"-c"""" ,  """"ztoken"""" ) ;  final   String   path   = Optional . ofNullable ( pb . environment () . get ( """"PATH"""" ) )  . map ( p  ->   p . concat ( """":/usr/local/bin"""" ) )  . orElse ( """""""" ) ;  pb . environment () . put ( """"PATH"""" ,  path ) ;  pb . environment () . put ( """"LANG"""" ,  """"en_US.UTF-8"""" ) ;  return  pb . start () ;  }
@ Override  public   double   getGroupInfoDouble ( String   world ,  String   group ,  String   node ,  double   defaultValue )   {  String   s   =  getGroupInfoString ( world ,  group ,  node ,  null ) ;  if  ( s   ==   null )   {  return  defaultValue ;  }  try  {  return  Double . valueOf ( s ) ;  }   catch  ( NumberFormatException   e )   {  return  defaultValue ;  }  }
public   static   void   setTextColorFromAttr ( Context   context ,  RemoteViews   rv ,  int   viewId ,  int   colorAttrId )   {  rv . setTextColor ( viewId ,  getColorValue ( context ,  colorAttrId ) ) ;  }
@ Override  public   int   compare ( FieldName   a ,  FieldName   b )   {  return  a . getValue () . compareTo ( b . getValue () ) ;  }
 <argument pos:start=""""""""407:67"""""""" pos:end=""""""""407:76""""""""><expr pos:start=""""""""407:67"""""""" pos:end=""""""""407:76""""""""><name pos:start=""""""""407:67"""""""" pos:end=""""""""407:76"""""""">transVects</name></expr></argument>
private   boolean   validColumn ( ColumnConfig   columnConfig )   {  if ( isAfterVarSelect )   {  return  columnConfig   !=   null   &&   ! columnConfig . isMeta ()   &&   ! columnConfig . isTarget ()  &&   columnConfig . isFinalSelect () ;  }   else  {  return  ! columnConfig . isMeta ()   &&   ! columnConfig . isTarget ()  &&   CommonUtils . isGoodCandidate ( columnConfig ,  this . hasCandidates ) ;  }  }
public   void   setOp ( RoleItemAddGroupobj . OpEnum   op )   {  this . op   =   op ;  }
public   void   registerScanListener ( @ NonNull   ScanListener   listener )   {  throw  new   UnsupportedOperationException () ;  }
public   File   getFrqGeneratorFile ()   {  String   os   =  System . getProperty ( """"os.name"""" ) . toLowerCase () ;  if  ( os . contains ( """"win"""" ) )   {  return  new   File ( executablesPath ,  """"frq0003gen.exe"""" ) ;  }  return  new   File ( executablesPath ,  """"frq0003gen"""" ) ;  }
public   void   setAnonymousNodeProperty ( String   anonymousNodeProperty )   {  this . anonymousNodeProperty   =   Optional . of ( anonymousNodeProperty ) ;  }
@ Test  public   void   requireNumberWithMapping ()   {  assertEquals ( Integer . valueOf ( 3 ) ,  JsonValue . of ( 3.14 ) . requireNumber ( d  ->   Integer . valueOf ( d . intValue () ) ) ) ;  }
