public   void   setProxy ( android . app . Service   service ,  Context   context )   {  this . containerService   =   service ;  this . callbacks   =   ( ProxyCallbacks )   service ;  attachBaseContext ( context ) ;  }
private   static   InetSocketAddress   checkAddressOfExistingChannel ( ServerSocketChannel   existingChannel )   {  assert  existingChannel . isOpen () ;  SocketAddress   addr ;  try  {  addr   =   existingChannel . getLocalAddress () ;  }   catch  ( IOException   e )   {  throw  new   IllegalArgumentException ( ""Could not get address of channel passed to WebSocketServer, make sure it is bound"" ,  e ) ;  }  if  ( addr   ==   null )   {  throw  new   IllegalArgumentException ( ""Could not get address of channel passed to WebSocketServer, make sure it is bound"" ) ;  }  return  ( InetSocketAddress ) addr ;  }
public   UIntIndexer   putRaw ( long   i ,  long   n )   {  RAW . putInt ( base   +   checkIndex ( i ,  size )   *   VALUE_BYTES ,  ( int ) n ) ;  return  this ;  }
@ Override  protected   int   computeVerticalScrollOffset ()   {  return  mCurrentScrollOffset ;  }
public   static   void   assertNull ( String   message ,  Object   object )   {  assertTrue ( message ,  object   ==   null ) ;  }
static   int   bytesToRead ( PiGpioPacket   packet ,  InputStream   stream )   throws  IOException   {  switch  ( packet . cmd )   {  case  I2CRI :  case  I2CRD :  return  packet . p3 ;  default:  return  stream . available () ;  }  }
@ Test  public   void   testSearchConcepts ()   {  Query   query   =  new   Vocabulary . Query . Builder ( ""hippocampus"" ) . build () ;  assertThat ( vocabulary . searchConcepts ( query ) , containsInAnyOrder ( hippocampus ,  structureOfHippocampus ,  hippocampusStructure , hippocampalFormation ) ) ;  }
@ Override  public   String   getGroupSuffix ( String   world ,  String   group )   {  throw  new   UnsupportedOperationException ( ""iChat does not support group info nodes!"" ) ;  }
private   boolean   performLongClick ()   {  if  ( ! this . isEnabled ()   ||   ! this . isSelectable () )   {  return  false ;  }  if  ( this . onPreferenceLongClickListener   !=   null )   {  return  this . onPreferenceLongClickListener . onPreferenceLongClick ( this ) ;  }  return  false ;  }
public   Authenticator   description ( String   description )   {  this . description   =   description ;  return  this ;  }
private   void   notifyDownloadStart ()   {  Intent   intent   =  new   Intent ( Constants . downloadStartedIntent ) ;  LocalBroadcastManager . getInstance ( this ) . sendBroadcast ( intent ) ;  }
@ Override  public   boolean   equals ( Object   o )   {  if  ( this   ==   o )   {  return  true ;  }  if  ( o   instanceof   StringSchema )   {  StringSchema   that   =  ( StringSchema )   o ;  return  that . canEqual ( this )   &&  requiresString   ==   that . requiresString   &&  Objects . equals ( minLength ,  that . minLength )   &&  Objects . equals ( maxLength ,  that . maxLength )   &&  Objects . equals ( pattern ,  that . pattern )   &&  sameFormatAs ( that )   &&  super . equals ( that ) ;  }   else  {  return  false ;  }  }
@ JsonIgnore  public   List < String >   getNegTags ()   {  return  dataSet . getNegTags () ;  }
@ Override  public   Object   call ()   throws  Exception   {  zkConnection . exists ( ""/a"" ,  false ) ;  return  null ;  }
@ Override  public   String   toString ()   {  return  ""QueryRequest{""   +  ""versionCode=""   +   versionCode   +  "", searchString='""   +   searchString   +   '\''   +  "", packageName='""   +   packageName   +   '\''   +  "", corpora=""   +   Arrays . toString ( corpora )   +  "", d=""   +   d   +  "", e=""   +   e   +  "", spec=""   +   spec   +  '}' ;  }
@ Override  public   Transformer   create ()   {  try  {  return  this . factory . newTransformer () ;  }   catch  ( final   TransformerConfigurationException   ex )   {  throw  new   IllegalStateException ( String . format ( ""Failed to create new Transformer at %s"" , this . factory . getClass () . getCanonicalName () ) , ex ) ;  }  }
@ Override  public   String   getDefaultCatalogName ()   {  return  DEFAULT_SCHEMA ;  }
public   boolean   isIgnored ( Material   mat )  {  if ( type   ==   ListType . IGNORELIST )  {  if ( list . contains ( mat ) )  {  return  true ;  }  }  return  false ;  }
@ Override  public   String   decrypt ( String   cipheredText ,  String   passphrase )   {  try  {  String   jsonStr   =  Crypto . decode ( cipheredText ) ;  JsonNode   json   =  MAPPER . readTree ( jsonStr ) ;  return  newEncryptor ( passphrase ) . decrypt ( json . get ( CIPHERED_TEXT_KEY ) . asText () ) ;  }   catch  ( Exception   e )   {  throw  new   RuntimeException ( e ) ;  }  }
public   static   String   hashSha512 ( byte []   input )   {  try  {  MessageDigest   md   =  MessageDigest . getInstance ( ""SHA-512"" ) ;  return  bytesToHex ( md . digest ( input ) ) ;  }   catch  ( NoSuchAlgorithmException   e )   {  throw  new   RuntimeException ( e ) ;  }  }
@ NonNull  public   Builder   zoom ( float   zoom )   {  this . zoom   =   zoom ;  return  this ;  }
@ Override  public   Bundle   updateCredentials ( AccountAuthenticatorResponse   response ,  Account   account ,  String   authTokenType ,  Bundle   options )   throws  NetworkErrorException   {  Log . d ( TAG ,  ""updateCredentials: ""   +   account   +   "", ""   +   authTokenType   +   "", ""   +   options ) ;  return  null ;  }
@ Test ( alwaysRun   =   true ,  description   =   ""Testing delete Service Provider Template"" , dependsOnMethods   =   { ""testGetAllApplicationTemplates"" ,  ""testUpdateApplicationTemplate"" } )  public   void   testDeleteApplicationTemplate ()   {  try  {  applicationManagementServiceClient . deleteApplicationTemplate ( templateName1 ) ;  assertFalse ( applicationManagementServiceClient . isExistingApplicationTemplate ( templateName1 ) , ""Failed to delete a Service Provider template"" ) ;  }   catch  ( Exception   e )   {  fail ( ""Error while trying to delete Service Provider Template"" ,  e ) ;  }  }
@ Override  public   PiGpioMode   gpioGetMode ( int   pin )   {  logger . trace ( ""[GPIO::MODE-GET] -> PIN: {};"" ,  pin ) ;  validateReady () ;  validatePin ( pin ) ;  int   result   =  PIGPIO . gpioGetMode ( pin ) ;  validateResult ( result ) ;   
@ BeforeClass ( alwaysRun   =   true )  public   void   testInit ()   throws  Exception   {  super . init ( TestUserMode . SUPER_TENANT_USER ) ;  setSystemproperties () ;  client   =   HttpClients . createDefault () ;  }
@ Test  void   getHeaderValue ()   {  Assertions . assertThat ( headerMapping ) . hasFieldOrPropertyWithValue ( ""headerValue"" ,  ""String"" ) ;  }
@ Override  public   BinderWrapper   createFromParcel ( Parcel   source )   {  return  new   BinderWrapper ( source . readStrongBinder () ) ;  }
public   static   void   copyDir ( String   oldPath ,  String   newPath )   {  File   oldFile   =  new   File ( oldPath ) ;  File []   files   =  oldFile . listFiles () ;  File   newFile   =  new   File ( newPath ) ;  if  ( ! newFile . exists () )   {  newFile . mkdirs () ;  }  for  ( File   file   :  files )   {  if  ( file . isFile () )   {  copyFile ( file . getPath () ,  newPath   +   ""/""   +   file . getName () ) ;  }   else if  ( file . isDirectory () )   {  copyDir ( file . getPath () ,  newPath   +   ""/""   +   file . getName () ) ;  }  }  }
public   void   testRenameLocalNestedDefinitionDeclaration ()   {  testRename ( ""NewCategory"" , ""rename_definition_ref_nested_declaration.yaml"" , ""rename_definition_ref_nested_declaration_after.yaml"" ) ;  }
@ Override  public   ApplicationInfo   getApplicationInfo ()   {  return  gmsContext . getApplicationInfo () ;  }
public   void   setPdfOwnerPwd ( final   char []   pdfOwnerPwd )   {  this . pdfOwnerPwd   =   pdfOwnerPwd ;  }
public   String   getMimeTypeFromHuman ( String   mediaType )   throws  Exception   {  try  {  return  resourceAdminServiceStub . getMimeTypeFromHuman ( mediaType ) ;  }   catch  ( Exception   e )   {  String   msg   =  ""get human readable media type error "" ;  throw  new   Exception ( msg ,  e ) ;  }  }
default   boolean   isDefinition ( final   PsiElement   psiElement )   {  return  false ;  }
private   DrawerLayout   getDrawer ()   {  return  findViewById ( R . id . drawer_content ) ;  }
public   static   String   loadLibrary ( URL []   urls ,  String   libnameversion ,  String   ...   preloaded )   {  return  loadLibrary ( null ,  urls ,  libnameversion ,  preloaded ) ;  }
@ Override  public   Map < String ,  ?   extends  IO >   all ()   {  return  registry . all () ;  }
protected   A   param ( String   key ,  int   val )   {  return  this . param ( key ,  Integer . toString ( val ) ) ;  }
@ Override  public   void   writeToNetwork ( FriendlyByteBuf   buffer )  {  buffer . writeEnum ( this . direction ) ;  buffer . writeBlockPos ( this . pos ) ;  }
@ Override  public   Void   visitUses ( UsesTree   node ,  Void   p )   {  String   name   =  node . getTagName () ;  String   content   =  CommentHelper . getText ( node . getDescription () ) ;  tags . computeIfAbsent ( name ,  n  ->   new   ArrayList <> () ) . add ( content ) ;  return  null ;  }
public   ApplicationSharePOSTRequest   addSharedOrganizationsItem ( String   sharedOrganizationsItem )   {  if  ( this . sharedOrganizations   ==   null )   {  this . sharedOrganizations   =   new   ArrayList <> () ;  }  this . sharedOrganizations . add ( sharedOrganizationsItem ) ;  return  this ;  }
@ Override  public   void   localize ( ResourceBundle   bundle )   {  chooseTrackLabel . setText ( bundle . getString ( ""dialog.chooseTrack"" ) ) ;  allTracksCheckBox . setText ( bundle . getString ( ""dialog.openAllTracks"" ) ) ;  openButton . setText ( bundle . getString ( ""general.open"" ) ) ;  cancelButton . setText ( bundle . getString ( ""general.cancel"" ) ) ;  }
@ Override   public   UByteIndexer   put ( long []   indices ,  int   b )   {  array [ ( int ) index ( indices ) ]   =   ( byte ) b ;  return  this ;  }
@ Override  public   void   setGroupSuffix ( String   worldName ,  String   group ,  String   suffix )   {  setGroupInfoString ( worldName ,  group ,  ""suffix"" ,  suffix ) ;  }
public   void   enumerateProviders ( Context   context ,  String   title )   {  logger . info ( ""====================================================="" ) ;  logger . info ( title ) ;  logger . info ( ""====================================================="" ) ;  for  ( Provider   provider   :  context . providers () . all () . values () )   {  logger . info ( ""  {} [{}]; {}"" ,  provider . name () ,  provider . id () ,  provider . type () ) ;  }  }
@ Override  public   void   invalidate ()   {  first . invalidate () ;  second . invalidate () ;  mergedCache . invalidateAll () ;  }
public   void   setDefaultRefreshTokenExpiryTime ( String   defaultRefreshTokenExpiryTime )   {  this . defaultRefreshTokenExpiryTime   =   defaultRefreshTokenExpiryTime ;  }
public   static   void   start ( Context   context )   {  context . startActivity ( new   Intent ( context ,  HiddenAppsActivity . class ) ) ;  }
public   ResultSet   getVersionColumns ( String   catalog ,  String   schema ,  String   table )   throws  SQLException   {  return  null ;  }
default   int   i2cWriteDevice ( int   handle ,  CharSequence   data ) {  return  i2cWriteDevice ( handle ,  data ,  data . length () ) ;  }
public   static   boolean   isCompatible ( Changed   changed )   {  return  changed   ==   null   ||   changed . isCompatible () ;  }
public   Random   get ( Aspect   aspect )   {  return  randomGenerators [ aspect . ordinal () ] ;  }
private   void   showSignInActivity ()   {  Intent   intent   =  new   Intent ( this ,  SignInActivity . class ) ;  startActivity ( intent ) ;  mDrawerLayout . closeDrawers () ;  }
@ Test  public   void   testCreation ()   {  assertNotNull ( cm ) ;  assertTrue ( cm   instanceof   ConversationManager ) ;  }
private   boolean   compatibleForRequest ()   {  if  ( context . isRequest () )   {  if  ( oldSchema   ==   null   &&   newSchema   !=   null )   {  
@ Test ( dependsOnMethods   =   ""keywordExists"" )  public   void   failingSubSchemaLeadsToSuccess ()  throws  ProcessingException  {  processor   =   new   DummyProcessor ( WantedState . KO ) ;  validator . validate ( processor ,  report ,  BUNDLE ,  data ) ;  verify ( report ,  never () ) . error ( anyMessage () ) ;  }
public   PiGpioPacket   data ( CharSequence   data ) {  return  this . data ( data . toString () . getBytes ( StandardCharsets . US_ASCII ) ) ;  }
public   APIResourceListResponse   apiResources ( List < APIResourceListItem >   apiResources )   {  this . apiResources   =   apiResources ;  return  this ;  }
@ Override  public   TraversableResolver   getDefaultTraversableResolver ()   {  return  null ;  }
@ Override  public   float   resolveValue ( TermFloatValue   val )  {  if  ( val   instanceof   TermLengthOrPercent )  return  ctx . degAngle ( ( TermAngle )   val ) ;  else  return  0.0f ;   
@ Override  public   void   setPlayerInfoInteger ( String   worldName ,  String   playerName ,  String   node ,  int   value )   {  setPlayerValue ( worldName ,  playerName ,  node ,  value ) ;  }
@ NonNull  @ Override  public   String   getPluginName ()   {  return  ""View Once"" ;  }
@ AfterClass ( alwaysRun   =   true )  public   void   testClear ()   throws  Exception {  super . deleteUser ( config ) ;  super . deleteApplication ( APPLICATION_NAME ) ;  super . testClear () ;  }
@ JavascriptInterface  public   void   setAndroidacyToken ( String   token )   {  AndroidacyRepoData . getInstance () . setToken ( token ) ;  }
@ Override  protected   Object   replaceHookedMethod ( MethodHookParam   param )   throws  Throwable   {  var   texto   =  ( String )   param . args [ 0 ] ;  var   currentMethod   =  ( Method )   param . method ;  var   unityTranslationResultClass   =  currentMethod . getReturnType () ;  var   translation   =  translateGoogle ( texto ,  Locale . getDefault () . getLanguage () ) . get () ;  return  unityTranslationResultClass . getConstructor ( String . class ,  float . class ,  int . class ) . newInstance ( translation ,  1 ,  0 ) ;  }
@ Override  protected   void   processScrollDown ( int   optionInt )   {  emitter . emitInvisibleSequence () ;  }
@ NonNull  public   Builder   setTimeInterval ( long   startTime ,  long   endTime ,  @ NonNull   TimeUnit   timeUnit )   {  if  ( built )   throw  new   IllegalStateException ( ""DataPoint already built"" ) ;  this . dataPoint . setTimeInterval ( startTime ,  endTime ,  timeUnit ) ;  return  this ;  }
@ VisibleForTesting  void   copyHdfsToTd ()   {  _logger . info ( String . format ( ""Executing %s with params: %s"" ,  HdfsToTeradataJobRunnerMain . class . getSimpleName () ,  _params ) ) ;  TeradataExportTool . main ( _params . toTdchParams () ) ;  }
@ Override  public   BinderWrapper   createFromParcel ( Parcel   source )   {  return  new   BinderWrapper ( source . readStrongBinder () ) ;  }
public   static   void   main (  String []   args )   {  junit . textui . TestRunner . run (  suite () ) ;  }
protected   void   measure ( int   count ,  String   unit ,  Runnable   runnable )   {  Benchmark   b   =  new   Benchmark () ;  final   int   reps   =  10 ;  for  ( int   i   =  0 ;   i   <   reps ;   i ++ )   {  eraseDB () ;  b . start () ;  runnable . run () ;  double   t   =  b . stop () ;   
public   double   getHiveQueryMaxRunTimeSeconds ( String   datasource )   {  String   property   =  environment . getProperty ( ""hive.query.max-run-time-seconds""   +   "".""   +   datasource ) ;  if  ( property   ==   null )   {  return  getHiveQueryMaxRunTimeSeconds () ;  }  return  Double . parseDouble ( property ) ;  }
private   static   void   addHighlightersFromEditor ( final   Set < RangeHighlighter >   highlighters ,  final   Editor   editor )   {  ApplicationManager . getApplication () . invokeAndWait ( ()  ->  {  final   RangeHighlighter []   highlightersFromCurrentEditor   =  editor . getMarkupModel () . getAllHighlighters () ;  highlighters . addAll ( Sets . newHashSet ( highlightersFromCurrentEditor ) ) ;  } ,  ModalityState . any () ) ;  }
default   Future < ? >   pulseHighAsync ( int   interval ,  TimeUnit   unit ,  Callable < Void >   callback ) {  return  pulseAsync ( interval ,  unit ,  DigitalState . HIGH ,  callback ) ;  }
public   static   void   saveProfile ( int   index )   {  JsonConfig < ?   extends  WailaConfig >   dest   =  configs () . get ( index ) ;  configHolder () . saveTo ( dest . getFile () ) ;  dest . invalidate () ;  }
protected   InstanceStatus   getHealthStatus ()   {  Status   status   =  getStatus ( statusAggregator ) ;  return  mapToInstanceStatus ( status ) ;  }
private   void   setUpPlayPosition ()   {  long   lastPlayedPosition   =  getLastPlayedPosition ( getVideoFile () ) ;  if  ( lastPlayedPosition   !=   0 )   {  new   ResumeDialogFragment () . show ( getSupportFragmentManager () ,  ""resume_dialog"" ) ;  }   else  {  getMediaPlayer () . setTime ( 0 ) ;  getMediaPlayer () . play () ;  }  }
@ Override  public   int   compare ( DrawableMarkup   lhs ,  DrawableMarkup   rhs )   {  return  Float . compare ( lhs . getZIndex () ,  rhs . getZIndex () ) ;  }
@ Override  public   void   removeCastStateListener ( ICastStateListener   listener )   {  Log . d ( TAG ,  ""unimplemented Method: removeCastStateListener"" ) ;  this . castStateListeners . remove ( listener ) ;  }
static   int   applyAlpha ( int   color ,  float   alpha )   {  if  ( alpha   ==   0 )   {  return  0 ;  }  int   prevAlphaChannel   =  ARGB . alpha ( color ) ;  if  ( prevAlphaChannel   >   0 )   {  alpha   *=   prevAlphaChannel   /   256f ;  }  int   alphaChannel   =  Mth . clamp ( ( int )   ( 0xFF   *   alpha ) ,  4 ,  255 ) ;  return  ARGB . color ( alphaChannel ,  color ) ;  }
public   static   int   getModifiedRate ( ItemStack   weapon ,  int   rate )  {  for ( int   i   =  0 ;   i   <   IAttachment . Type . values () . length ;   i ++ )  {  IGunModifier []   modifiers   =  getModifiers ( weapon ,  IAttachment . Type . values () [ i ] ) ;  for ( IGunModifier   modifier   :  modifiers )  {  rate   =   modifier . modifyFireRate ( rate ) ;  }  }  return  Mth . clamp ( rate ,  0 ,  Integer . MAX_VALUE ) ;  }
@ Override  public   void   onException ( Exception   exception )   {  Log . w ( TAG ,  ""onException"" ,  exception ) ;  runOnUiThread ( ()  ->  {  showError ( R . string . auth_general_error_desc ) ;  setNextButtonText ( android . R . string . ok ) ;  } ) ;  state   =   - 2 ;  }
private   static   JobDetail   build ( ScheduledJob   job )   {  JobKey   jobKey   =  job . getJobKey () ;  return  JobBuilder . newJob ( job . getClazz () )  . withIdentity ( jobKey )  . requestRecovery ( job . isRequestsRecovery () )  . storeDurably ( job . isStoreDurably () )  . build () ;  }
@ ApiModelProperty ( example   =   ""BASIC"" ,  required   =   true ,  value   =   """" )  @ JsonProperty ( ""type"" )  @ Valid  @ NotNull ( message   =   ""Property type cannot be null."" )  public   TypeEnum   getType ()   {  return  type ;  }
@ Override   public   IntIndexer   reindex ( Index   index )   {  return  new   IntArrayIndexer ( array ,  index ) ;  }
@ Override  public   boolean   playerHas ( String   worldName ,  String   playerName ,  String   permission )   {  PermissionUser   user   =  getUser ( playerName ) ;  if  ( user   !=   null )   {  return  user . has ( permission ,  worldName ) ;  }   else  {  return  false ;  }  }
private   byte []   callCipher ( byte []   data )   throws  CryptoException   {  final   int   size   =  cipher . getOutputSize ( data . length ) ;  byte []   result   =  new   byte [ size ] ;  int   olen   =  cipher . processBytes ( data ,  0 ,  data . length ,  result ,  0 ) ;  olen   +=   cipher . doFinal ( result ,  olen ) ;  if  ( olen   <   size )   {  byte []   tmp   =  new   byte [ olen ] ;  System . arraycopy ( result ,  0 ,  tmp ,  0 ,  olen ) ;  result   =   tmp ;  }  return  result ;  }
@ Override  protected   void   onDestroy ()   {  super . onDestroy () ;  destroyed   =   true ;  }
@ Override  public   double   scalePos ( double   scaleMe )   {  return  horizontalScale . get ()   *   ( Quantizer . COL_WIDTH   *   4   +   scaleMe ) ;  }
private   String   buildQueryUrlWithOffsetAndLimit ( int   limit )   {  return  ORGANIZATION_MANAGEMENT_API_BASE_PATH   +   ORGANIZATION_DISCOVERY_API_PATH   +   QUESTION_MARK   +  OFFSET_QUERY_PARAM   +   EQUAL   +   AMPERSAND   +   LIMIT_QUERY_PARAM   +   EQUAL   +   limit ;  }
public   UntypedActor   create ()   throws  IOException   {  return  new   TrainDataPrepWorker ( modelConfig ,  columnConfigList ,  parentActorRef ,  trainModelRef ,  trainers ) ;  }
public   void   setRightExamples ( Object   rightExamples )   {  this . rightExamples   =   rightExamples ;  }
public   void   audioBuffer ( ByteBuffer   audioBuffer )   {  this . audioBuffer   =   audioBuffer ;  }
@ SuppressWarnings (  ""unchecked"" )  public   void   testInt16Single ()   throws  Exception   {  ByteBuffer   buffer   =  ByteBuffer . allocate (  2 ) ;  buffer . putShort ( (   short )   1 ) ;  buffer . flip () ;  TestHeader   header   =  new   TestHeader () ;  Entry <  short [] >   entry   =  (   Entry <  short [] > )   header . createEntry (  Tag . INT16_ENTRY ) ;  entry . setCount (  1 ) ;  entry . read (  buffer ) ;  assertEquals (  1 ,  entry . getValues () [  0 ] ) ;  ByteBuffer   data   =  ByteBuffer . allocate (  2 ) ;  entry . write (  data ) ;  data . flip () ;  buffer . flip () ;  assertTrue (  buffer . equals (  data ) ) ;  }
public   static   < T ,  E >   E   reduce ( final   T []   array ,  final   BiFunction < E ,  T ,  E >   func ,  final   E   zeroElem )   {  E   accum   =  zeroElem ;  for  ( T   element   :  array )   {  accum   =   func . apply ( accum ,  element ) ;  }  return  accum ;  }
@ Override  public   void   onWebsocketCloseInitiated ( WebSocket   conn ,  int   code ,  String   reason )   {  onCloseInitiated ( conn ,  code ,  reason ) ;  }
public   boolean   updateAction ( String   actionType ,  String   actionId ,  ActionUpdateModel   actionModel )  throws  IOException   {  String   jsonRequestBody   =  toJSONString ( actionModel ) ;  String   endPointUrl ;  endPointUrl   =   getActionEndpointOfType ( actionType )   +   ""/""   +   actionId ;  try  ( CloseableHttpResponse   response   =  getResponseOfHttpPatch ( endPointUrl ,  jsonRequestBody ,  getHeaders () ) )   {  return  response . getStatusLine () . getStatusCode ()   ==   HttpStatus . SC_OK ;  }  }
@ ApiModelProperty ( example   =   ""false"" ,  value   =   ""Decides whether API Based Authentication is enabled for this application."" )  @ JsonProperty ( ""enableAPIBasedAuthentication"" )  @ Valid  public   Boolean   getEnableAPIBasedAuthentication ()   {  return  enableAPIBasedAuthentication ;  }
public   static   void   setMailServer ( GreenMail   greenMail )   {  Utils . greenMail   =   greenMail ;  }
public   int   count ( final   Predicate < T >   pred )   {  return  count ( iterable ,  pred ) ;  }
void   push ( final   FullData   data )  throws  ProcessingException  {  final   JsonPointer   ptr   =  data . getInstance () . getPointer () ;  final   SchemaURI   schemaURI   =  new   SchemaURI ( data . getSchema () ) ;  if  ( ptr . equals ( pointer ) )   {  if  ( schemaURIs . contains ( schemaURI ) )  throw  new   ProcessingException ( validationLoopMessage ( data ) ) ;  schemaURIs . addLast ( schemaURI ) ;  return;  }  validationQueue . addLast ( new   Element ( pointer ,  schemaURIs ) ) ;  pointer   =   ptr ;  schemaURIs   =   Queues . newArrayDeque () ;  schemaURIs . addLast ( schemaURI ) ;  }
